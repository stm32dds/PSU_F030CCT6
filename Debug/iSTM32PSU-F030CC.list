
iSTM32PSU-F030CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebac  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000cb2c  0800ec68  0800ec68  0000fc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b794  0801b794  0001d058  2**0
                  CONTENTS
  4 .ARM          00000000  0801b794  0801b794  0001d058  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801b794  0801b794  0001d058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b794  0801b794  0001c794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b798  0801b798  0001c798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  0801b79c  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000058  0801b7f4  0001d058  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  0801b7f4  0001d4f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001d058  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145da  00000000  00000000  0001d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003245  00000000  00000000  0003165a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  000348a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fbd  00000000  00000000  00035cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a7f  00000000  00000000  00036c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad30  00000000  00000000  0004a704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000751de  00000000  00000000  00065434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000da612  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d50  00000000  00000000  000da698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000df3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000058 	.word	0x20000058
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ec50 	.word	0x0800ec50

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000005c 	.word	0x2000005c
 8000100:	0800ec50 	.word	0x0800ec50

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 fe79 	bl	80020f8 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 fdb9 	bl	8001f88 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 fe6b 	bl	80020f8 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fe61 	bl	80020f8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fde3 	bl	8002010 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fdd9 	bl	8002010 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_cfrcmple>:
 800046c:	4684      	mov	ip, r0
 800046e:	0008      	movs	r0, r1
 8000470:	4661      	mov	r1, ip
 8000472:	e7ff      	b.n	8000474 <__aeabi_cfcmpeq>

08000474 <__aeabi_cfcmpeq>:
 8000474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000476:	f000 fb6d 	bl	8000b54 <__lesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	d401      	bmi.n	8000482 <__aeabi_cfcmpeq+0xe>
 800047e:	2100      	movs	r1, #0
 8000480:	42c8      	cmn	r0, r1
 8000482:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000484 <__aeabi_fcmpeq>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 faed 	bl	8000a64 <__eqsf2>
 800048a:	4240      	negs	r0, r0
 800048c:	3001      	adds	r0, #1
 800048e:	bd10      	pop	{r4, pc}

08000490 <__aeabi_fcmplt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fb5f 	bl	8000b54 <__lesf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	db01      	blt.n	800049e <__aeabi_fcmplt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_fcmple>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fb55 	bl	8000b54 <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	dd01      	ble.n	80004b2 <__aeabi_fcmple+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_fcmpgt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fafb 	bl	8000ab4 <__gesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dc01      	bgt.n	80004c6 <__aeabi_fcmpgt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)

080004cc <__aeabi_fcmpge>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 faf1 	bl	8000ab4 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	da01      	bge.n	80004da <__aeabi_fcmpge+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_f2uiz>:
 80004e0:	219e      	movs	r1, #158	@ 0x9e
 80004e2:	b510      	push	{r4, lr}
 80004e4:	05c9      	lsls	r1, r1, #23
 80004e6:	1c04      	adds	r4, r0, #0
 80004e8:	f7ff fff0 	bl	80004cc <__aeabi_fcmpge>
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d103      	bne.n	80004f8 <__aeabi_f2uiz+0x18>
 80004f0:	1c20      	adds	r0, r4, #0
 80004f2:	f000 fe5f 	bl	80011b4 <__aeabi_f2iz>
 80004f6:	bd10      	pop	{r4, pc}
 80004f8:	219e      	movs	r1, #158	@ 0x9e
 80004fa:	1c20      	adds	r0, r4, #0
 80004fc:	05c9      	lsls	r1, r1, #23
 80004fe:	f000 fcb5 	bl	8000e6c <__aeabi_fsub>
 8000502:	f000 fe57 	bl	80011b4 <__aeabi_f2iz>
 8000506:	2380      	movs	r3, #128	@ 0x80
 8000508:	061b      	lsls	r3, r3, #24
 800050a:	469c      	mov	ip, r3
 800050c:	4460      	add	r0, ip
 800050e:	e7f2      	b.n	80004f6 <__aeabi_f2uiz+0x16>

08000510 <__aeabi_fadd>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	46ce      	mov	lr, r9
 8000514:	4647      	mov	r7, r8
 8000516:	0243      	lsls	r3, r0, #9
 8000518:	0a5a      	lsrs	r2, r3, #9
 800051a:	024e      	lsls	r6, r1, #9
 800051c:	0045      	lsls	r5, r0, #1
 800051e:	0fc4      	lsrs	r4, r0, #31
 8000520:	0048      	lsls	r0, r1, #1
 8000522:	4691      	mov	r9, r2
 8000524:	0e2d      	lsrs	r5, r5, #24
 8000526:	0a72      	lsrs	r2, r6, #9
 8000528:	0e00      	lsrs	r0, r0, #24
 800052a:	4694      	mov	ip, r2
 800052c:	b580      	push	{r7, lr}
 800052e:	099b      	lsrs	r3, r3, #6
 8000530:	0fc9      	lsrs	r1, r1, #31
 8000532:	09b6      	lsrs	r6, r6, #6
 8000534:	1a2a      	subs	r2, r5, r0
 8000536:	428c      	cmp	r4, r1
 8000538:	d021      	beq.n	800057e <__aeabi_fadd+0x6e>
 800053a:	2a00      	cmp	r2, #0
 800053c:	dd0d      	ble.n	800055a <__aeabi_fadd+0x4a>
 800053e:	2800      	cmp	r0, #0
 8000540:	d12d      	bne.n	800059e <__aeabi_fadd+0x8e>
 8000542:	2e00      	cmp	r6, #0
 8000544:	d100      	bne.n	8000548 <__aeabi_fadd+0x38>
 8000546:	e08d      	b.n	8000664 <__aeabi_fadd+0x154>
 8000548:	1e51      	subs	r1, r2, #1
 800054a:	2a01      	cmp	r2, #1
 800054c:	d100      	bne.n	8000550 <__aeabi_fadd+0x40>
 800054e:	e11d      	b.n	800078c <__aeabi_fadd+0x27c>
 8000550:	2aff      	cmp	r2, #255	@ 0xff
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0x46>
 8000554:	e0ab      	b.n	80006ae <__aeabi_fadd+0x19e>
 8000556:	000a      	movs	r2, r1
 8000558:	e027      	b.n	80005aa <__aeabi_fadd+0x9a>
 800055a:	2a00      	cmp	r2, #0
 800055c:	d04d      	beq.n	80005fa <__aeabi_fadd+0xea>
 800055e:	1b42      	subs	r2, r0, r5
 8000560:	2d00      	cmp	r5, #0
 8000562:	d000      	beq.n	8000566 <__aeabi_fadd+0x56>
 8000564:	e0cc      	b.n	8000700 <__aeabi_fadd+0x1f0>
 8000566:	2b00      	cmp	r3, #0
 8000568:	d100      	bne.n	800056c <__aeabi_fadd+0x5c>
 800056a:	e079      	b.n	8000660 <__aeabi_fadd+0x150>
 800056c:	1e54      	subs	r4, r2, #1
 800056e:	2a01      	cmp	r2, #1
 8000570:	d100      	bne.n	8000574 <__aeabi_fadd+0x64>
 8000572:	e128      	b.n	80007c6 <__aeabi_fadd+0x2b6>
 8000574:	2aff      	cmp	r2, #255	@ 0xff
 8000576:	d100      	bne.n	800057a <__aeabi_fadd+0x6a>
 8000578:	e097      	b.n	80006aa <__aeabi_fadd+0x19a>
 800057a:	0022      	movs	r2, r4
 800057c:	e0c5      	b.n	800070a <__aeabi_fadd+0x1fa>
 800057e:	2a00      	cmp	r2, #0
 8000580:	dc00      	bgt.n	8000584 <__aeabi_fadd+0x74>
 8000582:	e096      	b.n	80006b2 <__aeabi_fadd+0x1a2>
 8000584:	2800      	cmp	r0, #0
 8000586:	d04f      	beq.n	8000628 <__aeabi_fadd+0x118>
 8000588:	2dff      	cmp	r5, #255	@ 0xff
 800058a:	d100      	bne.n	800058e <__aeabi_fadd+0x7e>
 800058c:	e08f      	b.n	80006ae <__aeabi_fadd+0x19e>
 800058e:	2180      	movs	r1, #128	@ 0x80
 8000590:	04c9      	lsls	r1, r1, #19
 8000592:	430e      	orrs	r6, r1
 8000594:	2a1b      	cmp	r2, #27
 8000596:	dd51      	ble.n	800063c <__aeabi_fadd+0x12c>
 8000598:	002a      	movs	r2, r5
 800059a:	3301      	adds	r3, #1
 800059c:	e018      	b.n	80005d0 <__aeabi_fadd+0xc0>
 800059e:	2dff      	cmp	r5, #255	@ 0xff
 80005a0:	d100      	bne.n	80005a4 <__aeabi_fadd+0x94>
 80005a2:	e084      	b.n	80006ae <__aeabi_fadd+0x19e>
 80005a4:	2180      	movs	r1, #128	@ 0x80
 80005a6:	04c9      	lsls	r1, r1, #19
 80005a8:	430e      	orrs	r6, r1
 80005aa:	2101      	movs	r1, #1
 80005ac:	2a1b      	cmp	r2, #27
 80005ae:	dc08      	bgt.n	80005c2 <__aeabi_fadd+0xb2>
 80005b0:	0031      	movs	r1, r6
 80005b2:	2020      	movs	r0, #32
 80005b4:	40d1      	lsrs	r1, r2
 80005b6:	1a82      	subs	r2, r0, r2
 80005b8:	4096      	lsls	r6, r2
 80005ba:	0032      	movs	r2, r6
 80005bc:	1e50      	subs	r0, r2, #1
 80005be:	4182      	sbcs	r2, r0
 80005c0:	4311      	orrs	r1, r2
 80005c2:	1a5b      	subs	r3, r3, r1
 80005c4:	015a      	lsls	r2, r3, #5
 80005c6:	d459      	bmi.n	800067c <__aeabi_fadd+0x16c>
 80005c8:	2107      	movs	r1, #7
 80005ca:	002a      	movs	r2, r5
 80005cc:	4019      	ands	r1, r3
 80005ce:	d049      	beq.n	8000664 <__aeabi_fadd+0x154>
 80005d0:	210f      	movs	r1, #15
 80005d2:	4019      	ands	r1, r3
 80005d4:	2904      	cmp	r1, #4
 80005d6:	d000      	beq.n	80005da <__aeabi_fadd+0xca>
 80005d8:	3304      	adds	r3, #4
 80005da:	0159      	lsls	r1, r3, #5
 80005dc:	d542      	bpl.n	8000664 <__aeabi_fadd+0x154>
 80005de:	1c50      	adds	r0, r2, #1
 80005e0:	2afe      	cmp	r2, #254	@ 0xfe
 80005e2:	d03a      	beq.n	800065a <__aeabi_fadd+0x14a>
 80005e4:	019b      	lsls	r3, r3, #6
 80005e6:	b2c0      	uxtb	r0, r0
 80005e8:	0a5b      	lsrs	r3, r3, #9
 80005ea:	05c0      	lsls	r0, r0, #23
 80005ec:	4318      	orrs	r0, r3
 80005ee:	07e4      	lsls	r4, r4, #31
 80005f0:	4320      	orrs	r0, r4
 80005f2:	bcc0      	pop	{r6, r7}
 80005f4:	46b9      	mov	r9, r7
 80005f6:	46b0      	mov	r8, r6
 80005f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005fa:	20fe      	movs	r0, #254	@ 0xfe
 80005fc:	4680      	mov	r8, r0
 80005fe:	1c6f      	adds	r7, r5, #1
 8000600:	0038      	movs	r0, r7
 8000602:	4647      	mov	r7, r8
 8000604:	4207      	tst	r7, r0
 8000606:	d000      	beq.n	800060a <__aeabi_fadd+0xfa>
 8000608:	e08e      	b.n	8000728 <__aeabi_fadd+0x218>
 800060a:	2d00      	cmp	r5, #0
 800060c:	d000      	beq.n	8000610 <__aeabi_fadd+0x100>
 800060e:	e0b4      	b.n	800077a <__aeabi_fadd+0x26a>
 8000610:	2b00      	cmp	r3, #0
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x106>
 8000614:	e0db      	b.n	80007ce <__aeabi_fadd+0x2be>
 8000616:	2e00      	cmp	r6, #0
 8000618:	d06c      	beq.n	80006f4 <__aeabi_fadd+0x1e4>
 800061a:	1b98      	subs	r0, r3, r6
 800061c:	0145      	lsls	r5, r0, #5
 800061e:	d400      	bmi.n	8000622 <__aeabi_fadd+0x112>
 8000620:	e0f7      	b.n	8000812 <__aeabi_fadd+0x302>
 8000622:	000c      	movs	r4, r1
 8000624:	1af3      	subs	r3, r6, r3
 8000626:	e03d      	b.n	80006a4 <__aeabi_fadd+0x194>
 8000628:	2e00      	cmp	r6, #0
 800062a:	d01b      	beq.n	8000664 <__aeabi_fadd+0x154>
 800062c:	1e51      	subs	r1, r2, #1
 800062e:	2a01      	cmp	r2, #1
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x124>
 8000632:	e082      	b.n	800073a <__aeabi_fadd+0x22a>
 8000634:	2aff      	cmp	r2, #255	@ 0xff
 8000636:	d03a      	beq.n	80006ae <__aeabi_fadd+0x19e>
 8000638:	000a      	movs	r2, r1
 800063a:	e7ab      	b.n	8000594 <__aeabi_fadd+0x84>
 800063c:	0031      	movs	r1, r6
 800063e:	2020      	movs	r0, #32
 8000640:	40d1      	lsrs	r1, r2
 8000642:	1a82      	subs	r2, r0, r2
 8000644:	4096      	lsls	r6, r2
 8000646:	0032      	movs	r2, r6
 8000648:	1e50      	subs	r0, r2, #1
 800064a:	4182      	sbcs	r2, r0
 800064c:	430a      	orrs	r2, r1
 800064e:	189b      	adds	r3, r3, r2
 8000650:	015a      	lsls	r2, r3, #5
 8000652:	d5b9      	bpl.n	80005c8 <__aeabi_fadd+0xb8>
 8000654:	1c6a      	adds	r2, r5, #1
 8000656:	2dfe      	cmp	r5, #254	@ 0xfe
 8000658:	d175      	bne.n	8000746 <__aeabi_fadd+0x236>
 800065a:	20ff      	movs	r0, #255	@ 0xff
 800065c:	2300      	movs	r3, #0
 800065e:	e7c4      	b.n	80005ea <__aeabi_fadd+0xda>
 8000660:	000c      	movs	r4, r1
 8000662:	0033      	movs	r3, r6
 8000664:	08db      	lsrs	r3, r3, #3
 8000666:	2aff      	cmp	r2, #255	@ 0xff
 8000668:	d146      	bne.n	80006f8 <__aeabi_fadd+0x1e8>
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0f5      	beq.n	800065a <__aeabi_fadd+0x14a>
 800066e:	2280      	movs	r2, #128	@ 0x80
 8000670:	03d2      	lsls	r2, r2, #15
 8000672:	4313      	orrs	r3, r2
 8000674:	025b      	lsls	r3, r3, #9
 8000676:	20ff      	movs	r0, #255	@ 0xff
 8000678:	0a5b      	lsrs	r3, r3, #9
 800067a:	e7b6      	b.n	80005ea <__aeabi_fadd+0xda>
 800067c:	019f      	lsls	r7, r3, #6
 800067e:	09bf      	lsrs	r7, r7, #6
 8000680:	0038      	movs	r0, r7
 8000682:	f002 fd09 	bl	8003098 <__clzsi2>
 8000686:	3805      	subs	r0, #5
 8000688:	4087      	lsls	r7, r0
 800068a:	4285      	cmp	r5, r0
 800068c:	dc24      	bgt.n	80006d8 <__aeabi_fadd+0x1c8>
 800068e:	003b      	movs	r3, r7
 8000690:	2120      	movs	r1, #32
 8000692:	1b42      	subs	r2, r0, r5
 8000694:	3201      	adds	r2, #1
 8000696:	40d3      	lsrs	r3, r2
 8000698:	1a8a      	subs	r2, r1, r2
 800069a:	4097      	lsls	r7, r2
 800069c:	1e7a      	subs	r2, r7, #1
 800069e:	4197      	sbcs	r7, r2
 80006a0:	2200      	movs	r2, #0
 80006a2:	433b      	orrs	r3, r7
 80006a4:	0759      	lsls	r1, r3, #29
 80006a6:	d193      	bne.n	80005d0 <__aeabi_fadd+0xc0>
 80006a8:	e797      	b.n	80005da <__aeabi_fadd+0xca>
 80006aa:	000c      	movs	r4, r1
 80006ac:	0033      	movs	r3, r6
 80006ae:	08db      	lsrs	r3, r3, #3
 80006b0:	e7db      	b.n	800066a <__aeabi_fadd+0x15a>
 80006b2:	2a00      	cmp	r2, #0
 80006b4:	d014      	beq.n	80006e0 <__aeabi_fadd+0x1d0>
 80006b6:	1b42      	subs	r2, r0, r5
 80006b8:	2d00      	cmp	r5, #0
 80006ba:	d14b      	bne.n	8000754 <__aeabi_fadd+0x244>
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0d0      	beq.n	8000662 <__aeabi_fadd+0x152>
 80006c0:	1e51      	subs	r1, r2, #1
 80006c2:	2a01      	cmp	r2, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_fadd+0x1b8>
 80006c6:	e09e      	b.n	8000806 <__aeabi_fadd+0x2f6>
 80006c8:	2aff      	cmp	r2, #255	@ 0xff
 80006ca:	d0ef      	beq.n	80006ac <__aeabi_fadd+0x19c>
 80006cc:	000a      	movs	r2, r1
 80006ce:	2a1b      	cmp	r2, #27
 80006d0:	dd5f      	ble.n	8000792 <__aeabi_fadd+0x282>
 80006d2:	0002      	movs	r2, r0
 80006d4:	1c73      	adds	r3, r6, #1
 80006d6:	e77b      	b.n	80005d0 <__aeabi_fadd+0xc0>
 80006d8:	4b50      	ldr	r3, [pc, #320]	@ (800081c <__aeabi_fadd+0x30c>)
 80006da:	1a2a      	subs	r2, r5, r0
 80006dc:	403b      	ands	r3, r7
 80006de:	e7e1      	b.n	80006a4 <__aeabi_fadd+0x194>
 80006e0:	21fe      	movs	r1, #254	@ 0xfe
 80006e2:	1c6a      	adds	r2, r5, #1
 80006e4:	4211      	tst	r1, r2
 80006e6:	d13b      	bne.n	8000760 <__aeabi_fadd+0x250>
 80006e8:	2d00      	cmp	r5, #0
 80006ea:	d15d      	bne.n	80007a8 <__aeabi_fadd+0x298>
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d07f      	beq.n	80007f0 <__aeabi_fadd+0x2e0>
 80006f0:	2e00      	cmp	r6, #0
 80006f2:	d17f      	bne.n	80007f4 <__aeabi_fadd+0x2e4>
 80006f4:	2200      	movs	r2, #0
 80006f6:	08db      	lsrs	r3, r3, #3
 80006f8:	025b      	lsls	r3, r3, #9
 80006fa:	0a5b      	lsrs	r3, r3, #9
 80006fc:	b2d0      	uxtb	r0, r2
 80006fe:	e774      	b.n	80005ea <__aeabi_fadd+0xda>
 8000700:	28ff      	cmp	r0, #255	@ 0xff
 8000702:	d0d2      	beq.n	80006aa <__aeabi_fadd+0x19a>
 8000704:	2480      	movs	r4, #128	@ 0x80
 8000706:	04e4      	lsls	r4, r4, #19
 8000708:	4323      	orrs	r3, r4
 800070a:	2401      	movs	r4, #1
 800070c:	2a1b      	cmp	r2, #27
 800070e:	dc07      	bgt.n	8000720 <__aeabi_fadd+0x210>
 8000710:	001c      	movs	r4, r3
 8000712:	2520      	movs	r5, #32
 8000714:	40d4      	lsrs	r4, r2
 8000716:	1aaa      	subs	r2, r5, r2
 8000718:	4093      	lsls	r3, r2
 800071a:	1e5a      	subs	r2, r3, #1
 800071c:	4193      	sbcs	r3, r2
 800071e:	431c      	orrs	r4, r3
 8000720:	1b33      	subs	r3, r6, r4
 8000722:	0005      	movs	r5, r0
 8000724:	000c      	movs	r4, r1
 8000726:	e74d      	b.n	80005c4 <__aeabi_fadd+0xb4>
 8000728:	1b9f      	subs	r7, r3, r6
 800072a:	017a      	lsls	r2, r7, #5
 800072c:	d422      	bmi.n	8000774 <__aeabi_fadd+0x264>
 800072e:	2f00      	cmp	r7, #0
 8000730:	d1a6      	bne.n	8000680 <__aeabi_fadd+0x170>
 8000732:	2400      	movs	r4, #0
 8000734:	2000      	movs	r0, #0
 8000736:	2300      	movs	r3, #0
 8000738:	e757      	b.n	80005ea <__aeabi_fadd+0xda>
 800073a:	199b      	adds	r3, r3, r6
 800073c:	2501      	movs	r5, #1
 800073e:	3201      	adds	r2, #1
 8000740:	0159      	lsls	r1, r3, #5
 8000742:	d400      	bmi.n	8000746 <__aeabi_fadd+0x236>
 8000744:	e740      	b.n	80005c8 <__aeabi_fadd+0xb8>
 8000746:	2101      	movs	r1, #1
 8000748:	4835      	ldr	r0, [pc, #212]	@ (8000820 <__aeabi_fadd+0x310>)
 800074a:	4019      	ands	r1, r3
 800074c:	085b      	lsrs	r3, r3, #1
 800074e:	4003      	ands	r3, r0
 8000750:	430b      	orrs	r3, r1
 8000752:	e7a7      	b.n	80006a4 <__aeabi_fadd+0x194>
 8000754:	28ff      	cmp	r0, #255	@ 0xff
 8000756:	d0a9      	beq.n	80006ac <__aeabi_fadd+0x19c>
 8000758:	2180      	movs	r1, #128	@ 0x80
 800075a:	04c9      	lsls	r1, r1, #19
 800075c:	430b      	orrs	r3, r1
 800075e:	e7b6      	b.n	80006ce <__aeabi_fadd+0x1be>
 8000760:	2aff      	cmp	r2, #255	@ 0xff
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0x256>
 8000764:	e779      	b.n	800065a <__aeabi_fadd+0x14a>
 8000766:	199b      	adds	r3, r3, r6
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	0759      	lsls	r1, r3, #29
 800076c:	d000      	beq.n	8000770 <__aeabi_fadd+0x260>
 800076e:	e72f      	b.n	80005d0 <__aeabi_fadd+0xc0>
 8000770:	08db      	lsrs	r3, r3, #3
 8000772:	e7c1      	b.n	80006f8 <__aeabi_fadd+0x1e8>
 8000774:	000c      	movs	r4, r1
 8000776:	1af7      	subs	r7, r6, r3
 8000778:	e782      	b.n	8000680 <__aeabi_fadd+0x170>
 800077a:	2b00      	cmp	r3, #0
 800077c:	d12c      	bne.n	80007d8 <__aeabi_fadd+0x2c8>
 800077e:	2e00      	cmp	r6, #0
 8000780:	d193      	bne.n	80006aa <__aeabi_fadd+0x19a>
 8000782:	2380      	movs	r3, #128	@ 0x80
 8000784:	2400      	movs	r4, #0
 8000786:	20ff      	movs	r0, #255	@ 0xff
 8000788:	03db      	lsls	r3, r3, #15
 800078a:	e72e      	b.n	80005ea <__aeabi_fadd+0xda>
 800078c:	2501      	movs	r5, #1
 800078e:	1b9b      	subs	r3, r3, r6
 8000790:	e718      	b.n	80005c4 <__aeabi_fadd+0xb4>
 8000792:	0019      	movs	r1, r3
 8000794:	2520      	movs	r5, #32
 8000796:	40d1      	lsrs	r1, r2
 8000798:	1aaa      	subs	r2, r5, r2
 800079a:	4093      	lsls	r3, r2
 800079c:	1e5a      	subs	r2, r3, #1
 800079e:	4193      	sbcs	r3, r2
 80007a0:	430b      	orrs	r3, r1
 80007a2:	0005      	movs	r5, r0
 80007a4:	199b      	adds	r3, r3, r6
 80007a6:	e753      	b.n	8000650 <__aeabi_fadd+0x140>
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_fadd+0x29e>
 80007ac:	e77e      	b.n	80006ac <__aeabi_fadd+0x19c>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x2a4>
 80007b2:	e77c      	b.n	80006ae <__aeabi_fadd+0x19e>
 80007b4:	2280      	movs	r2, #128	@ 0x80
 80007b6:	03d2      	lsls	r2, r2, #15
 80007b8:	4591      	cmp	r9, r2
 80007ba:	d302      	bcc.n	80007c2 <__aeabi_fadd+0x2b2>
 80007bc:	4594      	cmp	ip, r2
 80007be:	d200      	bcs.n	80007c2 <__aeabi_fadd+0x2b2>
 80007c0:	0033      	movs	r3, r6
 80007c2:	08db      	lsrs	r3, r3, #3
 80007c4:	e753      	b.n	800066e <__aeabi_fadd+0x15e>
 80007c6:	000c      	movs	r4, r1
 80007c8:	1af3      	subs	r3, r6, r3
 80007ca:	3501      	adds	r5, #1
 80007cc:	e6fa      	b.n	80005c4 <__aeabi_fadd+0xb4>
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d0af      	beq.n	8000732 <__aeabi_fadd+0x222>
 80007d2:	000c      	movs	r4, r1
 80007d4:	0033      	movs	r3, r6
 80007d6:	e78d      	b.n	80006f4 <__aeabi_fadd+0x1e4>
 80007d8:	2e00      	cmp	r6, #0
 80007da:	d100      	bne.n	80007de <__aeabi_fadd+0x2ce>
 80007dc:	e767      	b.n	80006ae <__aeabi_fadd+0x19e>
 80007de:	2280      	movs	r2, #128	@ 0x80
 80007e0:	03d2      	lsls	r2, r2, #15
 80007e2:	4591      	cmp	r9, r2
 80007e4:	d3ed      	bcc.n	80007c2 <__aeabi_fadd+0x2b2>
 80007e6:	4594      	cmp	ip, r2
 80007e8:	d2eb      	bcs.n	80007c2 <__aeabi_fadd+0x2b2>
 80007ea:	000c      	movs	r4, r1
 80007ec:	0033      	movs	r3, r6
 80007ee:	e7e8      	b.n	80007c2 <__aeabi_fadd+0x2b2>
 80007f0:	0033      	movs	r3, r6
 80007f2:	e77f      	b.n	80006f4 <__aeabi_fadd+0x1e4>
 80007f4:	199b      	adds	r3, r3, r6
 80007f6:	2200      	movs	r2, #0
 80007f8:	0159      	lsls	r1, r3, #5
 80007fa:	d5b9      	bpl.n	8000770 <__aeabi_fadd+0x260>
 80007fc:	4a07      	ldr	r2, [pc, #28]	@ (800081c <__aeabi_fadd+0x30c>)
 80007fe:	4013      	ands	r3, r2
 8000800:	08db      	lsrs	r3, r3, #3
 8000802:	2201      	movs	r2, #1
 8000804:	e778      	b.n	80006f8 <__aeabi_fadd+0x1e8>
 8000806:	199b      	adds	r3, r3, r6
 8000808:	3201      	adds	r2, #1
 800080a:	3501      	adds	r5, #1
 800080c:	0159      	lsls	r1, r3, #5
 800080e:	d49a      	bmi.n	8000746 <__aeabi_fadd+0x236>
 8000810:	e6da      	b.n	80005c8 <__aeabi_fadd+0xb8>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d08d      	beq.n	8000732 <__aeabi_fadd+0x222>
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	e76e      	b.n	80006f8 <__aeabi_fadd+0x1e8>
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	fbffffff 	.word	0xfbffffff
 8000820:	7dffffff 	.word	0x7dffffff

08000824 <__aeabi_fdiv>:
 8000824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000826:	464f      	mov	r7, r9
 8000828:	4646      	mov	r6, r8
 800082a:	46d6      	mov	lr, sl
 800082c:	0244      	lsls	r4, r0, #9
 800082e:	b5c0      	push	{r6, r7, lr}
 8000830:	0047      	lsls	r7, r0, #1
 8000832:	1c0e      	adds	r6, r1, #0
 8000834:	0a64      	lsrs	r4, r4, #9
 8000836:	0e3f      	lsrs	r7, r7, #24
 8000838:	0fc5      	lsrs	r5, r0, #31
 800083a:	2f00      	cmp	r7, #0
 800083c:	d03c      	beq.n	80008b8 <__aeabi_fdiv+0x94>
 800083e:	2fff      	cmp	r7, #255	@ 0xff
 8000840:	d042      	beq.n	80008c8 <__aeabi_fdiv+0xa4>
 8000842:	2300      	movs	r3, #0
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	4699      	mov	r9, r3
 8000848:	469a      	mov	sl, r3
 800084a:	00e4      	lsls	r4, r4, #3
 800084c:	04d2      	lsls	r2, r2, #19
 800084e:	4314      	orrs	r4, r2
 8000850:	3f7f      	subs	r7, #127	@ 0x7f
 8000852:	0273      	lsls	r3, r6, #9
 8000854:	0a5b      	lsrs	r3, r3, #9
 8000856:	4698      	mov	r8, r3
 8000858:	0073      	lsls	r3, r6, #1
 800085a:	0e1b      	lsrs	r3, r3, #24
 800085c:	0ff6      	lsrs	r6, r6, #31
 800085e:	2b00      	cmp	r3, #0
 8000860:	d01b      	beq.n	800089a <__aeabi_fdiv+0x76>
 8000862:	2bff      	cmp	r3, #255	@ 0xff
 8000864:	d013      	beq.n	800088e <__aeabi_fdiv+0x6a>
 8000866:	4642      	mov	r2, r8
 8000868:	2180      	movs	r1, #128	@ 0x80
 800086a:	00d2      	lsls	r2, r2, #3
 800086c:	04c9      	lsls	r1, r1, #19
 800086e:	4311      	orrs	r1, r2
 8000870:	4688      	mov	r8, r1
 8000872:	2000      	movs	r0, #0
 8000874:	3b7f      	subs	r3, #127	@ 0x7f
 8000876:	0029      	movs	r1, r5
 8000878:	1aff      	subs	r7, r7, r3
 800087a:	464b      	mov	r3, r9
 800087c:	4071      	eors	r1, r6
 800087e:	b2c9      	uxtb	r1, r1
 8000880:	2b0f      	cmp	r3, #15
 8000882:	d900      	bls.n	8000886 <__aeabi_fdiv+0x62>
 8000884:	e0b5      	b.n	80009f2 <__aeabi_fdiv+0x1ce>
 8000886:	4a74      	ldr	r2, [pc, #464]	@ (8000a58 <__aeabi_fdiv+0x234>)
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	58d3      	ldr	r3, [r2, r3]
 800088c:	469f      	mov	pc, r3
 800088e:	4643      	mov	r3, r8
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <__aeabi_fdiv+0xf0>
 8000894:	3fff      	subs	r7, #255	@ 0xff
 8000896:	3302      	adds	r3, #2
 8000898:	e003      	b.n	80008a2 <__aeabi_fdiv+0x7e>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12d      	bne.n	80008fc <__aeabi_fdiv+0xd8>
 80008a0:	2301      	movs	r3, #1
 80008a2:	0029      	movs	r1, r5
 80008a4:	464a      	mov	r2, r9
 80008a6:	4071      	eors	r1, r6
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	431a      	orrs	r2, r3
 80008ac:	2a0e      	cmp	r2, #14
 80008ae:	d838      	bhi.n	8000922 <__aeabi_fdiv+0xfe>
 80008b0:	486a      	ldr	r0, [pc, #424]	@ (8000a5c <__aeabi_fdiv+0x238>)
 80008b2:	0092      	lsls	r2, r2, #2
 80008b4:	5882      	ldr	r2, [r0, r2]
 80008b6:	4697      	mov	pc, r2
 80008b8:	2c00      	cmp	r4, #0
 80008ba:	d113      	bne.n	80008e4 <__aeabi_fdiv+0xc0>
 80008bc:	2304      	movs	r3, #4
 80008be:	4699      	mov	r9, r3
 80008c0:	3b03      	subs	r3, #3
 80008c2:	2700      	movs	r7, #0
 80008c4:	469a      	mov	sl, r3
 80008c6:	e7c4      	b.n	8000852 <__aeabi_fdiv+0x2e>
 80008c8:	2c00      	cmp	r4, #0
 80008ca:	d105      	bne.n	80008d8 <__aeabi_fdiv+0xb4>
 80008cc:	2308      	movs	r3, #8
 80008ce:	4699      	mov	r9, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	27ff      	movs	r7, #255	@ 0xff
 80008d4:	469a      	mov	sl, r3
 80008d6:	e7bc      	b.n	8000852 <__aeabi_fdiv+0x2e>
 80008d8:	230c      	movs	r3, #12
 80008da:	4699      	mov	r9, r3
 80008dc:	3b09      	subs	r3, #9
 80008de:	27ff      	movs	r7, #255	@ 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e7b6      	b.n	8000852 <__aeabi_fdiv+0x2e>
 80008e4:	0020      	movs	r0, r4
 80008e6:	f002 fbd7 	bl	8003098 <__clzsi2>
 80008ea:	2776      	movs	r7, #118	@ 0x76
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409c      	lsls	r4, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	427f      	negs	r7, r7
 80008f4:	4699      	mov	r9, r3
 80008f6:	469a      	mov	sl, r3
 80008f8:	1a3f      	subs	r7, r7, r0
 80008fa:	e7aa      	b.n	8000852 <__aeabi_fdiv+0x2e>
 80008fc:	4640      	mov	r0, r8
 80008fe:	f002 fbcb 	bl	8003098 <__clzsi2>
 8000902:	4642      	mov	r2, r8
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409a      	lsls	r2, r3
 8000908:	2376      	movs	r3, #118	@ 0x76
 800090a:	425b      	negs	r3, r3
 800090c:	1a1b      	subs	r3, r3, r0
 800090e:	4690      	mov	r8, r2
 8000910:	2000      	movs	r0, #0
 8000912:	e7b0      	b.n	8000876 <__aeabi_fdiv+0x52>
 8000914:	2303      	movs	r3, #3
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	2003      	movs	r0, #3
 800091e:	33fc      	adds	r3, #252	@ 0xfc
 8000920:	e7a9      	b.n	8000876 <__aeabi_fdiv+0x52>
 8000922:	000d      	movs	r5, r1
 8000924:	20ff      	movs	r0, #255	@ 0xff
 8000926:	2200      	movs	r2, #0
 8000928:	05c0      	lsls	r0, r0, #23
 800092a:	07ed      	lsls	r5, r5, #31
 800092c:	4310      	orrs	r0, r2
 800092e:	4328      	orrs	r0, r5
 8000930:	bce0      	pop	{r5, r6, r7}
 8000932:	46ba      	mov	sl, r7
 8000934:	46b1      	mov	r9, r6
 8000936:	46a8      	mov	r8, r5
 8000938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093a:	000d      	movs	r5, r1
 800093c:	2000      	movs	r0, #0
 800093e:	2200      	movs	r2, #0
 8000940:	e7f2      	b.n	8000928 <__aeabi_fdiv+0x104>
 8000942:	4653      	mov	r3, sl
 8000944:	2b02      	cmp	r3, #2
 8000946:	d0ed      	beq.n	8000924 <__aeabi_fdiv+0x100>
 8000948:	2b03      	cmp	r3, #3
 800094a:	d033      	beq.n	80009b4 <__aeabi_fdiv+0x190>
 800094c:	46a0      	mov	r8, r4
 800094e:	2b01      	cmp	r3, #1
 8000950:	d105      	bne.n	800095e <__aeabi_fdiv+0x13a>
 8000952:	2000      	movs	r0, #0
 8000954:	2200      	movs	r2, #0
 8000956:	e7e7      	b.n	8000928 <__aeabi_fdiv+0x104>
 8000958:	0035      	movs	r5, r6
 800095a:	2803      	cmp	r0, #3
 800095c:	d07a      	beq.n	8000a54 <__aeabi_fdiv+0x230>
 800095e:	003b      	movs	r3, r7
 8000960:	337f      	adds	r3, #127	@ 0x7f
 8000962:	2b00      	cmp	r3, #0
 8000964:	dd2d      	ble.n	80009c2 <__aeabi_fdiv+0x19e>
 8000966:	4642      	mov	r2, r8
 8000968:	0752      	lsls	r2, r2, #29
 800096a:	d007      	beq.n	800097c <__aeabi_fdiv+0x158>
 800096c:	220f      	movs	r2, #15
 800096e:	4641      	mov	r1, r8
 8000970:	400a      	ands	r2, r1
 8000972:	2a04      	cmp	r2, #4
 8000974:	d002      	beq.n	800097c <__aeabi_fdiv+0x158>
 8000976:	2204      	movs	r2, #4
 8000978:	4694      	mov	ip, r2
 800097a:	44e0      	add	r8, ip
 800097c:	4642      	mov	r2, r8
 800097e:	0112      	lsls	r2, r2, #4
 8000980:	d505      	bpl.n	800098e <__aeabi_fdiv+0x16a>
 8000982:	4642      	mov	r2, r8
 8000984:	4b36      	ldr	r3, [pc, #216]	@ (8000a60 <__aeabi_fdiv+0x23c>)
 8000986:	401a      	ands	r2, r3
 8000988:	003b      	movs	r3, r7
 800098a:	4690      	mov	r8, r2
 800098c:	3380      	adds	r3, #128	@ 0x80
 800098e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000990:	dcc8      	bgt.n	8000924 <__aeabi_fdiv+0x100>
 8000992:	4642      	mov	r2, r8
 8000994:	0192      	lsls	r2, r2, #6
 8000996:	0a52      	lsrs	r2, r2, #9
 8000998:	b2d8      	uxtb	r0, r3
 800099a:	e7c5      	b.n	8000928 <__aeabi_fdiv+0x104>
 800099c:	2280      	movs	r2, #128	@ 0x80
 800099e:	2500      	movs	r5, #0
 80009a0:	20ff      	movs	r0, #255	@ 0xff
 80009a2:	03d2      	lsls	r2, r2, #15
 80009a4:	e7c0      	b.n	8000928 <__aeabi_fdiv+0x104>
 80009a6:	2280      	movs	r2, #128	@ 0x80
 80009a8:	03d2      	lsls	r2, r2, #15
 80009aa:	4214      	tst	r4, r2
 80009ac:	d002      	beq.n	80009b4 <__aeabi_fdiv+0x190>
 80009ae:	4643      	mov	r3, r8
 80009b0:	4213      	tst	r3, r2
 80009b2:	d049      	beq.n	8000a48 <__aeabi_fdiv+0x224>
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	03d2      	lsls	r2, r2, #15
 80009b8:	4322      	orrs	r2, r4
 80009ba:	0252      	lsls	r2, r2, #9
 80009bc:	20ff      	movs	r0, #255	@ 0xff
 80009be:	0a52      	lsrs	r2, r2, #9
 80009c0:	e7b2      	b.n	8000928 <__aeabi_fdiv+0x104>
 80009c2:	2201      	movs	r2, #1
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b1b      	cmp	r3, #27
 80009c8:	dcc3      	bgt.n	8000952 <__aeabi_fdiv+0x12e>
 80009ca:	4642      	mov	r2, r8
 80009cc:	40da      	lsrs	r2, r3
 80009ce:	4643      	mov	r3, r8
 80009d0:	379e      	adds	r7, #158	@ 0x9e
 80009d2:	40bb      	lsls	r3, r7
 80009d4:	1e59      	subs	r1, r3, #1
 80009d6:	418b      	sbcs	r3, r1
 80009d8:	431a      	orrs	r2, r3
 80009da:	0753      	lsls	r3, r2, #29
 80009dc:	d004      	beq.n	80009e8 <__aeabi_fdiv+0x1c4>
 80009de:	230f      	movs	r3, #15
 80009e0:	4013      	ands	r3, r2
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fdiv+0x1c4>
 80009e6:	3204      	adds	r2, #4
 80009e8:	0153      	lsls	r3, r2, #5
 80009ea:	d529      	bpl.n	8000a40 <__aeabi_fdiv+0x21c>
 80009ec:	2001      	movs	r0, #1
 80009ee:	2200      	movs	r2, #0
 80009f0:	e79a      	b.n	8000928 <__aeabi_fdiv+0x104>
 80009f2:	4642      	mov	r2, r8
 80009f4:	0163      	lsls	r3, r4, #5
 80009f6:	0155      	lsls	r5, r2, #5
 80009f8:	42ab      	cmp	r3, r5
 80009fa:	d215      	bcs.n	8000a28 <__aeabi_fdiv+0x204>
 80009fc:	201b      	movs	r0, #27
 80009fe:	2200      	movs	r2, #0
 8000a00:	3f01      	subs	r7, #1
 8000a02:	2601      	movs	r6, #1
 8000a04:	001c      	movs	r4, r3
 8000a06:	0052      	lsls	r2, r2, #1
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2c00      	cmp	r4, #0
 8000a0c:	db01      	blt.n	8000a12 <__aeabi_fdiv+0x1ee>
 8000a0e:	429d      	cmp	r5, r3
 8000a10:	d801      	bhi.n	8000a16 <__aeabi_fdiv+0x1f2>
 8000a12:	1b5b      	subs	r3, r3, r5
 8000a14:	4332      	orrs	r2, r6
 8000a16:	3801      	subs	r0, #1
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	d1f3      	bne.n	8000a04 <__aeabi_fdiv+0x1e0>
 8000a1c:	1e58      	subs	r0, r3, #1
 8000a1e:	4183      	sbcs	r3, r0
 8000a20:	4313      	orrs	r3, r2
 8000a22:	4698      	mov	r8, r3
 8000a24:	000d      	movs	r5, r1
 8000a26:	e79a      	b.n	800095e <__aeabi_fdiv+0x13a>
 8000a28:	201a      	movs	r0, #26
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	1b5b      	subs	r3, r3, r5
 8000a2e:	e7e8      	b.n	8000a02 <__aeabi_fdiv+0x1de>
 8000a30:	3b02      	subs	r3, #2
 8000a32:	425a      	negs	r2, r3
 8000a34:	4153      	adcs	r3, r2
 8000a36:	425b      	negs	r3, r3
 8000a38:	0035      	movs	r5, r6
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	b2d8      	uxtb	r0, r3
 8000a3e:	e773      	b.n	8000928 <__aeabi_fdiv+0x104>
 8000a40:	0192      	lsls	r2, r2, #6
 8000a42:	2000      	movs	r0, #0
 8000a44:	0a52      	lsrs	r2, r2, #9
 8000a46:	e76f      	b.n	8000928 <__aeabi_fdiv+0x104>
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	0252      	lsls	r2, r2, #9
 8000a4c:	0035      	movs	r5, r6
 8000a4e:	20ff      	movs	r0, #255	@ 0xff
 8000a50:	0a52      	lsrs	r2, r2, #9
 8000a52:	e769      	b.n	8000928 <__aeabi_fdiv+0x104>
 8000a54:	4644      	mov	r4, r8
 8000a56:	e7ad      	b.n	80009b4 <__aeabi_fdiv+0x190>
 8000a58:	0800edd4 	.word	0x0800edd4
 8000a5c:	0800ee14 	.word	0x0800ee14
 8000a60:	f7ffffff 	.word	0xf7ffffff

08000a64 <__eqsf2>:
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	0042      	lsls	r2, r0, #1
 8000a68:	024e      	lsls	r6, r1, #9
 8000a6a:	004c      	lsls	r4, r1, #1
 8000a6c:	0245      	lsls	r5, r0, #9
 8000a6e:	0a6d      	lsrs	r5, r5, #9
 8000a70:	0e12      	lsrs	r2, r2, #24
 8000a72:	0fc3      	lsrs	r3, r0, #31
 8000a74:	0a76      	lsrs	r6, r6, #9
 8000a76:	0e24      	lsrs	r4, r4, #24
 8000a78:	0fc9      	lsrs	r1, r1, #31
 8000a7a:	2aff      	cmp	r2, #255	@ 0xff
 8000a7c:	d010      	beq.n	8000aa0 <__eqsf2+0x3c>
 8000a7e:	2cff      	cmp	r4, #255	@ 0xff
 8000a80:	d00c      	beq.n	8000a9c <__eqsf2+0x38>
 8000a82:	2001      	movs	r0, #1
 8000a84:	42a2      	cmp	r2, r4
 8000a86:	d10a      	bne.n	8000a9e <__eqsf2+0x3a>
 8000a88:	42b5      	cmp	r5, r6
 8000a8a:	d108      	bne.n	8000a9e <__eqsf2+0x3a>
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	d00f      	beq.n	8000ab0 <__eqsf2+0x4c>
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d104      	bne.n	8000a9e <__eqsf2+0x3a>
 8000a94:	0028      	movs	r0, r5
 8000a96:	1e43      	subs	r3, r0, #1
 8000a98:	4198      	sbcs	r0, r3
 8000a9a:	e000      	b.n	8000a9e <__eqsf2+0x3a>
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	2cff      	cmp	r4, #255	@ 0xff
 8000aa4:	d1fb      	bne.n	8000a9e <__eqsf2+0x3a>
 8000aa6:	4335      	orrs	r5, r6
 8000aa8:	d1f9      	bne.n	8000a9e <__eqsf2+0x3a>
 8000aaa:	404b      	eors	r3, r1
 8000aac:	0018      	movs	r0, r3
 8000aae:	e7f6      	b.n	8000a9e <__eqsf2+0x3a>
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	e7f4      	b.n	8000a9e <__eqsf2+0x3a>

08000ab4 <__gesf2>:
 8000ab4:	b530      	push	{r4, r5, lr}
 8000ab6:	0042      	lsls	r2, r0, #1
 8000ab8:	0244      	lsls	r4, r0, #9
 8000aba:	024d      	lsls	r5, r1, #9
 8000abc:	0fc3      	lsrs	r3, r0, #31
 8000abe:	0048      	lsls	r0, r1, #1
 8000ac0:	0a64      	lsrs	r4, r4, #9
 8000ac2:	0e12      	lsrs	r2, r2, #24
 8000ac4:	0a6d      	lsrs	r5, r5, #9
 8000ac6:	0e00      	lsrs	r0, r0, #24
 8000ac8:	0fc9      	lsrs	r1, r1, #31
 8000aca:	2aff      	cmp	r2, #255	@ 0xff
 8000acc:	d019      	beq.n	8000b02 <__gesf2+0x4e>
 8000ace:	28ff      	cmp	r0, #255	@ 0xff
 8000ad0:	d00b      	beq.n	8000aea <__gesf2+0x36>
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d11e      	bne.n	8000b14 <__gesf2+0x60>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	d10b      	bne.n	8000af2 <__gesf2+0x3e>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d027      	beq.n	8000b2e <__gesf2+0x7a>
 8000ade:	2c00      	cmp	r4, #0
 8000ae0:	d134      	bne.n	8000b4c <__gesf2+0x98>
 8000ae2:	2900      	cmp	r1, #0
 8000ae4:	d02f      	beq.n	8000b46 <__gesf2+0x92>
 8000ae6:	0008      	movs	r0, r1
 8000ae8:	bd30      	pop	{r4, r5, pc}
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	d128      	bne.n	8000b40 <__gesf2+0x8c>
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d101      	bne.n	8000af6 <__gesf2+0x42>
 8000af2:	2c00      	cmp	r4, #0
 8000af4:	d0f5      	beq.n	8000ae2 <__gesf2+0x2e>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d107      	bne.n	8000b0a <__gesf2+0x56>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d023      	beq.n	8000b46 <__gesf2+0x92>
 8000afe:	0018      	movs	r0, r3
 8000b00:	e7f2      	b.n	8000ae8 <__gesf2+0x34>
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d11c      	bne.n	8000b40 <__gesf2+0x8c>
 8000b06:	28ff      	cmp	r0, #255	@ 0xff
 8000b08:	d014      	beq.n	8000b34 <__gesf2+0x80>
 8000b0a:	1e58      	subs	r0, r3, #1
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	4018      	ands	r0, r3
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7e9      	b.n	8000ae8 <__gesf2+0x34>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d0f8      	beq.n	8000b0a <__gesf2+0x56>
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	d1f6      	bne.n	8000b0a <__gesf2+0x56>
 8000b1c:	4282      	cmp	r2, r0
 8000b1e:	dcf4      	bgt.n	8000b0a <__gesf2+0x56>
 8000b20:	dbeb      	blt.n	8000afa <__gesf2+0x46>
 8000b22:	42ac      	cmp	r4, r5
 8000b24:	d8f1      	bhi.n	8000b0a <__gesf2+0x56>
 8000b26:	2000      	movs	r0, #0
 8000b28:	42ac      	cmp	r4, r5
 8000b2a:	d2dd      	bcs.n	8000ae8 <__gesf2+0x34>
 8000b2c:	e7e5      	b.n	8000afa <__gesf2+0x46>
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d0da      	beq.n	8000ae8 <__gesf2+0x34>
 8000b32:	e7ea      	b.n	8000b0a <__gesf2+0x56>
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	d103      	bne.n	8000b40 <__gesf2+0x8c>
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d1e6      	bne.n	8000b0a <__gesf2+0x56>
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	e7d3      	b.n	8000ae8 <__gesf2+0x34>
 8000b40:	2002      	movs	r0, #2
 8000b42:	4240      	negs	r0, r0
 8000b44:	e7d0      	b.n	8000ae8 <__gesf2+0x34>
 8000b46:	2001      	movs	r0, #1
 8000b48:	4240      	negs	r0, r0
 8000b4a:	e7cd      	b.n	8000ae8 <__gesf2+0x34>
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d0e8      	beq.n	8000b22 <__gesf2+0x6e>
 8000b50:	e7db      	b.n	8000b0a <__gesf2+0x56>
 8000b52:	46c0      	nop			@ (mov r8, r8)

08000b54 <__lesf2>:
 8000b54:	b530      	push	{r4, r5, lr}
 8000b56:	0042      	lsls	r2, r0, #1
 8000b58:	0244      	lsls	r4, r0, #9
 8000b5a:	024d      	lsls	r5, r1, #9
 8000b5c:	0fc3      	lsrs	r3, r0, #31
 8000b5e:	0048      	lsls	r0, r1, #1
 8000b60:	0a64      	lsrs	r4, r4, #9
 8000b62:	0e12      	lsrs	r2, r2, #24
 8000b64:	0a6d      	lsrs	r5, r5, #9
 8000b66:	0e00      	lsrs	r0, r0, #24
 8000b68:	0fc9      	lsrs	r1, r1, #31
 8000b6a:	2aff      	cmp	r2, #255	@ 0xff
 8000b6c:	d01a      	beq.n	8000ba4 <__lesf2+0x50>
 8000b6e:	28ff      	cmp	r0, #255	@ 0xff
 8000b70:	d00e      	beq.n	8000b90 <__lesf2+0x3c>
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	d11e      	bne.n	8000bb4 <__lesf2+0x60>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	d10e      	bne.n	8000b98 <__lesf2+0x44>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d02a      	beq.n	8000bd4 <__lesf2+0x80>
 8000b7e:	2c00      	cmp	r4, #0
 8000b80:	d00c      	beq.n	8000b9c <__lesf2+0x48>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d01d      	beq.n	8000bc2 <__lesf2+0x6e>
 8000b86:	1e58      	subs	r0, r3, #1
 8000b88:	2302      	movs	r3, #2
 8000b8a:	4018      	ands	r0, r3
 8000b8c:	3801      	subs	r0, #1
 8000b8e:	e010      	b.n	8000bb2 <__lesf2+0x5e>
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d10d      	bne.n	8000bb0 <__lesf2+0x5c>
 8000b94:	2a00      	cmp	r2, #0
 8000b96:	d120      	bne.n	8000bda <__lesf2+0x86>
 8000b98:	2c00      	cmp	r4, #0
 8000b9a:	d11e      	bne.n	8000bda <__lesf2+0x86>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d023      	beq.n	8000be8 <__lesf2+0x94>
 8000ba0:	0008      	movs	r0, r1
 8000ba2:	e006      	b.n	8000bb2 <__lesf2+0x5e>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d103      	bne.n	8000bb0 <__lesf2+0x5c>
 8000ba8:	28ff      	cmp	r0, #255	@ 0xff
 8000baa:	d1ec      	bne.n	8000b86 <__lesf2+0x32>
 8000bac:	2d00      	cmp	r5, #0
 8000bae:	d017      	beq.n	8000be0 <__lesf2+0x8c>
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	bd30      	pop	{r4, r5, pc}
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d0e6      	beq.n	8000b86 <__lesf2+0x32>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	d1e4      	bne.n	8000b86 <__lesf2+0x32>
 8000bbc:	4282      	cmp	r2, r0
 8000bbe:	dce2      	bgt.n	8000b86 <__lesf2+0x32>
 8000bc0:	db04      	blt.n	8000bcc <__lesf2+0x78>
 8000bc2:	42ac      	cmp	r4, r5
 8000bc4:	d8df      	bhi.n	8000b86 <__lesf2+0x32>
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	42ac      	cmp	r4, r5
 8000bca:	d2f2      	bcs.n	8000bb2 <__lesf2+0x5e>
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00b      	beq.n	8000be8 <__lesf2+0x94>
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	e7ee      	b.n	8000bb2 <__lesf2+0x5e>
 8000bd4:	2c00      	cmp	r4, #0
 8000bd6:	d0ec      	beq.n	8000bb2 <__lesf2+0x5e>
 8000bd8:	e7d5      	b.n	8000b86 <__lesf2+0x32>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d1d3      	bne.n	8000b86 <__lesf2+0x32>
 8000bde:	e7f5      	b.n	8000bcc <__lesf2+0x78>
 8000be0:	2000      	movs	r0, #0
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d0e5      	beq.n	8000bb2 <__lesf2+0x5e>
 8000be6:	e7ce      	b.n	8000b86 <__lesf2+0x32>
 8000be8:	2001      	movs	r0, #1
 8000bea:	4240      	negs	r0, r0
 8000bec:	e7e1      	b.n	8000bb2 <__lesf2+0x5e>
 8000bee:	46c0      	nop			@ (mov r8, r8)

08000bf0 <__aeabi_fmul>:
 8000bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf2:	464f      	mov	r7, r9
 8000bf4:	4646      	mov	r6, r8
 8000bf6:	46d6      	mov	lr, sl
 8000bf8:	0243      	lsls	r3, r0, #9
 8000bfa:	0a5b      	lsrs	r3, r3, #9
 8000bfc:	0045      	lsls	r5, r0, #1
 8000bfe:	b5c0      	push	{r6, r7, lr}
 8000c00:	4699      	mov	r9, r3
 8000c02:	1c0f      	adds	r7, r1, #0
 8000c04:	0e2d      	lsrs	r5, r5, #24
 8000c06:	0fc6      	lsrs	r6, r0, #31
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fmul+0x1e>
 8000c0c:	e088      	b.n	8000d20 <__aeabi_fmul+0x130>
 8000c0e:	2dff      	cmp	r5, #255	@ 0xff
 8000c10:	d100      	bne.n	8000c14 <__aeabi_fmul+0x24>
 8000c12:	e08d      	b.n	8000d30 <__aeabi_fmul+0x140>
 8000c14:	2280      	movs	r2, #128	@ 0x80
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	04d2      	lsls	r2, r2, #19
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4691      	mov	r9, r2
 8000c20:	4698      	mov	r8, r3
 8000c22:	469a      	mov	sl, r3
 8000c24:	3d7f      	subs	r5, #127	@ 0x7f
 8000c26:	027c      	lsls	r4, r7, #9
 8000c28:	007b      	lsls	r3, r7, #1
 8000c2a:	0a64      	lsrs	r4, r4, #9
 8000c2c:	0e1b      	lsrs	r3, r3, #24
 8000c2e:	0fff      	lsrs	r7, r7, #31
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d068      	beq.n	8000d06 <__aeabi_fmul+0x116>
 8000c34:	2bff      	cmp	r3, #255	@ 0xff
 8000c36:	d021      	beq.n	8000c7c <__aeabi_fmul+0x8c>
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	00e4      	lsls	r4, r4, #3
 8000c3c:	04d2      	lsls	r2, r2, #19
 8000c3e:	4314      	orrs	r4, r2
 8000c40:	4642      	mov	r2, r8
 8000c42:	3b7f      	subs	r3, #127	@ 0x7f
 8000c44:	195b      	adds	r3, r3, r5
 8000c46:	2100      	movs	r1, #0
 8000c48:	1c5d      	adds	r5, r3, #1
 8000c4a:	2a0a      	cmp	r2, #10
 8000c4c:	dc2e      	bgt.n	8000cac <__aeabi_fmul+0xbc>
 8000c4e:	407e      	eors	r6, r7
 8000c50:	4642      	mov	r2, r8
 8000c52:	2a02      	cmp	r2, #2
 8000c54:	dc23      	bgt.n	8000c9e <__aeabi_fmul+0xae>
 8000c56:	3a01      	subs	r2, #1
 8000c58:	2a01      	cmp	r2, #1
 8000c5a:	d900      	bls.n	8000c5e <__aeabi_fmul+0x6e>
 8000c5c:	e0bd      	b.n	8000dda <__aeabi_fmul+0x1ea>
 8000c5e:	2902      	cmp	r1, #2
 8000c60:	d06e      	beq.n	8000d40 <__aeabi_fmul+0x150>
 8000c62:	2901      	cmp	r1, #1
 8000c64:	d12c      	bne.n	8000cc0 <__aeabi_fmul+0xd0>
 8000c66:	2000      	movs	r0, #0
 8000c68:	2200      	movs	r2, #0
 8000c6a:	05c0      	lsls	r0, r0, #23
 8000c6c:	07f6      	lsls	r6, r6, #31
 8000c6e:	4310      	orrs	r0, r2
 8000c70:	4330      	orrs	r0, r6
 8000c72:	bce0      	pop	{r5, r6, r7}
 8000c74:	46ba      	mov	sl, r7
 8000c76:	46b1      	mov	r9, r6
 8000c78:	46a8      	mov	r8, r5
 8000c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7c:	002b      	movs	r3, r5
 8000c7e:	33ff      	adds	r3, #255	@ 0xff
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	d065      	beq.n	8000d50 <__aeabi_fmul+0x160>
 8000c84:	2203      	movs	r2, #3
 8000c86:	4641      	mov	r1, r8
 8000c88:	4311      	orrs	r1, r2
 8000c8a:	0032      	movs	r2, r6
 8000c8c:	3501      	adds	r5, #1
 8000c8e:	4688      	mov	r8, r1
 8000c90:	407a      	eors	r2, r7
 8000c92:	35ff      	adds	r5, #255	@ 0xff
 8000c94:	290a      	cmp	r1, #10
 8000c96:	dd00      	ble.n	8000c9a <__aeabi_fmul+0xaa>
 8000c98:	e0d8      	b.n	8000e4c <__aeabi_fmul+0x25c>
 8000c9a:	0016      	movs	r6, r2
 8000c9c:	2103      	movs	r1, #3
 8000c9e:	4640      	mov	r0, r8
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4082      	lsls	r2, r0
 8000ca4:	20a6      	movs	r0, #166	@ 0xa6
 8000ca6:	00c0      	lsls	r0, r0, #3
 8000ca8:	4202      	tst	r2, r0
 8000caa:	d020      	beq.n	8000cee <__aeabi_fmul+0xfe>
 8000cac:	4653      	mov	r3, sl
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d046      	beq.n	8000d40 <__aeabi_fmul+0x150>
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_fmul+0xc8>
 8000cb6:	e0bb      	b.n	8000e30 <__aeabi_fmul+0x240>
 8000cb8:	4651      	mov	r1, sl
 8000cba:	464c      	mov	r4, r9
 8000cbc:	2901      	cmp	r1, #1
 8000cbe:	d0d2      	beq.n	8000c66 <__aeabi_fmul+0x76>
 8000cc0:	002b      	movs	r3, r5
 8000cc2:	337f      	adds	r3, #127	@ 0x7f
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	dd70      	ble.n	8000daa <__aeabi_fmul+0x1ba>
 8000cc8:	0762      	lsls	r2, r4, #29
 8000cca:	d004      	beq.n	8000cd6 <__aeabi_fmul+0xe6>
 8000ccc:	220f      	movs	r2, #15
 8000cce:	4022      	ands	r2, r4
 8000cd0:	2a04      	cmp	r2, #4
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_fmul+0xe6>
 8000cd4:	3404      	adds	r4, #4
 8000cd6:	0122      	lsls	r2, r4, #4
 8000cd8:	d503      	bpl.n	8000ce2 <__aeabi_fmul+0xf2>
 8000cda:	4b63      	ldr	r3, [pc, #396]	@ (8000e68 <__aeabi_fmul+0x278>)
 8000cdc:	401c      	ands	r4, r3
 8000cde:	002b      	movs	r3, r5
 8000ce0:	3380      	adds	r3, #128	@ 0x80
 8000ce2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ce4:	dc2c      	bgt.n	8000d40 <__aeabi_fmul+0x150>
 8000ce6:	01a2      	lsls	r2, r4, #6
 8000ce8:	0a52      	lsrs	r2, r2, #9
 8000cea:	b2d8      	uxtb	r0, r3
 8000cec:	e7bd      	b.n	8000c6a <__aeabi_fmul+0x7a>
 8000cee:	2090      	movs	r0, #144	@ 0x90
 8000cf0:	0080      	lsls	r0, r0, #2
 8000cf2:	4202      	tst	r2, r0
 8000cf4:	d127      	bne.n	8000d46 <__aeabi_fmul+0x156>
 8000cf6:	38b9      	subs	r0, #185	@ 0xb9
 8000cf8:	38ff      	subs	r0, #255	@ 0xff
 8000cfa:	4210      	tst	r0, r2
 8000cfc:	d06d      	beq.n	8000dda <__aeabi_fmul+0x1ea>
 8000cfe:	003e      	movs	r6, r7
 8000d00:	46a1      	mov	r9, r4
 8000d02:	468a      	mov	sl, r1
 8000d04:	e7d2      	b.n	8000cac <__aeabi_fmul+0xbc>
 8000d06:	2c00      	cmp	r4, #0
 8000d08:	d141      	bne.n	8000d8e <__aeabi_fmul+0x19e>
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	4642      	mov	r2, r8
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	4690      	mov	r8, r2
 8000d12:	002b      	movs	r3, r5
 8000d14:	4642      	mov	r2, r8
 8000d16:	2101      	movs	r1, #1
 8000d18:	1c5d      	adds	r5, r3, #1
 8000d1a:	2a0a      	cmp	r2, #10
 8000d1c:	dd97      	ble.n	8000c4e <__aeabi_fmul+0x5e>
 8000d1e:	e7c5      	b.n	8000cac <__aeabi_fmul+0xbc>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d126      	bne.n	8000d72 <__aeabi_fmul+0x182>
 8000d24:	2304      	movs	r3, #4
 8000d26:	4698      	mov	r8, r3
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	469a      	mov	sl, r3
 8000d2e:	e77a      	b.n	8000c26 <__aeabi_fmul+0x36>
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d118      	bne.n	8000d66 <__aeabi_fmul+0x176>
 8000d34:	2308      	movs	r3, #8
 8000d36:	4698      	mov	r8, r3
 8000d38:	3b06      	subs	r3, #6
 8000d3a:	25ff      	movs	r5, #255	@ 0xff
 8000d3c:	469a      	mov	sl, r3
 8000d3e:	e772      	b.n	8000c26 <__aeabi_fmul+0x36>
 8000d40:	20ff      	movs	r0, #255	@ 0xff
 8000d42:	2200      	movs	r2, #0
 8000d44:	e791      	b.n	8000c6a <__aeabi_fmul+0x7a>
 8000d46:	2280      	movs	r2, #128	@ 0x80
 8000d48:	2600      	movs	r6, #0
 8000d4a:	20ff      	movs	r0, #255	@ 0xff
 8000d4c:	03d2      	lsls	r2, r2, #15
 8000d4e:	e78c      	b.n	8000c6a <__aeabi_fmul+0x7a>
 8000d50:	4641      	mov	r1, r8
 8000d52:	2202      	movs	r2, #2
 8000d54:	3501      	adds	r5, #1
 8000d56:	4311      	orrs	r1, r2
 8000d58:	4688      	mov	r8, r1
 8000d5a:	35ff      	adds	r5, #255	@ 0xff
 8000d5c:	290a      	cmp	r1, #10
 8000d5e:	dca5      	bgt.n	8000cac <__aeabi_fmul+0xbc>
 8000d60:	2102      	movs	r1, #2
 8000d62:	407e      	eors	r6, r7
 8000d64:	e774      	b.n	8000c50 <__aeabi_fmul+0x60>
 8000d66:	230c      	movs	r3, #12
 8000d68:	4698      	mov	r8, r3
 8000d6a:	3b09      	subs	r3, #9
 8000d6c:	25ff      	movs	r5, #255	@ 0xff
 8000d6e:	469a      	mov	sl, r3
 8000d70:	e759      	b.n	8000c26 <__aeabi_fmul+0x36>
 8000d72:	0018      	movs	r0, r3
 8000d74:	f002 f990 	bl	8003098 <__clzsi2>
 8000d78:	464a      	mov	r2, r9
 8000d7a:	1f43      	subs	r3, r0, #5
 8000d7c:	2576      	movs	r5, #118	@ 0x76
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	426d      	negs	r5, r5
 8000d84:	4691      	mov	r9, r2
 8000d86:	4698      	mov	r8, r3
 8000d88:	469a      	mov	sl, r3
 8000d8a:	1a2d      	subs	r5, r5, r0
 8000d8c:	e74b      	b.n	8000c26 <__aeabi_fmul+0x36>
 8000d8e:	0020      	movs	r0, r4
 8000d90:	f002 f982 	bl	8003098 <__clzsi2>
 8000d94:	4642      	mov	r2, r8
 8000d96:	1f43      	subs	r3, r0, #5
 8000d98:	409c      	lsls	r4, r3
 8000d9a:	1a2b      	subs	r3, r5, r0
 8000d9c:	3b76      	subs	r3, #118	@ 0x76
 8000d9e:	2100      	movs	r1, #0
 8000da0:	1c5d      	adds	r5, r3, #1
 8000da2:	2a0a      	cmp	r2, #10
 8000da4:	dc00      	bgt.n	8000da8 <__aeabi_fmul+0x1b8>
 8000da6:	e752      	b.n	8000c4e <__aeabi_fmul+0x5e>
 8000da8:	e780      	b.n	8000cac <__aeabi_fmul+0xbc>
 8000daa:	2201      	movs	r2, #1
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b1b      	cmp	r3, #27
 8000db0:	dd00      	ble.n	8000db4 <__aeabi_fmul+0x1c4>
 8000db2:	e758      	b.n	8000c66 <__aeabi_fmul+0x76>
 8000db4:	359e      	adds	r5, #158	@ 0x9e
 8000db6:	0022      	movs	r2, r4
 8000db8:	40ac      	lsls	r4, r5
 8000dba:	40da      	lsrs	r2, r3
 8000dbc:	1e63      	subs	r3, r4, #1
 8000dbe:	419c      	sbcs	r4, r3
 8000dc0:	4322      	orrs	r2, r4
 8000dc2:	0753      	lsls	r3, r2, #29
 8000dc4:	d004      	beq.n	8000dd0 <__aeabi_fmul+0x1e0>
 8000dc6:	230f      	movs	r3, #15
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	d000      	beq.n	8000dd0 <__aeabi_fmul+0x1e0>
 8000dce:	3204      	adds	r2, #4
 8000dd0:	0153      	lsls	r3, r2, #5
 8000dd2:	d537      	bpl.n	8000e44 <__aeabi_fmul+0x254>
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	e747      	b.n	8000c6a <__aeabi_fmul+0x7a>
 8000dda:	0c21      	lsrs	r1, r4, #16
 8000ddc:	464a      	mov	r2, r9
 8000dde:	0424      	lsls	r4, r4, #16
 8000de0:	0c24      	lsrs	r4, r4, #16
 8000de2:	0027      	movs	r7, r4
 8000de4:	0c10      	lsrs	r0, r2, #16
 8000de6:	0412      	lsls	r2, r2, #16
 8000de8:	0c12      	lsrs	r2, r2, #16
 8000dea:	4344      	muls	r4, r0
 8000dec:	4357      	muls	r7, r2
 8000dee:	4348      	muls	r0, r1
 8000df0:	4351      	muls	r1, r2
 8000df2:	0c3a      	lsrs	r2, r7, #16
 8000df4:	1909      	adds	r1, r1, r4
 8000df6:	1852      	adds	r2, r2, r1
 8000df8:	4294      	cmp	r4, r2
 8000dfa:	d903      	bls.n	8000e04 <__aeabi_fmul+0x214>
 8000dfc:	2180      	movs	r1, #128	@ 0x80
 8000dfe:	0249      	lsls	r1, r1, #9
 8000e00:	468c      	mov	ip, r1
 8000e02:	4460      	add	r0, ip
 8000e04:	043f      	lsls	r7, r7, #16
 8000e06:	0411      	lsls	r1, r2, #16
 8000e08:	0c3f      	lsrs	r7, r7, #16
 8000e0a:	19c9      	adds	r1, r1, r7
 8000e0c:	018c      	lsls	r4, r1, #6
 8000e0e:	1e67      	subs	r7, r4, #1
 8000e10:	41bc      	sbcs	r4, r7
 8000e12:	0c12      	lsrs	r2, r2, #16
 8000e14:	0e89      	lsrs	r1, r1, #26
 8000e16:	1812      	adds	r2, r2, r0
 8000e18:	430c      	orrs	r4, r1
 8000e1a:	0192      	lsls	r2, r2, #6
 8000e1c:	4314      	orrs	r4, r2
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	d50e      	bpl.n	8000e40 <__aeabi_fmul+0x250>
 8000e22:	2301      	movs	r3, #1
 8000e24:	0862      	lsrs	r2, r4, #1
 8000e26:	401c      	ands	r4, r3
 8000e28:	4314      	orrs	r4, r2
 8000e2a:	e749      	b.n	8000cc0 <__aeabi_fmul+0xd0>
 8000e2c:	003e      	movs	r6, r7
 8000e2e:	46a1      	mov	r9, r4
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	464b      	mov	r3, r9
 8000e34:	03d2      	lsls	r2, r2, #15
 8000e36:	431a      	orrs	r2, r3
 8000e38:	0252      	lsls	r2, r2, #9
 8000e3a:	20ff      	movs	r0, #255	@ 0xff
 8000e3c:	0a52      	lsrs	r2, r2, #9
 8000e3e:	e714      	b.n	8000c6a <__aeabi_fmul+0x7a>
 8000e40:	001d      	movs	r5, r3
 8000e42:	e73d      	b.n	8000cc0 <__aeabi_fmul+0xd0>
 8000e44:	0192      	lsls	r2, r2, #6
 8000e46:	2000      	movs	r0, #0
 8000e48:	0a52      	lsrs	r2, r2, #9
 8000e4a:	e70e      	b.n	8000c6a <__aeabi_fmul+0x7a>
 8000e4c:	290f      	cmp	r1, #15
 8000e4e:	d1ed      	bne.n	8000e2c <__aeabi_fmul+0x23c>
 8000e50:	2280      	movs	r2, #128	@ 0x80
 8000e52:	464b      	mov	r3, r9
 8000e54:	03d2      	lsls	r2, r2, #15
 8000e56:	4213      	tst	r3, r2
 8000e58:	d0ea      	beq.n	8000e30 <__aeabi_fmul+0x240>
 8000e5a:	4214      	tst	r4, r2
 8000e5c:	d1e8      	bne.n	8000e30 <__aeabi_fmul+0x240>
 8000e5e:	003e      	movs	r6, r7
 8000e60:	20ff      	movs	r0, #255	@ 0xff
 8000e62:	4322      	orrs	r2, r4
 8000e64:	e701      	b.n	8000c6a <__aeabi_fmul+0x7a>
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	f7ffffff 	.word	0xf7ffffff

08000e6c <__aeabi_fsub>:
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6e:	4647      	mov	r7, r8
 8000e70:	46ce      	mov	lr, r9
 8000e72:	024e      	lsls	r6, r1, #9
 8000e74:	0243      	lsls	r3, r0, #9
 8000e76:	0045      	lsls	r5, r0, #1
 8000e78:	0a72      	lsrs	r2, r6, #9
 8000e7a:	0fc4      	lsrs	r4, r0, #31
 8000e7c:	0048      	lsls	r0, r1, #1
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	4694      	mov	ip, r2
 8000e82:	0a5f      	lsrs	r7, r3, #9
 8000e84:	0e2d      	lsrs	r5, r5, #24
 8000e86:	099b      	lsrs	r3, r3, #6
 8000e88:	0e00      	lsrs	r0, r0, #24
 8000e8a:	0fc9      	lsrs	r1, r1, #31
 8000e8c:	09b6      	lsrs	r6, r6, #6
 8000e8e:	28ff      	cmp	r0, #255	@ 0xff
 8000e90:	d024      	beq.n	8000edc <__aeabi_fsub+0x70>
 8000e92:	2201      	movs	r2, #1
 8000e94:	4051      	eors	r1, r2
 8000e96:	1a2a      	subs	r2, r5, r0
 8000e98:	428c      	cmp	r4, r1
 8000e9a:	d00f      	beq.n	8000ebc <__aeabi_fsub+0x50>
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	dc00      	bgt.n	8000ea2 <__aeabi_fsub+0x36>
 8000ea0:	e16a      	b.n	8001178 <__aeabi_fsub+0x30c>
 8000ea2:	2800      	cmp	r0, #0
 8000ea4:	d135      	bne.n	8000f12 <__aeabi_fsub+0xa6>
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d100      	bne.n	8000eac <__aeabi_fsub+0x40>
 8000eaa:	e0a2      	b.n	8000ff2 <__aeabi_fsub+0x186>
 8000eac:	1e51      	subs	r1, r2, #1
 8000eae:	2a01      	cmp	r2, #1
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_fsub+0x48>
 8000eb2:	e124      	b.n	80010fe <__aeabi_fsub+0x292>
 8000eb4:	2aff      	cmp	r2, #255	@ 0xff
 8000eb6:	d021      	beq.n	8000efc <__aeabi_fsub+0x90>
 8000eb8:	000a      	movs	r2, r1
 8000eba:	e02f      	b.n	8000f1c <__aeabi_fsub+0xb0>
 8000ebc:	2a00      	cmp	r2, #0
 8000ebe:	dc00      	bgt.n	8000ec2 <__aeabi_fsub+0x56>
 8000ec0:	e167      	b.n	8001192 <__aeabi_fsub+0x326>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	d05e      	beq.n	8000f84 <__aeabi_fsub+0x118>
 8000ec6:	2dff      	cmp	r5, #255	@ 0xff
 8000ec8:	d018      	beq.n	8000efc <__aeabi_fsub+0x90>
 8000eca:	2180      	movs	r1, #128	@ 0x80
 8000ecc:	04c9      	lsls	r1, r1, #19
 8000ece:	430e      	orrs	r6, r1
 8000ed0:	2a1b      	cmp	r2, #27
 8000ed2:	dc00      	bgt.n	8000ed6 <__aeabi_fsub+0x6a>
 8000ed4:	e076      	b.n	8000fc4 <__aeabi_fsub+0x158>
 8000ed6:	002a      	movs	r2, r5
 8000ed8:	3301      	adds	r3, #1
 8000eda:	e032      	b.n	8000f42 <__aeabi_fsub+0xd6>
 8000edc:	002a      	movs	r2, r5
 8000ede:	3aff      	subs	r2, #255	@ 0xff
 8000ee0:	4691      	mov	r9, r2
 8000ee2:	2e00      	cmp	r6, #0
 8000ee4:	d042      	beq.n	8000f6c <__aeabi_fsub+0x100>
 8000ee6:	428c      	cmp	r4, r1
 8000ee8:	d055      	beq.n	8000f96 <__aeabi_fsub+0x12a>
 8000eea:	464a      	mov	r2, r9
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x86>
 8000ef0:	e09c      	b.n	800102c <__aeabi_fsub+0x1c0>
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_fsub+0x8c>
 8000ef6:	e077      	b.n	8000fe8 <__aeabi_fsub+0x17c>
 8000ef8:	000c      	movs	r4, r1
 8000efa:	0033      	movs	r3, r6
 8000efc:	08db      	lsrs	r3, r3, #3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0x98>
 8000f02:	e06e      	b.n	8000fe2 <__aeabi_fsub+0x176>
 8000f04:	2280      	movs	r2, #128	@ 0x80
 8000f06:	03d2      	lsls	r2, r2, #15
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	025b      	lsls	r3, r3, #9
 8000f0c:	20ff      	movs	r0, #255	@ 0xff
 8000f0e:	0a5b      	lsrs	r3, r3, #9
 8000f10:	e024      	b.n	8000f5c <__aeabi_fsub+0xf0>
 8000f12:	2dff      	cmp	r5, #255	@ 0xff
 8000f14:	d0f2      	beq.n	8000efc <__aeabi_fsub+0x90>
 8000f16:	2180      	movs	r1, #128	@ 0x80
 8000f18:	04c9      	lsls	r1, r1, #19
 8000f1a:	430e      	orrs	r6, r1
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	2a1b      	cmp	r2, #27
 8000f20:	dc08      	bgt.n	8000f34 <__aeabi_fsub+0xc8>
 8000f22:	0031      	movs	r1, r6
 8000f24:	2020      	movs	r0, #32
 8000f26:	40d1      	lsrs	r1, r2
 8000f28:	1a82      	subs	r2, r0, r2
 8000f2a:	4096      	lsls	r6, r2
 8000f2c:	0032      	movs	r2, r6
 8000f2e:	1e50      	subs	r0, r2, #1
 8000f30:	4182      	sbcs	r2, r0
 8000f32:	4311      	orrs	r1, r2
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	015a      	lsls	r2, r3, #5
 8000f38:	d460      	bmi.n	8000ffc <__aeabi_fsub+0x190>
 8000f3a:	2107      	movs	r1, #7
 8000f3c:	002a      	movs	r2, r5
 8000f3e:	4019      	ands	r1, r3
 8000f40:	d057      	beq.n	8000ff2 <__aeabi_fsub+0x186>
 8000f42:	210f      	movs	r1, #15
 8000f44:	4019      	ands	r1, r3
 8000f46:	2904      	cmp	r1, #4
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fsub+0xe0>
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	0159      	lsls	r1, r3, #5
 8000f4e:	d550      	bpl.n	8000ff2 <__aeabi_fsub+0x186>
 8000f50:	1c50      	adds	r0, r2, #1
 8000f52:	2afe      	cmp	r2, #254	@ 0xfe
 8000f54:	d045      	beq.n	8000fe2 <__aeabi_fsub+0x176>
 8000f56:	019b      	lsls	r3, r3, #6
 8000f58:	b2c0      	uxtb	r0, r0
 8000f5a:	0a5b      	lsrs	r3, r3, #9
 8000f5c:	05c0      	lsls	r0, r0, #23
 8000f5e:	4318      	orrs	r0, r3
 8000f60:	07e4      	lsls	r4, r4, #31
 8000f62:	4320      	orrs	r0, r4
 8000f64:	bcc0      	pop	{r6, r7}
 8000f66:	46b9      	mov	r9, r7
 8000f68:	46b0      	mov	r8, r6
 8000f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4051      	eors	r1, r2
 8000f70:	428c      	cmp	r4, r1
 8000f72:	d1ba      	bne.n	8000eea <__aeabi_fsub+0x7e>
 8000f74:	464a      	mov	r2, r9
 8000f76:	2a00      	cmp	r2, #0
 8000f78:	d010      	beq.n	8000f9c <__aeabi_fsub+0x130>
 8000f7a:	2d00      	cmp	r5, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fsub+0x114>
 8000f7e:	e098      	b.n	80010b2 <__aeabi_fsub+0x246>
 8000f80:	2300      	movs	r3, #0
 8000f82:	e7bb      	b.n	8000efc <__aeabi_fsub+0x90>
 8000f84:	2e00      	cmp	r6, #0
 8000f86:	d034      	beq.n	8000ff2 <__aeabi_fsub+0x186>
 8000f88:	1e51      	subs	r1, r2, #1
 8000f8a:	2a01      	cmp	r2, #1
 8000f8c:	d06e      	beq.n	800106c <__aeabi_fsub+0x200>
 8000f8e:	2aff      	cmp	r2, #255	@ 0xff
 8000f90:	d0b4      	beq.n	8000efc <__aeabi_fsub+0x90>
 8000f92:	000a      	movs	r2, r1
 8000f94:	e79c      	b.n	8000ed0 <__aeabi_fsub+0x64>
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	d000      	beq.n	8000f9c <__aeabi_fsub+0x130>
 8000f9a:	e088      	b.n	80010ae <__aeabi_fsub+0x242>
 8000f9c:	20fe      	movs	r0, #254	@ 0xfe
 8000f9e:	1c6a      	adds	r2, r5, #1
 8000fa0:	4210      	tst	r0, r2
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_fsub+0x13a>
 8000fa4:	e092      	b.n	80010cc <__aeabi_fsub+0x260>
 8000fa6:	2d00      	cmp	r5, #0
 8000fa8:	d000      	beq.n	8000fac <__aeabi_fsub+0x140>
 8000faa:	e0a4      	b.n	80010f6 <__aeabi_fsub+0x28a>
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_fsub+0x146>
 8000fb0:	e0cb      	b.n	800114a <__aeabi_fsub+0x2de>
 8000fb2:	2e00      	cmp	r6, #0
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_fsub+0x14c>
 8000fb6:	e0ca      	b.n	800114e <__aeabi_fsub+0x2e2>
 8000fb8:	2200      	movs	r2, #0
 8000fba:	08db      	lsrs	r3, r3, #3
 8000fbc:	025b      	lsls	r3, r3, #9
 8000fbe:	0a5b      	lsrs	r3, r3, #9
 8000fc0:	b2d0      	uxtb	r0, r2
 8000fc2:	e7cb      	b.n	8000f5c <__aeabi_fsub+0xf0>
 8000fc4:	0031      	movs	r1, r6
 8000fc6:	2020      	movs	r0, #32
 8000fc8:	40d1      	lsrs	r1, r2
 8000fca:	1a82      	subs	r2, r0, r2
 8000fcc:	4096      	lsls	r6, r2
 8000fce:	0032      	movs	r2, r6
 8000fd0:	1e50      	subs	r0, r2, #1
 8000fd2:	4182      	sbcs	r2, r0
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	189b      	adds	r3, r3, r2
 8000fd8:	015a      	lsls	r2, r3, #5
 8000fda:	d5ae      	bpl.n	8000f3a <__aeabi_fsub+0xce>
 8000fdc:	1c6a      	adds	r2, r5, #1
 8000fde:	2dfe      	cmp	r5, #254	@ 0xfe
 8000fe0:	d14a      	bne.n	8001078 <__aeabi_fsub+0x20c>
 8000fe2:	20ff      	movs	r0, #255	@ 0xff
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e7b9      	b.n	8000f5c <__aeabi_fsub+0xf0>
 8000fe8:	22ff      	movs	r2, #255	@ 0xff
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d14b      	bne.n	8001086 <__aeabi_fsub+0x21a>
 8000fee:	000c      	movs	r4, r1
 8000ff0:	0033      	movs	r3, r6
 8000ff2:	08db      	lsrs	r3, r3, #3
 8000ff4:	2aff      	cmp	r2, #255	@ 0xff
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x18e>
 8000ff8:	e781      	b.n	8000efe <__aeabi_fsub+0x92>
 8000ffa:	e7df      	b.n	8000fbc <__aeabi_fsub+0x150>
 8000ffc:	019f      	lsls	r7, r3, #6
 8000ffe:	09bf      	lsrs	r7, r7, #6
 8001000:	0038      	movs	r0, r7
 8001002:	f002 f849 	bl	8003098 <__clzsi2>
 8001006:	3805      	subs	r0, #5
 8001008:	4087      	lsls	r7, r0
 800100a:	4285      	cmp	r5, r0
 800100c:	dc21      	bgt.n	8001052 <__aeabi_fsub+0x1e6>
 800100e:	003b      	movs	r3, r7
 8001010:	2120      	movs	r1, #32
 8001012:	1b42      	subs	r2, r0, r5
 8001014:	3201      	adds	r2, #1
 8001016:	40d3      	lsrs	r3, r2
 8001018:	1a8a      	subs	r2, r1, r2
 800101a:	4097      	lsls	r7, r2
 800101c:	1e7a      	subs	r2, r7, #1
 800101e:	4197      	sbcs	r7, r2
 8001020:	2200      	movs	r2, #0
 8001022:	433b      	orrs	r3, r7
 8001024:	0759      	lsls	r1, r3, #29
 8001026:	d000      	beq.n	800102a <__aeabi_fsub+0x1be>
 8001028:	e78b      	b.n	8000f42 <__aeabi_fsub+0xd6>
 800102a:	e78f      	b.n	8000f4c <__aeabi_fsub+0xe0>
 800102c:	20fe      	movs	r0, #254	@ 0xfe
 800102e:	1c6a      	adds	r2, r5, #1
 8001030:	4210      	tst	r0, r2
 8001032:	d112      	bne.n	800105a <__aeabi_fsub+0x1ee>
 8001034:	2d00      	cmp	r5, #0
 8001036:	d152      	bne.n	80010de <__aeabi_fsub+0x272>
 8001038:	2b00      	cmp	r3, #0
 800103a:	d07c      	beq.n	8001136 <__aeabi_fsub+0x2ca>
 800103c:	2e00      	cmp	r6, #0
 800103e:	d0bb      	beq.n	8000fb8 <__aeabi_fsub+0x14c>
 8001040:	1b9a      	subs	r2, r3, r6
 8001042:	0150      	lsls	r0, r2, #5
 8001044:	d400      	bmi.n	8001048 <__aeabi_fsub+0x1dc>
 8001046:	e08b      	b.n	8001160 <__aeabi_fsub+0x2f4>
 8001048:	2401      	movs	r4, #1
 800104a:	2200      	movs	r2, #0
 800104c:	1af3      	subs	r3, r6, r3
 800104e:	400c      	ands	r4, r1
 8001050:	e7e8      	b.n	8001024 <__aeabi_fsub+0x1b8>
 8001052:	4b56      	ldr	r3, [pc, #344]	@ (80011ac <__aeabi_fsub+0x340>)
 8001054:	1a2a      	subs	r2, r5, r0
 8001056:	403b      	ands	r3, r7
 8001058:	e7e4      	b.n	8001024 <__aeabi_fsub+0x1b8>
 800105a:	1b9f      	subs	r7, r3, r6
 800105c:	017a      	lsls	r2, r7, #5
 800105e:	d446      	bmi.n	80010ee <__aeabi_fsub+0x282>
 8001060:	2f00      	cmp	r7, #0
 8001062:	d1cd      	bne.n	8001000 <__aeabi_fsub+0x194>
 8001064:	2400      	movs	r4, #0
 8001066:	2000      	movs	r0, #0
 8001068:	2300      	movs	r3, #0
 800106a:	e777      	b.n	8000f5c <__aeabi_fsub+0xf0>
 800106c:	199b      	adds	r3, r3, r6
 800106e:	2501      	movs	r5, #1
 8001070:	3201      	adds	r2, #1
 8001072:	0159      	lsls	r1, r3, #5
 8001074:	d400      	bmi.n	8001078 <__aeabi_fsub+0x20c>
 8001076:	e760      	b.n	8000f3a <__aeabi_fsub+0xce>
 8001078:	2101      	movs	r1, #1
 800107a:	484d      	ldr	r0, [pc, #308]	@ (80011b0 <__aeabi_fsub+0x344>)
 800107c:	4019      	ands	r1, r3
 800107e:	085b      	lsrs	r3, r3, #1
 8001080:	4003      	ands	r3, r0
 8001082:	430b      	orrs	r3, r1
 8001084:	e7ce      	b.n	8001024 <__aeabi_fsub+0x1b8>
 8001086:	1e57      	subs	r7, r2, #1
 8001088:	2a01      	cmp	r2, #1
 800108a:	d05a      	beq.n	8001142 <__aeabi_fsub+0x2d6>
 800108c:	000c      	movs	r4, r1
 800108e:	2aff      	cmp	r2, #255	@ 0xff
 8001090:	d033      	beq.n	80010fa <__aeabi_fsub+0x28e>
 8001092:	2201      	movs	r2, #1
 8001094:	2f1b      	cmp	r7, #27
 8001096:	dc07      	bgt.n	80010a8 <__aeabi_fsub+0x23c>
 8001098:	2120      	movs	r1, #32
 800109a:	1bc9      	subs	r1, r1, r7
 800109c:	001a      	movs	r2, r3
 800109e:	408b      	lsls	r3, r1
 80010a0:	40fa      	lsrs	r2, r7
 80010a2:	1e59      	subs	r1, r3, #1
 80010a4:	418b      	sbcs	r3, r1
 80010a6:	431a      	orrs	r2, r3
 80010a8:	0005      	movs	r5, r0
 80010aa:	1ab3      	subs	r3, r6, r2
 80010ac:	e743      	b.n	8000f36 <__aeabi_fsub+0xca>
 80010ae:	2d00      	cmp	r5, #0
 80010b0:	d123      	bne.n	80010fa <__aeabi_fsub+0x28e>
 80010b2:	22ff      	movs	r2, #255	@ 0xff
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d09b      	beq.n	8000ff0 <__aeabi_fsub+0x184>
 80010b8:	1e51      	subs	r1, r2, #1
 80010ba:	2a01      	cmp	r2, #1
 80010bc:	d0d6      	beq.n	800106c <__aeabi_fsub+0x200>
 80010be:	2aff      	cmp	r2, #255	@ 0xff
 80010c0:	d01b      	beq.n	80010fa <__aeabi_fsub+0x28e>
 80010c2:	291b      	cmp	r1, #27
 80010c4:	dd2c      	ble.n	8001120 <__aeabi_fsub+0x2b4>
 80010c6:	0002      	movs	r2, r0
 80010c8:	1c73      	adds	r3, r6, #1
 80010ca:	e73a      	b.n	8000f42 <__aeabi_fsub+0xd6>
 80010cc:	2aff      	cmp	r2, #255	@ 0xff
 80010ce:	d088      	beq.n	8000fe2 <__aeabi_fsub+0x176>
 80010d0:	199b      	adds	r3, r3, r6
 80010d2:	085b      	lsrs	r3, r3, #1
 80010d4:	0759      	lsls	r1, r3, #29
 80010d6:	d000      	beq.n	80010da <__aeabi_fsub+0x26e>
 80010d8:	e733      	b.n	8000f42 <__aeabi_fsub+0xd6>
 80010da:	08db      	lsrs	r3, r3, #3
 80010dc:	e76e      	b.n	8000fbc <__aeabi_fsub+0x150>
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d110      	bne.n	8001104 <__aeabi_fsub+0x298>
 80010e2:	2e00      	cmp	r6, #0
 80010e4:	d043      	beq.n	800116e <__aeabi_fsub+0x302>
 80010e6:	2401      	movs	r4, #1
 80010e8:	0033      	movs	r3, r6
 80010ea:	400c      	ands	r4, r1
 80010ec:	e706      	b.n	8000efc <__aeabi_fsub+0x90>
 80010ee:	2401      	movs	r4, #1
 80010f0:	1af7      	subs	r7, r6, r3
 80010f2:	400c      	ands	r4, r1
 80010f4:	e784      	b.n	8001000 <__aeabi_fsub+0x194>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d104      	bne.n	8001104 <__aeabi_fsub+0x298>
 80010fa:	0033      	movs	r3, r6
 80010fc:	e6fe      	b.n	8000efc <__aeabi_fsub+0x90>
 80010fe:	2501      	movs	r5, #1
 8001100:	1b9b      	subs	r3, r3, r6
 8001102:	e718      	b.n	8000f36 <__aeabi_fsub+0xca>
 8001104:	2e00      	cmp	r6, #0
 8001106:	d100      	bne.n	800110a <__aeabi_fsub+0x29e>
 8001108:	e6f8      	b.n	8000efc <__aeabi_fsub+0x90>
 800110a:	2280      	movs	r2, #128	@ 0x80
 800110c:	03d2      	lsls	r2, r2, #15
 800110e:	4297      	cmp	r7, r2
 8001110:	d304      	bcc.n	800111c <__aeabi_fsub+0x2b0>
 8001112:	4594      	cmp	ip, r2
 8001114:	d202      	bcs.n	800111c <__aeabi_fsub+0x2b0>
 8001116:	2401      	movs	r4, #1
 8001118:	0033      	movs	r3, r6
 800111a:	400c      	ands	r4, r1
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	e6f1      	b.n	8000f04 <__aeabi_fsub+0x98>
 8001120:	001a      	movs	r2, r3
 8001122:	2520      	movs	r5, #32
 8001124:	40ca      	lsrs	r2, r1
 8001126:	1a69      	subs	r1, r5, r1
 8001128:	408b      	lsls	r3, r1
 800112a:	1e59      	subs	r1, r3, #1
 800112c:	418b      	sbcs	r3, r1
 800112e:	4313      	orrs	r3, r2
 8001130:	0005      	movs	r5, r0
 8001132:	199b      	adds	r3, r3, r6
 8001134:	e750      	b.n	8000fd8 <__aeabi_fsub+0x16c>
 8001136:	2e00      	cmp	r6, #0
 8001138:	d094      	beq.n	8001064 <__aeabi_fsub+0x1f8>
 800113a:	2401      	movs	r4, #1
 800113c:	0033      	movs	r3, r6
 800113e:	400c      	ands	r4, r1
 8001140:	e73a      	b.n	8000fb8 <__aeabi_fsub+0x14c>
 8001142:	000c      	movs	r4, r1
 8001144:	2501      	movs	r5, #1
 8001146:	1af3      	subs	r3, r6, r3
 8001148:	e6f5      	b.n	8000f36 <__aeabi_fsub+0xca>
 800114a:	0033      	movs	r3, r6
 800114c:	e734      	b.n	8000fb8 <__aeabi_fsub+0x14c>
 800114e:	199b      	adds	r3, r3, r6
 8001150:	2200      	movs	r2, #0
 8001152:	0159      	lsls	r1, r3, #5
 8001154:	d5c1      	bpl.n	80010da <__aeabi_fsub+0x26e>
 8001156:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <__aeabi_fsub+0x340>)
 8001158:	4013      	ands	r3, r2
 800115a:	08db      	lsrs	r3, r3, #3
 800115c:	2201      	movs	r2, #1
 800115e:	e72d      	b.n	8000fbc <__aeabi_fsub+0x150>
 8001160:	2a00      	cmp	r2, #0
 8001162:	d100      	bne.n	8001166 <__aeabi_fsub+0x2fa>
 8001164:	e77e      	b.n	8001064 <__aeabi_fsub+0x1f8>
 8001166:	0013      	movs	r3, r2
 8001168:	2200      	movs	r2, #0
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	e726      	b.n	8000fbc <__aeabi_fsub+0x150>
 800116e:	2380      	movs	r3, #128	@ 0x80
 8001170:	2400      	movs	r4, #0
 8001172:	20ff      	movs	r0, #255	@ 0xff
 8001174:	03db      	lsls	r3, r3, #15
 8001176:	e6f1      	b.n	8000f5c <__aeabi_fsub+0xf0>
 8001178:	2a00      	cmp	r2, #0
 800117a:	d100      	bne.n	800117e <__aeabi_fsub+0x312>
 800117c:	e756      	b.n	800102c <__aeabi_fsub+0x1c0>
 800117e:	1b47      	subs	r7, r0, r5
 8001180:	003a      	movs	r2, r7
 8001182:	2d00      	cmp	r5, #0
 8001184:	d100      	bne.n	8001188 <__aeabi_fsub+0x31c>
 8001186:	e730      	b.n	8000fea <__aeabi_fsub+0x17e>
 8001188:	2280      	movs	r2, #128	@ 0x80
 800118a:	04d2      	lsls	r2, r2, #19
 800118c:	000c      	movs	r4, r1
 800118e:	4313      	orrs	r3, r2
 8001190:	e77f      	b.n	8001092 <__aeabi_fsub+0x226>
 8001192:	2a00      	cmp	r2, #0
 8001194:	d100      	bne.n	8001198 <__aeabi_fsub+0x32c>
 8001196:	e701      	b.n	8000f9c <__aeabi_fsub+0x130>
 8001198:	1b41      	subs	r1, r0, r5
 800119a:	2d00      	cmp	r5, #0
 800119c:	d101      	bne.n	80011a2 <__aeabi_fsub+0x336>
 800119e:	000a      	movs	r2, r1
 80011a0:	e788      	b.n	80010b4 <__aeabi_fsub+0x248>
 80011a2:	2280      	movs	r2, #128	@ 0x80
 80011a4:	04d2      	lsls	r2, r2, #19
 80011a6:	4313      	orrs	r3, r2
 80011a8:	e78b      	b.n	80010c2 <__aeabi_fsub+0x256>
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	fbffffff 	.word	0xfbffffff
 80011b0:	7dffffff 	.word	0x7dffffff

080011b4 <__aeabi_f2iz>:
 80011b4:	0241      	lsls	r1, r0, #9
 80011b6:	0042      	lsls	r2, r0, #1
 80011b8:	0fc3      	lsrs	r3, r0, #31
 80011ba:	0a49      	lsrs	r1, r1, #9
 80011bc:	2000      	movs	r0, #0
 80011be:	0e12      	lsrs	r2, r2, #24
 80011c0:	2a7e      	cmp	r2, #126	@ 0x7e
 80011c2:	dd03      	ble.n	80011cc <__aeabi_f2iz+0x18>
 80011c4:	2a9d      	cmp	r2, #157	@ 0x9d
 80011c6:	dd02      	ble.n	80011ce <__aeabi_f2iz+0x1a>
 80011c8:	4a09      	ldr	r2, [pc, #36]	@ (80011f0 <__aeabi_f2iz+0x3c>)
 80011ca:	1898      	adds	r0, r3, r2
 80011cc:	4770      	bx	lr
 80011ce:	2080      	movs	r0, #128	@ 0x80
 80011d0:	0400      	lsls	r0, r0, #16
 80011d2:	4301      	orrs	r1, r0
 80011d4:	2a95      	cmp	r2, #149	@ 0x95
 80011d6:	dc07      	bgt.n	80011e8 <__aeabi_f2iz+0x34>
 80011d8:	2096      	movs	r0, #150	@ 0x96
 80011da:	1a82      	subs	r2, r0, r2
 80011dc:	40d1      	lsrs	r1, r2
 80011de:	4248      	negs	r0, r1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f3      	bne.n	80011cc <__aeabi_f2iz+0x18>
 80011e4:	0008      	movs	r0, r1
 80011e6:	e7f1      	b.n	80011cc <__aeabi_f2iz+0x18>
 80011e8:	3a96      	subs	r2, #150	@ 0x96
 80011ea:	4091      	lsls	r1, r2
 80011ec:	e7f7      	b.n	80011de <__aeabi_f2iz+0x2a>
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	7fffffff 	.word	0x7fffffff

080011f4 <__aeabi_i2f>:
 80011f4:	b570      	push	{r4, r5, r6, lr}
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d013      	beq.n	8001222 <__aeabi_i2f+0x2e>
 80011fa:	17c3      	asrs	r3, r0, #31
 80011fc:	18c5      	adds	r5, r0, r3
 80011fe:	405d      	eors	r5, r3
 8001200:	0fc4      	lsrs	r4, r0, #31
 8001202:	0028      	movs	r0, r5
 8001204:	f001 ff48 	bl	8003098 <__clzsi2>
 8001208:	239e      	movs	r3, #158	@ 0x9e
 800120a:	0001      	movs	r1, r0
 800120c:	1a1b      	subs	r3, r3, r0
 800120e:	2b96      	cmp	r3, #150	@ 0x96
 8001210:	dc0f      	bgt.n	8001232 <__aeabi_i2f+0x3e>
 8001212:	2808      	cmp	r0, #8
 8001214:	d034      	beq.n	8001280 <__aeabi_i2f+0x8c>
 8001216:	3908      	subs	r1, #8
 8001218:	408d      	lsls	r5, r1
 800121a:	026d      	lsls	r5, r5, #9
 800121c:	0a6d      	lsrs	r5, r5, #9
 800121e:	b2d8      	uxtb	r0, r3
 8001220:	e002      	b.n	8001228 <__aeabi_i2f+0x34>
 8001222:	2400      	movs	r4, #0
 8001224:	2000      	movs	r0, #0
 8001226:	2500      	movs	r5, #0
 8001228:	05c0      	lsls	r0, r0, #23
 800122a:	4328      	orrs	r0, r5
 800122c:	07e4      	lsls	r4, r4, #31
 800122e:	4320      	orrs	r0, r4
 8001230:	bd70      	pop	{r4, r5, r6, pc}
 8001232:	2b99      	cmp	r3, #153	@ 0x99
 8001234:	dc16      	bgt.n	8001264 <__aeabi_i2f+0x70>
 8001236:	1f42      	subs	r2, r0, #5
 8001238:	2805      	cmp	r0, #5
 800123a:	d000      	beq.n	800123e <__aeabi_i2f+0x4a>
 800123c:	4095      	lsls	r5, r2
 800123e:	002a      	movs	r2, r5
 8001240:	4811      	ldr	r0, [pc, #68]	@ (8001288 <__aeabi_i2f+0x94>)
 8001242:	4002      	ands	r2, r0
 8001244:	076e      	lsls	r6, r5, #29
 8001246:	d009      	beq.n	800125c <__aeabi_i2f+0x68>
 8001248:	260f      	movs	r6, #15
 800124a:	4035      	ands	r5, r6
 800124c:	2d04      	cmp	r5, #4
 800124e:	d005      	beq.n	800125c <__aeabi_i2f+0x68>
 8001250:	3204      	adds	r2, #4
 8001252:	0155      	lsls	r5, r2, #5
 8001254:	d502      	bpl.n	800125c <__aeabi_i2f+0x68>
 8001256:	239f      	movs	r3, #159	@ 0x9f
 8001258:	4002      	ands	r2, r0
 800125a:	1a5b      	subs	r3, r3, r1
 800125c:	0192      	lsls	r2, r2, #6
 800125e:	0a55      	lsrs	r5, r2, #9
 8001260:	b2d8      	uxtb	r0, r3
 8001262:	e7e1      	b.n	8001228 <__aeabi_i2f+0x34>
 8001264:	2205      	movs	r2, #5
 8001266:	1a12      	subs	r2, r2, r0
 8001268:	0028      	movs	r0, r5
 800126a:	40d0      	lsrs	r0, r2
 800126c:	0002      	movs	r2, r0
 800126e:	0008      	movs	r0, r1
 8001270:	301b      	adds	r0, #27
 8001272:	4085      	lsls	r5, r0
 8001274:	0028      	movs	r0, r5
 8001276:	1e45      	subs	r5, r0, #1
 8001278:	41a8      	sbcs	r0, r5
 800127a:	4302      	orrs	r2, r0
 800127c:	0015      	movs	r5, r2
 800127e:	e7de      	b.n	800123e <__aeabi_i2f+0x4a>
 8001280:	026d      	lsls	r5, r5, #9
 8001282:	2096      	movs	r0, #150	@ 0x96
 8001284:	0a6d      	lsrs	r5, r5, #9
 8001286:	e7cf      	b.n	8001228 <__aeabi_i2f+0x34>
 8001288:	fbffffff 	.word	0xfbffffff

0800128c <__aeabi_dadd>:
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	4657      	mov	r7, sl
 8001290:	464e      	mov	r6, r9
 8001292:	4645      	mov	r5, r8
 8001294:	46de      	mov	lr, fp
 8001296:	b5e0      	push	{r5, r6, r7, lr}
 8001298:	b083      	sub	sp, #12
 800129a:	9000      	str	r0, [sp, #0]
 800129c:	9101      	str	r1, [sp, #4]
 800129e:	030c      	lsls	r4, r1, #12
 80012a0:	004f      	lsls	r7, r1, #1
 80012a2:	0fce      	lsrs	r6, r1, #31
 80012a4:	0a61      	lsrs	r1, r4, #9
 80012a6:	9c00      	ldr	r4, [sp, #0]
 80012a8:	031d      	lsls	r5, r3, #12
 80012aa:	0f64      	lsrs	r4, r4, #29
 80012ac:	430c      	orrs	r4, r1
 80012ae:	9900      	ldr	r1, [sp, #0]
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	00c8      	lsls	r0, r1, #3
 80012b6:	0059      	lsls	r1, r3, #1
 80012b8:	0d4b      	lsrs	r3, r1, #21
 80012ba:	4699      	mov	r9, r3
 80012bc:	9a00      	ldr	r2, [sp, #0]
 80012be:	9b01      	ldr	r3, [sp, #4]
 80012c0:	0a6d      	lsrs	r5, r5, #9
 80012c2:	0fd9      	lsrs	r1, r3, #31
 80012c4:	0f53      	lsrs	r3, r2, #29
 80012c6:	432b      	orrs	r3, r5
 80012c8:	469a      	mov	sl, r3
 80012ca:	9b00      	ldr	r3, [sp, #0]
 80012cc:	0d7f      	lsrs	r7, r7, #21
 80012ce:	00da      	lsls	r2, r3, #3
 80012d0:	4694      	mov	ip, r2
 80012d2:	464a      	mov	r2, r9
 80012d4:	46b0      	mov	r8, r6
 80012d6:	1aba      	subs	r2, r7, r2
 80012d8:	428e      	cmp	r6, r1
 80012da:	d100      	bne.n	80012de <__aeabi_dadd+0x52>
 80012dc:	e0b0      	b.n	8001440 <__aeabi_dadd+0x1b4>
 80012de:	2a00      	cmp	r2, #0
 80012e0:	dc00      	bgt.n	80012e4 <__aeabi_dadd+0x58>
 80012e2:	e078      	b.n	80013d6 <__aeabi_dadd+0x14a>
 80012e4:	4649      	mov	r1, r9
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d100      	bne.n	80012ec <__aeabi_dadd+0x60>
 80012ea:	e0e9      	b.n	80014c0 <__aeabi_dadd+0x234>
 80012ec:	49c9      	ldr	r1, [pc, #804]	@ (8001614 <__aeabi_dadd+0x388>)
 80012ee:	428f      	cmp	r7, r1
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dadd+0x68>
 80012f2:	e195      	b.n	8001620 <__aeabi_dadd+0x394>
 80012f4:	2501      	movs	r5, #1
 80012f6:	2a38      	cmp	r2, #56	@ 0x38
 80012f8:	dc16      	bgt.n	8001328 <__aeabi_dadd+0x9c>
 80012fa:	2180      	movs	r1, #128	@ 0x80
 80012fc:	4653      	mov	r3, sl
 80012fe:	0409      	lsls	r1, r1, #16
 8001300:	430b      	orrs	r3, r1
 8001302:	469a      	mov	sl, r3
 8001304:	2a1f      	cmp	r2, #31
 8001306:	dd00      	ble.n	800130a <__aeabi_dadd+0x7e>
 8001308:	e1e7      	b.n	80016da <__aeabi_dadd+0x44e>
 800130a:	2120      	movs	r1, #32
 800130c:	4655      	mov	r5, sl
 800130e:	1a8b      	subs	r3, r1, r2
 8001310:	4661      	mov	r1, ip
 8001312:	409d      	lsls	r5, r3
 8001314:	40d1      	lsrs	r1, r2
 8001316:	430d      	orrs	r5, r1
 8001318:	4661      	mov	r1, ip
 800131a:	4099      	lsls	r1, r3
 800131c:	1e4b      	subs	r3, r1, #1
 800131e:	4199      	sbcs	r1, r3
 8001320:	4653      	mov	r3, sl
 8001322:	40d3      	lsrs	r3, r2
 8001324:	430d      	orrs	r5, r1
 8001326:	1ae4      	subs	r4, r4, r3
 8001328:	1b45      	subs	r5, r0, r5
 800132a:	42a8      	cmp	r0, r5
 800132c:	4180      	sbcs	r0, r0
 800132e:	4240      	negs	r0, r0
 8001330:	1a24      	subs	r4, r4, r0
 8001332:	0223      	lsls	r3, r4, #8
 8001334:	d400      	bmi.n	8001338 <__aeabi_dadd+0xac>
 8001336:	e10f      	b.n	8001558 <__aeabi_dadd+0x2cc>
 8001338:	0264      	lsls	r4, r4, #9
 800133a:	0a64      	lsrs	r4, r4, #9
 800133c:	2c00      	cmp	r4, #0
 800133e:	d100      	bne.n	8001342 <__aeabi_dadd+0xb6>
 8001340:	e139      	b.n	80015b6 <__aeabi_dadd+0x32a>
 8001342:	0020      	movs	r0, r4
 8001344:	f001 fea8 	bl	8003098 <__clzsi2>
 8001348:	0003      	movs	r3, r0
 800134a:	3b08      	subs	r3, #8
 800134c:	2120      	movs	r1, #32
 800134e:	0028      	movs	r0, r5
 8001350:	1aca      	subs	r2, r1, r3
 8001352:	40d0      	lsrs	r0, r2
 8001354:	409c      	lsls	r4, r3
 8001356:	0002      	movs	r2, r0
 8001358:	409d      	lsls	r5, r3
 800135a:	4322      	orrs	r2, r4
 800135c:	429f      	cmp	r7, r3
 800135e:	dd00      	ble.n	8001362 <__aeabi_dadd+0xd6>
 8001360:	e173      	b.n	800164a <__aeabi_dadd+0x3be>
 8001362:	1bd8      	subs	r0, r3, r7
 8001364:	3001      	adds	r0, #1
 8001366:	1a09      	subs	r1, r1, r0
 8001368:	002c      	movs	r4, r5
 800136a:	408d      	lsls	r5, r1
 800136c:	40c4      	lsrs	r4, r0
 800136e:	1e6b      	subs	r3, r5, #1
 8001370:	419d      	sbcs	r5, r3
 8001372:	0013      	movs	r3, r2
 8001374:	40c2      	lsrs	r2, r0
 8001376:	408b      	lsls	r3, r1
 8001378:	4325      	orrs	r5, r4
 800137a:	2700      	movs	r7, #0
 800137c:	0014      	movs	r4, r2
 800137e:	431d      	orrs	r5, r3
 8001380:	076b      	lsls	r3, r5, #29
 8001382:	d009      	beq.n	8001398 <__aeabi_dadd+0x10c>
 8001384:	230f      	movs	r3, #15
 8001386:	402b      	ands	r3, r5
 8001388:	2b04      	cmp	r3, #4
 800138a:	d005      	beq.n	8001398 <__aeabi_dadd+0x10c>
 800138c:	1d2b      	adds	r3, r5, #4
 800138e:	42ab      	cmp	r3, r5
 8001390:	41ad      	sbcs	r5, r5
 8001392:	426d      	negs	r5, r5
 8001394:	1964      	adds	r4, r4, r5
 8001396:	001d      	movs	r5, r3
 8001398:	0223      	lsls	r3, r4, #8
 800139a:	d400      	bmi.n	800139e <__aeabi_dadd+0x112>
 800139c:	e12d      	b.n	80015fa <__aeabi_dadd+0x36e>
 800139e:	4a9d      	ldr	r2, [pc, #628]	@ (8001614 <__aeabi_dadd+0x388>)
 80013a0:	3701      	adds	r7, #1
 80013a2:	4297      	cmp	r7, r2
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dadd+0x11c>
 80013a6:	e0d3      	b.n	8001550 <__aeabi_dadd+0x2c4>
 80013a8:	4646      	mov	r6, r8
 80013aa:	499b      	ldr	r1, [pc, #620]	@ (8001618 <__aeabi_dadd+0x38c>)
 80013ac:	08ed      	lsrs	r5, r5, #3
 80013ae:	4021      	ands	r1, r4
 80013b0:	074a      	lsls	r2, r1, #29
 80013b2:	432a      	orrs	r2, r5
 80013b4:	057c      	lsls	r4, r7, #21
 80013b6:	024d      	lsls	r5, r1, #9
 80013b8:	0b2d      	lsrs	r5, r5, #12
 80013ba:	0d64      	lsrs	r4, r4, #21
 80013bc:	0524      	lsls	r4, r4, #20
 80013be:	432c      	orrs	r4, r5
 80013c0:	07f6      	lsls	r6, r6, #31
 80013c2:	4334      	orrs	r4, r6
 80013c4:	0010      	movs	r0, r2
 80013c6:	0021      	movs	r1, r4
 80013c8:	b003      	add	sp, #12
 80013ca:	bcf0      	pop	{r4, r5, r6, r7}
 80013cc:	46bb      	mov	fp, r7
 80013ce:	46b2      	mov	sl, r6
 80013d0:	46a9      	mov	r9, r5
 80013d2:	46a0      	mov	r8, r4
 80013d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d6:	2a00      	cmp	r2, #0
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x150>
 80013da:	e084      	b.n	80014e6 <__aeabi_dadd+0x25a>
 80013dc:	464a      	mov	r2, r9
 80013de:	1bd2      	subs	r2, r2, r7
 80013e0:	2f00      	cmp	r7, #0
 80013e2:	d000      	beq.n	80013e6 <__aeabi_dadd+0x15a>
 80013e4:	e16d      	b.n	80016c2 <__aeabi_dadd+0x436>
 80013e6:	0025      	movs	r5, r4
 80013e8:	4305      	orrs	r5, r0
 80013ea:	d100      	bne.n	80013ee <__aeabi_dadd+0x162>
 80013ec:	e127      	b.n	800163e <__aeabi_dadd+0x3b2>
 80013ee:	1e56      	subs	r6, r2, #1
 80013f0:	2a01      	cmp	r2, #1
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dadd+0x16a>
 80013f4:	e23b      	b.n	800186e <__aeabi_dadd+0x5e2>
 80013f6:	4d87      	ldr	r5, [pc, #540]	@ (8001614 <__aeabi_dadd+0x388>)
 80013f8:	42aa      	cmp	r2, r5
 80013fa:	d100      	bne.n	80013fe <__aeabi_dadd+0x172>
 80013fc:	e26a      	b.n	80018d4 <__aeabi_dadd+0x648>
 80013fe:	2501      	movs	r5, #1
 8001400:	2e38      	cmp	r6, #56	@ 0x38
 8001402:	dc12      	bgt.n	800142a <__aeabi_dadd+0x19e>
 8001404:	0032      	movs	r2, r6
 8001406:	2a1f      	cmp	r2, #31
 8001408:	dd00      	ble.n	800140c <__aeabi_dadd+0x180>
 800140a:	e1f8      	b.n	80017fe <__aeabi_dadd+0x572>
 800140c:	2620      	movs	r6, #32
 800140e:	0025      	movs	r5, r4
 8001410:	1ab6      	subs	r6, r6, r2
 8001412:	0007      	movs	r7, r0
 8001414:	4653      	mov	r3, sl
 8001416:	40b0      	lsls	r0, r6
 8001418:	40d4      	lsrs	r4, r2
 800141a:	40b5      	lsls	r5, r6
 800141c:	40d7      	lsrs	r7, r2
 800141e:	1e46      	subs	r6, r0, #1
 8001420:	41b0      	sbcs	r0, r6
 8001422:	1b1b      	subs	r3, r3, r4
 8001424:	469a      	mov	sl, r3
 8001426:	433d      	orrs	r5, r7
 8001428:	4305      	orrs	r5, r0
 800142a:	4662      	mov	r2, ip
 800142c:	1b55      	subs	r5, r2, r5
 800142e:	45ac      	cmp	ip, r5
 8001430:	4192      	sbcs	r2, r2
 8001432:	4653      	mov	r3, sl
 8001434:	4252      	negs	r2, r2
 8001436:	000e      	movs	r6, r1
 8001438:	464f      	mov	r7, r9
 800143a:	4688      	mov	r8, r1
 800143c:	1a9c      	subs	r4, r3, r2
 800143e:	e778      	b.n	8001332 <__aeabi_dadd+0xa6>
 8001440:	2a00      	cmp	r2, #0
 8001442:	dc00      	bgt.n	8001446 <__aeabi_dadd+0x1ba>
 8001444:	e08e      	b.n	8001564 <__aeabi_dadd+0x2d8>
 8001446:	4649      	mov	r1, r9
 8001448:	2900      	cmp	r1, #0
 800144a:	d175      	bne.n	8001538 <__aeabi_dadd+0x2ac>
 800144c:	4661      	mov	r1, ip
 800144e:	4653      	mov	r3, sl
 8001450:	4319      	orrs	r1, r3
 8001452:	d100      	bne.n	8001456 <__aeabi_dadd+0x1ca>
 8001454:	e0f6      	b.n	8001644 <__aeabi_dadd+0x3b8>
 8001456:	1e51      	subs	r1, r2, #1
 8001458:	2a01      	cmp	r2, #1
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x1d2>
 800145c:	e191      	b.n	8001782 <__aeabi_dadd+0x4f6>
 800145e:	4d6d      	ldr	r5, [pc, #436]	@ (8001614 <__aeabi_dadd+0x388>)
 8001460:	42aa      	cmp	r2, r5
 8001462:	d100      	bne.n	8001466 <__aeabi_dadd+0x1da>
 8001464:	e0dc      	b.n	8001620 <__aeabi_dadd+0x394>
 8001466:	2501      	movs	r5, #1
 8001468:	2938      	cmp	r1, #56	@ 0x38
 800146a:	dc14      	bgt.n	8001496 <__aeabi_dadd+0x20a>
 800146c:	000a      	movs	r2, r1
 800146e:	2a1f      	cmp	r2, #31
 8001470:	dd00      	ble.n	8001474 <__aeabi_dadd+0x1e8>
 8001472:	e1a2      	b.n	80017ba <__aeabi_dadd+0x52e>
 8001474:	2120      	movs	r1, #32
 8001476:	4653      	mov	r3, sl
 8001478:	1a89      	subs	r1, r1, r2
 800147a:	408b      	lsls	r3, r1
 800147c:	001d      	movs	r5, r3
 800147e:	4663      	mov	r3, ip
 8001480:	40d3      	lsrs	r3, r2
 8001482:	431d      	orrs	r5, r3
 8001484:	4663      	mov	r3, ip
 8001486:	408b      	lsls	r3, r1
 8001488:	0019      	movs	r1, r3
 800148a:	1e4b      	subs	r3, r1, #1
 800148c:	4199      	sbcs	r1, r3
 800148e:	4653      	mov	r3, sl
 8001490:	40d3      	lsrs	r3, r2
 8001492:	430d      	orrs	r5, r1
 8001494:	18e4      	adds	r4, r4, r3
 8001496:	182d      	adds	r5, r5, r0
 8001498:	4285      	cmp	r5, r0
 800149a:	4180      	sbcs	r0, r0
 800149c:	4240      	negs	r0, r0
 800149e:	1824      	adds	r4, r4, r0
 80014a0:	0223      	lsls	r3, r4, #8
 80014a2:	d559      	bpl.n	8001558 <__aeabi_dadd+0x2cc>
 80014a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001614 <__aeabi_dadd+0x388>)
 80014a6:	3701      	adds	r7, #1
 80014a8:	429f      	cmp	r7, r3
 80014aa:	d051      	beq.n	8001550 <__aeabi_dadd+0x2c4>
 80014ac:	2101      	movs	r1, #1
 80014ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001618 <__aeabi_dadd+0x38c>)
 80014b0:	086a      	lsrs	r2, r5, #1
 80014b2:	401c      	ands	r4, r3
 80014b4:	4029      	ands	r1, r5
 80014b6:	430a      	orrs	r2, r1
 80014b8:	07e5      	lsls	r5, r4, #31
 80014ba:	4315      	orrs	r5, r2
 80014bc:	0864      	lsrs	r4, r4, #1
 80014be:	e75f      	b.n	8001380 <__aeabi_dadd+0xf4>
 80014c0:	4661      	mov	r1, ip
 80014c2:	4653      	mov	r3, sl
 80014c4:	4319      	orrs	r1, r3
 80014c6:	d100      	bne.n	80014ca <__aeabi_dadd+0x23e>
 80014c8:	e0bc      	b.n	8001644 <__aeabi_dadd+0x3b8>
 80014ca:	1e51      	subs	r1, r2, #1
 80014cc:	2a01      	cmp	r2, #1
 80014ce:	d100      	bne.n	80014d2 <__aeabi_dadd+0x246>
 80014d0:	e164      	b.n	800179c <__aeabi_dadd+0x510>
 80014d2:	4d50      	ldr	r5, [pc, #320]	@ (8001614 <__aeabi_dadd+0x388>)
 80014d4:	42aa      	cmp	r2, r5
 80014d6:	d100      	bne.n	80014da <__aeabi_dadd+0x24e>
 80014d8:	e16a      	b.n	80017b0 <__aeabi_dadd+0x524>
 80014da:	2501      	movs	r5, #1
 80014dc:	2938      	cmp	r1, #56	@ 0x38
 80014de:	dd00      	ble.n	80014e2 <__aeabi_dadd+0x256>
 80014e0:	e722      	b.n	8001328 <__aeabi_dadd+0x9c>
 80014e2:	000a      	movs	r2, r1
 80014e4:	e70e      	b.n	8001304 <__aeabi_dadd+0x78>
 80014e6:	4a4d      	ldr	r2, [pc, #308]	@ (800161c <__aeabi_dadd+0x390>)
 80014e8:	1c7d      	adds	r5, r7, #1
 80014ea:	4215      	tst	r5, r2
 80014ec:	d000      	beq.n	80014f0 <__aeabi_dadd+0x264>
 80014ee:	e0d0      	b.n	8001692 <__aeabi_dadd+0x406>
 80014f0:	0025      	movs	r5, r4
 80014f2:	4662      	mov	r2, ip
 80014f4:	4653      	mov	r3, sl
 80014f6:	4305      	orrs	r5, r0
 80014f8:	431a      	orrs	r2, r3
 80014fa:	2f00      	cmp	r7, #0
 80014fc:	d000      	beq.n	8001500 <__aeabi_dadd+0x274>
 80014fe:	e137      	b.n	8001770 <__aeabi_dadd+0x4e4>
 8001500:	2d00      	cmp	r5, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_dadd+0x27a>
 8001504:	e1a8      	b.n	8001858 <__aeabi_dadd+0x5cc>
 8001506:	2a00      	cmp	r2, #0
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x280>
 800150a:	e16a      	b.n	80017e2 <__aeabi_dadd+0x556>
 800150c:	4663      	mov	r3, ip
 800150e:	1ac5      	subs	r5, r0, r3
 8001510:	4653      	mov	r3, sl
 8001512:	1ae2      	subs	r2, r4, r3
 8001514:	42a8      	cmp	r0, r5
 8001516:	419b      	sbcs	r3, r3
 8001518:	425b      	negs	r3, r3
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	021a      	lsls	r2, r3, #8
 800151e:	d400      	bmi.n	8001522 <__aeabi_dadd+0x296>
 8001520:	e203      	b.n	800192a <__aeabi_dadd+0x69e>
 8001522:	4663      	mov	r3, ip
 8001524:	1a1d      	subs	r5, r3, r0
 8001526:	45ac      	cmp	ip, r5
 8001528:	4192      	sbcs	r2, r2
 800152a:	4653      	mov	r3, sl
 800152c:	4252      	negs	r2, r2
 800152e:	1b1c      	subs	r4, r3, r4
 8001530:	000e      	movs	r6, r1
 8001532:	4688      	mov	r8, r1
 8001534:	1aa4      	subs	r4, r4, r2
 8001536:	e723      	b.n	8001380 <__aeabi_dadd+0xf4>
 8001538:	4936      	ldr	r1, [pc, #216]	@ (8001614 <__aeabi_dadd+0x388>)
 800153a:	428f      	cmp	r7, r1
 800153c:	d070      	beq.n	8001620 <__aeabi_dadd+0x394>
 800153e:	2501      	movs	r5, #1
 8001540:	2a38      	cmp	r2, #56	@ 0x38
 8001542:	dca8      	bgt.n	8001496 <__aeabi_dadd+0x20a>
 8001544:	2180      	movs	r1, #128	@ 0x80
 8001546:	4653      	mov	r3, sl
 8001548:	0409      	lsls	r1, r1, #16
 800154a:	430b      	orrs	r3, r1
 800154c:	469a      	mov	sl, r3
 800154e:	e78e      	b.n	800146e <__aeabi_dadd+0x1e2>
 8001550:	003c      	movs	r4, r7
 8001552:	2500      	movs	r5, #0
 8001554:	2200      	movs	r2, #0
 8001556:	e731      	b.n	80013bc <__aeabi_dadd+0x130>
 8001558:	2307      	movs	r3, #7
 800155a:	402b      	ands	r3, r5
 800155c:	2b00      	cmp	r3, #0
 800155e:	d000      	beq.n	8001562 <__aeabi_dadd+0x2d6>
 8001560:	e710      	b.n	8001384 <__aeabi_dadd+0xf8>
 8001562:	e093      	b.n	800168c <__aeabi_dadd+0x400>
 8001564:	2a00      	cmp	r2, #0
 8001566:	d074      	beq.n	8001652 <__aeabi_dadd+0x3c6>
 8001568:	464a      	mov	r2, r9
 800156a:	1bd2      	subs	r2, r2, r7
 800156c:	2f00      	cmp	r7, #0
 800156e:	d100      	bne.n	8001572 <__aeabi_dadd+0x2e6>
 8001570:	e0c7      	b.n	8001702 <__aeabi_dadd+0x476>
 8001572:	4928      	ldr	r1, [pc, #160]	@ (8001614 <__aeabi_dadd+0x388>)
 8001574:	4589      	cmp	r9, r1
 8001576:	d100      	bne.n	800157a <__aeabi_dadd+0x2ee>
 8001578:	e185      	b.n	8001886 <__aeabi_dadd+0x5fa>
 800157a:	2501      	movs	r5, #1
 800157c:	2a38      	cmp	r2, #56	@ 0x38
 800157e:	dc12      	bgt.n	80015a6 <__aeabi_dadd+0x31a>
 8001580:	2180      	movs	r1, #128	@ 0x80
 8001582:	0409      	lsls	r1, r1, #16
 8001584:	430c      	orrs	r4, r1
 8001586:	2a1f      	cmp	r2, #31
 8001588:	dd00      	ble.n	800158c <__aeabi_dadd+0x300>
 800158a:	e1ab      	b.n	80018e4 <__aeabi_dadd+0x658>
 800158c:	2120      	movs	r1, #32
 800158e:	0025      	movs	r5, r4
 8001590:	1a89      	subs	r1, r1, r2
 8001592:	0007      	movs	r7, r0
 8001594:	4088      	lsls	r0, r1
 8001596:	408d      	lsls	r5, r1
 8001598:	40d7      	lsrs	r7, r2
 800159a:	1e41      	subs	r1, r0, #1
 800159c:	4188      	sbcs	r0, r1
 800159e:	40d4      	lsrs	r4, r2
 80015a0:	433d      	orrs	r5, r7
 80015a2:	4305      	orrs	r5, r0
 80015a4:	44a2      	add	sl, r4
 80015a6:	4465      	add	r5, ip
 80015a8:	4565      	cmp	r5, ip
 80015aa:	4192      	sbcs	r2, r2
 80015ac:	4252      	negs	r2, r2
 80015ae:	4452      	add	r2, sl
 80015b0:	0014      	movs	r4, r2
 80015b2:	464f      	mov	r7, r9
 80015b4:	e774      	b.n	80014a0 <__aeabi_dadd+0x214>
 80015b6:	0028      	movs	r0, r5
 80015b8:	f001 fd6e 	bl	8003098 <__clzsi2>
 80015bc:	0003      	movs	r3, r0
 80015be:	3318      	adds	r3, #24
 80015c0:	2b1f      	cmp	r3, #31
 80015c2:	dc00      	bgt.n	80015c6 <__aeabi_dadd+0x33a>
 80015c4:	e6c2      	b.n	800134c <__aeabi_dadd+0xc0>
 80015c6:	002a      	movs	r2, r5
 80015c8:	3808      	subs	r0, #8
 80015ca:	4082      	lsls	r2, r0
 80015cc:	429f      	cmp	r7, r3
 80015ce:	dd00      	ble.n	80015d2 <__aeabi_dadd+0x346>
 80015d0:	e0a9      	b.n	8001726 <__aeabi_dadd+0x49a>
 80015d2:	1bdb      	subs	r3, r3, r7
 80015d4:	1c58      	adds	r0, r3, #1
 80015d6:	281f      	cmp	r0, #31
 80015d8:	dc00      	bgt.n	80015dc <__aeabi_dadd+0x350>
 80015da:	e1ac      	b.n	8001936 <__aeabi_dadd+0x6aa>
 80015dc:	0015      	movs	r5, r2
 80015de:	3b1f      	subs	r3, #31
 80015e0:	40dd      	lsrs	r5, r3
 80015e2:	2820      	cmp	r0, #32
 80015e4:	d005      	beq.n	80015f2 <__aeabi_dadd+0x366>
 80015e6:	2340      	movs	r3, #64	@ 0x40
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	409a      	lsls	r2, r3
 80015ec:	1e53      	subs	r3, r2, #1
 80015ee:	419a      	sbcs	r2, r3
 80015f0:	4315      	orrs	r5, r2
 80015f2:	2307      	movs	r3, #7
 80015f4:	2700      	movs	r7, #0
 80015f6:	402b      	ands	r3, r5
 80015f8:	e7b0      	b.n	800155c <__aeabi_dadd+0x2d0>
 80015fa:	08ed      	lsrs	r5, r5, #3
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <__aeabi_dadd+0x388>)
 80015fe:	0762      	lsls	r2, r4, #29
 8001600:	432a      	orrs	r2, r5
 8001602:	08e4      	lsrs	r4, r4, #3
 8001604:	429f      	cmp	r7, r3
 8001606:	d00f      	beq.n	8001628 <__aeabi_dadd+0x39c>
 8001608:	0324      	lsls	r4, r4, #12
 800160a:	0b25      	lsrs	r5, r4, #12
 800160c:	057c      	lsls	r4, r7, #21
 800160e:	0d64      	lsrs	r4, r4, #21
 8001610:	e6d4      	b.n	80013bc <__aeabi_dadd+0x130>
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	000007ff 	.word	0x000007ff
 8001618:	ff7fffff 	.word	0xff7fffff
 800161c:	000007fe 	.word	0x000007fe
 8001620:	08c0      	lsrs	r0, r0, #3
 8001622:	0762      	lsls	r2, r4, #29
 8001624:	4302      	orrs	r2, r0
 8001626:	08e4      	lsrs	r4, r4, #3
 8001628:	0013      	movs	r3, r2
 800162a:	4323      	orrs	r3, r4
 800162c:	d100      	bne.n	8001630 <__aeabi_dadd+0x3a4>
 800162e:	e186      	b.n	800193e <__aeabi_dadd+0x6b2>
 8001630:	2580      	movs	r5, #128	@ 0x80
 8001632:	032d      	lsls	r5, r5, #12
 8001634:	4325      	orrs	r5, r4
 8001636:	032d      	lsls	r5, r5, #12
 8001638:	4cc3      	ldr	r4, [pc, #780]	@ (8001948 <__aeabi_dadd+0x6bc>)
 800163a:	0b2d      	lsrs	r5, r5, #12
 800163c:	e6be      	b.n	80013bc <__aeabi_dadd+0x130>
 800163e:	4660      	mov	r0, ip
 8001640:	4654      	mov	r4, sl
 8001642:	000e      	movs	r6, r1
 8001644:	0017      	movs	r7, r2
 8001646:	08c5      	lsrs	r5, r0, #3
 8001648:	e7d8      	b.n	80015fc <__aeabi_dadd+0x370>
 800164a:	4cc0      	ldr	r4, [pc, #768]	@ (800194c <__aeabi_dadd+0x6c0>)
 800164c:	1aff      	subs	r7, r7, r3
 800164e:	4014      	ands	r4, r2
 8001650:	e696      	b.n	8001380 <__aeabi_dadd+0xf4>
 8001652:	4abf      	ldr	r2, [pc, #764]	@ (8001950 <__aeabi_dadd+0x6c4>)
 8001654:	1c79      	adds	r1, r7, #1
 8001656:	4211      	tst	r1, r2
 8001658:	d16b      	bne.n	8001732 <__aeabi_dadd+0x4a6>
 800165a:	0022      	movs	r2, r4
 800165c:	4302      	orrs	r2, r0
 800165e:	2f00      	cmp	r7, #0
 8001660:	d000      	beq.n	8001664 <__aeabi_dadd+0x3d8>
 8001662:	e0db      	b.n	800181c <__aeabi_dadd+0x590>
 8001664:	2a00      	cmp	r2, #0
 8001666:	d100      	bne.n	800166a <__aeabi_dadd+0x3de>
 8001668:	e12d      	b.n	80018c6 <__aeabi_dadd+0x63a>
 800166a:	4662      	mov	r2, ip
 800166c:	4653      	mov	r3, sl
 800166e:	431a      	orrs	r2, r3
 8001670:	d100      	bne.n	8001674 <__aeabi_dadd+0x3e8>
 8001672:	e0b6      	b.n	80017e2 <__aeabi_dadd+0x556>
 8001674:	4663      	mov	r3, ip
 8001676:	18c5      	adds	r5, r0, r3
 8001678:	4285      	cmp	r5, r0
 800167a:	4180      	sbcs	r0, r0
 800167c:	4454      	add	r4, sl
 800167e:	4240      	negs	r0, r0
 8001680:	1824      	adds	r4, r4, r0
 8001682:	0223      	lsls	r3, r4, #8
 8001684:	d502      	bpl.n	800168c <__aeabi_dadd+0x400>
 8001686:	000f      	movs	r7, r1
 8001688:	4bb0      	ldr	r3, [pc, #704]	@ (800194c <__aeabi_dadd+0x6c0>)
 800168a:	401c      	ands	r4, r3
 800168c:	003a      	movs	r2, r7
 800168e:	0028      	movs	r0, r5
 8001690:	e7d8      	b.n	8001644 <__aeabi_dadd+0x3b8>
 8001692:	4662      	mov	r2, ip
 8001694:	1a85      	subs	r5, r0, r2
 8001696:	42a8      	cmp	r0, r5
 8001698:	4192      	sbcs	r2, r2
 800169a:	4653      	mov	r3, sl
 800169c:	4252      	negs	r2, r2
 800169e:	4691      	mov	r9, r2
 80016a0:	1ae3      	subs	r3, r4, r3
 80016a2:	001a      	movs	r2, r3
 80016a4:	464b      	mov	r3, r9
 80016a6:	1ad2      	subs	r2, r2, r3
 80016a8:	0013      	movs	r3, r2
 80016aa:	4691      	mov	r9, r2
 80016ac:	021a      	lsls	r2, r3, #8
 80016ae:	d454      	bmi.n	800175a <__aeabi_dadd+0x4ce>
 80016b0:	464a      	mov	r2, r9
 80016b2:	464c      	mov	r4, r9
 80016b4:	432a      	orrs	r2, r5
 80016b6:	d000      	beq.n	80016ba <__aeabi_dadd+0x42e>
 80016b8:	e640      	b.n	800133c <__aeabi_dadd+0xb0>
 80016ba:	2600      	movs	r6, #0
 80016bc:	2400      	movs	r4, #0
 80016be:	2500      	movs	r5, #0
 80016c0:	e67c      	b.n	80013bc <__aeabi_dadd+0x130>
 80016c2:	4da1      	ldr	r5, [pc, #644]	@ (8001948 <__aeabi_dadd+0x6bc>)
 80016c4:	45a9      	cmp	r9, r5
 80016c6:	d100      	bne.n	80016ca <__aeabi_dadd+0x43e>
 80016c8:	e090      	b.n	80017ec <__aeabi_dadd+0x560>
 80016ca:	2501      	movs	r5, #1
 80016cc:	2a38      	cmp	r2, #56	@ 0x38
 80016ce:	dd00      	ble.n	80016d2 <__aeabi_dadd+0x446>
 80016d0:	e6ab      	b.n	800142a <__aeabi_dadd+0x19e>
 80016d2:	2580      	movs	r5, #128	@ 0x80
 80016d4:	042d      	lsls	r5, r5, #16
 80016d6:	432c      	orrs	r4, r5
 80016d8:	e695      	b.n	8001406 <__aeabi_dadd+0x17a>
 80016da:	0011      	movs	r1, r2
 80016dc:	4655      	mov	r5, sl
 80016de:	3920      	subs	r1, #32
 80016e0:	40cd      	lsrs	r5, r1
 80016e2:	46a9      	mov	r9, r5
 80016e4:	2a20      	cmp	r2, #32
 80016e6:	d006      	beq.n	80016f6 <__aeabi_dadd+0x46a>
 80016e8:	2140      	movs	r1, #64	@ 0x40
 80016ea:	4653      	mov	r3, sl
 80016ec:	1a8a      	subs	r2, r1, r2
 80016ee:	4093      	lsls	r3, r2
 80016f0:	4662      	mov	r2, ip
 80016f2:	431a      	orrs	r2, r3
 80016f4:	4694      	mov	ip, r2
 80016f6:	4665      	mov	r5, ip
 80016f8:	1e6b      	subs	r3, r5, #1
 80016fa:	419d      	sbcs	r5, r3
 80016fc:	464b      	mov	r3, r9
 80016fe:	431d      	orrs	r5, r3
 8001700:	e612      	b.n	8001328 <__aeabi_dadd+0x9c>
 8001702:	0021      	movs	r1, r4
 8001704:	4301      	orrs	r1, r0
 8001706:	d100      	bne.n	800170a <__aeabi_dadd+0x47e>
 8001708:	e0c4      	b.n	8001894 <__aeabi_dadd+0x608>
 800170a:	1e51      	subs	r1, r2, #1
 800170c:	2a01      	cmp	r2, #1
 800170e:	d100      	bne.n	8001712 <__aeabi_dadd+0x486>
 8001710:	e0fb      	b.n	800190a <__aeabi_dadd+0x67e>
 8001712:	4d8d      	ldr	r5, [pc, #564]	@ (8001948 <__aeabi_dadd+0x6bc>)
 8001714:	42aa      	cmp	r2, r5
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x48e>
 8001718:	e0b5      	b.n	8001886 <__aeabi_dadd+0x5fa>
 800171a:	2501      	movs	r5, #1
 800171c:	2938      	cmp	r1, #56	@ 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dadd+0x496>
 8001720:	e741      	b.n	80015a6 <__aeabi_dadd+0x31a>
 8001722:	000a      	movs	r2, r1
 8001724:	e72f      	b.n	8001586 <__aeabi_dadd+0x2fa>
 8001726:	4c89      	ldr	r4, [pc, #548]	@ (800194c <__aeabi_dadd+0x6c0>)
 8001728:	1aff      	subs	r7, r7, r3
 800172a:	4014      	ands	r4, r2
 800172c:	0762      	lsls	r2, r4, #29
 800172e:	08e4      	lsrs	r4, r4, #3
 8001730:	e76a      	b.n	8001608 <__aeabi_dadd+0x37c>
 8001732:	4a85      	ldr	r2, [pc, #532]	@ (8001948 <__aeabi_dadd+0x6bc>)
 8001734:	4291      	cmp	r1, r2
 8001736:	d100      	bne.n	800173a <__aeabi_dadd+0x4ae>
 8001738:	e0e3      	b.n	8001902 <__aeabi_dadd+0x676>
 800173a:	4663      	mov	r3, ip
 800173c:	18c2      	adds	r2, r0, r3
 800173e:	4282      	cmp	r2, r0
 8001740:	4180      	sbcs	r0, r0
 8001742:	0023      	movs	r3, r4
 8001744:	4240      	negs	r0, r0
 8001746:	4453      	add	r3, sl
 8001748:	181b      	adds	r3, r3, r0
 800174a:	07dd      	lsls	r5, r3, #31
 800174c:	085c      	lsrs	r4, r3, #1
 800174e:	2307      	movs	r3, #7
 8001750:	0852      	lsrs	r2, r2, #1
 8001752:	4315      	orrs	r5, r2
 8001754:	000f      	movs	r7, r1
 8001756:	402b      	ands	r3, r5
 8001758:	e700      	b.n	800155c <__aeabi_dadd+0x2d0>
 800175a:	4663      	mov	r3, ip
 800175c:	1a1d      	subs	r5, r3, r0
 800175e:	45ac      	cmp	ip, r5
 8001760:	4192      	sbcs	r2, r2
 8001762:	4653      	mov	r3, sl
 8001764:	4252      	negs	r2, r2
 8001766:	1b1c      	subs	r4, r3, r4
 8001768:	000e      	movs	r6, r1
 800176a:	4688      	mov	r8, r1
 800176c:	1aa4      	subs	r4, r4, r2
 800176e:	e5e5      	b.n	800133c <__aeabi_dadd+0xb0>
 8001770:	2d00      	cmp	r5, #0
 8001772:	d000      	beq.n	8001776 <__aeabi_dadd+0x4ea>
 8001774:	e091      	b.n	800189a <__aeabi_dadd+0x60e>
 8001776:	2a00      	cmp	r2, #0
 8001778:	d138      	bne.n	80017ec <__aeabi_dadd+0x560>
 800177a:	2480      	movs	r4, #128	@ 0x80
 800177c:	2600      	movs	r6, #0
 800177e:	0324      	lsls	r4, r4, #12
 8001780:	e756      	b.n	8001630 <__aeabi_dadd+0x3a4>
 8001782:	4663      	mov	r3, ip
 8001784:	18c5      	adds	r5, r0, r3
 8001786:	4285      	cmp	r5, r0
 8001788:	4180      	sbcs	r0, r0
 800178a:	4454      	add	r4, sl
 800178c:	4240      	negs	r0, r0
 800178e:	1824      	adds	r4, r4, r0
 8001790:	2701      	movs	r7, #1
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0x50c>
 8001796:	e6df      	b.n	8001558 <__aeabi_dadd+0x2cc>
 8001798:	2702      	movs	r7, #2
 800179a:	e687      	b.n	80014ac <__aeabi_dadd+0x220>
 800179c:	4663      	mov	r3, ip
 800179e:	1ac5      	subs	r5, r0, r3
 80017a0:	42a8      	cmp	r0, r5
 80017a2:	4180      	sbcs	r0, r0
 80017a4:	4653      	mov	r3, sl
 80017a6:	4240      	negs	r0, r0
 80017a8:	1ae4      	subs	r4, r4, r3
 80017aa:	2701      	movs	r7, #1
 80017ac:	1a24      	subs	r4, r4, r0
 80017ae:	e5c0      	b.n	8001332 <__aeabi_dadd+0xa6>
 80017b0:	0762      	lsls	r2, r4, #29
 80017b2:	08c0      	lsrs	r0, r0, #3
 80017b4:	4302      	orrs	r2, r0
 80017b6:	08e4      	lsrs	r4, r4, #3
 80017b8:	e736      	b.n	8001628 <__aeabi_dadd+0x39c>
 80017ba:	0011      	movs	r1, r2
 80017bc:	4653      	mov	r3, sl
 80017be:	3920      	subs	r1, #32
 80017c0:	40cb      	lsrs	r3, r1
 80017c2:	4699      	mov	r9, r3
 80017c4:	2a20      	cmp	r2, #32
 80017c6:	d006      	beq.n	80017d6 <__aeabi_dadd+0x54a>
 80017c8:	2140      	movs	r1, #64	@ 0x40
 80017ca:	4653      	mov	r3, sl
 80017cc:	1a8a      	subs	r2, r1, r2
 80017ce:	4093      	lsls	r3, r2
 80017d0:	4662      	mov	r2, ip
 80017d2:	431a      	orrs	r2, r3
 80017d4:	4694      	mov	ip, r2
 80017d6:	4665      	mov	r5, ip
 80017d8:	1e6b      	subs	r3, r5, #1
 80017da:	419d      	sbcs	r5, r3
 80017dc:	464b      	mov	r3, r9
 80017de:	431d      	orrs	r5, r3
 80017e0:	e659      	b.n	8001496 <__aeabi_dadd+0x20a>
 80017e2:	0762      	lsls	r2, r4, #29
 80017e4:	08c0      	lsrs	r0, r0, #3
 80017e6:	4302      	orrs	r2, r0
 80017e8:	08e4      	lsrs	r4, r4, #3
 80017ea:	e70d      	b.n	8001608 <__aeabi_dadd+0x37c>
 80017ec:	4653      	mov	r3, sl
 80017ee:	075a      	lsls	r2, r3, #29
 80017f0:	4663      	mov	r3, ip
 80017f2:	08d8      	lsrs	r0, r3, #3
 80017f4:	4653      	mov	r3, sl
 80017f6:	000e      	movs	r6, r1
 80017f8:	4302      	orrs	r2, r0
 80017fa:	08dc      	lsrs	r4, r3, #3
 80017fc:	e714      	b.n	8001628 <__aeabi_dadd+0x39c>
 80017fe:	0015      	movs	r5, r2
 8001800:	0026      	movs	r6, r4
 8001802:	3d20      	subs	r5, #32
 8001804:	40ee      	lsrs	r6, r5
 8001806:	2a20      	cmp	r2, #32
 8001808:	d003      	beq.n	8001812 <__aeabi_dadd+0x586>
 800180a:	2540      	movs	r5, #64	@ 0x40
 800180c:	1aaa      	subs	r2, r5, r2
 800180e:	4094      	lsls	r4, r2
 8001810:	4320      	orrs	r0, r4
 8001812:	1e42      	subs	r2, r0, #1
 8001814:	4190      	sbcs	r0, r2
 8001816:	0005      	movs	r5, r0
 8001818:	4335      	orrs	r5, r6
 800181a:	e606      	b.n	800142a <__aeabi_dadd+0x19e>
 800181c:	2a00      	cmp	r2, #0
 800181e:	d07c      	beq.n	800191a <__aeabi_dadd+0x68e>
 8001820:	4662      	mov	r2, ip
 8001822:	4653      	mov	r3, sl
 8001824:	08c0      	lsrs	r0, r0, #3
 8001826:	431a      	orrs	r2, r3
 8001828:	d100      	bne.n	800182c <__aeabi_dadd+0x5a0>
 800182a:	e6fa      	b.n	8001622 <__aeabi_dadd+0x396>
 800182c:	0762      	lsls	r2, r4, #29
 800182e:	4310      	orrs	r0, r2
 8001830:	2280      	movs	r2, #128	@ 0x80
 8001832:	08e4      	lsrs	r4, r4, #3
 8001834:	0312      	lsls	r2, r2, #12
 8001836:	4214      	tst	r4, r2
 8001838:	d008      	beq.n	800184c <__aeabi_dadd+0x5c0>
 800183a:	08d9      	lsrs	r1, r3, #3
 800183c:	4211      	tst	r1, r2
 800183e:	d105      	bne.n	800184c <__aeabi_dadd+0x5c0>
 8001840:	4663      	mov	r3, ip
 8001842:	08d8      	lsrs	r0, r3, #3
 8001844:	4653      	mov	r3, sl
 8001846:	000c      	movs	r4, r1
 8001848:	075b      	lsls	r3, r3, #29
 800184a:	4318      	orrs	r0, r3
 800184c:	0f42      	lsrs	r2, r0, #29
 800184e:	00c0      	lsls	r0, r0, #3
 8001850:	08c0      	lsrs	r0, r0, #3
 8001852:	0752      	lsls	r2, r2, #29
 8001854:	4302      	orrs	r2, r0
 8001856:	e6e7      	b.n	8001628 <__aeabi_dadd+0x39c>
 8001858:	2a00      	cmp	r2, #0
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x5d2>
 800185c:	e72d      	b.n	80016ba <__aeabi_dadd+0x42e>
 800185e:	4663      	mov	r3, ip
 8001860:	08d8      	lsrs	r0, r3, #3
 8001862:	4653      	mov	r3, sl
 8001864:	075a      	lsls	r2, r3, #29
 8001866:	000e      	movs	r6, r1
 8001868:	4302      	orrs	r2, r0
 800186a:	08dc      	lsrs	r4, r3, #3
 800186c:	e6cc      	b.n	8001608 <__aeabi_dadd+0x37c>
 800186e:	4663      	mov	r3, ip
 8001870:	1a1d      	subs	r5, r3, r0
 8001872:	45ac      	cmp	ip, r5
 8001874:	4192      	sbcs	r2, r2
 8001876:	4653      	mov	r3, sl
 8001878:	4252      	negs	r2, r2
 800187a:	1b1c      	subs	r4, r3, r4
 800187c:	000e      	movs	r6, r1
 800187e:	4688      	mov	r8, r1
 8001880:	1aa4      	subs	r4, r4, r2
 8001882:	3701      	adds	r7, #1
 8001884:	e555      	b.n	8001332 <__aeabi_dadd+0xa6>
 8001886:	4663      	mov	r3, ip
 8001888:	08d9      	lsrs	r1, r3, #3
 800188a:	4653      	mov	r3, sl
 800188c:	075a      	lsls	r2, r3, #29
 800188e:	430a      	orrs	r2, r1
 8001890:	08dc      	lsrs	r4, r3, #3
 8001892:	e6c9      	b.n	8001628 <__aeabi_dadd+0x39c>
 8001894:	4660      	mov	r0, ip
 8001896:	4654      	mov	r4, sl
 8001898:	e6d4      	b.n	8001644 <__aeabi_dadd+0x3b8>
 800189a:	08c0      	lsrs	r0, r0, #3
 800189c:	2a00      	cmp	r2, #0
 800189e:	d100      	bne.n	80018a2 <__aeabi_dadd+0x616>
 80018a0:	e6bf      	b.n	8001622 <__aeabi_dadd+0x396>
 80018a2:	0762      	lsls	r2, r4, #29
 80018a4:	4310      	orrs	r0, r2
 80018a6:	2280      	movs	r2, #128	@ 0x80
 80018a8:	08e4      	lsrs	r4, r4, #3
 80018aa:	0312      	lsls	r2, r2, #12
 80018ac:	4214      	tst	r4, r2
 80018ae:	d0cd      	beq.n	800184c <__aeabi_dadd+0x5c0>
 80018b0:	08dd      	lsrs	r5, r3, #3
 80018b2:	4215      	tst	r5, r2
 80018b4:	d1ca      	bne.n	800184c <__aeabi_dadd+0x5c0>
 80018b6:	4663      	mov	r3, ip
 80018b8:	08d8      	lsrs	r0, r3, #3
 80018ba:	4653      	mov	r3, sl
 80018bc:	075b      	lsls	r3, r3, #29
 80018be:	000e      	movs	r6, r1
 80018c0:	002c      	movs	r4, r5
 80018c2:	4318      	orrs	r0, r3
 80018c4:	e7c2      	b.n	800184c <__aeabi_dadd+0x5c0>
 80018c6:	4663      	mov	r3, ip
 80018c8:	08d9      	lsrs	r1, r3, #3
 80018ca:	4653      	mov	r3, sl
 80018cc:	075a      	lsls	r2, r3, #29
 80018ce:	430a      	orrs	r2, r1
 80018d0:	08dc      	lsrs	r4, r3, #3
 80018d2:	e699      	b.n	8001608 <__aeabi_dadd+0x37c>
 80018d4:	4663      	mov	r3, ip
 80018d6:	08d8      	lsrs	r0, r3, #3
 80018d8:	4653      	mov	r3, sl
 80018da:	075a      	lsls	r2, r3, #29
 80018dc:	000e      	movs	r6, r1
 80018de:	4302      	orrs	r2, r0
 80018e0:	08dc      	lsrs	r4, r3, #3
 80018e2:	e6a1      	b.n	8001628 <__aeabi_dadd+0x39c>
 80018e4:	0011      	movs	r1, r2
 80018e6:	0027      	movs	r7, r4
 80018e8:	3920      	subs	r1, #32
 80018ea:	40cf      	lsrs	r7, r1
 80018ec:	2a20      	cmp	r2, #32
 80018ee:	d003      	beq.n	80018f8 <__aeabi_dadd+0x66c>
 80018f0:	2140      	movs	r1, #64	@ 0x40
 80018f2:	1a8a      	subs	r2, r1, r2
 80018f4:	4094      	lsls	r4, r2
 80018f6:	4320      	orrs	r0, r4
 80018f8:	1e42      	subs	r2, r0, #1
 80018fa:	4190      	sbcs	r0, r2
 80018fc:	0005      	movs	r5, r0
 80018fe:	433d      	orrs	r5, r7
 8001900:	e651      	b.n	80015a6 <__aeabi_dadd+0x31a>
 8001902:	000c      	movs	r4, r1
 8001904:	2500      	movs	r5, #0
 8001906:	2200      	movs	r2, #0
 8001908:	e558      	b.n	80013bc <__aeabi_dadd+0x130>
 800190a:	4460      	add	r0, ip
 800190c:	4560      	cmp	r0, ip
 800190e:	4192      	sbcs	r2, r2
 8001910:	4454      	add	r4, sl
 8001912:	4252      	negs	r2, r2
 8001914:	0005      	movs	r5, r0
 8001916:	18a4      	adds	r4, r4, r2
 8001918:	e73a      	b.n	8001790 <__aeabi_dadd+0x504>
 800191a:	4653      	mov	r3, sl
 800191c:	075a      	lsls	r2, r3, #29
 800191e:	4663      	mov	r3, ip
 8001920:	08d9      	lsrs	r1, r3, #3
 8001922:	4653      	mov	r3, sl
 8001924:	430a      	orrs	r2, r1
 8001926:	08dc      	lsrs	r4, r3, #3
 8001928:	e67e      	b.n	8001628 <__aeabi_dadd+0x39c>
 800192a:	001a      	movs	r2, r3
 800192c:	001c      	movs	r4, r3
 800192e:	432a      	orrs	r2, r5
 8001930:	d000      	beq.n	8001934 <__aeabi_dadd+0x6a8>
 8001932:	e6ab      	b.n	800168c <__aeabi_dadd+0x400>
 8001934:	e6c1      	b.n	80016ba <__aeabi_dadd+0x42e>
 8001936:	2120      	movs	r1, #32
 8001938:	2500      	movs	r5, #0
 800193a:	1a09      	subs	r1, r1, r0
 800193c:	e519      	b.n	8001372 <__aeabi_dadd+0xe6>
 800193e:	2200      	movs	r2, #0
 8001940:	2500      	movs	r5, #0
 8001942:	4c01      	ldr	r4, [pc, #4]	@ (8001948 <__aeabi_dadd+0x6bc>)
 8001944:	e53a      	b.n	80013bc <__aeabi_dadd+0x130>
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	000007ff 	.word	0x000007ff
 800194c:	ff7fffff 	.word	0xff7fffff
 8001950:	000007fe 	.word	0x000007fe

08001954 <__aeabi_ddiv>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	46de      	mov	lr, fp
 8001958:	4645      	mov	r5, r8
 800195a:	4657      	mov	r7, sl
 800195c:	464e      	mov	r6, r9
 800195e:	b5e0      	push	{r5, r6, r7, lr}
 8001960:	b087      	sub	sp, #28
 8001962:	9200      	str	r2, [sp, #0]
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	030b      	lsls	r3, r1, #12
 8001968:	0b1b      	lsrs	r3, r3, #12
 800196a:	469b      	mov	fp, r3
 800196c:	0fca      	lsrs	r2, r1, #31
 800196e:	004b      	lsls	r3, r1, #1
 8001970:	0004      	movs	r4, r0
 8001972:	4680      	mov	r8, r0
 8001974:	0d5b      	lsrs	r3, r3, #21
 8001976:	9202      	str	r2, [sp, #8]
 8001978:	d100      	bne.n	800197c <__aeabi_ddiv+0x28>
 800197a:	e16a      	b.n	8001c52 <__aeabi_ddiv+0x2fe>
 800197c:	4ad4      	ldr	r2, [pc, #848]	@ (8001cd0 <__aeabi_ddiv+0x37c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d100      	bne.n	8001984 <__aeabi_ddiv+0x30>
 8001982:	e18c      	b.n	8001c9e <__aeabi_ddiv+0x34a>
 8001984:	4659      	mov	r1, fp
 8001986:	0f42      	lsrs	r2, r0, #29
 8001988:	00c9      	lsls	r1, r1, #3
 800198a:	430a      	orrs	r2, r1
 800198c:	2180      	movs	r1, #128	@ 0x80
 800198e:	0409      	lsls	r1, r1, #16
 8001990:	4311      	orrs	r1, r2
 8001992:	00c2      	lsls	r2, r0, #3
 8001994:	4690      	mov	r8, r2
 8001996:	4acf      	ldr	r2, [pc, #828]	@ (8001cd4 <__aeabi_ddiv+0x380>)
 8001998:	4689      	mov	r9, r1
 800199a:	4692      	mov	sl, r2
 800199c:	449a      	add	sl, r3
 800199e:	2300      	movs	r3, #0
 80019a0:	2400      	movs	r4, #0
 80019a2:	9303      	str	r3, [sp, #12]
 80019a4:	9e00      	ldr	r6, [sp, #0]
 80019a6:	9f01      	ldr	r7, [sp, #4]
 80019a8:	033b      	lsls	r3, r7, #12
 80019aa:	0b1b      	lsrs	r3, r3, #12
 80019ac:	469b      	mov	fp, r3
 80019ae:	007b      	lsls	r3, r7, #1
 80019b0:	0030      	movs	r0, r6
 80019b2:	0d5b      	lsrs	r3, r3, #21
 80019b4:	0ffd      	lsrs	r5, r7, #31
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d100      	bne.n	80019bc <__aeabi_ddiv+0x68>
 80019ba:	e128      	b.n	8001c0e <__aeabi_ddiv+0x2ba>
 80019bc:	4ac4      	ldr	r2, [pc, #784]	@ (8001cd0 <__aeabi_ddiv+0x37c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d100      	bne.n	80019c4 <__aeabi_ddiv+0x70>
 80019c2:	e177      	b.n	8001cb4 <__aeabi_ddiv+0x360>
 80019c4:	4659      	mov	r1, fp
 80019c6:	0f72      	lsrs	r2, r6, #29
 80019c8:	00c9      	lsls	r1, r1, #3
 80019ca:	430a      	orrs	r2, r1
 80019cc:	2180      	movs	r1, #128	@ 0x80
 80019ce:	0409      	lsls	r1, r1, #16
 80019d0:	4311      	orrs	r1, r2
 80019d2:	468b      	mov	fp, r1
 80019d4:	49bf      	ldr	r1, [pc, #764]	@ (8001cd4 <__aeabi_ddiv+0x380>)
 80019d6:	00f2      	lsls	r2, r6, #3
 80019d8:	468c      	mov	ip, r1
 80019da:	4651      	mov	r1, sl
 80019dc:	4463      	add	r3, ip
 80019de:	1acb      	subs	r3, r1, r3
 80019e0:	469a      	mov	sl, r3
 80019e2:	2300      	movs	r3, #0
 80019e4:	9e02      	ldr	r6, [sp, #8]
 80019e6:	406e      	eors	r6, r5
 80019e8:	2c0f      	cmp	r4, #15
 80019ea:	d827      	bhi.n	8001a3c <__aeabi_ddiv+0xe8>
 80019ec:	49ba      	ldr	r1, [pc, #744]	@ (8001cd8 <__aeabi_ddiv+0x384>)
 80019ee:	00a4      	lsls	r4, r4, #2
 80019f0:	5909      	ldr	r1, [r1, r4]
 80019f2:	468f      	mov	pc, r1
 80019f4:	46cb      	mov	fp, r9
 80019f6:	4642      	mov	r2, r8
 80019f8:	9e02      	ldr	r6, [sp, #8]
 80019fa:	9b03      	ldr	r3, [sp, #12]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d016      	beq.n	8001a2e <__aeabi_ddiv+0xda>
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d100      	bne.n	8001a06 <__aeabi_ddiv+0xb2>
 8001a04:	e2a6      	b.n	8001f54 <__aeabi_ddiv+0x600>
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d000      	beq.n	8001a0c <__aeabi_ddiv+0xb8>
 8001a0a:	e0df      	b.n	8001bcc <__aeabi_ddiv+0x278>
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2400      	movs	r4, #0
 8001a12:	4690      	mov	r8, r2
 8001a14:	051b      	lsls	r3, r3, #20
 8001a16:	4323      	orrs	r3, r4
 8001a18:	07f6      	lsls	r6, r6, #31
 8001a1a:	4333      	orrs	r3, r6
 8001a1c:	4640      	mov	r0, r8
 8001a1e:	0019      	movs	r1, r3
 8001a20:	b007      	add	sp, #28
 8001a22:	bcf0      	pop	{r4, r5, r6, r7}
 8001a24:	46bb      	mov	fp, r7
 8001a26:	46b2      	mov	sl, r6
 8001a28:	46a9      	mov	r9, r5
 8001a2a:	46a0      	mov	r8, r4
 8001a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2400      	movs	r4, #0
 8001a32:	4690      	mov	r8, r2
 8001a34:	4ba6      	ldr	r3, [pc, #664]	@ (8001cd0 <__aeabi_ddiv+0x37c>)
 8001a36:	e7ed      	b.n	8001a14 <__aeabi_ddiv+0xc0>
 8001a38:	002e      	movs	r6, r5
 8001a3a:	e7df      	b.n	80019fc <__aeabi_ddiv+0xa8>
 8001a3c:	45cb      	cmp	fp, r9
 8001a3e:	d200      	bcs.n	8001a42 <__aeabi_ddiv+0xee>
 8001a40:	e1d4      	b.n	8001dec <__aeabi_ddiv+0x498>
 8001a42:	d100      	bne.n	8001a46 <__aeabi_ddiv+0xf2>
 8001a44:	e1cf      	b.n	8001de6 <__aeabi_ddiv+0x492>
 8001a46:	2301      	movs	r3, #1
 8001a48:	425b      	negs	r3, r3
 8001a4a:	469c      	mov	ip, r3
 8001a4c:	4644      	mov	r4, r8
 8001a4e:	4648      	mov	r0, r9
 8001a50:	2700      	movs	r7, #0
 8001a52:	44e2      	add	sl, ip
 8001a54:	465b      	mov	r3, fp
 8001a56:	0e15      	lsrs	r5, r2, #24
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	0c19      	lsrs	r1, r3, #16
 8001a5e:	042b      	lsls	r3, r5, #16
 8001a60:	0212      	lsls	r2, r2, #8
 8001a62:	9500      	str	r5, [sp, #0]
 8001a64:	0c1d      	lsrs	r5, r3, #16
 8001a66:	4691      	mov	r9, r2
 8001a68:	9102      	str	r1, [sp, #8]
 8001a6a:	9503      	str	r5, [sp, #12]
 8001a6c:	f7fe fbd0 	bl	8000210 <__aeabi_uidivmod>
 8001a70:	0002      	movs	r2, r0
 8001a72:	436a      	muls	r2, r5
 8001a74:	040b      	lsls	r3, r1, #16
 8001a76:	0c21      	lsrs	r1, r4, #16
 8001a78:	4680      	mov	r8, r0
 8001a7a:	4319      	orrs	r1, r3
 8001a7c:	428a      	cmp	r2, r1
 8001a7e:	d909      	bls.n	8001a94 <__aeabi_ddiv+0x140>
 8001a80:	9d00      	ldr	r5, [sp, #0]
 8001a82:	2301      	movs	r3, #1
 8001a84:	46ac      	mov	ip, r5
 8001a86:	425b      	negs	r3, r3
 8001a88:	4461      	add	r1, ip
 8001a8a:	469c      	mov	ip, r3
 8001a8c:	44e0      	add	r8, ip
 8001a8e:	428d      	cmp	r5, r1
 8001a90:	d800      	bhi.n	8001a94 <__aeabi_ddiv+0x140>
 8001a92:	e1fb      	b.n	8001e8c <__aeabi_ddiv+0x538>
 8001a94:	1a88      	subs	r0, r1, r2
 8001a96:	9902      	ldr	r1, [sp, #8]
 8001a98:	f7fe fbba 	bl	8000210 <__aeabi_uidivmod>
 8001a9c:	9a03      	ldr	r2, [sp, #12]
 8001a9e:	0424      	lsls	r4, r4, #16
 8001aa0:	4342      	muls	r2, r0
 8001aa2:	0409      	lsls	r1, r1, #16
 8001aa4:	0c24      	lsrs	r4, r4, #16
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	430c      	orrs	r4, r1
 8001aaa:	42a2      	cmp	r2, r4
 8001aac:	d906      	bls.n	8001abc <__aeabi_ddiv+0x168>
 8001aae:	9900      	ldr	r1, [sp, #0]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	468c      	mov	ip, r1
 8001ab4:	4464      	add	r4, ip
 8001ab6:	42a1      	cmp	r1, r4
 8001ab8:	d800      	bhi.n	8001abc <__aeabi_ddiv+0x168>
 8001aba:	e1e1      	b.n	8001e80 <__aeabi_ddiv+0x52c>
 8001abc:	1aa0      	subs	r0, r4, r2
 8001abe:	4642      	mov	r2, r8
 8001ac0:	0412      	lsls	r2, r2, #16
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	4693      	mov	fp, r2
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	4659      	mov	r1, fp
 8001aca:	0c1b      	lsrs	r3, r3, #16
 8001acc:	001d      	movs	r5, r3
 8001ace:	9304      	str	r3, [sp, #16]
 8001ad0:	040b      	lsls	r3, r1, #16
 8001ad2:	4649      	mov	r1, r9
 8001ad4:	0409      	lsls	r1, r1, #16
 8001ad6:	0c09      	lsrs	r1, r1, #16
 8001ad8:	000c      	movs	r4, r1
 8001ada:	0c1b      	lsrs	r3, r3, #16
 8001adc:	435c      	muls	r4, r3
 8001ade:	0c12      	lsrs	r2, r2, #16
 8001ae0:	436b      	muls	r3, r5
 8001ae2:	4688      	mov	r8, r1
 8001ae4:	4351      	muls	r1, r2
 8001ae6:	436a      	muls	r2, r5
 8001ae8:	0c25      	lsrs	r5, r4, #16
 8001aea:	46ac      	mov	ip, r5
 8001aec:	185b      	adds	r3, r3, r1
 8001aee:	4463      	add	r3, ip
 8001af0:	4299      	cmp	r1, r3
 8001af2:	d903      	bls.n	8001afc <__aeabi_ddiv+0x1a8>
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	0249      	lsls	r1, r1, #9
 8001af8:	468c      	mov	ip, r1
 8001afa:	4462      	add	r2, ip
 8001afc:	0c19      	lsrs	r1, r3, #16
 8001afe:	0424      	lsls	r4, r4, #16
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	0c24      	lsrs	r4, r4, #16
 8001b04:	188a      	adds	r2, r1, r2
 8001b06:	191c      	adds	r4, r3, r4
 8001b08:	4290      	cmp	r0, r2
 8001b0a:	d302      	bcc.n	8001b12 <__aeabi_ddiv+0x1be>
 8001b0c:	d116      	bne.n	8001b3c <__aeabi_ddiv+0x1e8>
 8001b0e:	42a7      	cmp	r7, r4
 8001b10:	d214      	bcs.n	8001b3c <__aeabi_ddiv+0x1e8>
 8001b12:	465b      	mov	r3, fp
 8001b14:	9d00      	ldr	r5, [sp, #0]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	444f      	add	r7, r9
 8001b1a:	9305      	str	r3, [sp, #20]
 8001b1c:	454f      	cmp	r7, r9
 8001b1e:	419b      	sbcs	r3, r3
 8001b20:	46ac      	mov	ip, r5
 8001b22:	425b      	negs	r3, r3
 8001b24:	4463      	add	r3, ip
 8001b26:	18c0      	adds	r0, r0, r3
 8001b28:	4285      	cmp	r5, r0
 8001b2a:	d300      	bcc.n	8001b2e <__aeabi_ddiv+0x1da>
 8001b2c:	e1a1      	b.n	8001e72 <__aeabi_ddiv+0x51e>
 8001b2e:	4282      	cmp	r2, r0
 8001b30:	d900      	bls.n	8001b34 <__aeabi_ddiv+0x1e0>
 8001b32:	e1f6      	b.n	8001f22 <__aeabi_ddiv+0x5ce>
 8001b34:	d100      	bne.n	8001b38 <__aeabi_ddiv+0x1e4>
 8001b36:	e1f1      	b.n	8001f1c <__aeabi_ddiv+0x5c8>
 8001b38:	9b05      	ldr	r3, [sp, #20]
 8001b3a:	469b      	mov	fp, r3
 8001b3c:	1b3c      	subs	r4, r7, r4
 8001b3e:	42a7      	cmp	r7, r4
 8001b40:	41bf      	sbcs	r7, r7
 8001b42:	9d00      	ldr	r5, [sp, #0]
 8001b44:	1a80      	subs	r0, r0, r2
 8001b46:	427f      	negs	r7, r7
 8001b48:	1bc0      	subs	r0, r0, r7
 8001b4a:	4285      	cmp	r5, r0
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_ddiv+0x1fc>
 8001b4e:	e1d0      	b.n	8001ef2 <__aeabi_ddiv+0x59e>
 8001b50:	9902      	ldr	r1, [sp, #8]
 8001b52:	f7fe fb5d 	bl	8000210 <__aeabi_uidivmod>
 8001b56:	9a03      	ldr	r2, [sp, #12]
 8001b58:	040b      	lsls	r3, r1, #16
 8001b5a:	4342      	muls	r2, r0
 8001b5c:	0c21      	lsrs	r1, r4, #16
 8001b5e:	0007      	movs	r7, r0
 8001b60:	4319      	orrs	r1, r3
 8001b62:	428a      	cmp	r2, r1
 8001b64:	d900      	bls.n	8001b68 <__aeabi_ddiv+0x214>
 8001b66:	e178      	b.n	8001e5a <__aeabi_ddiv+0x506>
 8001b68:	1a88      	subs	r0, r1, r2
 8001b6a:	9902      	ldr	r1, [sp, #8]
 8001b6c:	f7fe fb50 	bl	8000210 <__aeabi_uidivmod>
 8001b70:	9a03      	ldr	r2, [sp, #12]
 8001b72:	0424      	lsls	r4, r4, #16
 8001b74:	4342      	muls	r2, r0
 8001b76:	0409      	lsls	r1, r1, #16
 8001b78:	0c24      	lsrs	r4, r4, #16
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	430c      	orrs	r4, r1
 8001b7e:	42a2      	cmp	r2, r4
 8001b80:	d900      	bls.n	8001b84 <__aeabi_ddiv+0x230>
 8001b82:	e15d      	b.n	8001e40 <__aeabi_ddiv+0x4ec>
 8001b84:	4641      	mov	r1, r8
 8001b86:	1aa4      	subs	r4, r4, r2
 8001b88:	043a      	lsls	r2, r7, #16
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	9d04      	ldr	r5, [sp, #16]
 8001b8e:	0413      	lsls	r3, r2, #16
 8001b90:	0c1b      	lsrs	r3, r3, #16
 8001b92:	4359      	muls	r1, r3
 8001b94:	4647      	mov	r7, r8
 8001b96:	436b      	muls	r3, r5
 8001b98:	469c      	mov	ip, r3
 8001b9a:	0c10      	lsrs	r0, r2, #16
 8001b9c:	4347      	muls	r7, r0
 8001b9e:	0c0b      	lsrs	r3, r1, #16
 8001ba0:	44bc      	add	ip, r7
 8001ba2:	4463      	add	r3, ip
 8001ba4:	4368      	muls	r0, r5
 8001ba6:	429f      	cmp	r7, r3
 8001ba8:	d903      	bls.n	8001bb2 <__aeabi_ddiv+0x25e>
 8001baa:	2580      	movs	r5, #128	@ 0x80
 8001bac:	026d      	lsls	r5, r5, #9
 8001bae:	46ac      	mov	ip, r5
 8001bb0:	4460      	add	r0, ip
 8001bb2:	0c1f      	lsrs	r7, r3, #16
 8001bb4:	0409      	lsls	r1, r1, #16
 8001bb6:	041b      	lsls	r3, r3, #16
 8001bb8:	0c09      	lsrs	r1, r1, #16
 8001bba:	183f      	adds	r7, r7, r0
 8001bbc:	185b      	adds	r3, r3, r1
 8001bbe:	42bc      	cmp	r4, r7
 8001bc0:	d200      	bcs.n	8001bc4 <__aeabi_ddiv+0x270>
 8001bc2:	e102      	b.n	8001dca <__aeabi_ddiv+0x476>
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_ddiv+0x274>
 8001bc6:	e0fd      	b.n	8001dc4 <__aeabi_ddiv+0x470>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	4b43      	ldr	r3, [pc, #268]	@ (8001cdc <__aeabi_ddiv+0x388>)
 8001bce:	4453      	add	r3, sl
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	dc00      	bgt.n	8001bd6 <__aeabi_ddiv+0x282>
 8001bd4:	e0ae      	b.n	8001d34 <__aeabi_ddiv+0x3e0>
 8001bd6:	0751      	lsls	r1, r2, #29
 8001bd8:	d000      	beq.n	8001bdc <__aeabi_ddiv+0x288>
 8001bda:	e198      	b.n	8001f0e <__aeabi_ddiv+0x5ba>
 8001bdc:	4659      	mov	r1, fp
 8001bde:	01c9      	lsls	r1, r1, #7
 8001be0:	d506      	bpl.n	8001bf0 <__aeabi_ddiv+0x29c>
 8001be2:	4659      	mov	r1, fp
 8001be4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ce0 <__aeabi_ddiv+0x38c>)
 8001be6:	4019      	ands	r1, r3
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	468b      	mov	fp, r1
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4453      	add	r3, sl
 8001bf0:	493c      	ldr	r1, [pc, #240]	@ (8001ce4 <__aeabi_ddiv+0x390>)
 8001bf2:	428b      	cmp	r3, r1
 8001bf4:	dd00      	ble.n	8001bf8 <__aeabi_ddiv+0x2a4>
 8001bf6:	e71a      	b.n	8001a2e <__aeabi_ddiv+0xda>
 8001bf8:	4659      	mov	r1, fp
 8001bfa:	08d2      	lsrs	r2, r2, #3
 8001bfc:	0749      	lsls	r1, r1, #29
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	465a      	mov	r2, fp
 8001c02:	055b      	lsls	r3, r3, #21
 8001c04:	0254      	lsls	r4, r2, #9
 8001c06:	4688      	mov	r8, r1
 8001c08:	0b24      	lsrs	r4, r4, #12
 8001c0a:	0d5b      	lsrs	r3, r3, #21
 8001c0c:	e702      	b.n	8001a14 <__aeabi_ddiv+0xc0>
 8001c0e:	465a      	mov	r2, fp
 8001c10:	9b00      	ldr	r3, [sp, #0]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	d100      	bne.n	8001c18 <__aeabi_ddiv+0x2c4>
 8001c16:	e07e      	b.n	8001d16 <__aeabi_ddiv+0x3c2>
 8001c18:	465b      	mov	r3, fp
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_ddiv+0x2cc>
 8001c1e:	e100      	b.n	8001e22 <__aeabi_ddiv+0x4ce>
 8001c20:	4658      	mov	r0, fp
 8001c22:	f001 fa39 	bl	8003098 <__clzsi2>
 8001c26:	0002      	movs	r2, r0
 8001c28:	0003      	movs	r3, r0
 8001c2a:	3a0b      	subs	r2, #11
 8001c2c:	271d      	movs	r7, #29
 8001c2e:	9e00      	ldr	r6, [sp, #0]
 8001c30:	1aba      	subs	r2, r7, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	4658      	mov	r0, fp
 8001c36:	40d6      	lsrs	r6, r2
 8001c38:	3908      	subs	r1, #8
 8001c3a:	4088      	lsls	r0, r1
 8001c3c:	0032      	movs	r2, r6
 8001c3e:	4302      	orrs	r2, r0
 8001c40:	4693      	mov	fp, r2
 8001c42:	9a00      	ldr	r2, [sp, #0]
 8001c44:	408a      	lsls	r2, r1
 8001c46:	4928      	ldr	r1, [pc, #160]	@ (8001ce8 <__aeabi_ddiv+0x394>)
 8001c48:	4453      	add	r3, sl
 8001c4a:	468a      	mov	sl, r1
 8001c4c:	449a      	add	sl, r3
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e6c8      	b.n	80019e4 <__aeabi_ddiv+0x90>
 8001c52:	465b      	mov	r3, fp
 8001c54:	4303      	orrs	r3, r0
 8001c56:	4699      	mov	r9, r3
 8001c58:	d056      	beq.n	8001d08 <__aeabi_ddiv+0x3b4>
 8001c5a:	465b      	mov	r3, fp
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_ddiv+0x30e>
 8001c60:	e0cd      	b.n	8001dfe <__aeabi_ddiv+0x4aa>
 8001c62:	4658      	mov	r0, fp
 8001c64:	f001 fa18 	bl	8003098 <__clzsi2>
 8001c68:	230b      	movs	r3, #11
 8001c6a:	425b      	negs	r3, r3
 8001c6c:	469c      	mov	ip, r3
 8001c6e:	0002      	movs	r2, r0
 8001c70:	4484      	add	ip, r0
 8001c72:	4666      	mov	r6, ip
 8001c74:	231d      	movs	r3, #29
 8001c76:	1b9b      	subs	r3, r3, r6
 8001c78:	0026      	movs	r6, r4
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	4658      	mov	r0, fp
 8001c7e:	40de      	lsrs	r6, r3
 8001c80:	3908      	subs	r1, #8
 8001c82:	4088      	lsls	r0, r1
 8001c84:	0033      	movs	r3, r6
 8001c86:	4303      	orrs	r3, r0
 8001c88:	4699      	mov	r9, r3
 8001c8a:	0023      	movs	r3, r4
 8001c8c:	408b      	lsls	r3, r1
 8001c8e:	4698      	mov	r8, r3
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <__aeabi_ddiv+0x398>)
 8001c92:	2400      	movs	r4, #0
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	469a      	mov	sl, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9303      	str	r3, [sp, #12]
 8001c9c:	e682      	b.n	80019a4 <__aeabi_ddiv+0x50>
 8001c9e:	465a      	mov	r2, fp
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	4691      	mov	r9, r2
 8001ca4:	d12a      	bne.n	8001cfc <__aeabi_ddiv+0x3a8>
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	469a      	mov	sl, r3
 8001caa:	2302      	movs	r3, #2
 8001cac:	4690      	mov	r8, r2
 8001cae:	2408      	movs	r4, #8
 8001cb0:	9303      	str	r3, [sp, #12]
 8001cb2:	e677      	b.n	80019a4 <__aeabi_ddiv+0x50>
 8001cb4:	465a      	mov	r2, fp
 8001cb6:	9b00      	ldr	r3, [sp, #0]
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <__aeabi_ddiv+0x39c>)
 8001cbc:	469c      	mov	ip, r3
 8001cbe:	44e2      	add	sl, ip
 8001cc0:	2a00      	cmp	r2, #0
 8001cc2:	d117      	bne.n	8001cf4 <__aeabi_ddiv+0x3a0>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	431c      	orrs	r4, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	469b      	mov	fp, r3
 8001ccc:	3302      	adds	r3, #2
 8001cce:	e689      	b.n	80019e4 <__aeabi_ddiv+0x90>
 8001cd0:	000007ff 	.word	0x000007ff
 8001cd4:	fffffc01 	.word	0xfffffc01
 8001cd8:	0800ee50 	.word	0x0800ee50
 8001cdc:	000003ff 	.word	0x000003ff
 8001ce0:	feffffff 	.word	0xfeffffff
 8001ce4:	000007fe 	.word	0x000007fe
 8001ce8:	000003f3 	.word	0x000003f3
 8001cec:	fffffc0d 	.word	0xfffffc0d
 8001cf0:	fffff801 	.word	0xfffff801
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	0032      	movs	r2, r6
 8001cf8:	431c      	orrs	r4, r3
 8001cfa:	e673      	b.n	80019e4 <__aeabi_ddiv+0x90>
 8001cfc:	469a      	mov	sl, r3
 8001cfe:	2303      	movs	r3, #3
 8001d00:	46d9      	mov	r9, fp
 8001d02:	240c      	movs	r4, #12
 8001d04:	9303      	str	r3, [sp, #12]
 8001d06:	e64d      	b.n	80019a4 <__aeabi_ddiv+0x50>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	4698      	mov	r8, r3
 8001d0c:	469a      	mov	sl, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	2404      	movs	r4, #4
 8001d12:	9303      	str	r3, [sp, #12]
 8001d14:	e646      	b.n	80019a4 <__aeabi_ddiv+0x50>
 8001d16:	2301      	movs	r3, #1
 8001d18:	431c      	orrs	r4, r3
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	469b      	mov	fp, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	e660      	b.n	80019e4 <__aeabi_ddiv+0x90>
 8001d22:	2300      	movs	r3, #0
 8001d24:	2480      	movs	r4, #128	@ 0x80
 8001d26:	4698      	mov	r8, r3
 8001d28:	2600      	movs	r6, #0
 8001d2a:	4b92      	ldr	r3, [pc, #584]	@ (8001f74 <__aeabi_ddiv+0x620>)
 8001d2c:	0324      	lsls	r4, r4, #12
 8001d2e:	e671      	b.n	8001a14 <__aeabi_ddiv+0xc0>
 8001d30:	2201      	movs	r2, #1
 8001d32:	4252      	negs	r2, r2
 8001d34:	2101      	movs	r1, #1
 8001d36:	1ac9      	subs	r1, r1, r3
 8001d38:	2938      	cmp	r1, #56	@ 0x38
 8001d3a:	dd00      	ble.n	8001d3e <__aeabi_ddiv+0x3ea>
 8001d3c:	e666      	b.n	8001a0c <__aeabi_ddiv+0xb8>
 8001d3e:	291f      	cmp	r1, #31
 8001d40:	dc00      	bgt.n	8001d44 <__aeabi_ddiv+0x3f0>
 8001d42:	e0ab      	b.n	8001e9c <__aeabi_ddiv+0x548>
 8001d44:	201f      	movs	r0, #31
 8001d46:	4240      	negs	r0, r0
 8001d48:	1ac3      	subs	r3, r0, r3
 8001d4a:	4658      	mov	r0, fp
 8001d4c:	40d8      	lsrs	r0, r3
 8001d4e:	0003      	movs	r3, r0
 8001d50:	2920      	cmp	r1, #32
 8001d52:	d004      	beq.n	8001d5e <__aeabi_ddiv+0x40a>
 8001d54:	4658      	mov	r0, fp
 8001d56:	4988      	ldr	r1, [pc, #544]	@ (8001f78 <__aeabi_ddiv+0x624>)
 8001d58:	4451      	add	r1, sl
 8001d5a:	4088      	lsls	r0, r1
 8001d5c:	4302      	orrs	r2, r0
 8001d5e:	1e51      	subs	r1, r2, #1
 8001d60:	418a      	sbcs	r2, r1
 8001d62:	431a      	orrs	r2, r3
 8001d64:	2307      	movs	r3, #7
 8001d66:	0019      	movs	r1, r3
 8001d68:	2400      	movs	r4, #0
 8001d6a:	4011      	ands	r1, r2
 8001d6c:	4213      	tst	r3, r2
 8001d6e:	d00c      	beq.n	8001d8a <__aeabi_ddiv+0x436>
 8001d70:	230f      	movs	r3, #15
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x426>
 8001d78:	e0f9      	b.n	8001f6e <__aeabi_ddiv+0x61a>
 8001d7a:	1d11      	adds	r1, r2, #4
 8001d7c:	4291      	cmp	r1, r2
 8001d7e:	419b      	sbcs	r3, r3
 8001d80:	000a      	movs	r2, r1
 8001d82:	425b      	negs	r3, r3
 8001d84:	0759      	lsls	r1, r3, #29
 8001d86:	025b      	lsls	r3, r3, #9
 8001d88:	0b1c      	lsrs	r4, r3, #12
 8001d8a:	08d2      	lsrs	r2, r2, #3
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	4690      	mov	r8, r2
 8001d90:	2300      	movs	r3, #0
 8001d92:	e63f      	b.n	8001a14 <__aeabi_ddiv+0xc0>
 8001d94:	2480      	movs	r4, #128	@ 0x80
 8001d96:	464b      	mov	r3, r9
 8001d98:	0324      	lsls	r4, r4, #12
 8001d9a:	4223      	tst	r3, r4
 8001d9c:	d009      	beq.n	8001db2 <__aeabi_ddiv+0x45e>
 8001d9e:	465b      	mov	r3, fp
 8001da0:	4223      	tst	r3, r4
 8001da2:	d106      	bne.n	8001db2 <__aeabi_ddiv+0x45e>
 8001da4:	431c      	orrs	r4, r3
 8001da6:	0324      	lsls	r4, r4, #12
 8001da8:	002e      	movs	r6, r5
 8001daa:	4690      	mov	r8, r2
 8001dac:	4b71      	ldr	r3, [pc, #452]	@ (8001f74 <__aeabi_ddiv+0x620>)
 8001dae:	0b24      	lsrs	r4, r4, #12
 8001db0:	e630      	b.n	8001a14 <__aeabi_ddiv+0xc0>
 8001db2:	2480      	movs	r4, #128	@ 0x80
 8001db4:	464b      	mov	r3, r9
 8001db6:	0324      	lsls	r4, r4, #12
 8001db8:	431c      	orrs	r4, r3
 8001dba:	0324      	lsls	r4, r4, #12
 8001dbc:	9e02      	ldr	r6, [sp, #8]
 8001dbe:	4b6d      	ldr	r3, [pc, #436]	@ (8001f74 <__aeabi_ddiv+0x620>)
 8001dc0:	0b24      	lsrs	r4, r4, #12
 8001dc2:	e627      	b.n	8001a14 <__aeabi_ddiv+0xc0>
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d100      	bne.n	8001dca <__aeabi_ddiv+0x476>
 8001dc8:	e700      	b.n	8001bcc <__aeabi_ddiv+0x278>
 8001dca:	9800      	ldr	r0, [sp, #0]
 8001dcc:	1e51      	subs	r1, r2, #1
 8001dce:	4684      	mov	ip, r0
 8001dd0:	4464      	add	r4, ip
 8001dd2:	4284      	cmp	r4, r0
 8001dd4:	d200      	bcs.n	8001dd8 <__aeabi_ddiv+0x484>
 8001dd6:	e084      	b.n	8001ee2 <__aeabi_ddiv+0x58e>
 8001dd8:	42bc      	cmp	r4, r7
 8001dda:	d200      	bcs.n	8001dde <__aeabi_ddiv+0x48a>
 8001ddc:	e0ae      	b.n	8001f3c <__aeabi_ddiv+0x5e8>
 8001dde:	d100      	bne.n	8001de2 <__aeabi_ddiv+0x48e>
 8001de0:	e0c1      	b.n	8001f66 <__aeabi_ddiv+0x612>
 8001de2:	000a      	movs	r2, r1
 8001de4:	e6f0      	b.n	8001bc8 <__aeabi_ddiv+0x274>
 8001de6:	4542      	cmp	r2, r8
 8001de8:	d900      	bls.n	8001dec <__aeabi_ddiv+0x498>
 8001dea:	e62c      	b.n	8001a46 <__aeabi_ddiv+0xf2>
 8001dec:	464b      	mov	r3, r9
 8001dee:	07dc      	lsls	r4, r3, #31
 8001df0:	0858      	lsrs	r0, r3, #1
 8001df2:	4643      	mov	r3, r8
 8001df4:	085b      	lsrs	r3, r3, #1
 8001df6:	431c      	orrs	r4, r3
 8001df8:	4643      	mov	r3, r8
 8001dfa:	07df      	lsls	r7, r3, #31
 8001dfc:	e62a      	b.n	8001a54 <__aeabi_ddiv+0x100>
 8001dfe:	f001 f94b 	bl	8003098 <__clzsi2>
 8001e02:	2315      	movs	r3, #21
 8001e04:	469c      	mov	ip, r3
 8001e06:	4484      	add	ip, r0
 8001e08:	0002      	movs	r2, r0
 8001e0a:	4663      	mov	r3, ip
 8001e0c:	3220      	adds	r2, #32
 8001e0e:	2b1c      	cmp	r3, #28
 8001e10:	dc00      	bgt.n	8001e14 <__aeabi_ddiv+0x4c0>
 8001e12:	e72e      	b.n	8001c72 <__aeabi_ddiv+0x31e>
 8001e14:	0023      	movs	r3, r4
 8001e16:	3808      	subs	r0, #8
 8001e18:	4083      	lsls	r3, r0
 8001e1a:	4699      	mov	r9, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	4698      	mov	r8, r3
 8001e20:	e736      	b.n	8001c90 <__aeabi_ddiv+0x33c>
 8001e22:	f001 f939 	bl	8003098 <__clzsi2>
 8001e26:	0002      	movs	r2, r0
 8001e28:	0003      	movs	r3, r0
 8001e2a:	3215      	adds	r2, #21
 8001e2c:	3320      	adds	r3, #32
 8001e2e:	2a1c      	cmp	r2, #28
 8001e30:	dc00      	bgt.n	8001e34 <__aeabi_ddiv+0x4e0>
 8001e32:	e6fb      	b.n	8001c2c <__aeabi_ddiv+0x2d8>
 8001e34:	9900      	ldr	r1, [sp, #0]
 8001e36:	3808      	subs	r0, #8
 8001e38:	4081      	lsls	r1, r0
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	468b      	mov	fp, r1
 8001e3e:	e702      	b.n	8001c46 <__aeabi_ddiv+0x2f2>
 8001e40:	9900      	ldr	r1, [sp, #0]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	468c      	mov	ip, r1
 8001e46:	4464      	add	r4, ip
 8001e48:	42a1      	cmp	r1, r4
 8001e4a:	d900      	bls.n	8001e4e <__aeabi_ddiv+0x4fa>
 8001e4c:	e69a      	b.n	8001b84 <__aeabi_ddiv+0x230>
 8001e4e:	42a2      	cmp	r2, r4
 8001e50:	d800      	bhi.n	8001e54 <__aeabi_ddiv+0x500>
 8001e52:	e697      	b.n	8001b84 <__aeabi_ddiv+0x230>
 8001e54:	1e83      	subs	r3, r0, #2
 8001e56:	4464      	add	r4, ip
 8001e58:	e694      	b.n	8001b84 <__aeabi_ddiv+0x230>
 8001e5a:	46ac      	mov	ip, r5
 8001e5c:	4461      	add	r1, ip
 8001e5e:	3f01      	subs	r7, #1
 8001e60:	428d      	cmp	r5, r1
 8001e62:	d900      	bls.n	8001e66 <__aeabi_ddiv+0x512>
 8001e64:	e680      	b.n	8001b68 <__aeabi_ddiv+0x214>
 8001e66:	428a      	cmp	r2, r1
 8001e68:	d800      	bhi.n	8001e6c <__aeabi_ddiv+0x518>
 8001e6a:	e67d      	b.n	8001b68 <__aeabi_ddiv+0x214>
 8001e6c:	1e87      	subs	r7, r0, #2
 8001e6e:	4461      	add	r1, ip
 8001e70:	e67a      	b.n	8001b68 <__aeabi_ddiv+0x214>
 8001e72:	4285      	cmp	r5, r0
 8001e74:	d000      	beq.n	8001e78 <__aeabi_ddiv+0x524>
 8001e76:	e65f      	b.n	8001b38 <__aeabi_ddiv+0x1e4>
 8001e78:	45b9      	cmp	r9, r7
 8001e7a:	d900      	bls.n	8001e7e <__aeabi_ddiv+0x52a>
 8001e7c:	e65c      	b.n	8001b38 <__aeabi_ddiv+0x1e4>
 8001e7e:	e656      	b.n	8001b2e <__aeabi_ddiv+0x1da>
 8001e80:	42a2      	cmp	r2, r4
 8001e82:	d800      	bhi.n	8001e86 <__aeabi_ddiv+0x532>
 8001e84:	e61a      	b.n	8001abc <__aeabi_ddiv+0x168>
 8001e86:	1e83      	subs	r3, r0, #2
 8001e88:	4464      	add	r4, ip
 8001e8a:	e617      	b.n	8001abc <__aeabi_ddiv+0x168>
 8001e8c:	428a      	cmp	r2, r1
 8001e8e:	d800      	bhi.n	8001e92 <__aeabi_ddiv+0x53e>
 8001e90:	e600      	b.n	8001a94 <__aeabi_ddiv+0x140>
 8001e92:	46ac      	mov	ip, r5
 8001e94:	1e83      	subs	r3, r0, #2
 8001e96:	4698      	mov	r8, r3
 8001e98:	4461      	add	r1, ip
 8001e9a:	e5fb      	b.n	8001a94 <__aeabi_ddiv+0x140>
 8001e9c:	4837      	ldr	r0, [pc, #220]	@ (8001f7c <__aeabi_ddiv+0x628>)
 8001e9e:	0014      	movs	r4, r2
 8001ea0:	4450      	add	r0, sl
 8001ea2:	4082      	lsls	r2, r0
 8001ea4:	465b      	mov	r3, fp
 8001ea6:	0017      	movs	r7, r2
 8001ea8:	4083      	lsls	r3, r0
 8001eaa:	40cc      	lsrs	r4, r1
 8001eac:	1e7a      	subs	r2, r7, #1
 8001eae:	4197      	sbcs	r7, r2
 8001eb0:	4323      	orrs	r3, r4
 8001eb2:	433b      	orrs	r3, r7
 8001eb4:	001a      	movs	r2, r3
 8001eb6:	465b      	mov	r3, fp
 8001eb8:	40cb      	lsrs	r3, r1
 8001eba:	0751      	lsls	r1, r2, #29
 8001ebc:	d009      	beq.n	8001ed2 <__aeabi_ddiv+0x57e>
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	4011      	ands	r1, r2
 8001ec2:	2904      	cmp	r1, #4
 8001ec4:	d005      	beq.n	8001ed2 <__aeabi_ddiv+0x57e>
 8001ec6:	1d11      	adds	r1, r2, #4
 8001ec8:	4291      	cmp	r1, r2
 8001eca:	4192      	sbcs	r2, r2
 8001ecc:	4252      	negs	r2, r2
 8001ece:	189b      	adds	r3, r3, r2
 8001ed0:	000a      	movs	r2, r1
 8001ed2:	0219      	lsls	r1, r3, #8
 8001ed4:	d400      	bmi.n	8001ed8 <__aeabi_ddiv+0x584>
 8001ed6:	e755      	b.n	8001d84 <__aeabi_ddiv+0x430>
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2301      	movs	r3, #1
 8001edc:	2400      	movs	r4, #0
 8001ede:	4690      	mov	r8, r2
 8001ee0:	e598      	b.n	8001a14 <__aeabi_ddiv+0xc0>
 8001ee2:	000a      	movs	r2, r1
 8001ee4:	42bc      	cmp	r4, r7
 8001ee6:	d000      	beq.n	8001eea <__aeabi_ddiv+0x596>
 8001ee8:	e66e      	b.n	8001bc8 <__aeabi_ddiv+0x274>
 8001eea:	454b      	cmp	r3, r9
 8001eec:	d000      	beq.n	8001ef0 <__aeabi_ddiv+0x59c>
 8001eee:	e66b      	b.n	8001bc8 <__aeabi_ddiv+0x274>
 8001ef0:	e66c      	b.n	8001bcc <__aeabi_ddiv+0x278>
 8001ef2:	4b23      	ldr	r3, [pc, #140]	@ (8001f80 <__aeabi_ddiv+0x62c>)
 8001ef4:	4a23      	ldr	r2, [pc, #140]	@ (8001f84 <__aeabi_ddiv+0x630>)
 8001ef6:	4453      	add	r3, sl
 8001ef8:	4592      	cmp	sl, r2
 8001efa:	da00      	bge.n	8001efe <__aeabi_ddiv+0x5aa>
 8001efc:	e718      	b.n	8001d30 <__aeabi_ddiv+0x3dc>
 8001efe:	2101      	movs	r1, #1
 8001f00:	4249      	negs	r1, r1
 8001f02:	1d0a      	adds	r2, r1, #4
 8001f04:	428a      	cmp	r2, r1
 8001f06:	4189      	sbcs	r1, r1
 8001f08:	4249      	negs	r1, r1
 8001f0a:	448b      	add	fp, r1
 8001f0c:	e666      	b.n	8001bdc <__aeabi_ddiv+0x288>
 8001f0e:	210f      	movs	r1, #15
 8001f10:	4011      	ands	r1, r2
 8001f12:	2904      	cmp	r1, #4
 8001f14:	d100      	bne.n	8001f18 <__aeabi_ddiv+0x5c4>
 8001f16:	e661      	b.n	8001bdc <__aeabi_ddiv+0x288>
 8001f18:	0011      	movs	r1, r2
 8001f1a:	e7f2      	b.n	8001f02 <__aeabi_ddiv+0x5ae>
 8001f1c:	42bc      	cmp	r4, r7
 8001f1e:	d800      	bhi.n	8001f22 <__aeabi_ddiv+0x5ce>
 8001f20:	e60a      	b.n	8001b38 <__aeabi_ddiv+0x1e4>
 8001f22:	2302      	movs	r3, #2
 8001f24:	425b      	negs	r3, r3
 8001f26:	469c      	mov	ip, r3
 8001f28:	9900      	ldr	r1, [sp, #0]
 8001f2a:	444f      	add	r7, r9
 8001f2c:	454f      	cmp	r7, r9
 8001f2e:	419b      	sbcs	r3, r3
 8001f30:	44e3      	add	fp, ip
 8001f32:	468c      	mov	ip, r1
 8001f34:	425b      	negs	r3, r3
 8001f36:	4463      	add	r3, ip
 8001f38:	18c0      	adds	r0, r0, r3
 8001f3a:	e5ff      	b.n	8001b3c <__aeabi_ddiv+0x1e8>
 8001f3c:	4649      	mov	r1, r9
 8001f3e:	9d00      	ldr	r5, [sp, #0]
 8001f40:	0048      	lsls	r0, r1, #1
 8001f42:	4548      	cmp	r0, r9
 8001f44:	4189      	sbcs	r1, r1
 8001f46:	46ac      	mov	ip, r5
 8001f48:	4249      	negs	r1, r1
 8001f4a:	4461      	add	r1, ip
 8001f4c:	4681      	mov	r9, r0
 8001f4e:	3a02      	subs	r2, #2
 8001f50:	1864      	adds	r4, r4, r1
 8001f52:	e7c7      	b.n	8001ee4 <__aeabi_ddiv+0x590>
 8001f54:	2480      	movs	r4, #128	@ 0x80
 8001f56:	465b      	mov	r3, fp
 8001f58:	0324      	lsls	r4, r4, #12
 8001f5a:	431c      	orrs	r4, r3
 8001f5c:	0324      	lsls	r4, r4, #12
 8001f5e:	4690      	mov	r8, r2
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <__aeabi_ddiv+0x620>)
 8001f62:	0b24      	lsrs	r4, r4, #12
 8001f64:	e556      	b.n	8001a14 <__aeabi_ddiv+0xc0>
 8001f66:	4599      	cmp	r9, r3
 8001f68:	d3e8      	bcc.n	8001f3c <__aeabi_ddiv+0x5e8>
 8001f6a:	000a      	movs	r2, r1
 8001f6c:	e7bd      	b.n	8001eea <__aeabi_ddiv+0x596>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e708      	b.n	8001d84 <__aeabi_ddiv+0x430>
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	000007ff 	.word	0x000007ff
 8001f78:	0000043e 	.word	0x0000043e
 8001f7c:	0000041e 	.word	0x0000041e
 8001f80:	000003ff 	.word	0x000003ff
 8001f84:	fffffc02 	.word	0xfffffc02

08001f88 <__eqdf2>:
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	4657      	mov	r7, sl
 8001f8c:	46de      	mov	lr, fp
 8001f8e:	464e      	mov	r6, r9
 8001f90:	4645      	mov	r5, r8
 8001f92:	b5e0      	push	{r5, r6, r7, lr}
 8001f94:	000d      	movs	r5, r1
 8001f96:	0004      	movs	r4, r0
 8001f98:	0fe8      	lsrs	r0, r5, #31
 8001f9a:	4683      	mov	fp, r0
 8001f9c:	0309      	lsls	r1, r1, #12
 8001f9e:	0fd8      	lsrs	r0, r3, #31
 8001fa0:	0b09      	lsrs	r1, r1, #12
 8001fa2:	4682      	mov	sl, r0
 8001fa4:	4819      	ldr	r0, [pc, #100]	@ (800200c <__eqdf2+0x84>)
 8001fa6:	468c      	mov	ip, r1
 8001fa8:	031f      	lsls	r7, r3, #12
 8001faa:	0069      	lsls	r1, r5, #1
 8001fac:	005e      	lsls	r6, r3, #1
 8001fae:	0d49      	lsrs	r1, r1, #21
 8001fb0:	0b3f      	lsrs	r7, r7, #12
 8001fb2:	0d76      	lsrs	r6, r6, #21
 8001fb4:	4281      	cmp	r1, r0
 8001fb6:	d018      	beq.n	8001fea <__eqdf2+0x62>
 8001fb8:	4286      	cmp	r6, r0
 8001fba:	d00f      	beq.n	8001fdc <__eqdf2+0x54>
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	42b1      	cmp	r1, r6
 8001fc0:	d10d      	bne.n	8001fde <__eqdf2+0x56>
 8001fc2:	45bc      	cmp	ip, r7
 8001fc4:	d10b      	bne.n	8001fde <__eqdf2+0x56>
 8001fc6:	4294      	cmp	r4, r2
 8001fc8:	d109      	bne.n	8001fde <__eqdf2+0x56>
 8001fca:	45d3      	cmp	fp, sl
 8001fcc:	d01c      	beq.n	8002008 <__eqdf2+0x80>
 8001fce:	2900      	cmp	r1, #0
 8001fd0:	d105      	bne.n	8001fde <__eqdf2+0x56>
 8001fd2:	4660      	mov	r0, ip
 8001fd4:	4320      	orrs	r0, r4
 8001fd6:	1e43      	subs	r3, r0, #1
 8001fd8:	4198      	sbcs	r0, r3
 8001fda:	e000      	b.n	8001fde <__eqdf2+0x56>
 8001fdc:	2001      	movs	r0, #1
 8001fde:	bcf0      	pop	{r4, r5, r6, r7}
 8001fe0:	46bb      	mov	fp, r7
 8001fe2:	46b2      	mov	sl, r6
 8001fe4:	46a9      	mov	r9, r5
 8001fe6:	46a0      	mov	r8, r4
 8001fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fea:	2001      	movs	r0, #1
 8001fec:	428e      	cmp	r6, r1
 8001fee:	d1f6      	bne.n	8001fde <__eqdf2+0x56>
 8001ff0:	4661      	mov	r1, ip
 8001ff2:	4339      	orrs	r1, r7
 8001ff4:	000f      	movs	r7, r1
 8001ff6:	4317      	orrs	r7, r2
 8001ff8:	4327      	orrs	r7, r4
 8001ffa:	d1f0      	bne.n	8001fde <__eqdf2+0x56>
 8001ffc:	465b      	mov	r3, fp
 8001ffe:	4652      	mov	r2, sl
 8002000:	1a98      	subs	r0, r3, r2
 8002002:	1e43      	subs	r3, r0, #1
 8002004:	4198      	sbcs	r0, r3
 8002006:	e7ea      	b.n	8001fde <__eqdf2+0x56>
 8002008:	2000      	movs	r0, #0
 800200a:	e7e8      	b.n	8001fde <__eqdf2+0x56>
 800200c:	000007ff 	.word	0x000007ff

08002010 <__gedf2>:
 8002010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002012:	4657      	mov	r7, sl
 8002014:	464e      	mov	r6, r9
 8002016:	4645      	mov	r5, r8
 8002018:	46de      	mov	lr, fp
 800201a:	b5e0      	push	{r5, r6, r7, lr}
 800201c:	000d      	movs	r5, r1
 800201e:	030f      	lsls	r7, r1, #12
 8002020:	0b39      	lsrs	r1, r7, #12
 8002022:	b083      	sub	sp, #12
 8002024:	0004      	movs	r4, r0
 8002026:	4680      	mov	r8, r0
 8002028:	9101      	str	r1, [sp, #4]
 800202a:	0058      	lsls	r0, r3, #1
 800202c:	0fe9      	lsrs	r1, r5, #31
 800202e:	4f31      	ldr	r7, [pc, #196]	@ (80020f4 <__gedf2+0xe4>)
 8002030:	0d40      	lsrs	r0, r0, #21
 8002032:	468c      	mov	ip, r1
 8002034:	006e      	lsls	r6, r5, #1
 8002036:	0319      	lsls	r1, r3, #12
 8002038:	4682      	mov	sl, r0
 800203a:	4691      	mov	r9, r2
 800203c:	0d76      	lsrs	r6, r6, #21
 800203e:	0b09      	lsrs	r1, r1, #12
 8002040:	0fd8      	lsrs	r0, r3, #31
 8002042:	42be      	cmp	r6, r7
 8002044:	d01f      	beq.n	8002086 <__gedf2+0x76>
 8002046:	45ba      	cmp	sl, r7
 8002048:	d00f      	beq.n	800206a <__gedf2+0x5a>
 800204a:	2e00      	cmp	r6, #0
 800204c:	d12f      	bne.n	80020ae <__gedf2+0x9e>
 800204e:	4655      	mov	r5, sl
 8002050:	9e01      	ldr	r6, [sp, #4]
 8002052:	4334      	orrs	r4, r6
 8002054:	2d00      	cmp	r5, #0
 8002056:	d127      	bne.n	80020a8 <__gedf2+0x98>
 8002058:	430a      	orrs	r2, r1
 800205a:	d03a      	beq.n	80020d2 <__gedf2+0xc2>
 800205c:	2c00      	cmp	r4, #0
 800205e:	d145      	bne.n	80020ec <__gedf2+0xdc>
 8002060:	2800      	cmp	r0, #0
 8002062:	d11a      	bne.n	800209a <__gedf2+0x8a>
 8002064:	2001      	movs	r0, #1
 8002066:	4240      	negs	r0, r0
 8002068:	e017      	b.n	800209a <__gedf2+0x8a>
 800206a:	4311      	orrs	r1, r2
 800206c:	d13b      	bne.n	80020e6 <__gedf2+0xd6>
 800206e:	2e00      	cmp	r6, #0
 8002070:	d102      	bne.n	8002078 <__gedf2+0x68>
 8002072:	9f01      	ldr	r7, [sp, #4]
 8002074:	4327      	orrs	r7, r4
 8002076:	d0f3      	beq.n	8002060 <__gedf2+0x50>
 8002078:	4584      	cmp	ip, r0
 800207a:	d109      	bne.n	8002090 <__gedf2+0x80>
 800207c:	4663      	mov	r3, ip
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <__gedf2+0x54>
 8002082:	4660      	mov	r0, ip
 8002084:	e009      	b.n	800209a <__gedf2+0x8a>
 8002086:	9f01      	ldr	r7, [sp, #4]
 8002088:	4327      	orrs	r7, r4
 800208a:	d12c      	bne.n	80020e6 <__gedf2+0xd6>
 800208c:	45b2      	cmp	sl, r6
 800208e:	d024      	beq.n	80020da <__gedf2+0xca>
 8002090:	4663      	mov	r3, ip
 8002092:	2002      	movs	r0, #2
 8002094:	3b01      	subs	r3, #1
 8002096:	4018      	ands	r0, r3
 8002098:	3801      	subs	r0, #1
 800209a:	b003      	add	sp, #12
 800209c:	bcf0      	pop	{r4, r5, r6, r7}
 800209e:	46bb      	mov	fp, r7
 80020a0:	46b2      	mov	sl, r6
 80020a2:	46a9      	mov	r9, r5
 80020a4:	46a0      	mov	r8, r4
 80020a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a8:	2c00      	cmp	r4, #0
 80020aa:	d0d9      	beq.n	8002060 <__gedf2+0x50>
 80020ac:	e7e4      	b.n	8002078 <__gedf2+0x68>
 80020ae:	4654      	mov	r4, sl
 80020b0:	2c00      	cmp	r4, #0
 80020b2:	d0ed      	beq.n	8002090 <__gedf2+0x80>
 80020b4:	4584      	cmp	ip, r0
 80020b6:	d1eb      	bne.n	8002090 <__gedf2+0x80>
 80020b8:	4556      	cmp	r6, sl
 80020ba:	dce9      	bgt.n	8002090 <__gedf2+0x80>
 80020bc:	dbde      	blt.n	800207c <__gedf2+0x6c>
 80020be:	9b01      	ldr	r3, [sp, #4]
 80020c0:	428b      	cmp	r3, r1
 80020c2:	d8e5      	bhi.n	8002090 <__gedf2+0x80>
 80020c4:	d1da      	bne.n	800207c <__gedf2+0x6c>
 80020c6:	45c8      	cmp	r8, r9
 80020c8:	d8e2      	bhi.n	8002090 <__gedf2+0x80>
 80020ca:	2000      	movs	r0, #0
 80020cc:	45c8      	cmp	r8, r9
 80020ce:	d2e4      	bcs.n	800209a <__gedf2+0x8a>
 80020d0:	e7d4      	b.n	800207c <__gedf2+0x6c>
 80020d2:	2000      	movs	r0, #0
 80020d4:	2c00      	cmp	r4, #0
 80020d6:	d0e0      	beq.n	800209a <__gedf2+0x8a>
 80020d8:	e7da      	b.n	8002090 <__gedf2+0x80>
 80020da:	4311      	orrs	r1, r2
 80020dc:	d103      	bne.n	80020e6 <__gedf2+0xd6>
 80020de:	4584      	cmp	ip, r0
 80020e0:	d1d6      	bne.n	8002090 <__gedf2+0x80>
 80020e2:	2000      	movs	r0, #0
 80020e4:	e7d9      	b.n	800209a <__gedf2+0x8a>
 80020e6:	2002      	movs	r0, #2
 80020e8:	4240      	negs	r0, r0
 80020ea:	e7d6      	b.n	800209a <__gedf2+0x8a>
 80020ec:	4584      	cmp	ip, r0
 80020ee:	d0e6      	beq.n	80020be <__gedf2+0xae>
 80020f0:	e7ce      	b.n	8002090 <__gedf2+0x80>
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	000007ff 	.word	0x000007ff

080020f8 <__ledf2>:
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fa:	4657      	mov	r7, sl
 80020fc:	464e      	mov	r6, r9
 80020fe:	4645      	mov	r5, r8
 8002100:	46de      	mov	lr, fp
 8002102:	b5e0      	push	{r5, r6, r7, lr}
 8002104:	000d      	movs	r5, r1
 8002106:	030f      	lsls	r7, r1, #12
 8002108:	0004      	movs	r4, r0
 800210a:	4680      	mov	r8, r0
 800210c:	0fe8      	lsrs	r0, r5, #31
 800210e:	0b39      	lsrs	r1, r7, #12
 8002110:	4684      	mov	ip, r0
 8002112:	b083      	sub	sp, #12
 8002114:	0058      	lsls	r0, r3, #1
 8002116:	4f30      	ldr	r7, [pc, #192]	@ (80021d8 <__ledf2+0xe0>)
 8002118:	0d40      	lsrs	r0, r0, #21
 800211a:	9101      	str	r1, [sp, #4]
 800211c:	031e      	lsls	r6, r3, #12
 800211e:	0069      	lsls	r1, r5, #1
 8002120:	4682      	mov	sl, r0
 8002122:	4691      	mov	r9, r2
 8002124:	0d49      	lsrs	r1, r1, #21
 8002126:	0b36      	lsrs	r6, r6, #12
 8002128:	0fd8      	lsrs	r0, r3, #31
 800212a:	42b9      	cmp	r1, r7
 800212c:	d020      	beq.n	8002170 <__ledf2+0x78>
 800212e:	45ba      	cmp	sl, r7
 8002130:	d00f      	beq.n	8002152 <__ledf2+0x5a>
 8002132:	2900      	cmp	r1, #0
 8002134:	d12b      	bne.n	800218e <__ledf2+0x96>
 8002136:	9901      	ldr	r1, [sp, #4]
 8002138:	430c      	orrs	r4, r1
 800213a:	4651      	mov	r1, sl
 800213c:	2900      	cmp	r1, #0
 800213e:	d137      	bne.n	80021b0 <__ledf2+0xb8>
 8002140:	4332      	orrs	r2, r6
 8002142:	d038      	beq.n	80021b6 <__ledf2+0xbe>
 8002144:	2c00      	cmp	r4, #0
 8002146:	d144      	bne.n	80021d2 <__ledf2+0xda>
 8002148:	2800      	cmp	r0, #0
 800214a:	d119      	bne.n	8002180 <__ledf2+0x88>
 800214c:	2001      	movs	r0, #1
 800214e:	4240      	negs	r0, r0
 8002150:	e016      	b.n	8002180 <__ledf2+0x88>
 8002152:	4316      	orrs	r6, r2
 8002154:	d113      	bne.n	800217e <__ledf2+0x86>
 8002156:	2900      	cmp	r1, #0
 8002158:	d102      	bne.n	8002160 <__ledf2+0x68>
 800215a:	9f01      	ldr	r7, [sp, #4]
 800215c:	4327      	orrs	r7, r4
 800215e:	d0f3      	beq.n	8002148 <__ledf2+0x50>
 8002160:	4584      	cmp	ip, r0
 8002162:	d020      	beq.n	80021a6 <__ledf2+0xae>
 8002164:	4663      	mov	r3, ip
 8002166:	2002      	movs	r0, #2
 8002168:	3b01      	subs	r3, #1
 800216a:	4018      	ands	r0, r3
 800216c:	3801      	subs	r0, #1
 800216e:	e007      	b.n	8002180 <__ledf2+0x88>
 8002170:	9f01      	ldr	r7, [sp, #4]
 8002172:	4327      	orrs	r7, r4
 8002174:	d103      	bne.n	800217e <__ledf2+0x86>
 8002176:	458a      	cmp	sl, r1
 8002178:	d1f4      	bne.n	8002164 <__ledf2+0x6c>
 800217a:	4316      	orrs	r6, r2
 800217c:	d01f      	beq.n	80021be <__ledf2+0xc6>
 800217e:	2002      	movs	r0, #2
 8002180:	b003      	add	sp, #12
 8002182:	bcf0      	pop	{r4, r5, r6, r7}
 8002184:	46bb      	mov	fp, r7
 8002186:	46b2      	mov	sl, r6
 8002188:	46a9      	mov	r9, r5
 800218a:	46a0      	mov	r8, r4
 800218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800218e:	4654      	mov	r4, sl
 8002190:	2c00      	cmp	r4, #0
 8002192:	d0e7      	beq.n	8002164 <__ledf2+0x6c>
 8002194:	4584      	cmp	ip, r0
 8002196:	d1e5      	bne.n	8002164 <__ledf2+0x6c>
 8002198:	4551      	cmp	r1, sl
 800219a:	dce3      	bgt.n	8002164 <__ledf2+0x6c>
 800219c:	db03      	blt.n	80021a6 <__ledf2+0xae>
 800219e:	9b01      	ldr	r3, [sp, #4]
 80021a0:	42b3      	cmp	r3, r6
 80021a2:	d8df      	bhi.n	8002164 <__ledf2+0x6c>
 80021a4:	d00f      	beq.n	80021c6 <__ledf2+0xce>
 80021a6:	4663      	mov	r3, ip
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0cf      	beq.n	800214c <__ledf2+0x54>
 80021ac:	4660      	mov	r0, ip
 80021ae:	e7e7      	b.n	8002180 <__ledf2+0x88>
 80021b0:	2c00      	cmp	r4, #0
 80021b2:	d0c9      	beq.n	8002148 <__ledf2+0x50>
 80021b4:	e7d4      	b.n	8002160 <__ledf2+0x68>
 80021b6:	2000      	movs	r0, #0
 80021b8:	2c00      	cmp	r4, #0
 80021ba:	d0e1      	beq.n	8002180 <__ledf2+0x88>
 80021bc:	e7d2      	b.n	8002164 <__ledf2+0x6c>
 80021be:	4584      	cmp	ip, r0
 80021c0:	d1d0      	bne.n	8002164 <__ledf2+0x6c>
 80021c2:	2000      	movs	r0, #0
 80021c4:	e7dc      	b.n	8002180 <__ledf2+0x88>
 80021c6:	45c8      	cmp	r8, r9
 80021c8:	d8cc      	bhi.n	8002164 <__ledf2+0x6c>
 80021ca:	2000      	movs	r0, #0
 80021cc:	45c8      	cmp	r8, r9
 80021ce:	d2d7      	bcs.n	8002180 <__ledf2+0x88>
 80021d0:	e7e9      	b.n	80021a6 <__ledf2+0xae>
 80021d2:	4584      	cmp	ip, r0
 80021d4:	d0e3      	beq.n	800219e <__ledf2+0xa6>
 80021d6:	e7c5      	b.n	8002164 <__ledf2+0x6c>
 80021d8:	000007ff 	.word	0x000007ff

080021dc <__aeabi_dmul>:
 80021dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021de:	4657      	mov	r7, sl
 80021e0:	46de      	mov	lr, fp
 80021e2:	464e      	mov	r6, r9
 80021e4:	4645      	mov	r5, r8
 80021e6:	b5e0      	push	{r5, r6, r7, lr}
 80021e8:	001f      	movs	r7, r3
 80021ea:	030b      	lsls	r3, r1, #12
 80021ec:	0b1b      	lsrs	r3, r3, #12
 80021ee:	0016      	movs	r6, r2
 80021f0:	469a      	mov	sl, r3
 80021f2:	0fca      	lsrs	r2, r1, #31
 80021f4:	004b      	lsls	r3, r1, #1
 80021f6:	0004      	movs	r4, r0
 80021f8:	4693      	mov	fp, r2
 80021fa:	b087      	sub	sp, #28
 80021fc:	0d5b      	lsrs	r3, r3, #21
 80021fe:	d100      	bne.n	8002202 <__aeabi_dmul+0x26>
 8002200:	e0d5      	b.n	80023ae <__aeabi_dmul+0x1d2>
 8002202:	4abb      	ldr	r2, [pc, #748]	@ (80024f0 <__aeabi_dmul+0x314>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d100      	bne.n	800220a <__aeabi_dmul+0x2e>
 8002208:	e0f8      	b.n	80023fc <__aeabi_dmul+0x220>
 800220a:	4651      	mov	r1, sl
 800220c:	0f42      	lsrs	r2, r0, #29
 800220e:	00c9      	lsls	r1, r1, #3
 8002210:	430a      	orrs	r2, r1
 8002212:	2180      	movs	r1, #128	@ 0x80
 8002214:	0409      	lsls	r1, r1, #16
 8002216:	4311      	orrs	r1, r2
 8002218:	00c2      	lsls	r2, r0, #3
 800221a:	4691      	mov	r9, r2
 800221c:	4ab5      	ldr	r2, [pc, #724]	@ (80024f4 <__aeabi_dmul+0x318>)
 800221e:	468a      	mov	sl, r1
 8002220:	189d      	adds	r5, r3, r2
 8002222:	2300      	movs	r3, #0
 8002224:	4698      	mov	r8, r3
 8002226:	9302      	str	r3, [sp, #8]
 8002228:	033c      	lsls	r4, r7, #12
 800222a:	007b      	lsls	r3, r7, #1
 800222c:	0ffa      	lsrs	r2, r7, #31
 800222e:	0030      	movs	r0, r6
 8002230:	0b24      	lsrs	r4, r4, #12
 8002232:	0d5b      	lsrs	r3, r3, #21
 8002234:	9200      	str	r2, [sp, #0]
 8002236:	d100      	bne.n	800223a <__aeabi_dmul+0x5e>
 8002238:	e096      	b.n	8002368 <__aeabi_dmul+0x18c>
 800223a:	4aad      	ldr	r2, [pc, #692]	@ (80024f0 <__aeabi_dmul+0x314>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d031      	beq.n	80022a4 <__aeabi_dmul+0xc8>
 8002240:	0f72      	lsrs	r2, r6, #29
 8002242:	00e4      	lsls	r4, r4, #3
 8002244:	4322      	orrs	r2, r4
 8002246:	2480      	movs	r4, #128	@ 0x80
 8002248:	0424      	lsls	r4, r4, #16
 800224a:	4314      	orrs	r4, r2
 800224c:	4aa9      	ldr	r2, [pc, #676]	@ (80024f4 <__aeabi_dmul+0x318>)
 800224e:	00f0      	lsls	r0, r6, #3
 8002250:	4694      	mov	ip, r2
 8002252:	4463      	add	r3, ip
 8002254:	195b      	adds	r3, r3, r5
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	9201      	str	r2, [sp, #4]
 800225a:	4642      	mov	r2, r8
 800225c:	2600      	movs	r6, #0
 800225e:	2a0a      	cmp	r2, #10
 8002260:	dc42      	bgt.n	80022e8 <__aeabi_dmul+0x10c>
 8002262:	465a      	mov	r2, fp
 8002264:	9900      	ldr	r1, [sp, #0]
 8002266:	404a      	eors	r2, r1
 8002268:	4693      	mov	fp, r2
 800226a:	4642      	mov	r2, r8
 800226c:	2a02      	cmp	r2, #2
 800226e:	dc32      	bgt.n	80022d6 <__aeabi_dmul+0xfa>
 8002270:	3a01      	subs	r2, #1
 8002272:	2a01      	cmp	r2, #1
 8002274:	d900      	bls.n	8002278 <__aeabi_dmul+0x9c>
 8002276:	e149      	b.n	800250c <__aeabi_dmul+0x330>
 8002278:	2e02      	cmp	r6, #2
 800227a:	d100      	bne.n	800227e <__aeabi_dmul+0xa2>
 800227c:	e0ca      	b.n	8002414 <__aeabi_dmul+0x238>
 800227e:	2e01      	cmp	r6, #1
 8002280:	d13d      	bne.n	80022fe <__aeabi_dmul+0x122>
 8002282:	2300      	movs	r3, #0
 8002284:	2400      	movs	r4, #0
 8002286:	2200      	movs	r2, #0
 8002288:	0010      	movs	r0, r2
 800228a:	465a      	mov	r2, fp
 800228c:	051b      	lsls	r3, r3, #20
 800228e:	4323      	orrs	r3, r4
 8002290:	07d2      	lsls	r2, r2, #31
 8002292:	4313      	orrs	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	b007      	add	sp, #28
 8002298:	bcf0      	pop	{r4, r5, r6, r7}
 800229a:	46bb      	mov	fp, r7
 800229c:	46b2      	mov	sl, r6
 800229e:	46a9      	mov	r9, r5
 80022a0:	46a0      	mov	r8, r4
 80022a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a4:	4b92      	ldr	r3, [pc, #584]	@ (80024f0 <__aeabi_dmul+0x314>)
 80022a6:	4326      	orrs	r6, r4
 80022a8:	18eb      	adds	r3, r5, r3
 80022aa:	2e00      	cmp	r6, #0
 80022ac:	d100      	bne.n	80022b0 <__aeabi_dmul+0xd4>
 80022ae:	e0bb      	b.n	8002428 <__aeabi_dmul+0x24c>
 80022b0:	2203      	movs	r2, #3
 80022b2:	4641      	mov	r1, r8
 80022b4:	4311      	orrs	r1, r2
 80022b6:	465a      	mov	r2, fp
 80022b8:	4688      	mov	r8, r1
 80022ba:	9900      	ldr	r1, [sp, #0]
 80022bc:	404a      	eors	r2, r1
 80022be:	2180      	movs	r1, #128	@ 0x80
 80022c0:	0109      	lsls	r1, r1, #4
 80022c2:	468c      	mov	ip, r1
 80022c4:	0029      	movs	r1, r5
 80022c6:	4461      	add	r1, ip
 80022c8:	9101      	str	r1, [sp, #4]
 80022ca:	4641      	mov	r1, r8
 80022cc:	290a      	cmp	r1, #10
 80022ce:	dd00      	ble.n	80022d2 <__aeabi_dmul+0xf6>
 80022d0:	e233      	b.n	800273a <__aeabi_dmul+0x55e>
 80022d2:	4693      	mov	fp, r2
 80022d4:	2603      	movs	r6, #3
 80022d6:	4642      	mov	r2, r8
 80022d8:	2701      	movs	r7, #1
 80022da:	4097      	lsls	r7, r2
 80022dc:	21a6      	movs	r1, #166	@ 0xa6
 80022de:	003a      	movs	r2, r7
 80022e0:	00c9      	lsls	r1, r1, #3
 80022e2:	400a      	ands	r2, r1
 80022e4:	420f      	tst	r7, r1
 80022e6:	d031      	beq.n	800234c <__aeabi_dmul+0x170>
 80022e8:	9e02      	ldr	r6, [sp, #8]
 80022ea:	2e02      	cmp	r6, #2
 80022ec:	d100      	bne.n	80022f0 <__aeabi_dmul+0x114>
 80022ee:	e235      	b.n	800275c <__aeabi_dmul+0x580>
 80022f0:	2e03      	cmp	r6, #3
 80022f2:	d100      	bne.n	80022f6 <__aeabi_dmul+0x11a>
 80022f4:	e1d2      	b.n	800269c <__aeabi_dmul+0x4c0>
 80022f6:	4654      	mov	r4, sl
 80022f8:	4648      	mov	r0, r9
 80022fa:	2e01      	cmp	r6, #1
 80022fc:	d0c1      	beq.n	8002282 <__aeabi_dmul+0xa6>
 80022fe:	9a01      	ldr	r2, [sp, #4]
 8002300:	4b7d      	ldr	r3, [pc, #500]	@ (80024f8 <__aeabi_dmul+0x31c>)
 8002302:	4694      	mov	ip, r2
 8002304:	4463      	add	r3, ip
 8002306:	2b00      	cmp	r3, #0
 8002308:	dc00      	bgt.n	800230c <__aeabi_dmul+0x130>
 800230a:	e0c0      	b.n	800248e <__aeabi_dmul+0x2b2>
 800230c:	0742      	lsls	r2, r0, #29
 800230e:	d009      	beq.n	8002324 <__aeabi_dmul+0x148>
 8002310:	220f      	movs	r2, #15
 8002312:	4002      	ands	r2, r0
 8002314:	2a04      	cmp	r2, #4
 8002316:	d005      	beq.n	8002324 <__aeabi_dmul+0x148>
 8002318:	1d02      	adds	r2, r0, #4
 800231a:	4282      	cmp	r2, r0
 800231c:	4180      	sbcs	r0, r0
 800231e:	4240      	negs	r0, r0
 8002320:	1824      	adds	r4, r4, r0
 8002322:	0010      	movs	r0, r2
 8002324:	01e2      	lsls	r2, r4, #7
 8002326:	d506      	bpl.n	8002336 <__aeabi_dmul+0x15a>
 8002328:	4b74      	ldr	r3, [pc, #464]	@ (80024fc <__aeabi_dmul+0x320>)
 800232a:	9a01      	ldr	r2, [sp, #4]
 800232c:	401c      	ands	r4, r3
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	4694      	mov	ip, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4463      	add	r3, ip
 8002336:	4a72      	ldr	r2, [pc, #456]	@ (8002500 <__aeabi_dmul+0x324>)
 8002338:	4293      	cmp	r3, r2
 800233a:	dc6b      	bgt.n	8002414 <__aeabi_dmul+0x238>
 800233c:	0762      	lsls	r2, r4, #29
 800233e:	08c0      	lsrs	r0, r0, #3
 8002340:	0264      	lsls	r4, r4, #9
 8002342:	055b      	lsls	r3, r3, #21
 8002344:	4302      	orrs	r2, r0
 8002346:	0b24      	lsrs	r4, r4, #12
 8002348:	0d5b      	lsrs	r3, r3, #21
 800234a:	e79d      	b.n	8002288 <__aeabi_dmul+0xac>
 800234c:	2190      	movs	r1, #144	@ 0x90
 800234e:	0089      	lsls	r1, r1, #2
 8002350:	420f      	tst	r7, r1
 8002352:	d163      	bne.n	800241c <__aeabi_dmul+0x240>
 8002354:	2288      	movs	r2, #136	@ 0x88
 8002356:	423a      	tst	r2, r7
 8002358:	d100      	bne.n	800235c <__aeabi_dmul+0x180>
 800235a:	e0d7      	b.n	800250c <__aeabi_dmul+0x330>
 800235c:	9b00      	ldr	r3, [sp, #0]
 800235e:	46a2      	mov	sl, r4
 8002360:	469b      	mov	fp, r3
 8002362:	4681      	mov	r9, r0
 8002364:	9602      	str	r6, [sp, #8]
 8002366:	e7bf      	b.n	80022e8 <__aeabi_dmul+0x10c>
 8002368:	0023      	movs	r3, r4
 800236a:	4333      	orrs	r3, r6
 800236c:	d100      	bne.n	8002370 <__aeabi_dmul+0x194>
 800236e:	e07f      	b.n	8002470 <__aeabi_dmul+0x294>
 8002370:	2c00      	cmp	r4, #0
 8002372:	d100      	bne.n	8002376 <__aeabi_dmul+0x19a>
 8002374:	e1ad      	b.n	80026d2 <__aeabi_dmul+0x4f6>
 8002376:	0020      	movs	r0, r4
 8002378:	f000 fe8e 	bl	8003098 <__clzsi2>
 800237c:	0002      	movs	r2, r0
 800237e:	0003      	movs	r3, r0
 8002380:	3a0b      	subs	r2, #11
 8002382:	201d      	movs	r0, #29
 8002384:	0019      	movs	r1, r3
 8002386:	1a82      	subs	r2, r0, r2
 8002388:	0030      	movs	r0, r6
 800238a:	3908      	subs	r1, #8
 800238c:	40d0      	lsrs	r0, r2
 800238e:	408c      	lsls	r4, r1
 8002390:	4304      	orrs	r4, r0
 8002392:	0030      	movs	r0, r6
 8002394:	4088      	lsls	r0, r1
 8002396:	4a5b      	ldr	r2, [pc, #364]	@ (8002504 <__aeabi_dmul+0x328>)
 8002398:	1aeb      	subs	r3, r5, r3
 800239a:	4694      	mov	ip, r2
 800239c:	4463      	add	r3, ip
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	9201      	str	r2, [sp, #4]
 80023a2:	4642      	mov	r2, r8
 80023a4:	2600      	movs	r6, #0
 80023a6:	2a0a      	cmp	r2, #10
 80023a8:	dc00      	bgt.n	80023ac <__aeabi_dmul+0x1d0>
 80023aa:	e75a      	b.n	8002262 <__aeabi_dmul+0x86>
 80023ac:	e79c      	b.n	80022e8 <__aeabi_dmul+0x10c>
 80023ae:	4653      	mov	r3, sl
 80023b0:	4303      	orrs	r3, r0
 80023b2:	4699      	mov	r9, r3
 80023b4:	d054      	beq.n	8002460 <__aeabi_dmul+0x284>
 80023b6:	4653      	mov	r3, sl
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d100      	bne.n	80023be <__aeabi_dmul+0x1e2>
 80023bc:	e177      	b.n	80026ae <__aeabi_dmul+0x4d2>
 80023be:	4650      	mov	r0, sl
 80023c0:	f000 fe6a 	bl	8003098 <__clzsi2>
 80023c4:	230b      	movs	r3, #11
 80023c6:	425b      	negs	r3, r3
 80023c8:	469c      	mov	ip, r3
 80023ca:	0002      	movs	r2, r0
 80023cc:	4484      	add	ip, r0
 80023ce:	0011      	movs	r1, r2
 80023d0:	4650      	mov	r0, sl
 80023d2:	3908      	subs	r1, #8
 80023d4:	4088      	lsls	r0, r1
 80023d6:	231d      	movs	r3, #29
 80023d8:	4680      	mov	r8, r0
 80023da:	4660      	mov	r0, ip
 80023dc:	1a1b      	subs	r3, r3, r0
 80023de:	0020      	movs	r0, r4
 80023e0:	40d8      	lsrs	r0, r3
 80023e2:	0003      	movs	r3, r0
 80023e4:	4640      	mov	r0, r8
 80023e6:	4303      	orrs	r3, r0
 80023e8:	469a      	mov	sl, r3
 80023ea:	0023      	movs	r3, r4
 80023ec:	408b      	lsls	r3, r1
 80023ee:	4699      	mov	r9, r3
 80023f0:	2300      	movs	r3, #0
 80023f2:	4d44      	ldr	r5, [pc, #272]	@ (8002504 <__aeabi_dmul+0x328>)
 80023f4:	4698      	mov	r8, r3
 80023f6:	1aad      	subs	r5, r5, r2
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	e715      	b.n	8002228 <__aeabi_dmul+0x4c>
 80023fc:	4652      	mov	r2, sl
 80023fe:	4302      	orrs	r2, r0
 8002400:	4691      	mov	r9, r2
 8002402:	d126      	bne.n	8002452 <__aeabi_dmul+0x276>
 8002404:	2200      	movs	r2, #0
 8002406:	001d      	movs	r5, r3
 8002408:	2302      	movs	r3, #2
 800240a:	4692      	mov	sl, r2
 800240c:	3208      	adds	r2, #8
 800240e:	4690      	mov	r8, r2
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	e709      	b.n	8002228 <__aeabi_dmul+0x4c>
 8002414:	2400      	movs	r4, #0
 8002416:	2200      	movs	r2, #0
 8002418:	4b35      	ldr	r3, [pc, #212]	@ (80024f0 <__aeabi_dmul+0x314>)
 800241a:	e735      	b.n	8002288 <__aeabi_dmul+0xac>
 800241c:	2300      	movs	r3, #0
 800241e:	2480      	movs	r4, #128	@ 0x80
 8002420:	469b      	mov	fp, r3
 8002422:	0324      	lsls	r4, r4, #12
 8002424:	4b32      	ldr	r3, [pc, #200]	@ (80024f0 <__aeabi_dmul+0x314>)
 8002426:	e72f      	b.n	8002288 <__aeabi_dmul+0xac>
 8002428:	2202      	movs	r2, #2
 800242a:	4641      	mov	r1, r8
 800242c:	4311      	orrs	r1, r2
 800242e:	2280      	movs	r2, #128	@ 0x80
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	4694      	mov	ip, r2
 8002434:	002a      	movs	r2, r5
 8002436:	4462      	add	r2, ip
 8002438:	4688      	mov	r8, r1
 800243a:	9201      	str	r2, [sp, #4]
 800243c:	290a      	cmp	r1, #10
 800243e:	dd00      	ble.n	8002442 <__aeabi_dmul+0x266>
 8002440:	e752      	b.n	80022e8 <__aeabi_dmul+0x10c>
 8002442:	465a      	mov	r2, fp
 8002444:	2000      	movs	r0, #0
 8002446:	9900      	ldr	r1, [sp, #0]
 8002448:	0004      	movs	r4, r0
 800244a:	404a      	eors	r2, r1
 800244c:	4693      	mov	fp, r2
 800244e:	2602      	movs	r6, #2
 8002450:	e70b      	b.n	800226a <__aeabi_dmul+0x8e>
 8002452:	220c      	movs	r2, #12
 8002454:	001d      	movs	r5, r3
 8002456:	2303      	movs	r3, #3
 8002458:	4681      	mov	r9, r0
 800245a:	4690      	mov	r8, r2
 800245c:	9302      	str	r3, [sp, #8]
 800245e:	e6e3      	b.n	8002228 <__aeabi_dmul+0x4c>
 8002460:	2300      	movs	r3, #0
 8002462:	469a      	mov	sl, r3
 8002464:	3304      	adds	r3, #4
 8002466:	4698      	mov	r8, r3
 8002468:	3b03      	subs	r3, #3
 800246a:	2500      	movs	r5, #0
 800246c:	9302      	str	r3, [sp, #8]
 800246e:	e6db      	b.n	8002228 <__aeabi_dmul+0x4c>
 8002470:	4642      	mov	r2, r8
 8002472:	3301      	adds	r3, #1
 8002474:	431a      	orrs	r2, r3
 8002476:	002b      	movs	r3, r5
 8002478:	4690      	mov	r8, r2
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	9201      	str	r2, [sp, #4]
 800247e:	4642      	mov	r2, r8
 8002480:	2400      	movs	r4, #0
 8002482:	2000      	movs	r0, #0
 8002484:	2601      	movs	r6, #1
 8002486:	2a0a      	cmp	r2, #10
 8002488:	dc00      	bgt.n	800248c <__aeabi_dmul+0x2b0>
 800248a:	e6ea      	b.n	8002262 <__aeabi_dmul+0x86>
 800248c:	e72c      	b.n	80022e8 <__aeabi_dmul+0x10c>
 800248e:	2201      	movs	r2, #1
 8002490:	1ad2      	subs	r2, r2, r3
 8002492:	2a38      	cmp	r2, #56	@ 0x38
 8002494:	dd00      	ble.n	8002498 <__aeabi_dmul+0x2bc>
 8002496:	e6f4      	b.n	8002282 <__aeabi_dmul+0xa6>
 8002498:	2a1f      	cmp	r2, #31
 800249a:	dc00      	bgt.n	800249e <__aeabi_dmul+0x2c2>
 800249c:	e12a      	b.n	80026f4 <__aeabi_dmul+0x518>
 800249e:	211f      	movs	r1, #31
 80024a0:	4249      	negs	r1, r1
 80024a2:	1acb      	subs	r3, r1, r3
 80024a4:	0021      	movs	r1, r4
 80024a6:	40d9      	lsrs	r1, r3
 80024a8:	000b      	movs	r3, r1
 80024aa:	2a20      	cmp	r2, #32
 80024ac:	d005      	beq.n	80024ba <__aeabi_dmul+0x2de>
 80024ae:	4a16      	ldr	r2, [pc, #88]	@ (8002508 <__aeabi_dmul+0x32c>)
 80024b0:	9d01      	ldr	r5, [sp, #4]
 80024b2:	4694      	mov	ip, r2
 80024b4:	4465      	add	r5, ip
 80024b6:	40ac      	lsls	r4, r5
 80024b8:	4320      	orrs	r0, r4
 80024ba:	1e42      	subs	r2, r0, #1
 80024bc:	4190      	sbcs	r0, r2
 80024be:	4318      	orrs	r0, r3
 80024c0:	2307      	movs	r3, #7
 80024c2:	0019      	movs	r1, r3
 80024c4:	2400      	movs	r4, #0
 80024c6:	4001      	ands	r1, r0
 80024c8:	4203      	tst	r3, r0
 80024ca:	d00c      	beq.n	80024e6 <__aeabi_dmul+0x30a>
 80024cc:	230f      	movs	r3, #15
 80024ce:	4003      	ands	r3, r0
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d100      	bne.n	80024d6 <__aeabi_dmul+0x2fa>
 80024d4:	e140      	b.n	8002758 <__aeabi_dmul+0x57c>
 80024d6:	1d03      	adds	r3, r0, #4
 80024d8:	4283      	cmp	r3, r0
 80024da:	41a4      	sbcs	r4, r4
 80024dc:	0018      	movs	r0, r3
 80024de:	4264      	negs	r4, r4
 80024e0:	0761      	lsls	r1, r4, #29
 80024e2:	0264      	lsls	r4, r4, #9
 80024e4:	0b24      	lsrs	r4, r4, #12
 80024e6:	08c2      	lsrs	r2, r0, #3
 80024e8:	2300      	movs	r3, #0
 80024ea:	430a      	orrs	r2, r1
 80024ec:	e6cc      	b.n	8002288 <__aeabi_dmul+0xac>
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	000007ff 	.word	0x000007ff
 80024f4:	fffffc01 	.word	0xfffffc01
 80024f8:	000003ff 	.word	0x000003ff
 80024fc:	feffffff 	.word	0xfeffffff
 8002500:	000007fe 	.word	0x000007fe
 8002504:	fffffc0d 	.word	0xfffffc0d
 8002508:	0000043e 	.word	0x0000043e
 800250c:	4649      	mov	r1, r9
 800250e:	464a      	mov	r2, r9
 8002510:	0409      	lsls	r1, r1, #16
 8002512:	0c09      	lsrs	r1, r1, #16
 8002514:	000d      	movs	r5, r1
 8002516:	0c16      	lsrs	r6, r2, #16
 8002518:	0c02      	lsrs	r2, r0, #16
 800251a:	0400      	lsls	r0, r0, #16
 800251c:	0c00      	lsrs	r0, r0, #16
 800251e:	4345      	muls	r5, r0
 8002520:	46ac      	mov	ip, r5
 8002522:	0005      	movs	r5, r0
 8002524:	4375      	muls	r5, r6
 8002526:	46a8      	mov	r8, r5
 8002528:	0015      	movs	r5, r2
 800252a:	000f      	movs	r7, r1
 800252c:	4375      	muls	r5, r6
 800252e:	9200      	str	r2, [sp, #0]
 8002530:	9502      	str	r5, [sp, #8]
 8002532:	002a      	movs	r2, r5
 8002534:	9d00      	ldr	r5, [sp, #0]
 8002536:	436f      	muls	r7, r5
 8002538:	4665      	mov	r5, ip
 800253a:	0c2d      	lsrs	r5, r5, #16
 800253c:	46a9      	mov	r9, r5
 800253e:	4447      	add	r7, r8
 8002540:	444f      	add	r7, r9
 8002542:	45b8      	cmp	r8, r7
 8002544:	d905      	bls.n	8002552 <__aeabi_dmul+0x376>
 8002546:	0015      	movs	r5, r2
 8002548:	2280      	movs	r2, #128	@ 0x80
 800254a:	0252      	lsls	r2, r2, #9
 800254c:	4690      	mov	r8, r2
 800254e:	4445      	add	r5, r8
 8002550:	9502      	str	r5, [sp, #8]
 8002552:	0c3d      	lsrs	r5, r7, #16
 8002554:	9503      	str	r5, [sp, #12]
 8002556:	4665      	mov	r5, ip
 8002558:	042d      	lsls	r5, r5, #16
 800255a:	043f      	lsls	r7, r7, #16
 800255c:	0c2d      	lsrs	r5, r5, #16
 800255e:	46ac      	mov	ip, r5
 8002560:	003d      	movs	r5, r7
 8002562:	4465      	add	r5, ip
 8002564:	9504      	str	r5, [sp, #16]
 8002566:	0c25      	lsrs	r5, r4, #16
 8002568:	0424      	lsls	r4, r4, #16
 800256a:	0c24      	lsrs	r4, r4, #16
 800256c:	46ac      	mov	ip, r5
 800256e:	0025      	movs	r5, r4
 8002570:	4375      	muls	r5, r6
 8002572:	46a8      	mov	r8, r5
 8002574:	4665      	mov	r5, ip
 8002576:	000f      	movs	r7, r1
 8002578:	4369      	muls	r1, r5
 800257a:	4441      	add	r1, r8
 800257c:	4689      	mov	r9, r1
 800257e:	4367      	muls	r7, r4
 8002580:	0c39      	lsrs	r1, r7, #16
 8002582:	4449      	add	r1, r9
 8002584:	436e      	muls	r6, r5
 8002586:	4588      	cmp	r8, r1
 8002588:	d903      	bls.n	8002592 <__aeabi_dmul+0x3b6>
 800258a:	2280      	movs	r2, #128	@ 0x80
 800258c:	0252      	lsls	r2, r2, #9
 800258e:	4690      	mov	r8, r2
 8002590:	4446      	add	r6, r8
 8002592:	0c0d      	lsrs	r5, r1, #16
 8002594:	46a8      	mov	r8, r5
 8002596:	0035      	movs	r5, r6
 8002598:	4445      	add	r5, r8
 800259a:	9505      	str	r5, [sp, #20]
 800259c:	9d03      	ldr	r5, [sp, #12]
 800259e:	043f      	lsls	r7, r7, #16
 80025a0:	46a8      	mov	r8, r5
 80025a2:	0c3f      	lsrs	r7, r7, #16
 80025a4:	0409      	lsls	r1, r1, #16
 80025a6:	19c9      	adds	r1, r1, r7
 80025a8:	4488      	add	r8, r1
 80025aa:	4645      	mov	r5, r8
 80025ac:	9503      	str	r5, [sp, #12]
 80025ae:	4655      	mov	r5, sl
 80025b0:	042e      	lsls	r6, r5, #16
 80025b2:	0c36      	lsrs	r6, r6, #16
 80025b4:	0c2f      	lsrs	r7, r5, #16
 80025b6:	0035      	movs	r5, r6
 80025b8:	4345      	muls	r5, r0
 80025ba:	4378      	muls	r0, r7
 80025bc:	4681      	mov	r9, r0
 80025be:	0038      	movs	r0, r7
 80025c0:	46a8      	mov	r8, r5
 80025c2:	0c2d      	lsrs	r5, r5, #16
 80025c4:	46aa      	mov	sl, r5
 80025c6:	9a00      	ldr	r2, [sp, #0]
 80025c8:	4350      	muls	r0, r2
 80025ca:	4372      	muls	r2, r6
 80025cc:	444a      	add	r2, r9
 80025ce:	4452      	add	r2, sl
 80025d0:	4591      	cmp	r9, r2
 80025d2:	d903      	bls.n	80025dc <__aeabi_dmul+0x400>
 80025d4:	2580      	movs	r5, #128	@ 0x80
 80025d6:	026d      	lsls	r5, r5, #9
 80025d8:	46a9      	mov	r9, r5
 80025da:	4448      	add	r0, r9
 80025dc:	0c15      	lsrs	r5, r2, #16
 80025de:	46a9      	mov	r9, r5
 80025e0:	4645      	mov	r5, r8
 80025e2:	042d      	lsls	r5, r5, #16
 80025e4:	0c2d      	lsrs	r5, r5, #16
 80025e6:	46a8      	mov	r8, r5
 80025e8:	4665      	mov	r5, ip
 80025ea:	437d      	muls	r5, r7
 80025ec:	0412      	lsls	r2, r2, #16
 80025ee:	4448      	add	r0, r9
 80025f0:	4490      	add	r8, r2
 80025f2:	46a9      	mov	r9, r5
 80025f4:	0032      	movs	r2, r6
 80025f6:	4665      	mov	r5, ip
 80025f8:	4362      	muls	r2, r4
 80025fa:	436e      	muls	r6, r5
 80025fc:	437c      	muls	r4, r7
 80025fe:	0c17      	lsrs	r7, r2, #16
 8002600:	1936      	adds	r6, r6, r4
 8002602:	19bf      	adds	r7, r7, r6
 8002604:	42bc      	cmp	r4, r7
 8002606:	d903      	bls.n	8002610 <__aeabi_dmul+0x434>
 8002608:	2480      	movs	r4, #128	@ 0x80
 800260a:	0264      	lsls	r4, r4, #9
 800260c:	46a4      	mov	ip, r4
 800260e:	44e1      	add	r9, ip
 8002610:	9c02      	ldr	r4, [sp, #8]
 8002612:	9e03      	ldr	r6, [sp, #12]
 8002614:	46a4      	mov	ip, r4
 8002616:	9d05      	ldr	r5, [sp, #20]
 8002618:	4466      	add	r6, ip
 800261a:	428e      	cmp	r6, r1
 800261c:	4189      	sbcs	r1, r1
 800261e:	46ac      	mov	ip, r5
 8002620:	0412      	lsls	r2, r2, #16
 8002622:	043c      	lsls	r4, r7, #16
 8002624:	0c12      	lsrs	r2, r2, #16
 8002626:	18a2      	adds	r2, r4, r2
 8002628:	4462      	add	r2, ip
 800262a:	4249      	negs	r1, r1
 800262c:	1854      	adds	r4, r2, r1
 800262e:	4446      	add	r6, r8
 8002630:	46a4      	mov	ip, r4
 8002632:	4546      	cmp	r6, r8
 8002634:	41a4      	sbcs	r4, r4
 8002636:	4682      	mov	sl, r0
 8002638:	4264      	negs	r4, r4
 800263a:	46a0      	mov	r8, r4
 800263c:	42aa      	cmp	r2, r5
 800263e:	4192      	sbcs	r2, r2
 8002640:	458c      	cmp	ip, r1
 8002642:	4189      	sbcs	r1, r1
 8002644:	44e2      	add	sl, ip
 8002646:	44d0      	add	r8, sl
 8002648:	4249      	negs	r1, r1
 800264a:	4252      	negs	r2, r2
 800264c:	430a      	orrs	r2, r1
 800264e:	45a0      	cmp	r8, r4
 8002650:	41a4      	sbcs	r4, r4
 8002652:	4582      	cmp	sl, r0
 8002654:	4189      	sbcs	r1, r1
 8002656:	4264      	negs	r4, r4
 8002658:	4249      	negs	r1, r1
 800265a:	430c      	orrs	r4, r1
 800265c:	4641      	mov	r1, r8
 800265e:	0c3f      	lsrs	r7, r7, #16
 8002660:	19d2      	adds	r2, r2, r7
 8002662:	1912      	adds	r2, r2, r4
 8002664:	0dcc      	lsrs	r4, r1, #23
 8002666:	9904      	ldr	r1, [sp, #16]
 8002668:	0270      	lsls	r0, r6, #9
 800266a:	4308      	orrs	r0, r1
 800266c:	1e41      	subs	r1, r0, #1
 800266e:	4188      	sbcs	r0, r1
 8002670:	4641      	mov	r1, r8
 8002672:	444a      	add	r2, r9
 8002674:	0df6      	lsrs	r6, r6, #23
 8002676:	0252      	lsls	r2, r2, #9
 8002678:	4330      	orrs	r0, r6
 800267a:	0249      	lsls	r1, r1, #9
 800267c:	4314      	orrs	r4, r2
 800267e:	4308      	orrs	r0, r1
 8002680:	01d2      	lsls	r2, r2, #7
 8002682:	d535      	bpl.n	80026f0 <__aeabi_dmul+0x514>
 8002684:	2201      	movs	r2, #1
 8002686:	0843      	lsrs	r3, r0, #1
 8002688:	4002      	ands	r2, r0
 800268a:	4313      	orrs	r3, r2
 800268c:	07e0      	lsls	r0, r4, #31
 800268e:	4318      	orrs	r0, r3
 8002690:	0864      	lsrs	r4, r4, #1
 8002692:	e634      	b.n	80022fe <__aeabi_dmul+0x122>
 8002694:	9b00      	ldr	r3, [sp, #0]
 8002696:	46a2      	mov	sl, r4
 8002698:	469b      	mov	fp, r3
 800269a:	4681      	mov	r9, r0
 800269c:	2480      	movs	r4, #128	@ 0x80
 800269e:	4653      	mov	r3, sl
 80026a0:	0324      	lsls	r4, r4, #12
 80026a2:	431c      	orrs	r4, r3
 80026a4:	0324      	lsls	r4, r4, #12
 80026a6:	464a      	mov	r2, r9
 80026a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002764 <__aeabi_dmul+0x588>)
 80026aa:	0b24      	lsrs	r4, r4, #12
 80026ac:	e5ec      	b.n	8002288 <__aeabi_dmul+0xac>
 80026ae:	f000 fcf3 	bl	8003098 <__clzsi2>
 80026b2:	2315      	movs	r3, #21
 80026b4:	469c      	mov	ip, r3
 80026b6:	4484      	add	ip, r0
 80026b8:	0002      	movs	r2, r0
 80026ba:	4663      	mov	r3, ip
 80026bc:	3220      	adds	r2, #32
 80026be:	2b1c      	cmp	r3, #28
 80026c0:	dc00      	bgt.n	80026c4 <__aeabi_dmul+0x4e8>
 80026c2:	e684      	b.n	80023ce <__aeabi_dmul+0x1f2>
 80026c4:	2300      	movs	r3, #0
 80026c6:	4699      	mov	r9, r3
 80026c8:	0023      	movs	r3, r4
 80026ca:	3808      	subs	r0, #8
 80026cc:	4083      	lsls	r3, r0
 80026ce:	469a      	mov	sl, r3
 80026d0:	e68e      	b.n	80023f0 <__aeabi_dmul+0x214>
 80026d2:	f000 fce1 	bl	8003098 <__clzsi2>
 80026d6:	0002      	movs	r2, r0
 80026d8:	0003      	movs	r3, r0
 80026da:	3215      	adds	r2, #21
 80026dc:	3320      	adds	r3, #32
 80026de:	2a1c      	cmp	r2, #28
 80026e0:	dc00      	bgt.n	80026e4 <__aeabi_dmul+0x508>
 80026e2:	e64e      	b.n	8002382 <__aeabi_dmul+0x1a6>
 80026e4:	0002      	movs	r2, r0
 80026e6:	0034      	movs	r4, r6
 80026e8:	3a08      	subs	r2, #8
 80026ea:	2000      	movs	r0, #0
 80026ec:	4094      	lsls	r4, r2
 80026ee:	e652      	b.n	8002396 <__aeabi_dmul+0x1ba>
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	e604      	b.n	80022fe <__aeabi_dmul+0x122>
 80026f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002768 <__aeabi_dmul+0x58c>)
 80026f6:	0021      	movs	r1, r4
 80026f8:	469c      	mov	ip, r3
 80026fa:	0003      	movs	r3, r0
 80026fc:	9d01      	ldr	r5, [sp, #4]
 80026fe:	40d3      	lsrs	r3, r2
 8002700:	4465      	add	r5, ip
 8002702:	40a9      	lsls	r1, r5
 8002704:	4319      	orrs	r1, r3
 8002706:	0003      	movs	r3, r0
 8002708:	40ab      	lsls	r3, r5
 800270a:	1e58      	subs	r0, r3, #1
 800270c:	4183      	sbcs	r3, r0
 800270e:	4319      	orrs	r1, r3
 8002710:	0008      	movs	r0, r1
 8002712:	40d4      	lsrs	r4, r2
 8002714:	074b      	lsls	r3, r1, #29
 8002716:	d009      	beq.n	800272c <__aeabi_dmul+0x550>
 8002718:	230f      	movs	r3, #15
 800271a:	400b      	ands	r3, r1
 800271c:	2b04      	cmp	r3, #4
 800271e:	d005      	beq.n	800272c <__aeabi_dmul+0x550>
 8002720:	1d0b      	adds	r3, r1, #4
 8002722:	428b      	cmp	r3, r1
 8002724:	4180      	sbcs	r0, r0
 8002726:	4240      	negs	r0, r0
 8002728:	1824      	adds	r4, r4, r0
 800272a:	0018      	movs	r0, r3
 800272c:	0223      	lsls	r3, r4, #8
 800272e:	d400      	bmi.n	8002732 <__aeabi_dmul+0x556>
 8002730:	e6d6      	b.n	80024e0 <__aeabi_dmul+0x304>
 8002732:	2301      	movs	r3, #1
 8002734:	2400      	movs	r4, #0
 8002736:	2200      	movs	r2, #0
 8002738:	e5a6      	b.n	8002288 <__aeabi_dmul+0xac>
 800273a:	290f      	cmp	r1, #15
 800273c:	d1aa      	bne.n	8002694 <__aeabi_dmul+0x4b8>
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	4652      	mov	r2, sl
 8002742:	031b      	lsls	r3, r3, #12
 8002744:	421a      	tst	r2, r3
 8002746:	d0a9      	beq.n	800269c <__aeabi_dmul+0x4c0>
 8002748:	421c      	tst	r4, r3
 800274a:	d1a7      	bne.n	800269c <__aeabi_dmul+0x4c0>
 800274c:	431c      	orrs	r4, r3
 800274e:	9b00      	ldr	r3, [sp, #0]
 8002750:	0002      	movs	r2, r0
 8002752:	469b      	mov	fp, r3
 8002754:	4b03      	ldr	r3, [pc, #12]	@ (8002764 <__aeabi_dmul+0x588>)
 8002756:	e597      	b.n	8002288 <__aeabi_dmul+0xac>
 8002758:	2400      	movs	r4, #0
 800275a:	e6c1      	b.n	80024e0 <__aeabi_dmul+0x304>
 800275c:	2400      	movs	r4, #0
 800275e:	4b01      	ldr	r3, [pc, #4]	@ (8002764 <__aeabi_dmul+0x588>)
 8002760:	0022      	movs	r2, r4
 8002762:	e591      	b.n	8002288 <__aeabi_dmul+0xac>
 8002764:	000007ff 	.word	0x000007ff
 8002768:	0000041e 	.word	0x0000041e

0800276c <__aeabi_dsub>:
 800276c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276e:	464e      	mov	r6, r9
 8002770:	4645      	mov	r5, r8
 8002772:	46de      	mov	lr, fp
 8002774:	4657      	mov	r7, sl
 8002776:	b5e0      	push	{r5, r6, r7, lr}
 8002778:	b085      	sub	sp, #20
 800277a:	9000      	str	r0, [sp, #0]
 800277c:	9101      	str	r1, [sp, #4]
 800277e:	030c      	lsls	r4, r1, #12
 8002780:	004f      	lsls	r7, r1, #1
 8002782:	0fce      	lsrs	r6, r1, #31
 8002784:	0a61      	lsrs	r1, r4, #9
 8002786:	9c00      	ldr	r4, [sp, #0]
 8002788:	46b0      	mov	r8, r6
 800278a:	0f64      	lsrs	r4, r4, #29
 800278c:	430c      	orrs	r4, r1
 800278e:	9900      	ldr	r1, [sp, #0]
 8002790:	0d7f      	lsrs	r7, r7, #21
 8002792:	00c8      	lsls	r0, r1, #3
 8002794:	0011      	movs	r1, r2
 8002796:	001a      	movs	r2, r3
 8002798:	031b      	lsls	r3, r3, #12
 800279a:	469c      	mov	ip, r3
 800279c:	9100      	str	r1, [sp, #0]
 800279e:	9201      	str	r2, [sp, #4]
 80027a0:	0051      	lsls	r1, r2, #1
 80027a2:	0d4b      	lsrs	r3, r1, #21
 80027a4:	4699      	mov	r9, r3
 80027a6:	9b01      	ldr	r3, [sp, #4]
 80027a8:	9d00      	ldr	r5, [sp, #0]
 80027aa:	0fd9      	lsrs	r1, r3, #31
 80027ac:	4663      	mov	r3, ip
 80027ae:	0f6a      	lsrs	r2, r5, #29
 80027b0:	0a5b      	lsrs	r3, r3, #9
 80027b2:	4313      	orrs	r3, r2
 80027b4:	00ea      	lsls	r2, r5, #3
 80027b6:	4694      	mov	ip, r2
 80027b8:	4693      	mov	fp, r2
 80027ba:	4ac1      	ldr	r2, [pc, #772]	@ (8002ac0 <__aeabi_dsub+0x354>)
 80027bc:	9003      	str	r0, [sp, #12]
 80027be:	9302      	str	r3, [sp, #8]
 80027c0:	4591      	cmp	r9, r2
 80027c2:	d100      	bne.n	80027c6 <__aeabi_dsub+0x5a>
 80027c4:	e0cd      	b.n	8002962 <__aeabi_dsub+0x1f6>
 80027c6:	2501      	movs	r5, #1
 80027c8:	4069      	eors	r1, r5
 80027ca:	464d      	mov	r5, r9
 80027cc:	1b7d      	subs	r5, r7, r5
 80027ce:	46aa      	mov	sl, r5
 80027d0:	428e      	cmp	r6, r1
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dsub+0x6a>
 80027d4:	e080      	b.n	80028d8 <__aeabi_dsub+0x16c>
 80027d6:	2d00      	cmp	r5, #0
 80027d8:	dc00      	bgt.n	80027dc <__aeabi_dsub+0x70>
 80027da:	e335      	b.n	8002e48 <__aeabi_dsub+0x6dc>
 80027dc:	4649      	mov	r1, r9
 80027de:	2900      	cmp	r1, #0
 80027e0:	d100      	bne.n	80027e4 <__aeabi_dsub+0x78>
 80027e2:	e0df      	b.n	80029a4 <__aeabi_dsub+0x238>
 80027e4:	4297      	cmp	r7, r2
 80027e6:	d100      	bne.n	80027ea <__aeabi_dsub+0x7e>
 80027e8:	e194      	b.n	8002b14 <__aeabi_dsub+0x3a8>
 80027ea:	4652      	mov	r2, sl
 80027ec:	2501      	movs	r5, #1
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dc19      	bgt.n	8002826 <__aeabi_dsub+0xba>
 80027f2:	2280      	movs	r2, #128	@ 0x80
 80027f4:	9b02      	ldr	r3, [sp, #8]
 80027f6:	0412      	lsls	r2, r2, #16
 80027f8:	4313      	orrs	r3, r2
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	4652      	mov	r2, sl
 80027fe:	2a1f      	cmp	r2, #31
 8002800:	dd00      	ble.n	8002804 <__aeabi_dsub+0x98>
 8002802:	e1e3      	b.n	8002bcc <__aeabi_dsub+0x460>
 8002804:	4653      	mov	r3, sl
 8002806:	2220      	movs	r2, #32
 8002808:	4661      	mov	r1, ip
 800280a:	9d02      	ldr	r5, [sp, #8]
 800280c:	1ad2      	subs	r2, r2, r3
 800280e:	4095      	lsls	r5, r2
 8002810:	40d9      	lsrs	r1, r3
 8002812:	430d      	orrs	r5, r1
 8002814:	4661      	mov	r1, ip
 8002816:	4091      	lsls	r1, r2
 8002818:	000a      	movs	r2, r1
 800281a:	1e51      	subs	r1, r2, #1
 800281c:	418a      	sbcs	r2, r1
 800281e:	4315      	orrs	r5, r2
 8002820:	9a02      	ldr	r2, [sp, #8]
 8002822:	40da      	lsrs	r2, r3
 8002824:	1aa4      	subs	r4, r4, r2
 8002826:	1b45      	subs	r5, r0, r5
 8002828:	42a8      	cmp	r0, r5
 800282a:	4180      	sbcs	r0, r0
 800282c:	4240      	negs	r0, r0
 800282e:	1a24      	subs	r4, r4, r0
 8002830:	0223      	lsls	r3, r4, #8
 8002832:	d400      	bmi.n	8002836 <__aeabi_dsub+0xca>
 8002834:	e13d      	b.n	8002ab2 <__aeabi_dsub+0x346>
 8002836:	0264      	lsls	r4, r4, #9
 8002838:	0a64      	lsrs	r4, r4, #9
 800283a:	2c00      	cmp	r4, #0
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0xd4>
 800283e:	e147      	b.n	8002ad0 <__aeabi_dsub+0x364>
 8002840:	0020      	movs	r0, r4
 8002842:	f000 fc29 	bl	8003098 <__clzsi2>
 8002846:	0003      	movs	r3, r0
 8002848:	3b08      	subs	r3, #8
 800284a:	2120      	movs	r1, #32
 800284c:	0028      	movs	r0, r5
 800284e:	1aca      	subs	r2, r1, r3
 8002850:	40d0      	lsrs	r0, r2
 8002852:	409c      	lsls	r4, r3
 8002854:	0002      	movs	r2, r0
 8002856:	409d      	lsls	r5, r3
 8002858:	4322      	orrs	r2, r4
 800285a:	429f      	cmp	r7, r3
 800285c:	dd00      	ble.n	8002860 <__aeabi_dsub+0xf4>
 800285e:	e177      	b.n	8002b50 <__aeabi_dsub+0x3e4>
 8002860:	1bd8      	subs	r0, r3, r7
 8002862:	3001      	adds	r0, #1
 8002864:	1a09      	subs	r1, r1, r0
 8002866:	002c      	movs	r4, r5
 8002868:	408d      	lsls	r5, r1
 800286a:	40c4      	lsrs	r4, r0
 800286c:	1e6b      	subs	r3, r5, #1
 800286e:	419d      	sbcs	r5, r3
 8002870:	0013      	movs	r3, r2
 8002872:	40c2      	lsrs	r2, r0
 8002874:	408b      	lsls	r3, r1
 8002876:	4325      	orrs	r5, r4
 8002878:	2700      	movs	r7, #0
 800287a:	0014      	movs	r4, r2
 800287c:	431d      	orrs	r5, r3
 800287e:	076b      	lsls	r3, r5, #29
 8002880:	d009      	beq.n	8002896 <__aeabi_dsub+0x12a>
 8002882:	230f      	movs	r3, #15
 8002884:	402b      	ands	r3, r5
 8002886:	2b04      	cmp	r3, #4
 8002888:	d005      	beq.n	8002896 <__aeabi_dsub+0x12a>
 800288a:	1d2b      	adds	r3, r5, #4
 800288c:	42ab      	cmp	r3, r5
 800288e:	41ad      	sbcs	r5, r5
 8002890:	426d      	negs	r5, r5
 8002892:	1964      	adds	r4, r4, r5
 8002894:	001d      	movs	r5, r3
 8002896:	0223      	lsls	r3, r4, #8
 8002898:	d400      	bmi.n	800289c <__aeabi_dsub+0x130>
 800289a:	e140      	b.n	8002b1e <__aeabi_dsub+0x3b2>
 800289c:	4a88      	ldr	r2, [pc, #544]	@ (8002ac0 <__aeabi_dsub+0x354>)
 800289e:	3701      	adds	r7, #1
 80028a0:	4297      	cmp	r7, r2
 80028a2:	d100      	bne.n	80028a6 <__aeabi_dsub+0x13a>
 80028a4:	e101      	b.n	8002aaa <__aeabi_dsub+0x33e>
 80028a6:	2601      	movs	r6, #1
 80028a8:	4643      	mov	r3, r8
 80028aa:	4986      	ldr	r1, [pc, #536]	@ (8002ac4 <__aeabi_dsub+0x358>)
 80028ac:	08ed      	lsrs	r5, r5, #3
 80028ae:	4021      	ands	r1, r4
 80028b0:	074a      	lsls	r2, r1, #29
 80028b2:	432a      	orrs	r2, r5
 80028b4:	057c      	lsls	r4, r7, #21
 80028b6:	024d      	lsls	r5, r1, #9
 80028b8:	0b2d      	lsrs	r5, r5, #12
 80028ba:	0d64      	lsrs	r4, r4, #21
 80028bc:	401e      	ands	r6, r3
 80028be:	0524      	lsls	r4, r4, #20
 80028c0:	432c      	orrs	r4, r5
 80028c2:	07f6      	lsls	r6, r6, #31
 80028c4:	4334      	orrs	r4, r6
 80028c6:	0010      	movs	r0, r2
 80028c8:	0021      	movs	r1, r4
 80028ca:	b005      	add	sp, #20
 80028cc:	bcf0      	pop	{r4, r5, r6, r7}
 80028ce:	46bb      	mov	fp, r7
 80028d0:	46b2      	mov	sl, r6
 80028d2:	46a9      	mov	r9, r5
 80028d4:	46a0      	mov	r8, r4
 80028d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d8:	2d00      	cmp	r5, #0
 80028da:	dc00      	bgt.n	80028de <__aeabi_dsub+0x172>
 80028dc:	e2d0      	b.n	8002e80 <__aeabi_dsub+0x714>
 80028de:	4649      	mov	r1, r9
 80028e0:	2900      	cmp	r1, #0
 80028e2:	d000      	beq.n	80028e6 <__aeabi_dsub+0x17a>
 80028e4:	e0d4      	b.n	8002a90 <__aeabi_dsub+0x324>
 80028e6:	4661      	mov	r1, ip
 80028e8:	9b02      	ldr	r3, [sp, #8]
 80028ea:	4319      	orrs	r1, r3
 80028ec:	d100      	bne.n	80028f0 <__aeabi_dsub+0x184>
 80028ee:	e12b      	b.n	8002b48 <__aeabi_dsub+0x3dc>
 80028f0:	1e69      	subs	r1, r5, #1
 80028f2:	2d01      	cmp	r5, #1
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dsub+0x18c>
 80028f6:	e1d9      	b.n	8002cac <__aeabi_dsub+0x540>
 80028f8:	4295      	cmp	r5, r2
 80028fa:	d100      	bne.n	80028fe <__aeabi_dsub+0x192>
 80028fc:	e10a      	b.n	8002b14 <__aeabi_dsub+0x3a8>
 80028fe:	2501      	movs	r5, #1
 8002900:	2938      	cmp	r1, #56	@ 0x38
 8002902:	dc17      	bgt.n	8002934 <__aeabi_dsub+0x1c8>
 8002904:	468a      	mov	sl, r1
 8002906:	4653      	mov	r3, sl
 8002908:	2b1f      	cmp	r3, #31
 800290a:	dd00      	ble.n	800290e <__aeabi_dsub+0x1a2>
 800290c:	e1e7      	b.n	8002cde <__aeabi_dsub+0x572>
 800290e:	2220      	movs	r2, #32
 8002910:	1ad2      	subs	r2, r2, r3
 8002912:	9b02      	ldr	r3, [sp, #8]
 8002914:	4661      	mov	r1, ip
 8002916:	4093      	lsls	r3, r2
 8002918:	001d      	movs	r5, r3
 800291a:	4653      	mov	r3, sl
 800291c:	40d9      	lsrs	r1, r3
 800291e:	4663      	mov	r3, ip
 8002920:	4093      	lsls	r3, r2
 8002922:	001a      	movs	r2, r3
 8002924:	430d      	orrs	r5, r1
 8002926:	1e51      	subs	r1, r2, #1
 8002928:	418a      	sbcs	r2, r1
 800292a:	4653      	mov	r3, sl
 800292c:	4315      	orrs	r5, r2
 800292e:	9a02      	ldr	r2, [sp, #8]
 8002930:	40da      	lsrs	r2, r3
 8002932:	18a4      	adds	r4, r4, r2
 8002934:	182d      	adds	r5, r5, r0
 8002936:	4285      	cmp	r5, r0
 8002938:	4180      	sbcs	r0, r0
 800293a:	4240      	negs	r0, r0
 800293c:	1824      	adds	r4, r4, r0
 800293e:	0223      	lsls	r3, r4, #8
 8002940:	d400      	bmi.n	8002944 <__aeabi_dsub+0x1d8>
 8002942:	e0b6      	b.n	8002ab2 <__aeabi_dsub+0x346>
 8002944:	4b5e      	ldr	r3, [pc, #376]	@ (8002ac0 <__aeabi_dsub+0x354>)
 8002946:	3701      	adds	r7, #1
 8002948:	429f      	cmp	r7, r3
 800294a:	d100      	bne.n	800294e <__aeabi_dsub+0x1e2>
 800294c:	e0ad      	b.n	8002aaa <__aeabi_dsub+0x33e>
 800294e:	2101      	movs	r1, #1
 8002950:	4b5c      	ldr	r3, [pc, #368]	@ (8002ac4 <__aeabi_dsub+0x358>)
 8002952:	086a      	lsrs	r2, r5, #1
 8002954:	401c      	ands	r4, r3
 8002956:	4029      	ands	r1, r5
 8002958:	430a      	orrs	r2, r1
 800295a:	07e5      	lsls	r5, r4, #31
 800295c:	4315      	orrs	r5, r2
 800295e:	0864      	lsrs	r4, r4, #1
 8002960:	e78d      	b.n	800287e <__aeabi_dsub+0x112>
 8002962:	4a59      	ldr	r2, [pc, #356]	@ (8002ac8 <__aeabi_dsub+0x35c>)
 8002964:	9b02      	ldr	r3, [sp, #8]
 8002966:	4692      	mov	sl, r2
 8002968:	4662      	mov	r2, ip
 800296a:	44ba      	add	sl, r7
 800296c:	431a      	orrs	r2, r3
 800296e:	d02c      	beq.n	80029ca <__aeabi_dsub+0x25e>
 8002970:	428e      	cmp	r6, r1
 8002972:	d02e      	beq.n	80029d2 <__aeabi_dsub+0x266>
 8002974:	4652      	mov	r2, sl
 8002976:	2a00      	cmp	r2, #0
 8002978:	d060      	beq.n	8002a3c <__aeabi_dsub+0x2d0>
 800297a:	2f00      	cmp	r7, #0
 800297c:	d100      	bne.n	8002980 <__aeabi_dsub+0x214>
 800297e:	e0db      	b.n	8002b38 <__aeabi_dsub+0x3cc>
 8002980:	4663      	mov	r3, ip
 8002982:	000e      	movs	r6, r1
 8002984:	9c02      	ldr	r4, [sp, #8]
 8002986:	08d8      	lsrs	r0, r3, #3
 8002988:	0762      	lsls	r2, r4, #29
 800298a:	4302      	orrs	r2, r0
 800298c:	08e4      	lsrs	r4, r4, #3
 800298e:	0013      	movs	r3, r2
 8002990:	4323      	orrs	r3, r4
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x22a>
 8002994:	e254      	b.n	8002e40 <__aeabi_dsub+0x6d4>
 8002996:	2580      	movs	r5, #128	@ 0x80
 8002998:	032d      	lsls	r5, r5, #12
 800299a:	4325      	orrs	r5, r4
 800299c:	032d      	lsls	r5, r5, #12
 800299e:	4c48      	ldr	r4, [pc, #288]	@ (8002ac0 <__aeabi_dsub+0x354>)
 80029a0:	0b2d      	lsrs	r5, r5, #12
 80029a2:	e78c      	b.n	80028be <__aeabi_dsub+0x152>
 80029a4:	4661      	mov	r1, ip
 80029a6:	9b02      	ldr	r3, [sp, #8]
 80029a8:	4319      	orrs	r1, r3
 80029aa:	d100      	bne.n	80029ae <__aeabi_dsub+0x242>
 80029ac:	e0cc      	b.n	8002b48 <__aeabi_dsub+0x3dc>
 80029ae:	0029      	movs	r1, r5
 80029b0:	3901      	subs	r1, #1
 80029b2:	2d01      	cmp	r5, #1
 80029b4:	d100      	bne.n	80029b8 <__aeabi_dsub+0x24c>
 80029b6:	e188      	b.n	8002cca <__aeabi_dsub+0x55e>
 80029b8:	4295      	cmp	r5, r2
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x252>
 80029bc:	e0aa      	b.n	8002b14 <__aeabi_dsub+0x3a8>
 80029be:	2501      	movs	r5, #1
 80029c0:	2938      	cmp	r1, #56	@ 0x38
 80029c2:	dd00      	ble.n	80029c6 <__aeabi_dsub+0x25a>
 80029c4:	e72f      	b.n	8002826 <__aeabi_dsub+0xba>
 80029c6:	468a      	mov	sl, r1
 80029c8:	e718      	b.n	80027fc <__aeabi_dsub+0x90>
 80029ca:	2201      	movs	r2, #1
 80029cc:	4051      	eors	r1, r2
 80029ce:	428e      	cmp	r6, r1
 80029d0:	d1d0      	bne.n	8002974 <__aeabi_dsub+0x208>
 80029d2:	4653      	mov	r3, sl
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x26e>
 80029d8:	e0be      	b.n	8002b58 <__aeabi_dsub+0x3ec>
 80029da:	2f00      	cmp	r7, #0
 80029dc:	d000      	beq.n	80029e0 <__aeabi_dsub+0x274>
 80029de:	e138      	b.n	8002c52 <__aeabi_dsub+0x4e6>
 80029e0:	46ca      	mov	sl, r9
 80029e2:	0022      	movs	r2, r4
 80029e4:	4302      	orrs	r2, r0
 80029e6:	d100      	bne.n	80029ea <__aeabi_dsub+0x27e>
 80029e8:	e1e2      	b.n	8002db0 <__aeabi_dsub+0x644>
 80029ea:	4653      	mov	r3, sl
 80029ec:	1e59      	subs	r1, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d100      	bne.n	80029f4 <__aeabi_dsub+0x288>
 80029f2:	e20d      	b.n	8002e10 <__aeabi_dsub+0x6a4>
 80029f4:	4a32      	ldr	r2, [pc, #200]	@ (8002ac0 <__aeabi_dsub+0x354>)
 80029f6:	4592      	cmp	sl, r2
 80029f8:	d100      	bne.n	80029fc <__aeabi_dsub+0x290>
 80029fa:	e1d2      	b.n	8002da2 <__aeabi_dsub+0x636>
 80029fc:	2701      	movs	r7, #1
 80029fe:	2938      	cmp	r1, #56	@ 0x38
 8002a00:	dc13      	bgt.n	8002a2a <__aeabi_dsub+0x2be>
 8002a02:	291f      	cmp	r1, #31
 8002a04:	dd00      	ble.n	8002a08 <__aeabi_dsub+0x29c>
 8002a06:	e1ee      	b.n	8002de6 <__aeabi_dsub+0x67a>
 8002a08:	2220      	movs	r2, #32
 8002a0a:	9b02      	ldr	r3, [sp, #8]
 8002a0c:	1a52      	subs	r2, r2, r1
 8002a0e:	0025      	movs	r5, r4
 8002a10:	0007      	movs	r7, r0
 8002a12:	469a      	mov	sl, r3
 8002a14:	40cc      	lsrs	r4, r1
 8002a16:	4090      	lsls	r0, r2
 8002a18:	4095      	lsls	r5, r2
 8002a1a:	40cf      	lsrs	r7, r1
 8002a1c:	44a2      	add	sl, r4
 8002a1e:	1e42      	subs	r2, r0, #1
 8002a20:	4190      	sbcs	r0, r2
 8002a22:	4653      	mov	r3, sl
 8002a24:	432f      	orrs	r7, r5
 8002a26:	4307      	orrs	r7, r0
 8002a28:	9302      	str	r3, [sp, #8]
 8002a2a:	003d      	movs	r5, r7
 8002a2c:	4465      	add	r5, ip
 8002a2e:	4565      	cmp	r5, ip
 8002a30:	4192      	sbcs	r2, r2
 8002a32:	9b02      	ldr	r3, [sp, #8]
 8002a34:	4252      	negs	r2, r2
 8002a36:	464f      	mov	r7, r9
 8002a38:	18d4      	adds	r4, r2, r3
 8002a3a:	e780      	b.n	800293e <__aeabi_dsub+0x1d2>
 8002a3c:	4a23      	ldr	r2, [pc, #140]	@ (8002acc <__aeabi_dsub+0x360>)
 8002a3e:	1c7d      	adds	r5, r7, #1
 8002a40:	4215      	tst	r5, r2
 8002a42:	d000      	beq.n	8002a46 <__aeabi_dsub+0x2da>
 8002a44:	e0aa      	b.n	8002b9c <__aeabi_dsub+0x430>
 8002a46:	4662      	mov	r2, ip
 8002a48:	0025      	movs	r5, r4
 8002a4a:	9b02      	ldr	r3, [sp, #8]
 8002a4c:	4305      	orrs	r5, r0
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	2f00      	cmp	r7, #0
 8002a52:	d000      	beq.n	8002a56 <__aeabi_dsub+0x2ea>
 8002a54:	e0f5      	b.n	8002c42 <__aeabi_dsub+0x4d6>
 8002a56:	2d00      	cmp	r5, #0
 8002a58:	d100      	bne.n	8002a5c <__aeabi_dsub+0x2f0>
 8002a5a:	e16b      	b.n	8002d34 <__aeabi_dsub+0x5c8>
 8002a5c:	2a00      	cmp	r2, #0
 8002a5e:	d100      	bne.n	8002a62 <__aeabi_dsub+0x2f6>
 8002a60:	e152      	b.n	8002d08 <__aeabi_dsub+0x59c>
 8002a62:	4663      	mov	r3, ip
 8002a64:	1ac5      	subs	r5, r0, r3
 8002a66:	9b02      	ldr	r3, [sp, #8]
 8002a68:	1ae2      	subs	r2, r4, r3
 8002a6a:	42a8      	cmp	r0, r5
 8002a6c:	419b      	sbcs	r3, r3
 8002a6e:	425b      	negs	r3, r3
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	021a      	lsls	r2, r3, #8
 8002a74:	d400      	bmi.n	8002a78 <__aeabi_dsub+0x30c>
 8002a76:	e1d5      	b.n	8002e24 <__aeabi_dsub+0x6b8>
 8002a78:	4663      	mov	r3, ip
 8002a7a:	1a1d      	subs	r5, r3, r0
 8002a7c:	45ac      	cmp	ip, r5
 8002a7e:	4192      	sbcs	r2, r2
 8002a80:	2601      	movs	r6, #1
 8002a82:	9b02      	ldr	r3, [sp, #8]
 8002a84:	4252      	negs	r2, r2
 8002a86:	1b1c      	subs	r4, r3, r4
 8002a88:	4688      	mov	r8, r1
 8002a8a:	1aa4      	subs	r4, r4, r2
 8002a8c:	400e      	ands	r6, r1
 8002a8e:	e6f6      	b.n	800287e <__aeabi_dsub+0x112>
 8002a90:	4297      	cmp	r7, r2
 8002a92:	d03f      	beq.n	8002b14 <__aeabi_dsub+0x3a8>
 8002a94:	4652      	mov	r2, sl
 8002a96:	2501      	movs	r5, #1
 8002a98:	2a38      	cmp	r2, #56	@ 0x38
 8002a9a:	dd00      	ble.n	8002a9e <__aeabi_dsub+0x332>
 8002a9c:	e74a      	b.n	8002934 <__aeabi_dsub+0x1c8>
 8002a9e:	2280      	movs	r2, #128	@ 0x80
 8002aa0:	9b02      	ldr	r3, [sp, #8]
 8002aa2:	0412      	lsls	r2, r2, #16
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	9302      	str	r3, [sp, #8]
 8002aa8:	e72d      	b.n	8002906 <__aeabi_dsub+0x19a>
 8002aaa:	003c      	movs	r4, r7
 8002aac:	2500      	movs	r5, #0
 8002aae:	2200      	movs	r2, #0
 8002ab0:	e705      	b.n	80028be <__aeabi_dsub+0x152>
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	402b      	ands	r3, r5
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d000      	beq.n	8002abc <__aeabi_dsub+0x350>
 8002aba:	e6e2      	b.n	8002882 <__aeabi_dsub+0x116>
 8002abc:	e06b      	b.n	8002b96 <__aeabi_dsub+0x42a>
 8002abe:	46c0      	nop			@ (mov r8, r8)
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	ff7fffff 	.word	0xff7fffff
 8002ac8:	fffff801 	.word	0xfffff801
 8002acc:	000007fe 	.word	0x000007fe
 8002ad0:	0028      	movs	r0, r5
 8002ad2:	f000 fae1 	bl	8003098 <__clzsi2>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	3318      	adds	r3, #24
 8002ada:	2b1f      	cmp	r3, #31
 8002adc:	dc00      	bgt.n	8002ae0 <__aeabi_dsub+0x374>
 8002ade:	e6b4      	b.n	800284a <__aeabi_dsub+0xde>
 8002ae0:	002a      	movs	r2, r5
 8002ae2:	3808      	subs	r0, #8
 8002ae4:	4082      	lsls	r2, r0
 8002ae6:	429f      	cmp	r7, r3
 8002ae8:	dd00      	ble.n	8002aec <__aeabi_dsub+0x380>
 8002aea:	e0b9      	b.n	8002c60 <__aeabi_dsub+0x4f4>
 8002aec:	1bdb      	subs	r3, r3, r7
 8002aee:	1c58      	adds	r0, r3, #1
 8002af0:	281f      	cmp	r0, #31
 8002af2:	dc00      	bgt.n	8002af6 <__aeabi_dsub+0x38a>
 8002af4:	e1a0      	b.n	8002e38 <__aeabi_dsub+0x6cc>
 8002af6:	0015      	movs	r5, r2
 8002af8:	3b1f      	subs	r3, #31
 8002afa:	40dd      	lsrs	r5, r3
 8002afc:	2820      	cmp	r0, #32
 8002afe:	d005      	beq.n	8002b0c <__aeabi_dsub+0x3a0>
 8002b00:	2340      	movs	r3, #64	@ 0x40
 8002b02:	1a1b      	subs	r3, r3, r0
 8002b04:	409a      	lsls	r2, r3
 8002b06:	1e53      	subs	r3, r2, #1
 8002b08:	419a      	sbcs	r2, r3
 8002b0a:	4315      	orrs	r5, r2
 8002b0c:	2307      	movs	r3, #7
 8002b0e:	2700      	movs	r7, #0
 8002b10:	402b      	ands	r3, r5
 8002b12:	e7d0      	b.n	8002ab6 <__aeabi_dsub+0x34a>
 8002b14:	08c0      	lsrs	r0, r0, #3
 8002b16:	0762      	lsls	r2, r4, #29
 8002b18:	4302      	orrs	r2, r0
 8002b1a:	08e4      	lsrs	r4, r4, #3
 8002b1c:	e737      	b.n	800298e <__aeabi_dsub+0x222>
 8002b1e:	08ea      	lsrs	r2, r5, #3
 8002b20:	0763      	lsls	r3, r4, #29
 8002b22:	431a      	orrs	r2, r3
 8002b24:	4bd3      	ldr	r3, [pc, #844]	@ (8002e74 <__aeabi_dsub+0x708>)
 8002b26:	08e4      	lsrs	r4, r4, #3
 8002b28:	429f      	cmp	r7, r3
 8002b2a:	d100      	bne.n	8002b2e <__aeabi_dsub+0x3c2>
 8002b2c:	e72f      	b.n	800298e <__aeabi_dsub+0x222>
 8002b2e:	0324      	lsls	r4, r4, #12
 8002b30:	0b25      	lsrs	r5, r4, #12
 8002b32:	057c      	lsls	r4, r7, #21
 8002b34:	0d64      	lsrs	r4, r4, #21
 8002b36:	e6c2      	b.n	80028be <__aeabi_dsub+0x152>
 8002b38:	46ca      	mov	sl, r9
 8002b3a:	0022      	movs	r2, r4
 8002b3c:	4302      	orrs	r2, r0
 8002b3e:	d158      	bne.n	8002bf2 <__aeabi_dsub+0x486>
 8002b40:	4663      	mov	r3, ip
 8002b42:	000e      	movs	r6, r1
 8002b44:	9c02      	ldr	r4, [sp, #8]
 8002b46:	9303      	str	r3, [sp, #12]
 8002b48:	9b03      	ldr	r3, [sp, #12]
 8002b4a:	4657      	mov	r7, sl
 8002b4c:	08da      	lsrs	r2, r3, #3
 8002b4e:	e7e7      	b.n	8002b20 <__aeabi_dsub+0x3b4>
 8002b50:	4cc9      	ldr	r4, [pc, #804]	@ (8002e78 <__aeabi_dsub+0x70c>)
 8002b52:	1aff      	subs	r7, r7, r3
 8002b54:	4014      	ands	r4, r2
 8002b56:	e692      	b.n	800287e <__aeabi_dsub+0x112>
 8002b58:	4dc8      	ldr	r5, [pc, #800]	@ (8002e7c <__aeabi_dsub+0x710>)
 8002b5a:	1c7a      	adds	r2, r7, #1
 8002b5c:	422a      	tst	r2, r5
 8002b5e:	d000      	beq.n	8002b62 <__aeabi_dsub+0x3f6>
 8002b60:	e084      	b.n	8002c6c <__aeabi_dsub+0x500>
 8002b62:	0022      	movs	r2, r4
 8002b64:	4302      	orrs	r2, r0
 8002b66:	2f00      	cmp	r7, #0
 8002b68:	d000      	beq.n	8002b6c <__aeabi_dsub+0x400>
 8002b6a:	e0ef      	b.n	8002d4c <__aeabi_dsub+0x5e0>
 8002b6c:	2a00      	cmp	r2, #0
 8002b6e:	d100      	bne.n	8002b72 <__aeabi_dsub+0x406>
 8002b70:	e0e5      	b.n	8002d3e <__aeabi_dsub+0x5d2>
 8002b72:	4662      	mov	r2, ip
 8002b74:	9902      	ldr	r1, [sp, #8]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	d100      	bne.n	8002b7c <__aeabi_dsub+0x410>
 8002b7a:	e0c5      	b.n	8002d08 <__aeabi_dsub+0x59c>
 8002b7c:	4663      	mov	r3, ip
 8002b7e:	18c5      	adds	r5, r0, r3
 8002b80:	468c      	mov	ip, r1
 8002b82:	4285      	cmp	r5, r0
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4464      	add	r4, ip
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1824      	adds	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d502      	bpl.n	8002b96 <__aeabi_dsub+0x42a>
 8002b90:	4bb9      	ldr	r3, [pc, #740]	@ (8002e78 <__aeabi_dsub+0x70c>)
 8002b92:	3701      	adds	r7, #1
 8002b94:	401c      	ands	r4, r3
 8002b96:	46ba      	mov	sl, r7
 8002b98:	9503      	str	r5, [sp, #12]
 8002b9a:	e7d5      	b.n	8002b48 <__aeabi_dsub+0x3dc>
 8002b9c:	4662      	mov	r2, ip
 8002b9e:	1a85      	subs	r5, r0, r2
 8002ba0:	42a8      	cmp	r0, r5
 8002ba2:	4192      	sbcs	r2, r2
 8002ba4:	4252      	negs	r2, r2
 8002ba6:	4691      	mov	r9, r2
 8002ba8:	9b02      	ldr	r3, [sp, #8]
 8002baa:	1ae3      	subs	r3, r4, r3
 8002bac:	001a      	movs	r2, r3
 8002bae:	464b      	mov	r3, r9
 8002bb0:	1ad2      	subs	r2, r2, r3
 8002bb2:	0013      	movs	r3, r2
 8002bb4:	4691      	mov	r9, r2
 8002bb6:	021a      	lsls	r2, r3, #8
 8002bb8:	d46c      	bmi.n	8002c94 <__aeabi_dsub+0x528>
 8002bba:	464a      	mov	r2, r9
 8002bbc:	464c      	mov	r4, r9
 8002bbe:	432a      	orrs	r2, r5
 8002bc0:	d000      	beq.n	8002bc4 <__aeabi_dsub+0x458>
 8002bc2:	e63a      	b.n	800283a <__aeabi_dsub+0xce>
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	2400      	movs	r4, #0
 8002bc8:	2500      	movs	r5, #0
 8002bca:	e678      	b.n	80028be <__aeabi_dsub+0x152>
 8002bcc:	9902      	ldr	r1, [sp, #8]
 8002bce:	4653      	mov	r3, sl
 8002bd0:	000d      	movs	r5, r1
 8002bd2:	3a20      	subs	r2, #32
 8002bd4:	40d5      	lsrs	r5, r2
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	d006      	beq.n	8002be8 <__aeabi_dsub+0x47c>
 8002bda:	2240      	movs	r2, #64	@ 0x40
 8002bdc:	1ad2      	subs	r2, r2, r3
 8002bde:	000b      	movs	r3, r1
 8002be0:	4093      	lsls	r3, r2
 8002be2:	4662      	mov	r2, ip
 8002be4:	431a      	orrs	r2, r3
 8002be6:	4693      	mov	fp, r2
 8002be8:	465b      	mov	r3, fp
 8002bea:	1e5a      	subs	r2, r3, #1
 8002bec:	4193      	sbcs	r3, r2
 8002bee:	431d      	orrs	r5, r3
 8002bf0:	e619      	b.n	8002826 <__aeabi_dsub+0xba>
 8002bf2:	4653      	mov	r3, sl
 8002bf4:	1e5a      	subs	r2, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d100      	bne.n	8002bfc <__aeabi_dsub+0x490>
 8002bfa:	e0c6      	b.n	8002d8a <__aeabi_dsub+0x61e>
 8002bfc:	4e9d      	ldr	r6, [pc, #628]	@ (8002e74 <__aeabi_dsub+0x708>)
 8002bfe:	45b2      	cmp	sl, r6
 8002c00:	d100      	bne.n	8002c04 <__aeabi_dsub+0x498>
 8002c02:	e6bd      	b.n	8002980 <__aeabi_dsub+0x214>
 8002c04:	4688      	mov	r8, r1
 8002c06:	000e      	movs	r6, r1
 8002c08:	2501      	movs	r5, #1
 8002c0a:	2a38      	cmp	r2, #56	@ 0x38
 8002c0c:	dc10      	bgt.n	8002c30 <__aeabi_dsub+0x4c4>
 8002c0e:	2a1f      	cmp	r2, #31
 8002c10:	dc7f      	bgt.n	8002d12 <__aeabi_dsub+0x5a6>
 8002c12:	2120      	movs	r1, #32
 8002c14:	0025      	movs	r5, r4
 8002c16:	1a89      	subs	r1, r1, r2
 8002c18:	0007      	movs	r7, r0
 8002c1a:	4088      	lsls	r0, r1
 8002c1c:	408d      	lsls	r5, r1
 8002c1e:	40d7      	lsrs	r7, r2
 8002c20:	40d4      	lsrs	r4, r2
 8002c22:	1e41      	subs	r1, r0, #1
 8002c24:	4188      	sbcs	r0, r1
 8002c26:	9b02      	ldr	r3, [sp, #8]
 8002c28:	433d      	orrs	r5, r7
 8002c2a:	1b1b      	subs	r3, r3, r4
 8002c2c:	4305      	orrs	r5, r0
 8002c2e:	9302      	str	r3, [sp, #8]
 8002c30:	4662      	mov	r2, ip
 8002c32:	1b55      	subs	r5, r2, r5
 8002c34:	45ac      	cmp	ip, r5
 8002c36:	4192      	sbcs	r2, r2
 8002c38:	9b02      	ldr	r3, [sp, #8]
 8002c3a:	4252      	negs	r2, r2
 8002c3c:	464f      	mov	r7, r9
 8002c3e:	1a9c      	subs	r4, r3, r2
 8002c40:	e5f6      	b.n	8002830 <__aeabi_dsub+0xc4>
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	d000      	beq.n	8002c48 <__aeabi_dsub+0x4dc>
 8002c46:	e0b7      	b.n	8002db8 <__aeabi_dsub+0x64c>
 8002c48:	2a00      	cmp	r2, #0
 8002c4a:	d100      	bne.n	8002c4e <__aeabi_dsub+0x4e2>
 8002c4c:	e0f0      	b.n	8002e30 <__aeabi_dsub+0x6c4>
 8002c4e:	2601      	movs	r6, #1
 8002c50:	400e      	ands	r6, r1
 8002c52:	4663      	mov	r3, ip
 8002c54:	9802      	ldr	r0, [sp, #8]
 8002c56:	08d9      	lsrs	r1, r3, #3
 8002c58:	0742      	lsls	r2, r0, #29
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	08c4      	lsrs	r4, r0, #3
 8002c5e:	e696      	b.n	800298e <__aeabi_dsub+0x222>
 8002c60:	4c85      	ldr	r4, [pc, #532]	@ (8002e78 <__aeabi_dsub+0x70c>)
 8002c62:	1aff      	subs	r7, r7, r3
 8002c64:	4014      	ands	r4, r2
 8002c66:	0762      	lsls	r2, r4, #29
 8002c68:	08e4      	lsrs	r4, r4, #3
 8002c6a:	e760      	b.n	8002b2e <__aeabi_dsub+0x3c2>
 8002c6c:	4981      	ldr	r1, [pc, #516]	@ (8002e74 <__aeabi_dsub+0x708>)
 8002c6e:	428a      	cmp	r2, r1
 8002c70:	d100      	bne.n	8002c74 <__aeabi_dsub+0x508>
 8002c72:	e0c9      	b.n	8002e08 <__aeabi_dsub+0x69c>
 8002c74:	4663      	mov	r3, ip
 8002c76:	18c1      	adds	r1, r0, r3
 8002c78:	4281      	cmp	r1, r0
 8002c7a:	4180      	sbcs	r0, r0
 8002c7c:	9b02      	ldr	r3, [sp, #8]
 8002c7e:	4240      	negs	r0, r0
 8002c80:	18e3      	adds	r3, r4, r3
 8002c82:	181b      	adds	r3, r3, r0
 8002c84:	07dd      	lsls	r5, r3, #31
 8002c86:	085c      	lsrs	r4, r3, #1
 8002c88:	2307      	movs	r3, #7
 8002c8a:	0849      	lsrs	r1, r1, #1
 8002c8c:	430d      	orrs	r5, r1
 8002c8e:	0017      	movs	r7, r2
 8002c90:	402b      	ands	r3, r5
 8002c92:	e710      	b.n	8002ab6 <__aeabi_dsub+0x34a>
 8002c94:	4663      	mov	r3, ip
 8002c96:	1a1d      	subs	r5, r3, r0
 8002c98:	45ac      	cmp	ip, r5
 8002c9a:	4192      	sbcs	r2, r2
 8002c9c:	2601      	movs	r6, #1
 8002c9e:	9b02      	ldr	r3, [sp, #8]
 8002ca0:	4252      	negs	r2, r2
 8002ca2:	1b1c      	subs	r4, r3, r4
 8002ca4:	4688      	mov	r8, r1
 8002ca6:	1aa4      	subs	r4, r4, r2
 8002ca8:	400e      	ands	r6, r1
 8002caa:	e5c6      	b.n	800283a <__aeabi_dsub+0xce>
 8002cac:	4663      	mov	r3, ip
 8002cae:	18c5      	adds	r5, r0, r3
 8002cb0:	9b02      	ldr	r3, [sp, #8]
 8002cb2:	4285      	cmp	r5, r0
 8002cb4:	4180      	sbcs	r0, r0
 8002cb6:	469c      	mov	ip, r3
 8002cb8:	4240      	negs	r0, r0
 8002cba:	4464      	add	r4, ip
 8002cbc:	1824      	adds	r4, r4, r0
 8002cbe:	2701      	movs	r7, #1
 8002cc0:	0223      	lsls	r3, r4, #8
 8002cc2:	d400      	bmi.n	8002cc6 <__aeabi_dsub+0x55a>
 8002cc4:	e6f5      	b.n	8002ab2 <__aeabi_dsub+0x346>
 8002cc6:	2702      	movs	r7, #2
 8002cc8:	e641      	b.n	800294e <__aeabi_dsub+0x1e2>
 8002cca:	4663      	mov	r3, ip
 8002ccc:	1ac5      	subs	r5, r0, r3
 8002cce:	42a8      	cmp	r0, r5
 8002cd0:	4180      	sbcs	r0, r0
 8002cd2:	9b02      	ldr	r3, [sp, #8]
 8002cd4:	4240      	negs	r0, r0
 8002cd6:	1ae4      	subs	r4, r4, r3
 8002cd8:	2701      	movs	r7, #1
 8002cda:	1a24      	subs	r4, r4, r0
 8002cdc:	e5a8      	b.n	8002830 <__aeabi_dsub+0xc4>
 8002cde:	9d02      	ldr	r5, [sp, #8]
 8002ce0:	4652      	mov	r2, sl
 8002ce2:	002b      	movs	r3, r5
 8002ce4:	3a20      	subs	r2, #32
 8002ce6:	40d3      	lsrs	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	4653      	mov	r3, sl
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d006      	beq.n	8002cfe <__aeabi_dsub+0x592>
 8002cf0:	2240      	movs	r2, #64	@ 0x40
 8002cf2:	1ad2      	subs	r2, r2, r3
 8002cf4:	002b      	movs	r3, r5
 8002cf6:	4093      	lsls	r3, r2
 8002cf8:	4662      	mov	r2, ip
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	4693      	mov	fp, r2
 8002cfe:	465d      	mov	r5, fp
 8002d00:	1e6b      	subs	r3, r5, #1
 8002d02:	419d      	sbcs	r5, r3
 8002d04:	430d      	orrs	r5, r1
 8002d06:	e615      	b.n	8002934 <__aeabi_dsub+0x1c8>
 8002d08:	0762      	lsls	r2, r4, #29
 8002d0a:	08c0      	lsrs	r0, r0, #3
 8002d0c:	4302      	orrs	r2, r0
 8002d0e:	08e4      	lsrs	r4, r4, #3
 8002d10:	e70d      	b.n	8002b2e <__aeabi_dsub+0x3c2>
 8002d12:	0011      	movs	r1, r2
 8002d14:	0027      	movs	r7, r4
 8002d16:	3920      	subs	r1, #32
 8002d18:	40cf      	lsrs	r7, r1
 8002d1a:	2a20      	cmp	r2, #32
 8002d1c:	d005      	beq.n	8002d2a <__aeabi_dsub+0x5be>
 8002d1e:	2140      	movs	r1, #64	@ 0x40
 8002d20:	1a8a      	subs	r2, r1, r2
 8002d22:	4094      	lsls	r4, r2
 8002d24:	0025      	movs	r5, r4
 8002d26:	4305      	orrs	r5, r0
 8002d28:	9503      	str	r5, [sp, #12]
 8002d2a:	9d03      	ldr	r5, [sp, #12]
 8002d2c:	1e6a      	subs	r2, r5, #1
 8002d2e:	4195      	sbcs	r5, r2
 8002d30:	433d      	orrs	r5, r7
 8002d32:	e77d      	b.n	8002c30 <__aeabi_dsub+0x4c4>
 8002d34:	2a00      	cmp	r2, #0
 8002d36:	d100      	bne.n	8002d3a <__aeabi_dsub+0x5ce>
 8002d38:	e744      	b.n	8002bc4 <__aeabi_dsub+0x458>
 8002d3a:	2601      	movs	r6, #1
 8002d3c:	400e      	ands	r6, r1
 8002d3e:	4663      	mov	r3, ip
 8002d40:	08d9      	lsrs	r1, r3, #3
 8002d42:	9b02      	ldr	r3, [sp, #8]
 8002d44:	075a      	lsls	r2, r3, #29
 8002d46:	430a      	orrs	r2, r1
 8002d48:	08dc      	lsrs	r4, r3, #3
 8002d4a:	e6f0      	b.n	8002b2e <__aeabi_dsub+0x3c2>
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d028      	beq.n	8002da2 <__aeabi_dsub+0x636>
 8002d50:	4662      	mov	r2, ip
 8002d52:	9f02      	ldr	r7, [sp, #8]
 8002d54:	08c0      	lsrs	r0, r0, #3
 8002d56:	433a      	orrs	r2, r7
 8002d58:	d100      	bne.n	8002d5c <__aeabi_dsub+0x5f0>
 8002d5a:	e6dc      	b.n	8002b16 <__aeabi_dsub+0x3aa>
 8002d5c:	0762      	lsls	r2, r4, #29
 8002d5e:	4310      	orrs	r0, r2
 8002d60:	2280      	movs	r2, #128	@ 0x80
 8002d62:	08e4      	lsrs	r4, r4, #3
 8002d64:	0312      	lsls	r2, r2, #12
 8002d66:	4214      	tst	r4, r2
 8002d68:	d009      	beq.n	8002d7e <__aeabi_dsub+0x612>
 8002d6a:	08fd      	lsrs	r5, r7, #3
 8002d6c:	4215      	tst	r5, r2
 8002d6e:	d106      	bne.n	8002d7e <__aeabi_dsub+0x612>
 8002d70:	4663      	mov	r3, ip
 8002d72:	2601      	movs	r6, #1
 8002d74:	002c      	movs	r4, r5
 8002d76:	08d8      	lsrs	r0, r3, #3
 8002d78:	077b      	lsls	r3, r7, #29
 8002d7a:	4318      	orrs	r0, r3
 8002d7c:	400e      	ands	r6, r1
 8002d7e:	0f42      	lsrs	r2, r0, #29
 8002d80:	00c0      	lsls	r0, r0, #3
 8002d82:	08c0      	lsrs	r0, r0, #3
 8002d84:	0752      	lsls	r2, r2, #29
 8002d86:	4302      	orrs	r2, r0
 8002d88:	e601      	b.n	800298e <__aeabi_dsub+0x222>
 8002d8a:	4663      	mov	r3, ip
 8002d8c:	1a1d      	subs	r5, r3, r0
 8002d8e:	45ac      	cmp	ip, r5
 8002d90:	4192      	sbcs	r2, r2
 8002d92:	9b02      	ldr	r3, [sp, #8]
 8002d94:	4252      	negs	r2, r2
 8002d96:	1b1c      	subs	r4, r3, r4
 8002d98:	000e      	movs	r6, r1
 8002d9a:	4688      	mov	r8, r1
 8002d9c:	2701      	movs	r7, #1
 8002d9e:	1aa4      	subs	r4, r4, r2
 8002da0:	e546      	b.n	8002830 <__aeabi_dsub+0xc4>
 8002da2:	4663      	mov	r3, ip
 8002da4:	08d9      	lsrs	r1, r3, #3
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	075a      	lsls	r2, r3, #29
 8002daa:	430a      	orrs	r2, r1
 8002dac:	08dc      	lsrs	r4, r3, #3
 8002dae:	e5ee      	b.n	800298e <__aeabi_dsub+0x222>
 8002db0:	4663      	mov	r3, ip
 8002db2:	9c02      	ldr	r4, [sp, #8]
 8002db4:	9303      	str	r3, [sp, #12]
 8002db6:	e6c7      	b.n	8002b48 <__aeabi_dsub+0x3dc>
 8002db8:	08c0      	lsrs	r0, r0, #3
 8002dba:	2a00      	cmp	r2, #0
 8002dbc:	d100      	bne.n	8002dc0 <__aeabi_dsub+0x654>
 8002dbe:	e6aa      	b.n	8002b16 <__aeabi_dsub+0x3aa>
 8002dc0:	0762      	lsls	r2, r4, #29
 8002dc2:	4310      	orrs	r0, r2
 8002dc4:	2280      	movs	r2, #128	@ 0x80
 8002dc6:	08e4      	lsrs	r4, r4, #3
 8002dc8:	0312      	lsls	r2, r2, #12
 8002dca:	4214      	tst	r4, r2
 8002dcc:	d0d7      	beq.n	8002d7e <__aeabi_dsub+0x612>
 8002dce:	9f02      	ldr	r7, [sp, #8]
 8002dd0:	08fd      	lsrs	r5, r7, #3
 8002dd2:	4215      	tst	r5, r2
 8002dd4:	d1d3      	bne.n	8002d7e <__aeabi_dsub+0x612>
 8002dd6:	4663      	mov	r3, ip
 8002dd8:	2601      	movs	r6, #1
 8002dda:	08d8      	lsrs	r0, r3, #3
 8002ddc:	077b      	lsls	r3, r7, #29
 8002dde:	002c      	movs	r4, r5
 8002de0:	4318      	orrs	r0, r3
 8002de2:	400e      	ands	r6, r1
 8002de4:	e7cb      	b.n	8002d7e <__aeabi_dsub+0x612>
 8002de6:	000a      	movs	r2, r1
 8002de8:	0027      	movs	r7, r4
 8002dea:	3a20      	subs	r2, #32
 8002dec:	40d7      	lsrs	r7, r2
 8002dee:	2920      	cmp	r1, #32
 8002df0:	d005      	beq.n	8002dfe <__aeabi_dsub+0x692>
 8002df2:	2240      	movs	r2, #64	@ 0x40
 8002df4:	1a52      	subs	r2, r2, r1
 8002df6:	4094      	lsls	r4, r2
 8002df8:	0025      	movs	r5, r4
 8002dfa:	4305      	orrs	r5, r0
 8002dfc:	9503      	str	r5, [sp, #12]
 8002dfe:	9d03      	ldr	r5, [sp, #12]
 8002e00:	1e6a      	subs	r2, r5, #1
 8002e02:	4195      	sbcs	r5, r2
 8002e04:	432f      	orrs	r7, r5
 8002e06:	e610      	b.n	8002a2a <__aeabi_dsub+0x2be>
 8002e08:	0014      	movs	r4, r2
 8002e0a:	2500      	movs	r5, #0
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	e556      	b.n	80028be <__aeabi_dsub+0x152>
 8002e10:	9b02      	ldr	r3, [sp, #8]
 8002e12:	4460      	add	r0, ip
 8002e14:	4699      	mov	r9, r3
 8002e16:	4560      	cmp	r0, ip
 8002e18:	4192      	sbcs	r2, r2
 8002e1a:	444c      	add	r4, r9
 8002e1c:	4252      	negs	r2, r2
 8002e1e:	0005      	movs	r5, r0
 8002e20:	18a4      	adds	r4, r4, r2
 8002e22:	e74c      	b.n	8002cbe <__aeabi_dsub+0x552>
 8002e24:	001a      	movs	r2, r3
 8002e26:	001c      	movs	r4, r3
 8002e28:	432a      	orrs	r2, r5
 8002e2a:	d000      	beq.n	8002e2e <__aeabi_dsub+0x6c2>
 8002e2c:	e6b3      	b.n	8002b96 <__aeabi_dsub+0x42a>
 8002e2e:	e6c9      	b.n	8002bc4 <__aeabi_dsub+0x458>
 8002e30:	2480      	movs	r4, #128	@ 0x80
 8002e32:	2600      	movs	r6, #0
 8002e34:	0324      	lsls	r4, r4, #12
 8002e36:	e5ae      	b.n	8002996 <__aeabi_dsub+0x22a>
 8002e38:	2120      	movs	r1, #32
 8002e3a:	2500      	movs	r5, #0
 8002e3c:	1a09      	subs	r1, r1, r0
 8002e3e:	e517      	b.n	8002870 <__aeabi_dsub+0x104>
 8002e40:	2200      	movs	r2, #0
 8002e42:	2500      	movs	r5, #0
 8002e44:	4c0b      	ldr	r4, [pc, #44]	@ (8002e74 <__aeabi_dsub+0x708>)
 8002e46:	e53a      	b.n	80028be <__aeabi_dsub+0x152>
 8002e48:	2d00      	cmp	r5, #0
 8002e4a:	d100      	bne.n	8002e4e <__aeabi_dsub+0x6e2>
 8002e4c:	e5f6      	b.n	8002a3c <__aeabi_dsub+0x2d0>
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1bda      	subs	r2, r3, r7
 8002e52:	4692      	mov	sl, r2
 8002e54:	2f00      	cmp	r7, #0
 8002e56:	d100      	bne.n	8002e5a <__aeabi_dsub+0x6ee>
 8002e58:	e66f      	b.n	8002b3a <__aeabi_dsub+0x3ce>
 8002e5a:	2a38      	cmp	r2, #56	@ 0x38
 8002e5c:	dc05      	bgt.n	8002e6a <__aeabi_dsub+0x6fe>
 8002e5e:	2680      	movs	r6, #128	@ 0x80
 8002e60:	0436      	lsls	r6, r6, #16
 8002e62:	4334      	orrs	r4, r6
 8002e64:	4688      	mov	r8, r1
 8002e66:	000e      	movs	r6, r1
 8002e68:	e6d1      	b.n	8002c0e <__aeabi_dsub+0x4a2>
 8002e6a:	4688      	mov	r8, r1
 8002e6c:	000e      	movs	r6, r1
 8002e6e:	2501      	movs	r5, #1
 8002e70:	e6de      	b.n	8002c30 <__aeabi_dsub+0x4c4>
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	000007ff 	.word	0x000007ff
 8002e78:	ff7fffff 	.word	0xff7fffff
 8002e7c:	000007fe 	.word	0x000007fe
 8002e80:	2d00      	cmp	r5, #0
 8002e82:	d100      	bne.n	8002e86 <__aeabi_dsub+0x71a>
 8002e84:	e668      	b.n	8002b58 <__aeabi_dsub+0x3ec>
 8002e86:	464b      	mov	r3, r9
 8002e88:	1bd9      	subs	r1, r3, r7
 8002e8a:	2f00      	cmp	r7, #0
 8002e8c:	d101      	bne.n	8002e92 <__aeabi_dsub+0x726>
 8002e8e:	468a      	mov	sl, r1
 8002e90:	e5a7      	b.n	80029e2 <__aeabi_dsub+0x276>
 8002e92:	2701      	movs	r7, #1
 8002e94:	2938      	cmp	r1, #56	@ 0x38
 8002e96:	dd00      	ble.n	8002e9a <__aeabi_dsub+0x72e>
 8002e98:	e5c7      	b.n	8002a2a <__aeabi_dsub+0x2be>
 8002e9a:	2280      	movs	r2, #128	@ 0x80
 8002e9c:	0412      	lsls	r2, r2, #16
 8002e9e:	4314      	orrs	r4, r2
 8002ea0:	e5af      	b.n	8002a02 <__aeabi_dsub+0x296>
 8002ea2:	46c0      	nop			@ (mov r8, r8)

08002ea4 <__aeabi_i2d>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d016      	beq.n	8002ed8 <__aeabi_i2d+0x34>
 8002eaa:	17c3      	asrs	r3, r0, #31
 8002eac:	18c5      	adds	r5, r0, r3
 8002eae:	405d      	eors	r5, r3
 8002eb0:	0fc4      	lsrs	r4, r0, #31
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	f000 f8f0 	bl	8003098 <__clzsi2>
 8002eb8:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <__aeabi_i2d+0x58>)
 8002eba:	1a1b      	subs	r3, r3, r0
 8002ebc:	055b      	lsls	r3, r3, #21
 8002ebe:	0d5b      	lsrs	r3, r3, #21
 8002ec0:	280a      	cmp	r0, #10
 8002ec2:	dc14      	bgt.n	8002eee <__aeabi_i2d+0x4a>
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	002e      	movs	r6, r5
 8002ec8:	3215      	adds	r2, #21
 8002eca:	4096      	lsls	r6, r2
 8002ecc:	220b      	movs	r2, #11
 8002ece:	1a12      	subs	r2, r2, r0
 8002ed0:	40d5      	lsrs	r5, r2
 8002ed2:	032d      	lsls	r5, r5, #12
 8002ed4:	0b2d      	lsrs	r5, r5, #12
 8002ed6:	e003      	b.n	8002ee0 <__aeabi_i2d+0x3c>
 8002ed8:	2400      	movs	r4, #0
 8002eda:	2300      	movs	r3, #0
 8002edc:	2500      	movs	r5, #0
 8002ede:	2600      	movs	r6, #0
 8002ee0:	051b      	lsls	r3, r3, #20
 8002ee2:	432b      	orrs	r3, r5
 8002ee4:	07e4      	lsls	r4, r4, #31
 8002ee6:	4323      	orrs	r3, r4
 8002ee8:	0030      	movs	r0, r6
 8002eea:	0019      	movs	r1, r3
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
 8002eee:	380b      	subs	r0, #11
 8002ef0:	4085      	lsls	r5, r0
 8002ef2:	032d      	lsls	r5, r5, #12
 8002ef4:	2600      	movs	r6, #0
 8002ef6:	0b2d      	lsrs	r5, r5, #12
 8002ef8:	e7f2      	b.n	8002ee0 <__aeabi_i2d+0x3c>
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	0000041e 	.word	0x0000041e

08002f00 <__aeabi_f2d>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	0242      	lsls	r2, r0, #9
 8002f04:	0043      	lsls	r3, r0, #1
 8002f06:	0fc4      	lsrs	r4, r0, #31
 8002f08:	20fe      	movs	r0, #254	@ 0xfe
 8002f0a:	0e1b      	lsrs	r3, r3, #24
 8002f0c:	1c59      	adds	r1, r3, #1
 8002f0e:	0a55      	lsrs	r5, r2, #9
 8002f10:	4208      	tst	r0, r1
 8002f12:	d00c      	beq.n	8002f2e <__aeabi_f2d+0x2e>
 8002f14:	21e0      	movs	r1, #224	@ 0xe0
 8002f16:	0089      	lsls	r1, r1, #2
 8002f18:	468c      	mov	ip, r1
 8002f1a:	076d      	lsls	r5, r5, #29
 8002f1c:	0b12      	lsrs	r2, r2, #12
 8002f1e:	4463      	add	r3, ip
 8002f20:	051b      	lsls	r3, r3, #20
 8002f22:	4313      	orrs	r3, r2
 8002f24:	07e4      	lsls	r4, r4, #31
 8002f26:	4323      	orrs	r3, r4
 8002f28:	0028      	movs	r0, r5
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	bd70      	pop	{r4, r5, r6, pc}
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d114      	bne.n	8002f5c <__aeabi_f2d+0x5c>
 8002f32:	2d00      	cmp	r5, #0
 8002f34:	d01b      	beq.n	8002f6e <__aeabi_f2d+0x6e>
 8002f36:	0028      	movs	r0, r5
 8002f38:	f000 f8ae 	bl	8003098 <__clzsi2>
 8002f3c:	280a      	cmp	r0, #10
 8002f3e:	dc1c      	bgt.n	8002f7a <__aeabi_f2d+0x7a>
 8002f40:	230b      	movs	r3, #11
 8002f42:	002a      	movs	r2, r5
 8002f44:	1a1b      	subs	r3, r3, r0
 8002f46:	40da      	lsrs	r2, r3
 8002f48:	0003      	movs	r3, r0
 8002f4a:	3315      	adds	r3, #21
 8002f4c:	409d      	lsls	r5, r3
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f88 <__aeabi_f2d+0x88>)
 8002f50:	0312      	lsls	r2, r2, #12
 8002f52:	1a1b      	subs	r3, r3, r0
 8002f54:	055b      	lsls	r3, r3, #21
 8002f56:	0b12      	lsrs	r2, r2, #12
 8002f58:	0d5b      	lsrs	r3, r3, #21
 8002f5a:	e7e1      	b.n	8002f20 <__aeabi_f2d+0x20>
 8002f5c:	2d00      	cmp	r5, #0
 8002f5e:	d009      	beq.n	8002f74 <__aeabi_f2d+0x74>
 8002f60:	0b13      	lsrs	r3, r2, #12
 8002f62:	2280      	movs	r2, #128	@ 0x80
 8002f64:	0312      	lsls	r2, r2, #12
 8002f66:	431a      	orrs	r2, r3
 8002f68:	076d      	lsls	r5, r5, #29
 8002f6a:	4b08      	ldr	r3, [pc, #32]	@ (8002f8c <__aeabi_f2d+0x8c>)
 8002f6c:	e7d8      	b.n	8002f20 <__aeabi_f2d+0x20>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2200      	movs	r2, #0
 8002f72:	e7d5      	b.n	8002f20 <__aeabi_f2d+0x20>
 8002f74:	2200      	movs	r2, #0
 8002f76:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <__aeabi_f2d+0x8c>)
 8002f78:	e7d2      	b.n	8002f20 <__aeabi_f2d+0x20>
 8002f7a:	0003      	movs	r3, r0
 8002f7c:	002a      	movs	r2, r5
 8002f7e:	3b0b      	subs	r3, #11
 8002f80:	409a      	lsls	r2, r3
 8002f82:	2500      	movs	r5, #0
 8002f84:	e7e3      	b.n	8002f4e <__aeabi_f2d+0x4e>
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	00000389 	.word	0x00000389
 8002f8c:	000007ff 	.word	0x000007ff

08002f90 <__aeabi_d2f>:
 8002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f92:	004b      	lsls	r3, r1, #1
 8002f94:	030f      	lsls	r7, r1, #12
 8002f96:	0d5b      	lsrs	r3, r3, #21
 8002f98:	4c3b      	ldr	r4, [pc, #236]	@ (8003088 <__aeabi_d2f+0xf8>)
 8002f9a:	0f45      	lsrs	r5, r0, #29
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	0a7f      	lsrs	r7, r7, #9
 8002fa0:	1c5e      	adds	r6, r3, #1
 8002fa2:	432f      	orrs	r7, r5
 8002fa4:	9000      	str	r0, [sp, #0]
 8002fa6:	9101      	str	r1, [sp, #4]
 8002fa8:	0fca      	lsrs	r2, r1, #31
 8002faa:	00c5      	lsls	r5, r0, #3
 8002fac:	4226      	tst	r6, r4
 8002fae:	d00b      	beq.n	8002fc8 <__aeabi_d2f+0x38>
 8002fb0:	4936      	ldr	r1, [pc, #216]	@ (800308c <__aeabi_d2f+0xfc>)
 8002fb2:	185c      	adds	r4, r3, r1
 8002fb4:	2cfe      	cmp	r4, #254	@ 0xfe
 8002fb6:	dd13      	ble.n	8002fe0 <__aeabi_d2f+0x50>
 8002fb8:	20ff      	movs	r0, #255	@ 0xff
 8002fba:	2300      	movs	r3, #0
 8002fbc:	05c0      	lsls	r0, r0, #23
 8002fbe:	4318      	orrs	r0, r3
 8002fc0:	07d2      	lsls	r2, r2, #31
 8002fc2:	4310      	orrs	r0, r2
 8002fc4:	b003      	add	sp, #12
 8002fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <__aeabi_d2f+0x42>
 8002fcc:	2000      	movs	r0, #0
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e7f4      	b.n	8002fbc <__aeabi_d2f+0x2c>
 8002fd2:	433d      	orrs	r5, r7
 8002fd4:	d0f0      	beq.n	8002fb8 <__aeabi_d2f+0x28>
 8002fd6:	2380      	movs	r3, #128	@ 0x80
 8002fd8:	03db      	lsls	r3, r3, #15
 8002fda:	20ff      	movs	r0, #255	@ 0xff
 8002fdc:	433b      	orrs	r3, r7
 8002fde:	e7ed      	b.n	8002fbc <__aeabi_d2f+0x2c>
 8002fe0:	2c00      	cmp	r4, #0
 8002fe2:	dd14      	ble.n	800300e <__aeabi_d2f+0x7e>
 8002fe4:	9b00      	ldr	r3, [sp, #0]
 8002fe6:	00ff      	lsls	r7, r7, #3
 8002fe8:	019b      	lsls	r3, r3, #6
 8002fea:	1e58      	subs	r0, r3, #1
 8002fec:	4183      	sbcs	r3, r0
 8002fee:	0f69      	lsrs	r1, r5, #29
 8002ff0:	433b      	orrs	r3, r7
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	0759      	lsls	r1, r3, #29
 8002ff6:	d041      	beq.n	800307c <__aeabi_d2f+0xec>
 8002ff8:	210f      	movs	r1, #15
 8002ffa:	4019      	ands	r1, r3
 8002ffc:	2904      	cmp	r1, #4
 8002ffe:	d028      	beq.n	8003052 <__aeabi_d2f+0xc2>
 8003000:	3304      	adds	r3, #4
 8003002:	0159      	lsls	r1, r3, #5
 8003004:	d525      	bpl.n	8003052 <__aeabi_d2f+0xc2>
 8003006:	3401      	adds	r4, #1
 8003008:	2300      	movs	r3, #0
 800300a:	b2e0      	uxtb	r0, r4
 800300c:	e7d6      	b.n	8002fbc <__aeabi_d2f+0x2c>
 800300e:	0021      	movs	r1, r4
 8003010:	3117      	adds	r1, #23
 8003012:	dbdb      	blt.n	8002fcc <__aeabi_d2f+0x3c>
 8003014:	2180      	movs	r1, #128	@ 0x80
 8003016:	201e      	movs	r0, #30
 8003018:	0409      	lsls	r1, r1, #16
 800301a:	4339      	orrs	r1, r7
 800301c:	1b00      	subs	r0, r0, r4
 800301e:	281f      	cmp	r0, #31
 8003020:	dd1b      	ble.n	800305a <__aeabi_d2f+0xca>
 8003022:	2602      	movs	r6, #2
 8003024:	4276      	negs	r6, r6
 8003026:	1b34      	subs	r4, r6, r4
 8003028:	000e      	movs	r6, r1
 800302a:	40e6      	lsrs	r6, r4
 800302c:	0034      	movs	r4, r6
 800302e:	2820      	cmp	r0, #32
 8003030:	d004      	beq.n	800303c <__aeabi_d2f+0xac>
 8003032:	4817      	ldr	r0, [pc, #92]	@ (8003090 <__aeabi_d2f+0x100>)
 8003034:	4684      	mov	ip, r0
 8003036:	4463      	add	r3, ip
 8003038:	4099      	lsls	r1, r3
 800303a:	430d      	orrs	r5, r1
 800303c:	002b      	movs	r3, r5
 800303e:	1e59      	subs	r1, r3, #1
 8003040:	418b      	sbcs	r3, r1
 8003042:	4323      	orrs	r3, r4
 8003044:	0759      	lsls	r1, r3, #29
 8003046:	d015      	beq.n	8003074 <__aeabi_d2f+0xe4>
 8003048:	210f      	movs	r1, #15
 800304a:	2400      	movs	r4, #0
 800304c:	4019      	ands	r1, r3
 800304e:	2904      	cmp	r1, #4
 8003050:	d117      	bne.n	8003082 <__aeabi_d2f+0xf2>
 8003052:	019b      	lsls	r3, r3, #6
 8003054:	0a5b      	lsrs	r3, r3, #9
 8003056:	b2e0      	uxtb	r0, r4
 8003058:	e7b0      	b.n	8002fbc <__aeabi_d2f+0x2c>
 800305a:	4c0e      	ldr	r4, [pc, #56]	@ (8003094 <__aeabi_d2f+0x104>)
 800305c:	191c      	adds	r4, r3, r4
 800305e:	002b      	movs	r3, r5
 8003060:	40a5      	lsls	r5, r4
 8003062:	40c3      	lsrs	r3, r0
 8003064:	40a1      	lsls	r1, r4
 8003066:	1e68      	subs	r0, r5, #1
 8003068:	4185      	sbcs	r5, r0
 800306a:	4329      	orrs	r1, r5
 800306c:	430b      	orrs	r3, r1
 800306e:	2400      	movs	r4, #0
 8003070:	0759      	lsls	r1, r3, #29
 8003072:	d1c1      	bne.n	8002ff8 <__aeabi_d2f+0x68>
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	2000      	movs	r0, #0
 8003078:	0a5b      	lsrs	r3, r3, #9
 800307a:	e79f      	b.n	8002fbc <__aeabi_d2f+0x2c>
 800307c:	08db      	lsrs	r3, r3, #3
 800307e:	b2e0      	uxtb	r0, r4
 8003080:	e79c      	b.n	8002fbc <__aeabi_d2f+0x2c>
 8003082:	3304      	adds	r3, #4
 8003084:	e7e5      	b.n	8003052 <__aeabi_d2f+0xc2>
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	000007fe 	.word	0x000007fe
 800308c:	fffffc80 	.word	0xfffffc80
 8003090:	fffffca2 	.word	0xfffffca2
 8003094:	fffffc82 	.word	0xfffffc82

08003098 <__clzsi2>:
 8003098:	211c      	movs	r1, #28
 800309a:	2301      	movs	r3, #1
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	4298      	cmp	r0, r3
 80030a0:	d301      	bcc.n	80030a6 <__clzsi2+0xe>
 80030a2:	0c00      	lsrs	r0, r0, #16
 80030a4:	3910      	subs	r1, #16
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	4298      	cmp	r0, r3
 80030aa:	d301      	bcc.n	80030b0 <__clzsi2+0x18>
 80030ac:	0a00      	lsrs	r0, r0, #8
 80030ae:	3908      	subs	r1, #8
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	4298      	cmp	r0, r3
 80030b4:	d301      	bcc.n	80030ba <__clzsi2+0x22>
 80030b6:	0900      	lsrs	r0, r0, #4
 80030b8:	3904      	subs	r1, #4
 80030ba:	a202      	add	r2, pc, #8	@ (adr r2, 80030c4 <__clzsi2+0x2c>)
 80030bc:	5c10      	ldrb	r0, [r2, r0]
 80030be:	1840      	adds	r0, r0, r1
 80030c0:	4770      	bx	lr
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	02020304 	.word	0x02020304
 80030c8:	01010101 	.word	0x01010101
	...

080030d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d6:	46de      	mov	lr, fp
 80030d8:	4657      	mov	r7, sl
 80030da:	464e      	mov	r6, r9
 80030dc:	4645      	mov	r5, r8
 80030de:	b5e0      	push	{r5, r6, r7, lr}
 80030e0:	b093      	sub	sp, #76	@ 0x4c
 80030e2:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030e4:	f005 f892 	bl	800820c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030e8:	f000 fc9c 	bl	8003a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030ec:	f000 ffc0 	bl	8004070 <MX_GPIO_Init>
  MX_DMA_Init();
 80030f0:	f000 ff98 	bl	8004024 <MX_DMA_Init>
  MX_ADC_Init();
 80030f4:	f000 fd02 	bl	8003afc <MX_ADC_Init>
  MX_I2C1_Init();
 80030f8:	f000 fd96 	bl	8003c28 <MX_I2C1_Init>
  MX_I2C2_Init();
 80030fc:	f000 fdd4 	bl	8003ca8 <MX_I2C2_Init>
  MX_RTC_Init();
 8003100:	f000 fe12 	bl	8003d28 <MX_RTC_Init>
  MX_SPI1_Init();
 8003104:	f000 fe36 	bl	8003d74 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003108:	f000 fe72 	bl	8003df0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800310c:	f000 ff04 	bl	8003f18 <MX_TIM3_Init>
  MX_TIM6_Init();
 8003110:	f000 ff66 	bl	8003fe0 <MX_TIM6_Init>
  MX_CRC_Init();
 8003114:	f000 fd68 	bl	8003be8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  /* Perform ADC calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8003118:	4bac      	ldr	r3, [pc, #688]	@ (80033cc <main+0x2f8>)
 800311a:	0018      	movs	r0, r3
 800311c:	f005 fd82 	bl	8008c24 <HAL_ADCEx_Calibration_Start>
 8003120:	1e03      	subs	r3, r0, #0
 8003122:	d001      	beq.n	8003128 <main+0x54>
	  	  	  	  	  	  	  	  	  	  	  	  	  Error_Handler();
 8003124:	f002 fbfe 	bl	8005924 <Error_Handler>

  /* Start ADC group regular conversion by DMA*/
  if (HAL_ADC_Start_DMA(&hadc,(uint32_t *)adc_RAW,3) != HAL_OK)
 8003128:	49a9      	ldr	r1, [pc, #676]	@ (80033d0 <main+0x2fc>)
 800312a:	4ba8      	ldr	r3, [pc, #672]	@ (80033cc <main+0x2f8>)
 800312c:	2203      	movs	r2, #3
 800312e:	0018      	movs	r0, r3
 8003130:	f005 fa34 	bl	800859c <HAL_ADC_Start_DMA>
 8003134:	1e03      	subs	r3, r0, #0
 8003136:	d001      	beq.n	800313c <main+0x68>
	  	  	  	  	  	  	  	  	  	  	  	  	  Error_Handler();
 8003138:	f002 fbf4 	bl	8005924 <Error_Handler>

  /* Start TIM3 as encoder counter */
  if (HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK)
 800313c:	4ba5      	ldr	r3, [pc, #660]	@ (80033d4 <main+0x300>)
 800313e:	213c      	movs	r1, #60	@ 0x3c
 8003140:	0018      	movs	r0, r3
 8003142:	f00a ff6d 	bl	800e020 <HAL_TIM_Encoder_Start>
 8003146:	1e03      	subs	r3, r0, #0
 8003148:	d001      	beq.n	800314e <main+0x7a>
	  	  	  	  	  	  	  	  	  	  	  	  	  Error_Handler();
 800314a:	f002 fbeb 	bl	8005924 <Error_Handler>

  /*Run TIM6 to do 100uS interrupts for button and encoder services */
  if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)		  Error_Handler();
 800314e:	4ba2      	ldr	r3, [pc, #648]	@ (80033d8 <main+0x304>)
 8003150:	0018      	movs	r0, r3
 8003152:	f00a fd6f 	bl	800dc34 <HAL_TIM_Base_Start_IT>
 8003156:	1e03      	subs	r3, r0, #0
 8003158:	d001      	beq.n	800315e <main+0x8a>
 800315a:	f002 fbe3 	bl	8005924 <Error_Handler>

  /*Start TIM1 to generate PWM output for LCD Back Light */
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 800315e:	4b9f      	ldr	r3, [pc, #636]	@ (80033dc <main+0x308>)
 8003160:	2108      	movs	r1, #8
 8003162:	0018      	movs	r0, r3
 8003164:	f00a fe02 	bl	800dd6c <HAL_TIM_PWM_Start>
 8003168:	1e03      	subs	r3, r0, #0
 800316a:	d001      	beq.n	8003170 <main+0x9c>
	  	  	  	  	  	  	  	  	  	  	  Error_Handler();
 800316c:	f002 fbda 	bl	8005924 <Error_Handler>

  /* Start Back Light at max Level=200 */
  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, lcd_pwm_bl);
 8003170:	4b9b      	ldr	r3, [pc, #620]	@ (80033e0 <main+0x30c>)
 8003172:	2200      	movs	r2, #0
 8003174:	5e9a      	ldrsh	r2, [r3, r2]
 8003176:	4b99      	ldr	r3, [pc, #612]	@ (80033dc <main+0x308>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	63da      	str	r2, [r3, #60]	@ 0x3c

//  LCD_Init( lcd_ScanDir ); // LCD initialization
  ST7735_Init();
 800317c:	f004 fc0a 	bl	8007994 <ST7735_Init>
  ST7735_SetRotation(1);
 8003180:	2001      	movs	r0, #1
 8003182:	f004 ff97 	bl	80080b4 <ST7735_SetRotation>
  if(!HAL_GPIO_ReadPin(SW_T_GPIO_Port,SW_T_Pin)) device_settings();//setup screen
 8003186:	4b97      	ldr	r3, [pc, #604]	@ (80033e4 <main+0x310>)
 8003188:	2101      	movs	r1, #1
 800318a:	0018      	movs	r0, r3
 800318c:	f006 fd8a 	bl	8009ca4 <HAL_GPIO_ReadPin>
 8003190:	1e03      	subs	r3, r0, #0
 8003192:	d101      	bne.n	8003198 <main+0xc4>
 8003194:	f001 fe6a 	bl	8004e6c <device_settings>
  btn = PRESS_NORM;// to activate V menu on start
 8003198:	4b93      	ldr	r3, [pc, #588]	@ (80033e8 <main+0x314>)
 800319a:	2202      	movs	r2, #2
 800319c:	701a      	strb	r2, [r3, #0]

  ST7735_DrawImage(0, 0, 160, 128, (uint16_t*) logo_160x128);//draw welcome screen
 800319e:	4b93      	ldr	r3, [pc, #588]	@ (80033ec <main+0x318>)
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	2380      	movs	r3, #128	@ 0x80
 80031a4:	22a0      	movs	r2, #160	@ 0xa0
 80031a6:	2100      	movs	r1, #0
 80031a8:	2000      	movs	r0, #0
 80031aa:	f004 fe17 	bl	8007ddc <ST7735_DrawImage>
  HAL_Delay(2000);
 80031ae:	23fa      	movs	r3, #250	@ 0xfa
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	0018      	movs	r0, r3
 80031b4:	f005 f88e 	bl	80082d4 <HAL_Delay>
  ST7735_DrawString(0,0,"So Long, and Thanks...",Font_7x10,BRRED,BLACK);
 80031b8:	4b8d      	ldr	r3, [pc, #564]	@ (80033f0 <main+0x31c>)
 80031ba:	488e      	ldr	r0, [pc, #568]	@ (80033f4 <main+0x320>)
 80031bc:	2200      	movs	r2, #0
 80031be:	9202      	str	r2, [sp, #8]
 80031c0:	4a8d      	ldr	r2, [pc, #564]	@ (80033f8 <main+0x324>)
 80031c2:	9201      	str	r2, [sp, #4]
 80031c4:	466a      	mov	r2, sp
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	6011      	str	r1, [r2, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	0002      	movs	r2, r0
 80031ce:	2100      	movs	r1, #0
 80031d0:	2000      	movs	r0, #0
 80031d2:	f004 fc03 	bl	80079dc <ST7735_DrawString>
  HAL_Delay(2000);
 80031d6:	23fa      	movs	r3, #250	@ 0xfa
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	0018      	movs	r0, r3
 80031dc:	f005 f87a 	bl	80082d4 <HAL_Delay>
  ST7735_DrawString(25,118,"...for all the Fish",Font_7x10,BRRED,BLACK);
 80031e0:	4b83      	ldr	r3, [pc, #524]	@ (80033f0 <main+0x31c>)
 80031e2:	4886      	ldr	r0, [pc, #536]	@ (80033fc <main+0x328>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	9202      	str	r2, [sp, #8]
 80031e8:	4a83      	ldr	r2, [pc, #524]	@ (80033f8 <main+0x324>)
 80031ea:	9201      	str	r2, [sp, #4]
 80031ec:	466a      	mov	r2, sp
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	6011      	str	r1, [r2, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0002      	movs	r2, r0
 80031f6:	2176      	movs	r1, #118	@ 0x76
 80031f8:	2019      	movs	r0, #25
 80031fa:	f004 fbef 	bl	80079dc <ST7735_DrawString>
  HAL_Delay(2000);
 80031fe:	23fa      	movs	r3, #250	@ 0xfa
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	0018      	movs	r0, r3
 8003204:	f005 f866 	bl	80082d4 <HAL_Delay>

  draw_main_st(BLACK, WHITE); // Main static screen
 8003208:	4b7d      	ldr	r3, [pc, #500]	@ (8003400 <main+0x32c>)
 800320a:	0019      	movs	r1, r3
 800320c:	2000      	movs	r0, #0
 800320e:	f002 ff5b 	bl	80060c8 <draw_main_st>
  if(*( uint32_t *)(SCALE_U_ADDR) != 0xFFFFFFFF)
 8003212:	4b7c      	ldr	r3, [pc, #496]	@ (8003404 <main+0x330>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	d003      	beq.n	8003222 <main+0x14e>
	  scaleU=*( float *)(SCALE_U_ADDR); // load user set scale constant
 800321a:	4b7a      	ldr	r3, [pc, #488]	@ (8003404 <main+0x330>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b7a      	ldr	r3, [pc, #488]	@ (8003408 <main+0x334>)
 8003220:	601a      	str	r2, [r3, #0]
  if(*( uint32_t *)(SCALE_I_ADDR) != 0xFFFFFFFF)
 8003222:	4b7a      	ldr	r3, [pc, #488]	@ (800340c <main+0x338>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	d003      	beq.n	8003232 <main+0x15e>
	  scaleI=*( float *)(SCALE_I_ADDR); // load user set scale constant
 800322a:	4b78      	ldr	r3, [pc, #480]	@ (800340c <main+0x338>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b78      	ldr	r3, [pc, #480]	@ (8003410 <main+0x33c>)
 8003230:	601a      	str	r2, [r3, #0]
  if(*( uint32_t *)(SCALE_U_SP_ADDR) != 0xFFFFFFFF)
 8003232:	4b78      	ldr	r3, [pc, #480]	@ (8003414 <main+0x340>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	d003      	beq.n	8003242 <main+0x16e>
	  scaleUsp=*( float *)(SCALE_U_SP_ADDR); // load user set scale constant
 800323a:	4b76      	ldr	r3, [pc, #472]	@ (8003414 <main+0x340>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b76      	ldr	r3, [pc, #472]	@ (8003418 <main+0x344>)
 8003240:	601a      	str	r2, [r3, #0]
  if(*( uint32_t *)(SCALE_I_SP_ADDR) != 0xFFFFFFFF)
 8003242:	4b76      	ldr	r3, [pc, #472]	@ (800341c <main+0x348>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3301      	adds	r3, #1
 8003248:	d003      	beq.n	8003252 <main+0x17e>
	  scaleIsp=*( float *)(SCALE_I_SP_ADDR); // load user set scale constant
 800324a:	4b74      	ldr	r3, [pc, #464]	@ (800341c <main+0x348>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b74      	ldr	r3, [pc, #464]	@ (8003420 <main+0x34c>)
 8003250:	601a      	str	r2, [r3, #0]
  if(*( uint32_t *)(MEM_SEL_ARR_ADDR) != 0xFFFFFFFF)
 8003252:	4b74      	ldr	r3, [pc, #464]	@ (8003424 <main+0x350>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3301      	adds	r3, #1
 8003258:	d003      	beq.n	8003262 <main+0x18e>
	  uSP=*( float *)(MEM_SEL_ARR_ADDR); // load user set for U@M0
 800325a:	4b72      	ldr	r3, [pc, #456]	@ (8003424 <main+0x350>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b72      	ldr	r3, [pc, #456]	@ (8003428 <main+0x354>)
 8003260:	601a      	str	r2, [r3, #0]
  if(*( uint32_t *)(MEM_SEL_ARR_ADDR+4) != 0xFFFFFFFF)
 8003262:	4b72      	ldr	r3, [pc, #456]	@ (800342c <main+0x358>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	d003      	beq.n	8003272 <main+0x19e>
	  iSP=*( float *)(MEM_SEL_ARR_ADDR+4); // load user set for I@M0
 800326a:	4b70      	ldr	r3, [pc, #448]	@ (800342c <main+0x358>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b70      	ldr	r3, [pc, #448]	@ (8003430 <main+0x35c>)
 8003270:	601a      	str	r2, [r3, #0]
  /*BEGIN: Draw on LCD set points taken from FLASH Memory if they are valid */

	ptr = float_to_char(uSP, float_for_LCD);
 8003272:	4b6d      	ldr	r3, [pc, #436]	@ (8003428 <main+0x354>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a6f      	ldr	r2, [pc, #444]	@ (8003434 <main+0x360>)
 8003278:	0011      	movs	r1, r2
 800327a:	1c18      	adds	r0, r3, #0
 800327c:	f002 fe66 	bl	8005f4c <float_to_char>
 8003280:	0002      	movs	r2, r0
 8003282:	4b6d      	ldr	r3, [pc, #436]	@ (8003438 <main+0x364>)
 8003284:	601a      	str	r2, [r3, #0]
	if(uSP<1)
 8003286:	4b68      	ldr	r3, [pc, #416]	@ (8003428 <main+0x354>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	21fe      	movs	r1, #254	@ 0xfe
 800328c:	0589      	lsls	r1, r1, #22
 800328e:	1c18      	adds	r0, r3, #0
 8003290:	f7fd f8fe 	bl	8000490 <__aeabi_fcmplt>
 8003294:	1e03      	subs	r3, r0, #0
 8003296:	d01f      	beq.n	80032d8 <main+0x204>
	{
		ST7735_DrawString(5,84," 0",Font_11x18,WHITE,BLACK);
 8003298:	4b68      	ldr	r3, [pc, #416]	@ (800343c <main+0x368>)
 800329a:	4869      	ldr	r0, [pc, #420]	@ (8003440 <main+0x36c>)
 800329c:	2200      	movs	r2, #0
 800329e:	9202      	str	r2, [sp, #8]
 80032a0:	4a57      	ldr	r2, [pc, #348]	@ (8003400 <main+0x32c>)
 80032a2:	9201      	str	r2, [sp, #4]
 80032a4:	466a      	mov	r2, sp
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	6011      	str	r1, [r2, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	0002      	movs	r2, r0
 80032ae:	2154      	movs	r1, #84	@ 0x54
 80032b0:	2005      	movs	r0, #5
 80032b2:	f004 fb93 	bl	80079dc <ST7735_DrawString>
		ST7735_DrawString(27,84,ptr,Font_11x18,WHITE,BLACK);
 80032b6:	4b60      	ldr	r3, [pc, #384]	@ (8003438 <main+0x364>)
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	4b60      	ldr	r3, [pc, #384]	@ (800343c <main+0x368>)
 80032bc:	2200      	movs	r2, #0
 80032be:	9202      	str	r2, [sp, #8]
 80032c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003400 <main+0x32c>)
 80032c2:	9201      	str	r2, [sp, #4]
 80032c4:	466a      	mov	r2, sp
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	6011      	str	r1, [r2, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0002      	movs	r2, r0
 80032ce:	2154      	movs	r1, #84	@ 0x54
 80032d0:	201b      	movs	r0, #27
 80032d2:	f004 fb83 	bl	80079dc <ST7735_DrawString>
 80032d6:	e037      	b.n	8003348 <main+0x274>
	}
	else
	{
		if(uSP<10)
 80032d8:	4b53      	ldr	r3, [pc, #332]	@ (8003428 <main+0x354>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4959      	ldr	r1, [pc, #356]	@ (8003444 <main+0x370>)
 80032de:	1c18      	adds	r0, r3, #0
 80032e0:	f7fd f8d6 	bl	8000490 <__aeabi_fcmplt>
 80032e4:	1e03      	subs	r3, r0, #0
 80032e6:	d01f      	beq.n	8003328 <main+0x254>
		{
			ST7735_DrawString(5,84," ",Font_11x18,WHITE,BLACK);
 80032e8:	4b54      	ldr	r3, [pc, #336]	@ (800343c <main+0x368>)
 80032ea:	4857      	ldr	r0, [pc, #348]	@ (8003448 <main+0x374>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	9202      	str	r2, [sp, #8]
 80032f0:	4a43      	ldr	r2, [pc, #268]	@ (8003400 <main+0x32c>)
 80032f2:	9201      	str	r2, [sp, #4]
 80032f4:	466a      	mov	r2, sp
 80032f6:	6859      	ldr	r1, [r3, #4]
 80032f8:	6011      	str	r1, [r2, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0002      	movs	r2, r0
 80032fe:	2154      	movs	r1, #84	@ 0x54
 8003300:	2005      	movs	r0, #5
 8003302:	f004 fb6b 	bl	80079dc <ST7735_DrawString>
			ST7735_DrawString(16,84,ptr,Font_11x18,WHITE,BLACK);
 8003306:	4b4c      	ldr	r3, [pc, #304]	@ (8003438 <main+0x364>)
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	4b4c      	ldr	r3, [pc, #304]	@ (800343c <main+0x368>)
 800330c:	2200      	movs	r2, #0
 800330e:	9202      	str	r2, [sp, #8]
 8003310:	4a3b      	ldr	r2, [pc, #236]	@ (8003400 <main+0x32c>)
 8003312:	9201      	str	r2, [sp, #4]
 8003314:	466a      	mov	r2, sp
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	6011      	str	r1, [r2, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	0002      	movs	r2, r0
 800331e:	2154      	movs	r1, #84	@ 0x54
 8003320:	2010      	movs	r0, #16
 8003322:	f004 fb5b 	bl	80079dc <ST7735_DrawString>
 8003326:	e00f      	b.n	8003348 <main+0x274>
		}
		else ST7735_DrawString(5,84,ptr,Font_11x18,WHITE,BLACK);
 8003328:	4b43      	ldr	r3, [pc, #268]	@ (8003438 <main+0x364>)
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	4b43      	ldr	r3, [pc, #268]	@ (800343c <main+0x368>)
 800332e:	2200      	movs	r2, #0
 8003330:	9202      	str	r2, [sp, #8]
 8003332:	4a33      	ldr	r2, [pc, #204]	@ (8003400 <main+0x32c>)
 8003334:	9201      	str	r2, [sp, #4]
 8003336:	466a      	mov	r2, sp
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	6011      	str	r1, [r2, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	0002      	movs	r2, r0
 8003340:	2154      	movs	r1, #84	@ 0x54
 8003342:	2005      	movs	r0, #5
 8003344:	f004 fb4a 	bl	80079dc <ST7735_DrawString>
	}
	ST7735_DrawString( 60,84,"0V",Font_11x18,WHITE,BLACK);
 8003348:	4b3c      	ldr	r3, [pc, #240]	@ (800343c <main+0x368>)
 800334a:	4840      	ldr	r0, [pc, #256]	@ (800344c <main+0x378>)
 800334c:	2200      	movs	r2, #0
 800334e:	9202      	str	r2, [sp, #8]
 8003350:	4a2b      	ldr	r2, [pc, #172]	@ (8003400 <main+0x32c>)
 8003352:	9201      	str	r2, [sp, #4]
 8003354:	466a      	mov	r2, sp
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	6011      	str	r1, [r2, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0002      	movs	r2, r0
 800335e:	2154      	movs	r1, #84	@ 0x54
 8003360:	203c      	movs	r0, #60	@ 0x3c
 8003362:	f004 fb3b 	bl	80079dc <ST7735_DrawString>

	ptr = float_to_char(iSP, float_for_LCD);
 8003366:	4b32      	ldr	r3, [pc, #200]	@ (8003430 <main+0x35c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a32      	ldr	r2, [pc, #200]	@ (8003434 <main+0x360>)
 800336c:	0011      	movs	r1, r2
 800336e:	1c18      	adds	r0, r3, #0
 8003370:	f002 fdec 	bl	8005f4c <float_to_char>
 8003374:	0002      	movs	r2, r0
 8003376:	4b30      	ldr	r3, [pc, #192]	@ (8003438 <main+0x364>)
 8003378:	601a      	str	r2, [r3, #0]
	if(iSP<1)
 800337a:	4b2d      	ldr	r3, [pc, #180]	@ (8003430 <main+0x35c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	21fe      	movs	r1, #254	@ 0xfe
 8003380:	0589      	lsls	r1, r1, #22
 8003382:	1c18      	adds	r0, r3, #0
 8003384:	f7fd f884 	bl	8000490 <__aeabi_fcmplt>
 8003388:	1e03      	subs	r3, r0, #0
 800338a:	d063      	beq.n	8003454 <main+0x380>
	{
		ST7735_DrawString(89,84,"0",Font_11x18,WHITE,BLACK);
 800338c:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <main+0x368>)
 800338e:	4830      	ldr	r0, [pc, #192]	@ (8003450 <main+0x37c>)
 8003390:	2200      	movs	r2, #0
 8003392:	9202      	str	r2, [sp, #8]
 8003394:	4a1a      	ldr	r2, [pc, #104]	@ (8003400 <main+0x32c>)
 8003396:	9201      	str	r2, [sp, #4]
 8003398:	466a      	mov	r2, sp
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	6011      	str	r1, [r2, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0002      	movs	r2, r0
 80033a2:	2154      	movs	r1, #84	@ 0x54
 80033a4:	2059      	movs	r0, #89	@ 0x59
 80033a6:	f004 fb19 	bl	80079dc <ST7735_DrawString>
		ST7735_DrawString(100,84,ptr,Font_11x18,WHITE,BLACK);
 80033aa:	4b23      	ldr	r3, [pc, #140]	@ (8003438 <main+0x364>)
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	4b23      	ldr	r3, [pc, #140]	@ (800343c <main+0x368>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	9202      	str	r2, [sp, #8]
 80033b4:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <main+0x32c>)
 80033b6:	9201      	str	r2, [sp, #4]
 80033b8:	466a      	mov	r2, sp
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	6011      	str	r1, [r2, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	0002      	movs	r2, r0
 80033c2:	2154      	movs	r1, #84	@ 0x54
 80033c4:	2064      	movs	r0, #100	@ 0x64
 80033c6:	f004 fb09 	bl	80079dc <ST7735_DrawString>
 80033ca:	e053      	b.n	8003474 <main+0x3a0>
 80033cc:	20000074 	.word	0x20000074
 80033d0:	2000035c 	.word	0x2000035c
 80033d4:	200002cc 	.word	0x200002cc
 80033d8:	20000314 	.word	0x20000314
 80033dc:	20000284 	.word	0x20000284
 80033e0:	20000016 	.word	0x20000016
 80033e4:	48000400 	.word	0x48000400
 80033e8:	20000384 	.word	0x20000384
 80033ec:	0800ee90 	.word	0x0800ee90
 80033f0:	20000030 	.word	0x20000030
 80033f4:	0800ec68 	.word	0x0800ec68
 80033f8:	0000fc07 	.word	0x0000fc07
 80033fc:	0800ec80 	.word	0x0800ec80
 8003400:	0000ffff 	.word	0x0000ffff
 8003404:	0803f800 	.word	0x0803f800
 8003408:	20000004 	.word	0x20000004
 800340c:	0803f804 	.word	0x0803f804
 8003410:	20000008 	.word	0x20000008
 8003414:	0803f808 	.word	0x0803f808
 8003418:	2000000c 	.word	0x2000000c
 800341c:	0803f80c 	.word	0x0803f80c
 8003420:	20000010 	.word	0x20000010
 8003424:	0803f810 	.word	0x0803f810
 8003428:	20000018 	.word	0x20000018
 800342c:	0803f814 	.word	0x0803f814
 8003430:	2000001c 	.word	0x2000001c
 8003434:	20000378 	.word	0x20000378
 8003438:	2000038c 	.word	0x2000038c
 800343c:	20000038 	.word	0x20000038
 8003440:	0800ec94 	.word	0x0800ec94
 8003444:	41200000 	.word	0x41200000
 8003448:	0800ec98 	.word	0x0800ec98
 800344c:	0800ec9c 	.word	0x0800ec9c
 8003450:	0800eca0 	.word	0x0800eca0
	}
	else ST7735_DrawString(89,84,ptr,Font_11x18,WHITE,BLACK);
 8003454:	4bdf      	ldr	r3, [pc, #892]	@ (80037d4 <main+0x700>)
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	4bdf      	ldr	r3, [pc, #892]	@ (80037d8 <main+0x704>)
 800345a:	2200      	movs	r2, #0
 800345c:	9202      	str	r2, [sp, #8]
 800345e:	4adf      	ldr	r2, [pc, #892]	@ (80037dc <main+0x708>)
 8003460:	9201      	str	r2, [sp, #4]
 8003462:	466a      	mov	r2, sp
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	6011      	str	r1, [r2, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	0002      	movs	r2, r0
 800346c:	2154      	movs	r1, #84	@ 0x54
 800346e:	2059      	movs	r0, #89	@ 0x59
 8003470:	f004 fab4 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(144,84,"A",Font_11x18,WHITE,BLACK);
 8003474:	4bd8      	ldr	r3, [pc, #864]	@ (80037d8 <main+0x704>)
 8003476:	48da      	ldr	r0, [pc, #872]	@ (80037e0 <main+0x70c>)
 8003478:	2200      	movs	r2, #0
 800347a:	9202      	str	r2, [sp, #8]
 800347c:	4ad7      	ldr	r2, [pc, #860]	@ (80037dc <main+0x708>)
 800347e:	9201      	str	r2, [sp, #4]
 8003480:	466a      	mov	r2, sp
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	6011      	str	r1, [r2, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0002      	movs	r2, r0
 800348a:	2154      	movs	r1, #84	@ 0x54
 800348c:	2090      	movs	r0, #144	@ 0x90
 800348e:	f004 faa5 	bl	80079dc <ST7735_DrawString>
  /*END: Draw on LCD set points taken from FLASH Memory if they are valid */
  constU = (vdd*scaleU)/4095; //calculated only once to avoid...
 8003492:	4bd4      	ldr	r3, [pc, #848]	@ (80037e4 <main+0x710>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4bd4      	ldr	r3, [pc, #848]	@ (80037e8 <main+0x714>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	1c19      	adds	r1, r3, #0
 800349c:	1c10      	adds	r0, r2, #0
 800349e:	f7fd fba7 	bl	8000bf0 <__aeabi_fmul>
 80034a2:	1c03      	adds	r3, r0, #0
 80034a4:	49d1      	ldr	r1, [pc, #836]	@ (80037ec <main+0x718>)
 80034a6:	1c18      	adds	r0, r3, #0
 80034a8:	f7fd f9bc 	bl	8000824 <__aeabi_fdiv>
 80034ac:	1c03      	adds	r3, r0, #0
 80034ae:	1c1a      	adds	r2, r3, #0
 80034b0:	4bcf      	ldr	r3, [pc, #828]	@ (80037f0 <main+0x71c>)
 80034b2:	601a      	str	r2, [r3, #0]
  constI = (vdd*scaleI)/4095; //....circular repeated calculation
 80034b4:	4bcb      	ldr	r3, [pc, #812]	@ (80037e4 <main+0x710>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4bce      	ldr	r3, [pc, #824]	@ (80037f4 <main+0x720>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	1c19      	adds	r1, r3, #0
 80034be:	1c10      	adds	r0, r2, #0
 80034c0:	f7fd fb96 	bl	8000bf0 <__aeabi_fmul>
 80034c4:	1c03      	adds	r3, r0, #0
 80034c6:	49c9      	ldr	r1, [pc, #804]	@ (80037ec <main+0x718>)
 80034c8:	1c18      	adds	r0, r3, #0
 80034ca:	f7fd f9ab 	bl	8000824 <__aeabi_fdiv>
 80034ce:	1c03      	adds	r3, r0, #0
 80034d0:	1c1a      	adds	r2, r3, #0
 80034d2:	4bc9      	ldr	r3, [pc, #804]	@ (80037f8 <main+0x724>)
 80034d4:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_adcs(adc_RAW, &temp_MCU, &outU, &outI, constU, constI, vdd);
 80034d6:	4bc6      	ldr	r3, [pc, #792]	@ (80037f0 <main+0x71c>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4bc7      	ldr	r3, [pc, #796]	@ (80037f8 <main+0x724>)
 80034dc:	6819      	ldr	r1, [r3, #0]
 80034de:	4bc1      	ldr	r3, [pc, #772]	@ (80037e4 <main+0x710>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4ec6      	ldr	r6, [pc, #792]	@ (80037fc <main+0x728>)
 80034e4:	4dc6      	ldr	r5, [pc, #792]	@ (8003800 <main+0x72c>)
 80034e6:	4cc7      	ldr	r4, [pc, #796]	@ (8003804 <main+0x730>)
 80034e8:	48c7      	ldr	r0, [pc, #796]	@ (8003808 <main+0x734>)
 80034ea:	9302      	str	r3, [sp, #8]
 80034ec:	9101      	str	r1, [sp, #4]
 80034ee:	9200      	str	r2, [sp, #0]
 80034f0:	0033      	movs	r3, r6
 80034f2:	002a      	movs	r2, r5
 80034f4:	0021      	movs	r1, r4
 80034f6:	f002 fbcb 	bl	8005c90 <get_adcs>
	  if((enc != NO_TRN)||(btn != NO_PRESS)) menu_handler();
 80034fa:	4bc4      	ldr	r3, [pc, #784]	@ (800380c <main+0x738>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <main+0x436>
 8003502:	4bc3      	ldr	r3, [pc, #780]	@ (8003810 <main+0x73c>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <main+0x43a>
 800350a:	f000 fef7 	bl	80042fc <menu_handler>
 	  get_time(hrtc, &onTd100, &onTd10, &onTd1 , &onTh10, &onTh1, &onTm10, &onTm1,
 800350e:	4bc1      	ldr	r3, [pc, #772]	@ (8003814 <main+0x740>)
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	4bc1      	ldr	r3, [pc, #772]	@ (8003818 <main+0x744>)
 8003514:	920d      	str	r2, [sp, #52]	@ 0x34
 8003516:	4ac1      	ldr	r2, [pc, #772]	@ (800381c <main+0x748>)
 8003518:	920c      	str	r2, [sp, #48]	@ 0x30
 800351a:	4ac1      	ldr	r2, [pc, #772]	@ (8003820 <main+0x74c>)
 800351c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800351e:	4ac1      	ldr	r2, [pc, #772]	@ (8003824 <main+0x750>)
 8003520:	920a      	str	r2, [sp, #40]	@ 0x28
 8003522:	4ac1      	ldr	r2, [pc, #772]	@ (8003828 <main+0x754>)
 8003524:	9209      	str	r2, [sp, #36]	@ 0x24
 8003526:	4ac1      	ldr	r2, [pc, #772]	@ (800382c <main+0x758>)
 8003528:	9208      	str	r2, [sp, #32]
 800352a:	4ac1      	ldr	r2, [pc, #772]	@ (8003830 <main+0x75c>)
 800352c:	9207      	str	r2, [sp, #28]
 800352e:	4ac1      	ldr	r2, [pc, #772]	@ (8003834 <main+0x760>)
 8003530:	9206      	str	r2, [sp, #24]
 8003532:	4ac1      	ldr	r2, [pc, #772]	@ (8003838 <main+0x764>)
 8003534:	9205      	str	r2, [sp, #20]
 8003536:	4ac1      	ldr	r2, [pc, #772]	@ (800383c <main+0x768>)
 8003538:	9204      	str	r2, [sp, #16]
 800353a:	466a      	mov	r2, sp
 800353c:	0011      	movs	r1, r2
 800353e:	001a      	movs	r2, r3
 8003540:	3210      	adds	r2, #16
 8003542:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003544:	c131      	stmia	r1!, {r0, r4, r5}
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	600a      	str	r2, [r1, #0]
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	6859      	ldr	r1, [r3, #4]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f002 fecd 	bl	80062f0 <get_time>
 			  &onTs10, &onTs1, on_off);
 	  draw_main_dy(ptr, float_for_LCD, on_off, outU, outI, onTd100, onTd10, onTd1, onTh10,
 8003556:	4b9f      	ldr	r3, [pc, #636]	@ (80037d4 <main+0x700>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	4bad      	ldr	r3, [pc, #692]	@ (8003814 <main+0x740>)
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	60ba      	str	r2, [r7, #8]
 8003562:	4ba7      	ldr	r3, [pc, #668]	@ (8003800 <main+0x72c>)
 8003564:	6819      	ldr	r1, [r3, #0]
 8003566:	6079      	str	r1, [r7, #4]
 8003568:	4ba4      	ldr	r3, [pc, #656]	@ (80037fc <main+0x728>)
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	4bb3      	ldr	r3, [pc, #716]	@ (800383c <main+0x768>)
 800356e:	781c      	ldrb	r4, [r3, #0]
 8003570:	4bb1      	ldr	r3, [pc, #708]	@ (8003838 <main+0x764>)
 8003572:	781d      	ldrb	r5, [r3, #0]
 8003574:	4baf      	ldr	r3, [pc, #700]	@ (8003834 <main+0x760>)
 8003576:	781e      	ldrb	r6, [r3, #0]
 8003578:	4bad      	ldr	r3, [pc, #692]	@ (8003830 <main+0x75c>)
 800357a:	7819      	ldrb	r1, [r3, #0]
 800357c:	468c      	mov	ip, r1
 800357e:	4bab      	ldr	r3, [pc, #684]	@ (800382c <main+0x758>)
 8003580:	7819      	ldrb	r1, [r3, #0]
 8003582:	4688      	mov	r8, r1
 8003584:	4ba8      	ldr	r3, [pc, #672]	@ (8003828 <main+0x754>)
 8003586:	7819      	ldrb	r1, [r3, #0]
 8003588:	4689      	mov	r9, r1
 800358a:	4ba6      	ldr	r3, [pc, #664]	@ (8003824 <main+0x750>)
 800358c:	7819      	ldrb	r1, [r3, #0]
 800358e:	468a      	mov	sl, r1
 8003590:	4ba3      	ldr	r3, [pc, #652]	@ (8003820 <main+0x74c>)
 8003592:	7819      	ldrb	r1, [r3, #0]
 8003594:	468b      	mov	fp, r1
 8003596:	4ba1      	ldr	r3, [pc, #644]	@ (800381c <main+0x748>)
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	4b9a      	ldr	r3, [pc, #616]	@ (8003804 <main+0x730>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	49a8      	ldr	r1, [pc, #672]	@ (8003840 <main+0x76c>)
 80035a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80035a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80035a4:	465b      	mov	r3, fp
 80035a6:	9308      	str	r3, [sp, #32]
 80035a8:	4653      	mov	r3, sl
 80035aa:	9307      	str	r3, [sp, #28]
 80035ac:	464b      	mov	r3, r9
 80035ae:	9306      	str	r3, [sp, #24]
 80035b0:	4643      	mov	r3, r8
 80035b2:	9305      	str	r3, [sp, #20]
 80035b4:	4663      	mov	r3, ip
 80035b6:	9304      	str	r3, [sp, #16]
 80035b8:	9603      	str	r6, [sp, #12]
 80035ba:	9502      	str	r5, [sp, #8]
 80035bc:	9401      	str	r4, [sp, #4]
 80035be:	9000      	str	r0, [sp, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f002 ff4b 	bl	8006460 <draw_main_dy>
			  onTh1, onTm10, onTm1, onTs10, onTs1, temp_MCU);
 	  if(temp_MCU < 85.0) //no over hating
 80035ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003804 <main+0x730>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	499d      	ldr	r1, [pc, #628]	@ (8003844 <main+0x770>)
 80035d0:	1c18      	adds	r0, r3, #0
 80035d2:	f7fc ff5d 	bl	8000490 <__aeabi_fcmplt>
 80035d6:	1e03      	subs	r3, r0, #0
 80035d8:	d032      	beq.n	8003640 <main+0x56c>
	  {
 			  uint_spI = (uint16_t)(scaleIsp   * iSP);
 80035da:	4b9b      	ldr	r3, [pc, #620]	@ (8003848 <main+0x774>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b9b      	ldr	r3, [pc, #620]	@ (800384c <main+0x778>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1c19      	adds	r1, r3, #0
 80035e4:	1c10      	adds	r0, r2, #0
 80035e6:	f7fd fb03 	bl	8000bf0 <__aeabi_fmul>
 80035ea:	1c03      	adds	r3, r0, #0
 80035ec:	1c18      	adds	r0, r3, #0
 80035ee:	f7fc ff77 	bl	80004e0 <__aeabi_f2uiz>
 80035f2:	0003      	movs	r3, r0
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	4b96      	ldr	r3, [pc, #600]	@ (8003850 <main+0x77c>)
 80035f8:	801a      	strh	r2, [r3, #0]
 			  i_DAC10_Set(uint_spI);
 80035fa:	4b95      	ldr	r3, [pc, #596]	@ (8003850 <main+0x77c>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	0018      	movs	r0, r3
 8003600:	f002 f996 	bl	8005930 <i_DAC10_Set>
 			  if(on_off) // output is POWERED
 8003604:	4b83      	ldr	r3, [pc, #524]	@ (8003814 <main+0x740>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d015      	beq.n	8003638 <main+0x564>
 			  {
 				  uint_spU = (uint16_t)(scaleUsp * uSP);
 800360c:	4b91      	ldr	r3, [pc, #580]	@ (8003854 <main+0x780>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b91      	ldr	r3, [pc, #580]	@ (8003858 <main+0x784>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	1c19      	adds	r1, r3, #0
 8003616:	1c10      	adds	r0, r2, #0
 8003618:	f7fd faea 	bl	8000bf0 <__aeabi_fmul>
 800361c:	1c03      	adds	r3, r0, #0
 800361e:	1c18      	adds	r0, r3, #0
 8003620:	f7fc ff5e 	bl	80004e0 <__aeabi_f2uiz>
 8003624:	0003      	movs	r3, r0
 8003626:	b29a      	uxth	r2, r3
 8003628:	4b8c      	ldr	r3, [pc, #560]	@ (800385c <main+0x788>)
 800362a:	801a      	strh	r2, [r3, #0]
 				   v_DAC10_Set(uint_spU);
 800362c:	4b8b      	ldr	r3, [pc, #556]	@ (800385c <main+0x788>)
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	0018      	movs	r0, r3
 8003632:	f002 fa53 	bl	8005adc <v_DAC10_Set>
 8003636:	e00c      	b.n	8003652 <main+0x57e>

 			  }
 			  else // output is UNPOWERED
 			  {
 				  v_DAC10_Set(0);
 8003638:	2000      	movs	r0, #0
 800363a:	f002 fa4f 	bl	8005adc <v_DAC10_Set>
 800363e:	e008      	b.n	8003652 <main+0x57e>
 				  //  i_DAC10_Set(0);
 			  }
	  }
 	  else //over heating, output UNPOWERED
 	  {
 		  v_DAC10_Set(0);
 8003640:	2000      	movs	r0, #0
 8003642:	f002 fa4b 	bl	8005adc <v_DAC10_Set>
 		  i_DAC10_Set(0);
 8003646:	2000      	movs	r0, #0
 8003648:	f002 f972 	bl	8005930 <i_DAC10_Set>
 		  on_off = false;
 800364c:	4b71      	ldr	r3, [pc, #452]	@ (8003814 <main+0x740>)
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
 	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Slave_Receive_IT(&hi2c2, (uint8_t*) &slaveRxBuf,I2C_BUFF_LEN);
 8003652:	4983      	ldr	r1, [pc, #524]	@ (8003860 <main+0x78c>)
 8003654:	4b83      	ldr	r3, [pc, #524]	@ (8003864 <main+0x790>)
 8003656:	2210      	movs	r2, #16
 8003658:	0018      	movs	r0, r3
 800365a:	f006 fea9 	bl	800a3b0 <HAL_I2C_Slave_Receive_IT>
	  if(mod_sel_MS)// device is in master mode
 800365e:	4b82      	ldr	r3, [pc, #520]	@ (8003868 <main+0x794>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d032      	beq.n	80036cc <main+0x5f8>
	  {
		  masterTxBuf[0]=(uint8_t)on_off;
 8003666:	4b6b      	ldr	r3, [pc, #428]	@ (8003814 <main+0x740>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	001a      	movs	r2, r3
 800366c:	4b7f      	ldr	r3, [pc, #508]	@ (800386c <main+0x798>)
 800366e:	701a      	strb	r2, [r3, #0]
		  memcpy(&masterTxBuf[1], &uSP, sizeof(uSP));
 8003670:	4979      	ldr	r1, [pc, #484]	@ (8003858 <main+0x784>)
 8003672:	4b7f      	ldr	r3, [pc, #508]	@ (8003870 <main+0x79c>)
 8003674:	2204      	movs	r2, #4
 8003676:	0018      	movs	r0, r3
 8003678:	f00b fae0 	bl	800ec3c <memcpy>
		  memcpy(&masterTxBuf[5], &iSP, sizeof(iSP));
 800367c:	4973      	ldr	r1, [pc, #460]	@ (800384c <main+0x778>)
 800367e:	4b7d      	ldr	r3, [pc, #500]	@ (8003874 <main+0x7a0>)
 8003680:	2204      	movs	r2, #4
 8003682:	0018      	movs	r0, r3
 8003684:	f00b fada 	bl	800ec3c <memcpy>
		  tempCRC = HAL_CRC_Calculate(&hcrc,(uint32_t *)masterTxBuf, (I2C_BUFF_LEN/4)-1);
 8003688:	4978      	ldr	r1, [pc, #480]	@ (800386c <main+0x798>)
 800368a:	4b7b      	ldr	r3, [pc, #492]	@ (8003878 <main+0x7a4>)
 800368c:	2203      	movs	r2, #3
 800368e:	0018      	movs	r0, r3
 8003690:	f005 fc95 	bl	8008fbe <HAL_CRC_Calculate>
 8003694:	0002      	movs	r2, r0
 8003696:	4b79      	ldr	r3, [pc, #484]	@ (800387c <main+0x7a8>)
 8003698:	601a      	str	r2, [r3, #0]
		  memcpy(&masterTxBuf[I2C_BUFF_LEN-4],&tempCRC,sizeof(tempCRC));
 800369a:	4b78      	ldr	r3, [pc, #480]	@ (800387c <main+0x7a8>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b73      	ldr	r3, [pc, #460]	@ (800386c <main+0x798>)
 80036a0:	60da      	str	r2, [r3, #12]
		  HAL_I2C_Master_Transmit(&hi2c1, (I2C_SLAVE_ADDRESS << 1),
 80036a2:	4a72      	ldr	r2, [pc, #456]	@ (800386c <main+0x798>)
 80036a4:	4876      	ldr	r0, [pc, #472]	@ (8003880 <main+0x7ac>)
 80036a6:	23fa      	movs	r3, #250	@ 0xfa
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	2310      	movs	r3, #16
 80036ae:	215a      	movs	r1, #90	@ 0x5a
 80036b0:	f006 fbd8 	bl	8009e64 <HAL_I2C_Master_Transmit>
				  	  	  	  	  	  	  	 (uint8_t*) &masterTxBuf, I2C_BUFF_LEN, 500);
		  HAL_Delay(5);//Give some time to slave to compute received
 80036b4:	2005      	movs	r0, #5
 80036b6:	f004 fe0d 	bl	80082d4 <HAL_Delay>
		  // Dummy i2c receiving for computability with PC mode interface
		  HAL_I2C_Master_Receive(&hi2c1, (I2C_SLAVE_ADDRESS << 1),
 80036ba:	4a72      	ldr	r2, [pc, #456]	@ (8003884 <main+0x7b0>)
 80036bc:	4870      	ldr	r0, [pc, #448]	@ (8003880 <main+0x7ac>)
 80036be:	23fa      	movs	r3, #250	@ 0xfa
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2310      	movs	r3, #16
 80036c6:	215a      	movs	r1, #90	@ 0x5a
 80036c8:	f006 fcf6 	bl	800a0b8 <HAL_I2C_Master_Receive>
				  	  	  	  	  	  	  	  (uint8_t*) &masterRxBuf, I2C_BUFF_LEN, 500);
	  }
	  if(i2cError)
 80036cc:	4b6e      	ldr	r3, [pc, #440]	@ (8003888 <main+0x7b4>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01a      	beq.n	800370a <main+0x636>
	  {
 		  v_DAC10_Set(0);
 80036d4:	2000      	movs	r0, #0
 80036d6:	f002 fa01 	bl	8005adc <v_DAC10_Set>
 		  i_DAC10_Set(0);
 80036da:	2000      	movs	r0, #0
 80036dc:	f002 f928 	bl	8005930 <i_DAC10_Set>
 		  on_off = false;
 80036e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003814 <main+0x740>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
 		  ST7735_DrawString(0,52,"i2c communication error",Font_11x18,WHITE, RED);
 80036e6:	4b3c      	ldr	r3, [pc, #240]	@ (80037d8 <main+0x704>)
 80036e8:	4868      	ldr	r0, [pc, #416]	@ (800388c <main+0x7b8>)
 80036ea:	22f8      	movs	r2, #248	@ 0xf8
 80036ec:	0212      	lsls	r2, r2, #8
 80036ee:	9202      	str	r2, [sp, #8]
 80036f0:	4a3a      	ldr	r2, [pc, #232]	@ (80037dc <main+0x708>)
 80036f2:	9201      	str	r2, [sp, #4]
 80036f4:	466a      	mov	r2, sp
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	6011      	str	r1, [r2, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	0002      	movs	r2, r0
 80036fe:	2134      	movs	r1, #52	@ 0x34
 8003700:	2000      	movs	r0, #0
 8003702:	f004 f96b 	bl	80079dc <ST7735_DrawString>
 		  while(1);//Lock device after CRC Error
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	e7fd      	b.n	8003706 <main+0x632>
	  }
	  if(redraw_ST)
 800370a:	4b61      	ldr	r3, [pc, #388]	@ (8003890 <main+0x7bc>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d027      	beq.n	8003762 <main+0x68e>
	  {
		  if(on_off) ST7735_DrawString(124,2," ON",Font_11x18,WHITE,GREEN);
 8003712:	4b40      	ldr	r3, [pc, #256]	@ (8003814 <main+0x740>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d010      	beq.n	800373c <main+0x668>
 800371a:	4b2f      	ldr	r3, [pc, #188]	@ (80037d8 <main+0x704>)
 800371c:	485d      	ldr	r0, [pc, #372]	@ (8003894 <main+0x7c0>)
 800371e:	22fc      	movs	r2, #252	@ 0xfc
 8003720:	00d2      	lsls	r2, r2, #3
 8003722:	9202      	str	r2, [sp, #8]
 8003724:	4a2d      	ldr	r2, [pc, #180]	@ (80037dc <main+0x708>)
 8003726:	9201      	str	r2, [sp, #4]
 8003728:	466a      	mov	r2, sp
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	6011      	str	r1, [r2, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	0002      	movs	r2, r0
 8003732:	2102      	movs	r1, #2
 8003734:	207c      	movs	r0, #124	@ 0x7c
 8003736:	f004 f951 	bl	80079dc <ST7735_DrawString>
 800373a:	e00f      	b.n	800375c <main+0x688>
		  else ST7735_DrawString(124,2,"OFF",Font_11x18,WHITE,RED);
 800373c:	4b26      	ldr	r3, [pc, #152]	@ (80037d8 <main+0x704>)
 800373e:	4856      	ldr	r0, [pc, #344]	@ (8003898 <main+0x7c4>)
 8003740:	22f8      	movs	r2, #248	@ 0xf8
 8003742:	0212      	lsls	r2, r2, #8
 8003744:	9202      	str	r2, [sp, #8]
 8003746:	4a25      	ldr	r2, [pc, #148]	@ (80037dc <main+0x708>)
 8003748:	9201      	str	r2, [sp, #4]
 800374a:	466a      	mov	r2, sp
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	6011      	str	r1, [r2, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	0002      	movs	r2, r0
 8003754:	2102      	movs	r1, #2
 8003756:	207c      	movs	r0, #124	@ 0x7c
 8003758:	f004 f940 	bl	80079dc <ST7735_DrawString>
		  redraw_ST = false;
 800375c:	4b4c      	ldr	r3, [pc, #304]	@ (8003890 <main+0x7bc>)
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
	  }
	  if(redraw_uSP)
 8003762:	4b4e      	ldr	r3, [pc, #312]	@ (800389c <main+0x7c8>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d100      	bne.n	800376c <main+0x698>
 800376a:	e0e5      	b.n	8003938 <main+0x864>
	  {
		  ptr = float_to_char(uSP, float_for_LCD);
 800376c:	4b3a      	ldr	r3, [pc, #232]	@ (8003858 <main+0x784>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a33      	ldr	r2, [pc, #204]	@ (8003840 <main+0x76c>)
 8003772:	0011      	movs	r1, r2
 8003774:	1c18      	adds	r0, r3, #0
 8003776:	f002 fbe9 	bl	8005f4c <float_to_char>
 800377a:	0002      	movs	r2, r0
 800377c:	4b15      	ldr	r3, [pc, #84]	@ (80037d4 <main+0x700>)
 800377e:	601a      	str	r2, [r3, #0]
		  if(uSP<1)
 8003780:	4b35      	ldr	r3, [pc, #212]	@ (8003858 <main+0x784>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	21fe      	movs	r1, #254	@ 0xfe
 8003786:	0589      	lsls	r1, r1, #22
 8003788:	1c18      	adds	r0, r3, #0
 800378a:	f7fc fe81 	bl	8000490 <__aeabi_fcmplt>
 800378e:	1e03      	subs	r3, r0, #0
 8003790:	d100      	bne.n	8003794 <main+0x6c0>
 8003792:	e087      	b.n	80038a4 <main+0x7d0>
		  {
			  ST7735_DrawString(5,84," 0",Font_11x18,WHITE,BLACK);
 8003794:	4b10      	ldr	r3, [pc, #64]	@ (80037d8 <main+0x704>)
 8003796:	4842      	ldr	r0, [pc, #264]	@ (80038a0 <main+0x7cc>)
 8003798:	2200      	movs	r2, #0
 800379a:	9202      	str	r2, [sp, #8]
 800379c:	4a0f      	ldr	r2, [pc, #60]	@ (80037dc <main+0x708>)
 800379e:	9201      	str	r2, [sp, #4]
 80037a0:	466a      	mov	r2, sp
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	6011      	str	r1, [r2, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0002      	movs	r2, r0
 80037aa:	2154      	movs	r1, #84	@ 0x54
 80037ac:	2005      	movs	r0, #5
 80037ae:	f004 f915 	bl	80079dc <ST7735_DrawString>
			  ST7735_DrawString(27,84,ptr,Font_11x18,WHITE,BLACK);
 80037b2:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <main+0x700>)
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <main+0x704>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	9202      	str	r2, [sp, #8]
 80037bc:	4a07      	ldr	r2, [pc, #28]	@ (80037dc <main+0x708>)
 80037be:	9201      	str	r2, [sp, #4]
 80037c0:	466a      	mov	r2, sp
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	6011      	str	r1, [r2, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0002      	movs	r2, r0
 80037ca:	2154      	movs	r1, #84	@ 0x54
 80037cc:	201b      	movs	r0, #27
 80037ce:	f004 f905 	bl	80079dc <ST7735_DrawString>
 80037d2:	e09f      	b.n	8003914 <main+0x840>
 80037d4:	2000038c 	.word	0x2000038c
 80037d8:	20000038 	.word	0x20000038
 80037dc:	0000ffff 	.word	0x0000ffff
 80037e0:	0800eca4 	.word	0x0800eca4
 80037e4:	20000000 	.word	0x20000000
 80037e8:	20000004 	.word	0x20000004
 80037ec:	457ff000 	.word	0x457ff000
 80037f0:	20000364 	.word	0x20000364
 80037f4:	20000008 	.word	0x20000008
 80037f8:	20000368 	.word	0x20000368
 80037fc:	20000370 	.word	0x20000370
 8003800:	2000036c 	.word	0x2000036c
 8003804:	20000374 	.word	0x20000374
 8003808:	2000035c 	.word	0x2000035c
 800380c:	20000383 	.word	0x20000383
 8003810:	20000384 	.word	0x20000384
 8003814:	20000390 	.word	0x20000390
 8003818:	200001bc 	.word	0x200001bc
 800381c:	20000028 	.word	0x20000028
 8003820:	20000027 	.word	0x20000027
 8003824:	20000026 	.word	0x20000026
 8003828:	20000025 	.word	0x20000025
 800382c:	20000024 	.word	0x20000024
 8003830:	20000023 	.word	0x20000023
 8003834:	20000022 	.word	0x20000022
 8003838:	20000021 	.word	0x20000021
 800383c:	20000020 	.word	0x20000020
 8003840:	20000378 	.word	0x20000378
 8003844:	42aa0000 	.word	0x42aa0000
 8003848:	20000010 	.word	0x20000010
 800384c:	2000001c 	.word	0x2000001c
 8003850:	20000396 	.word	0x20000396
 8003854:	2000000c 	.word	0x2000000c
 8003858:	20000018 	.word	0x20000018
 800385c:	20000394 	.word	0x20000394
 8003860:	200003c8 	.word	0x200003c8
 8003864:	20000168 	.word	0x20000168
 8003868:	20000391 	.word	0x20000391
 800386c:	20000398 	.word	0x20000398
 8003870:	20000399 	.word	0x20000399
 8003874:	2000039d 	.word	0x2000039d
 8003878:	200000f8 	.word	0x200000f8
 800387c:	200003d8 	.word	0x200003d8
 8003880:	20000114 	.word	0x20000114
 8003884:	200003a8 	.word	0x200003a8
 8003888:	200003dc 	.word	0x200003dc
 800388c:	0800eca8 	.word	0x0800eca8
 8003890:	200003dd 	.word	0x200003dd
 8003894:	0800ecc0 	.word	0x0800ecc0
 8003898:	0800ecc4 	.word	0x0800ecc4
 800389c:	200003de 	.word	0x200003de
 80038a0:	0800ec94 	.word	0x0800ec94
		  }
		  else
		  {
			  if(uSP<10)
 80038a4:	4b52      	ldr	r3, [pc, #328]	@ (80039f0 <main+0x91c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4952      	ldr	r1, [pc, #328]	@ (80039f4 <main+0x920>)
 80038aa:	1c18      	adds	r0, r3, #0
 80038ac:	f7fc fdf0 	bl	8000490 <__aeabi_fcmplt>
 80038b0:	1e03      	subs	r3, r0, #0
 80038b2:	d01f      	beq.n	80038f4 <main+0x820>
			  {
				  ST7735_DrawString(5,84," ",Font_11x18,WHITE,BLACK);
 80038b4:	4b50      	ldr	r3, [pc, #320]	@ (80039f8 <main+0x924>)
 80038b6:	4851      	ldr	r0, [pc, #324]	@ (80039fc <main+0x928>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	9202      	str	r2, [sp, #8]
 80038bc:	4a50      	ldr	r2, [pc, #320]	@ (8003a00 <main+0x92c>)
 80038be:	9201      	str	r2, [sp, #4]
 80038c0:	466a      	mov	r2, sp
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	6011      	str	r1, [r2, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	0002      	movs	r2, r0
 80038ca:	2154      	movs	r1, #84	@ 0x54
 80038cc:	2005      	movs	r0, #5
 80038ce:	f004 f885 	bl	80079dc <ST7735_DrawString>
				  ST7735_DrawString(16,84,ptr,Font_11x18,WHITE,BLACK);
 80038d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003a04 <main+0x930>)
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	4b48      	ldr	r3, [pc, #288]	@ (80039f8 <main+0x924>)
 80038d8:	2200      	movs	r2, #0
 80038da:	9202      	str	r2, [sp, #8]
 80038dc:	4a48      	ldr	r2, [pc, #288]	@ (8003a00 <main+0x92c>)
 80038de:	9201      	str	r2, [sp, #4]
 80038e0:	466a      	mov	r2, sp
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	6011      	str	r1, [r2, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0002      	movs	r2, r0
 80038ea:	2154      	movs	r1, #84	@ 0x54
 80038ec:	2010      	movs	r0, #16
 80038ee:	f004 f875 	bl	80079dc <ST7735_DrawString>
 80038f2:	e00f      	b.n	8003914 <main+0x840>
			  }
			  else ST7735_DrawString(5,84,ptr,Font_11x18,WHITE,BLACK);
 80038f4:	4b43      	ldr	r3, [pc, #268]	@ (8003a04 <main+0x930>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	4b3f      	ldr	r3, [pc, #252]	@ (80039f8 <main+0x924>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	9202      	str	r2, [sp, #8]
 80038fe:	4a40      	ldr	r2, [pc, #256]	@ (8003a00 <main+0x92c>)
 8003900:	9201      	str	r2, [sp, #4]
 8003902:	466a      	mov	r2, sp
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	6011      	str	r1, [r2, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	0002      	movs	r2, r0
 800390c:	2154      	movs	r1, #84	@ 0x54
 800390e:	2005      	movs	r0, #5
 8003910:	f004 f864 	bl	80079dc <ST7735_DrawString>
		  }
		  ST7735_DrawString( 60,84,"0V",Font_11x18,WHITE,BLACK);
 8003914:	4b38      	ldr	r3, [pc, #224]	@ (80039f8 <main+0x924>)
 8003916:	483c      	ldr	r0, [pc, #240]	@ (8003a08 <main+0x934>)
 8003918:	2200      	movs	r2, #0
 800391a:	9202      	str	r2, [sp, #8]
 800391c:	4a38      	ldr	r2, [pc, #224]	@ (8003a00 <main+0x92c>)
 800391e:	9201      	str	r2, [sp, #4]
 8003920:	466a      	mov	r2, sp
 8003922:	6859      	ldr	r1, [r3, #4]
 8003924:	6011      	str	r1, [r2, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0002      	movs	r2, r0
 800392a:	2154      	movs	r1, #84	@ 0x54
 800392c:	203c      	movs	r0, #60	@ 0x3c
 800392e:	f004 f855 	bl	80079dc <ST7735_DrawString>
		  redraw_uSP = false;
 8003932:	4b36      	ldr	r3, [pc, #216]	@ (8003a0c <main+0x938>)
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
	  }
	  if(redraw_iSP)
 8003938:	4b35      	ldr	r3, [pc, #212]	@ (8003a10 <main+0x93c>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d100      	bne.n	8003942 <main+0x86e>
 8003940:	e5c9      	b.n	80034d6 <main+0x402>
	  {
		  ptr = float_to_char(iSP, float_for_LCD);
 8003942:	4b34      	ldr	r3, [pc, #208]	@ (8003a14 <main+0x940>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a34      	ldr	r2, [pc, #208]	@ (8003a18 <main+0x944>)
 8003948:	0011      	movs	r1, r2
 800394a:	1c18      	adds	r0, r3, #0
 800394c:	f002 fafe 	bl	8005f4c <float_to_char>
 8003950:	0002      	movs	r2, r0
 8003952:	4b2c      	ldr	r3, [pc, #176]	@ (8003a04 <main+0x930>)
 8003954:	601a      	str	r2, [r3, #0]
		  if(iSP<1)
 8003956:	4b2f      	ldr	r3, [pc, #188]	@ (8003a14 <main+0x940>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	21fe      	movs	r1, #254	@ 0xfe
 800395c:	0589      	lsls	r1, r1, #22
 800395e:	1c18      	adds	r0, r3, #0
 8003960:	f7fc fd96 	bl	8000490 <__aeabi_fcmplt>
 8003964:	1e03      	subs	r3, r0, #0
 8003966:	d01f      	beq.n	80039a8 <main+0x8d4>
		  {
			  ST7735_DrawString(89,84,"0",Font_11x18,WHITE,BLACK);
 8003968:	4b23      	ldr	r3, [pc, #140]	@ (80039f8 <main+0x924>)
 800396a:	482c      	ldr	r0, [pc, #176]	@ (8003a1c <main+0x948>)
 800396c:	2200      	movs	r2, #0
 800396e:	9202      	str	r2, [sp, #8]
 8003970:	4a23      	ldr	r2, [pc, #140]	@ (8003a00 <main+0x92c>)
 8003972:	9201      	str	r2, [sp, #4]
 8003974:	466a      	mov	r2, sp
 8003976:	6859      	ldr	r1, [r3, #4]
 8003978:	6011      	str	r1, [r2, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	0002      	movs	r2, r0
 800397e:	2154      	movs	r1, #84	@ 0x54
 8003980:	2059      	movs	r0, #89	@ 0x59
 8003982:	f004 f82b 	bl	80079dc <ST7735_DrawString>
			  ST7735_DrawString(100,84,ptr,Font_11x18,WHITE,BLACK);
 8003986:	4b1f      	ldr	r3, [pc, #124]	@ (8003a04 <main+0x930>)
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <main+0x924>)
 800398c:	2200      	movs	r2, #0
 800398e:	9202      	str	r2, [sp, #8]
 8003990:	4a1b      	ldr	r2, [pc, #108]	@ (8003a00 <main+0x92c>)
 8003992:	9201      	str	r2, [sp, #4]
 8003994:	466a      	mov	r2, sp
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	6011      	str	r1, [r2, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	0002      	movs	r2, r0
 800399e:	2154      	movs	r1, #84	@ 0x54
 80039a0:	2064      	movs	r0, #100	@ 0x64
 80039a2:	f004 f81b 	bl	80079dc <ST7735_DrawString>
 80039a6:	e00f      	b.n	80039c8 <main+0x8f4>
		  }
		  else ST7735_DrawString(89,84,ptr,Font_11x18,WHITE,BLACK);
 80039a8:	4b16      	ldr	r3, [pc, #88]	@ (8003a04 <main+0x930>)
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	4b12      	ldr	r3, [pc, #72]	@ (80039f8 <main+0x924>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	9202      	str	r2, [sp, #8]
 80039b2:	4a13      	ldr	r2, [pc, #76]	@ (8003a00 <main+0x92c>)
 80039b4:	9201      	str	r2, [sp, #4]
 80039b6:	466a      	mov	r2, sp
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	6011      	str	r1, [r2, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	0002      	movs	r2, r0
 80039c0:	2154      	movs	r1, #84	@ 0x54
 80039c2:	2059      	movs	r0, #89	@ 0x59
 80039c4:	f004 f80a 	bl	80079dc <ST7735_DrawString>
		  ST7735_DrawString(144,84,"A",Font_11x18,WHITE,BLACK);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <main+0x924>)
 80039ca:	4815      	ldr	r0, [pc, #84]	@ (8003a20 <main+0x94c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	9202      	str	r2, [sp, #8]
 80039d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003a00 <main+0x92c>)
 80039d2:	9201      	str	r2, [sp, #4]
 80039d4:	466a      	mov	r2, sp
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	6011      	str	r1, [r2, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	0002      	movs	r2, r0
 80039de:	2154      	movs	r1, #84	@ 0x54
 80039e0:	2090      	movs	r0, #144	@ 0x90
 80039e2:	f003 fffb 	bl	80079dc <ST7735_DrawString>
		  redraw_iSP = false;
 80039e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <main+0x93c>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
	  get_adcs(adc_RAW, &temp_MCU, &outU, &outI, constU, constI, vdd);
 80039ec:	e573      	b.n	80034d6 <main+0x402>
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	20000018 	.word	0x20000018
 80039f4:	41200000 	.word	0x41200000
 80039f8:	20000038 	.word	0x20000038
 80039fc:	0800ec98 	.word	0x0800ec98
 8003a00:	0000ffff 	.word	0x0000ffff
 8003a04:	2000038c 	.word	0x2000038c
 8003a08:	0800ec9c 	.word	0x0800ec9c
 8003a0c:	200003de 	.word	0x200003de
 8003a10:	200003df 	.word	0x200003df
 8003a14:	2000001c 	.word	0x2000001c
 8003a18:	20000378 	.word	0x20000378
 8003a1c:	0800eca0 	.word	0x0800eca0
 8003a20:	0800eca4 	.word	0x0800eca4

08003a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b095      	sub	sp, #84	@ 0x54
 8003a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a2a:	2420      	movs	r4, #32
 8003a2c:	193b      	adds	r3, r7, r4
 8003a2e:	0018      	movs	r0, r3
 8003a30:	2330      	movs	r3, #48	@ 0x30
 8003a32:	001a      	movs	r2, r3
 8003a34:	2100      	movs	r1, #0
 8003a36:	f00b f8d5 	bl	800ebe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a3a:	2310      	movs	r3, #16
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	0018      	movs	r0, r3
 8003a40:	2310      	movs	r3, #16
 8003a42:	001a      	movs	r2, r3
 8003a44:	2100      	movs	r1, #0
 8003a46:	f00b f8cd 	bl	800ebe4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a4a:	003b      	movs	r3, r7
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	2310      	movs	r3, #16
 8003a50:	001a      	movs	r2, r3
 8003a52:	2100      	movs	r1, #0
 8003a54:	f00b f8c6 	bl	800ebe4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003a58:	0021      	movs	r1, r4
 8003a5a:	187b      	adds	r3, r7, r1
 8003a5c:	220a      	movs	r2, #10
 8003a5e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a60:	187b      	adds	r3, r7, r1
 8003a62:	2201      	movs	r2, #1
 8003a64:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a66:	187b      	adds	r3, r7, r1
 8003a68:	2210      	movs	r2, #16
 8003a6a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	2201      	movs	r2, #1
 8003a70:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	2202      	movs	r2, #2
 8003a76:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	2280      	movs	r2, #128	@ 0x80
 8003a7c:	0212      	lsls	r2, r2, #8
 8003a7e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	22a0      	movs	r2, #160	@ 0xa0
 8003a84:	0392      	lsls	r2, r2, #14
 8003a86:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8003a88:	187b      	adds	r3, r7, r1
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a8e:	187b      	adds	r3, r7, r1
 8003a90:	0018      	movs	r0, r3
 8003a92:	f008 fb7f 	bl	800c194 <HAL_RCC_OscConfig>
 8003a96:	1e03      	subs	r3, r0, #0
 8003a98:	d001      	beq.n	8003a9e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8003a9a:	f001 ff43 	bl	8005924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a9e:	2110      	movs	r1, #16
 8003aa0:	187b      	adds	r3, r7, r1
 8003aa2:	2207      	movs	r2, #7
 8003aa4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aa6:	187b      	adds	r3, r7, r1
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003aac:	187b      	adds	r3, r7, r1
 8003aae:	2200      	movs	r2, #0
 8003ab0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ab2:	187b      	adds	r3, r7, r1
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003ab8:	187b      	adds	r3, r7, r1
 8003aba:	2101      	movs	r1, #1
 8003abc:	0018      	movs	r0, r3
 8003abe:	f008 fe87 	bl	800c7d0 <HAL_RCC_ClockConfig>
 8003ac2:	1e03      	subs	r3, r0, #0
 8003ac4:	d001      	beq.n	8003aca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003ac6:	f001 ff2d 	bl	8005924 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8003aca:	003b      	movs	r3, r7
 8003acc:	4a0a      	ldr	r2, [pc, #40]	@ (8003af8 <SystemClock_Config+0xd4>)
 8003ace:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003ad0:	003b      	movs	r3, r7
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003ad6:	003b      	movs	r3, r7
 8003ad8:	2280      	movs	r2, #128	@ 0x80
 8003ada:	0092      	lsls	r2, r2, #2
 8003adc:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ade:	003b      	movs	r3, r7
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f008 ff9b 	bl	800ca1c <HAL_RCCEx_PeriphCLKConfig>
 8003ae6:	1e03      	subs	r3, r0, #0
 8003ae8:	d001      	beq.n	8003aee <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003aea:	f001 ff1b 	bl	8005924 <Error_Handler>
  }
}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b015      	add	sp, #84	@ 0x54
 8003af4:	bd90      	pop	{r4, r7, pc}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	00010020 	.word	0x00010020

08003afc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	0018      	movs	r0, r3
 8003b06:	230c      	movs	r3, #12
 8003b08:	001a      	movs	r2, r3
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	f00b f86a 	bl	800ebe4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003b10:	4b33      	ldr	r3, [pc, #204]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b12:	4a34      	ldr	r2, [pc, #208]	@ (8003be4 <MX_ADC_Init+0xe8>)
 8003b14:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b16:	4b32      	ldr	r3, [pc, #200]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b18:	2280      	movs	r2, #128	@ 0x80
 8003b1a:	0612      	lsls	r2, r2, #24
 8003b1c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003b1e:	4b30      	ldr	r3, [pc, #192]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b24:	4b2e      	ldr	r3, [pc, #184]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003b30:	4b2b      	ldr	r3, [pc, #172]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b32:	2208      	movs	r2, #8
 8003b34:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003b36:	4b2a      	ldr	r3, [pc, #168]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003b3c:	4b28      	ldr	r3, [pc, #160]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003b42:	4b27      	ldr	r3, [pc, #156]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003b48:	4b25      	ldr	r3, [pc, #148]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b4e:	4b24      	ldr	r3, [pc, #144]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b50:	22c2      	movs	r2, #194	@ 0xc2
 8003b52:	32ff      	adds	r2, #255	@ 0xff
 8003b54:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b56:	4b22      	ldr	r3, [pc, #136]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003b5c:	4b20      	ldr	r3, [pc, #128]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b5e:	2224      	movs	r2, #36	@ 0x24
 8003b60:	2101      	movs	r1, #1
 8003b62:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003b64:	4b1e      	ldr	r3, [pc, #120]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f004 fbd5 	bl	800831c <HAL_ADC_Init>
 8003b72:	1e03      	subs	r3, r0, #0
 8003b74:	d001      	beq.n	8003b7a <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8003b76:	f001 fed5 	bl	8005924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003b80:	1d3b      	adds	r3, r7, #4
 8003b82:	2280      	movs	r2, #128	@ 0x80
 8003b84:	0152      	lsls	r2, r2, #5
 8003b86:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003b88:	1d3b      	adds	r3, r7, #4
 8003b8a:	2207      	movs	r2, #7
 8003b8c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b8e:	1d3a      	adds	r2, r7, #4
 8003b90:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003b92:	0011      	movs	r1, r2
 8003b94:	0018      	movs	r0, r3
 8003b96:	f004 fe47 	bl	8008828 <HAL_ADC_ConfigChannel>
 8003b9a:	1e03      	subs	r3, r0, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8003b9e:	f001 fec1 	bl	8005924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003ba8:	1d3a      	adds	r2, r7, #4
 8003baa:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003bac:	0011      	movs	r1, r2
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f004 fe3a 	bl	8008828 <HAL_ADC_ConfigChannel>
 8003bb4:	1e03      	subs	r3, r0, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8003bb8:	f001 feb4 	bl	8005924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003bbc:	1d3b      	adds	r3, r7, #4
 8003bbe:	2210      	movs	r2, #16
 8003bc0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003bc2:	1d3a      	adds	r2, r7, #4
 8003bc4:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <MX_ADC_Init+0xe4>)
 8003bc6:	0011      	movs	r1, r2
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f004 fe2d 	bl	8008828 <HAL_ADC_ConfigChannel>
 8003bce:	1e03      	subs	r3, r0, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8003bd2:	f001 fea7 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b004      	add	sp, #16
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	20000074 	.word	0x20000074
 8003be4:	40012400 	.word	0x40012400

08003be8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003bec:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <MX_CRC_Init+0x38>)
 8003bee:	4a0d      	ldr	r2, [pc, #52]	@ (8003c24 <MX_CRC_Init+0x3c>)
 8003bf0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <MX_CRC_Init+0x38>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003bf8:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <MX_CRC_Init+0x38>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003bfe:	4b08      	ldr	r3, [pc, #32]	@ (8003c20 <MX_CRC_Init+0x38>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 8003c04:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <MX_CRC_Init+0x38>)
 8003c06:	2203      	movs	r2, #3
 8003c08:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003c0a:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <MX_CRC_Init+0x38>)
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f005 f98f 	bl	8008f30 <HAL_CRC_Init>
 8003c12:	1e03      	subs	r3, r0, #0
 8003c14:	d001      	beq.n	8003c1a <MX_CRC_Init+0x32>
  {
    Error_Handler();
 8003c16:	f001 fe85 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	200000f8 	.word	0x200000f8
 8003c24:	40023000 	.word	0x40023000

08003c28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <MX_I2C1_Init+0x74>)
 8003c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ca0 <MX_I2C1_Init+0x78>)
 8003c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101D2B;
 8003c32:	4b1a      	ldr	r3, [pc, #104]	@ (8003c9c <MX_I2C1_Init+0x74>)
 8003c34:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca4 <MX_I2C1_Init+0x7c>)
 8003c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003c38:	4b18      	ldr	r3, [pc, #96]	@ (8003c9c <MX_I2C1_Init+0x74>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c3e:	4b17      	ldr	r3, [pc, #92]	@ (8003c9c <MX_I2C1_Init+0x74>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c44:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <MX_I2C1_Init+0x74>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003c4a:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <MX_I2C1_Init+0x74>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c50:	4b12      	ldr	r3, [pc, #72]	@ (8003c9c <MX_I2C1_Init+0x74>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c56:	4b11      	ldr	r3, [pc, #68]	@ (8003c9c <MX_I2C1_Init+0x74>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c9c <MX_I2C1_Init+0x74>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c62:	4b0e      	ldr	r3, [pc, #56]	@ (8003c9c <MX_I2C1_Init+0x74>)
 8003c64:	0018      	movs	r0, r3
 8003c66:	f006 f857 	bl	8009d18 <HAL_I2C_Init>
 8003c6a:	1e03      	subs	r3, r0, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003c6e:	f001 fe59 	bl	8005924 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c72:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <MX_I2C1_Init+0x74>)
 8003c74:	2100      	movs	r1, #0
 8003c76:	0018      	movs	r0, r3
 8003c78:	f008 f9f4 	bl	800c064 <HAL_I2CEx_ConfigAnalogFilter>
 8003c7c:	1e03      	subs	r3, r0, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003c80:	f001 fe50 	bl	8005924 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c84:	4b05      	ldr	r3, [pc, #20]	@ (8003c9c <MX_I2C1_Init+0x74>)
 8003c86:	2100      	movs	r1, #0
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f008 fa37 	bl	800c0fc <HAL_I2CEx_ConfigDigitalFilter>
 8003c8e:	1e03      	subs	r3, r0, #0
 8003c90:	d001      	beq.n	8003c96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003c92:	f001 fe47 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000114 	.word	0x20000114
 8003ca0:	40005400 	.word	0x40005400
 8003ca4:	00101d2b 	.word	0x00101d2b

08003ca8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003cac:	4b1b      	ldr	r3, [pc, #108]	@ (8003d1c <MX_I2C2_Init+0x74>)
 8003cae:	4a1c      	ldr	r2, [pc, #112]	@ (8003d20 <MX_I2C2_Init+0x78>)
 8003cb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d1c <MX_I2C2_Init+0x74>)
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d24 <MX_I2C2_Init+0x7c>)
 8003cb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 90;
 8003cb8:	4b18      	ldr	r3, [pc, #96]	@ (8003d1c <MX_I2C2_Init+0x74>)
 8003cba:	225a      	movs	r2, #90	@ 0x5a
 8003cbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cbe:	4b17      	ldr	r3, [pc, #92]	@ (8003d1c <MX_I2C2_Init+0x74>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cc4:	4b15      	ldr	r3, [pc, #84]	@ (8003d1c <MX_I2C2_Init+0x74>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003cca:	4b14      	ldr	r3, [pc, #80]	@ (8003d1c <MX_I2C2_Init+0x74>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	@ (8003d1c <MX_I2C2_Init+0x74>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cd6:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <MX_I2C2_Init+0x74>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d1c <MX_I2C2_Init+0x74>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d1c <MX_I2C2_Init+0x74>)
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f006 f817 	bl	8009d18 <HAL_I2C_Init>
 8003cea:	1e03      	subs	r3, r0, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003cee:	f001 fe19 	bl	8005924 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d1c <MX_I2C2_Init+0x74>)
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f008 f9b4 	bl	800c064 <HAL_I2CEx_ConfigAnalogFilter>
 8003cfc:	1e03      	subs	r3, r0, #0
 8003cfe:	d001      	beq.n	8003d04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003d00:	f001 fe10 	bl	8005924 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <MX_I2C2_Init+0x74>)
 8003d06:	2100      	movs	r1, #0
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f008 f9f7 	bl	800c0fc <HAL_I2CEx_ConfigDigitalFilter>
 8003d0e:	1e03      	subs	r3, r0, #0
 8003d10:	d001      	beq.n	8003d16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003d12:	f001 fe07 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000168 	.word	0x20000168
 8003d20:	40005800 	.word	0x40005800
 8003d24:	20303e5d 	.word	0x20303e5d

08003d28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d6c <MX_RTC_Init+0x44>)
 8003d2e:	4a10      	ldr	r2, [pc, #64]	@ (8003d70 <MX_RTC_Init+0x48>)
 8003d30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d32:	4b0e      	ldr	r3, [pc, #56]	@ (8003d6c <MX_RTC_Init+0x44>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003d38:	4b0c      	ldr	r3, [pc, #48]	@ (8003d6c <MX_RTC_Init+0x44>)
 8003d3a:	227f      	movs	r2, #127	@ 0x7f
 8003d3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <MX_RTC_Init+0x44>)
 8003d40:	22ff      	movs	r2, #255	@ 0xff
 8003d42:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d44:	4b09      	ldr	r3, [pc, #36]	@ (8003d6c <MX_RTC_Init+0x44>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d4a:	4b08      	ldr	r3, [pc, #32]	@ (8003d6c <MX_RTC_Init+0x44>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d50:	4b06      	ldr	r3, [pc, #24]	@ (8003d6c <MX_RTC_Init+0x44>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d56:	4b05      	ldr	r3, [pc, #20]	@ (8003d6c <MX_RTC_Init+0x44>)
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f008 ff2d 	bl	800cbb8 <HAL_RTC_Init>
 8003d5e:	1e03      	subs	r3, r0, #0
 8003d60:	d001      	beq.n	8003d66 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003d62:	f001 fddf 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	200001bc 	.word	0x200001bc
 8003d70:	40002800 	.word	0x40002800

08003d74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003d78:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dec <MX_SPI1_Init+0x78>)
 8003d7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003d80:	2282      	movs	r2, #130	@ 0x82
 8003d82:	0052      	lsls	r2, r2, #1
 8003d84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d86:	4b18      	ldr	r3, [pc, #96]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d8c:	4b16      	ldr	r3, [pc, #88]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003d8e:	22e0      	movs	r2, #224	@ 0xe0
 8003d90:	00d2      	lsls	r2, r2, #3
 8003d92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d94:	4b14      	ldr	r3, [pc, #80]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d9a:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003da0:	4b11      	ldr	r3, [pc, #68]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003da2:	2280      	movs	r2, #128	@ 0x80
 8003da4:	0092      	lsls	r2, r2, #2
 8003da6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003da8:	4b0f      	ldr	r3, [pc, #60]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003daa:	2208      	movs	r2, #8
 8003dac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dae:	4b0e      	ldr	r3, [pc, #56]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003db4:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dba:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003dc0:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003dc2:	2207      	movs	r2, #7
 8003dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003dc6:	4b08      	ldr	r3, [pc, #32]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003dcc:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003dce:	2208      	movs	r2, #8
 8003dd0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003dd2:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <MX_SPI1_Init+0x74>)
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f009 f9af 	bl	800d138 <HAL_SPI_Init>
 8003dda:	1e03      	subs	r3, r0, #0
 8003ddc:	d001      	beq.n	8003de2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003dde:	f001 fda1 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003de2:	46c0      	nop			@ (mov r8, r8)
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	200001dc 	.word	0x200001dc
 8003dec:	40013000 	.word	0x40013000

08003df0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b092      	sub	sp, #72	@ 0x48
 8003df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003df6:	2340      	movs	r3, #64	@ 0x40
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	001a      	movs	r2, r3
 8003e00:	2100      	movs	r1, #0
 8003e02:	f00a feef 	bl	800ebe4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e06:	2324      	movs	r3, #36	@ 0x24
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	231c      	movs	r3, #28
 8003e0e:	001a      	movs	r2, r3
 8003e10:	2100      	movs	r1, #0
 8003e12:	f00a fee7 	bl	800ebe4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e16:	1d3b      	adds	r3, r7, #4
 8003e18:	0018      	movs	r0, r3
 8003e1a:	2320      	movs	r3, #32
 8003e1c:	001a      	movs	r2, r3
 8003e1e:	2100      	movs	r1, #0
 8003e20:	f00a fee0 	bl	800ebe4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e24:	4b3a      	ldr	r3, [pc, #232]	@ (8003f10 <MX_TIM1_Init+0x120>)
 8003e26:	4a3b      	ldr	r2, [pc, #236]	@ (8003f14 <MX_TIM1_Init+0x124>)
 8003e28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8003e2a:	4b39      	ldr	r3, [pc, #228]	@ (8003f10 <MX_TIM1_Init+0x120>)
 8003e2c:	2218      	movs	r2, #24
 8003e2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e30:	4b37      	ldr	r3, [pc, #220]	@ (8003f10 <MX_TIM1_Init+0x120>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8003e36:	4b36      	ldr	r3, [pc, #216]	@ (8003f10 <MX_TIM1_Init+0x120>)
 8003e38:	22c8      	movs	r2, #200	@ 0xc8
 8003e3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e3c:	4b34      	ldr	r3, [pc, #208]	@ (8003f10 <MX_TIM1_Init+0x120>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e42:	4b33      	ldr	r3, [pc, #204]	@ (8003f10 <MX_TIM1_Init+0x120>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e48:	4b31      	ldr	r3, [pc, #196]	@ (8003f10 <MX_TIM1_Init+0x120>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e4e:	4b30      	ldr	r3, [pc, #192]	@ (8003f10 <MX_TIM1_Init+0x120>)
 8003e50:	0018      	movs	r0, r3
 8003e52:	f009 ff3b 	bl	800dccc <HAL_TIM_PWM_Init>
 8003e56:	1e03      	subs	r3, r0, #0
 8003e58:	d001      	beq.n	8003e5e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003e5a:	f001 fd63 	bl	8005924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e5e:	2140      	movs	r1, #64	@ 0x40
 8003e60:	187b      	adds	r3, r7, r1
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	2200      	movs	r2, #0
 8003e6a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e6c:	187a      	adds	r2, r7, r1
 8003e6e:	4b28      	ldr	r3, [pc, #160]	@ (8003f10 <MX_TIM1_Init+0x120>)
 8003e70:	0011      	movs	r1, r2
 8003e72:	0018      	movs	r0, r3
 8003e74:	f00a fdf0 	bl	800ea58 <HAL_TIMEx_MasterConfigSynchronization>
 8003e78:	1e03      	subs	r3, r0, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003e7c:	f001 fd52 	bl	8005924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e80:	2124      	movs	r1, #36	@ 0x24
 8003e82:	187b      	adds	r3, r7, r1
 8003e84:	2260      	movs	r2, #96	@ 0x60
 8003e86:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003e88:	187b      	adds	r3, r7, r1
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003e8e:	187b      	adds	r3, r7, r1
 8003e90:	2202      	movs	r2, #2
 8003e92:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	2200      	movs	r2, #0
 8003e98:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e9a:	187b      	adds	r3, r7, r1
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003eac:	1879      	adds	r1, r7, r1
 8003eae:	4b18      	ldr	r3, [pc, #96]	@ (8003f10 <MX_TIM1_Init+0x120>)
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f00a fa46 	bl	800e344 <HAL_TIM_PWM_ConfigChannel>
 8003eb8:	1e03      	subs	r3, r0, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8003ebc:	f001 fd32 	bl	8005924 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	2200      	movs	r2, #0
 8003eca:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	2200      	movs	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ed2:	1d3b      	adds	r3, r7, #4
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ed8:	1d3b      	adds	r3, r7, #4
 8003eda:	2200      	movs	r2, #0
 8003edc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	2280      	movs	r2, #128	@ 0x80
 8003ee2:	0192      	lsls	r2, r2, #6
 8003ee4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	2200      	movs	r2, #0
 8003eea:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003eec:	1d3a      	adds	r2, r7, #4
 8003eee:	4b08      	ldr	r3, [pc, #32]	@ (8003f10 <MX_TIM1_Init+0x120>)
 8003ef0:	0011      	movs	r1, r2
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f00a fe08 	bl	800eb08 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ef8:	1e03      	subs	r3, r0, #0
 8003efa:	d001      	beq.n	8003f00 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003efc:	f001 fd12 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f00:	4b03      	ldr	r3, [pc, #12]	@ (8003f10 <MX_TIM1_Init+0x120>)
 8003f02:	0018      	movs	r0, r3
 8003f04:	f003 fad2 	bl	80074ac <HAL_TIM_MspPostInit>

}
 8003f08:	46c0      	nop			@ (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b012      	add	sp, #72	@ 0x48
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000284 	.word	0x20000284
 8003f14:	40012c00 	.word	0x40012c00

08003f18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f18:	b590      	push	{r4, r7, lr}
 8003f1a:	b08d      	sub	sp, #52	@ 0x34
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f1e:	240c      	movs	r4, #12
 8003f20:	193b      	adds	r3, r7, r4
 8003f22:	0018      	movs	r0, r3
 8003f24:	2324      	movs	r3, #36	@ 0x24
 8003f26:	001a      	movs	r2, r3
 8003f28:	2100      	movs	r1, #0
 8003f2a:	f00a fe5b 	bl	800ebe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	0018      	movs	r0, r3
 8003f32:	2308      	movs	r3, #8
 8003f34:	001a      	movs	r2, r3
 8003f36:	2100      	movs	r1, #0
 8003f38:	f00a fe54 	bl	800ebe4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f3c:	4b25      	ldr	r3, [pc, #148]	@ (8003fd4 <MX_TIM3_Init+0xbc>)
 8003f3e:	4a26      	ldr	r2, [pc, #152]	@ (8003fd8 <MX_TIM3_Init+0xc0>)
 8003f40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f42:	4b24      	ldr	r3, [pc, #144]	@ (8003fd4 <MX_TIM3_Init+0xbc>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f48:	4b22      	ldr	r3, [pc, #136]	@ (8003fd4 <MX_TIM3_Init+0xbc>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003f4e:	4b21      	ldr	r3, [pc, #132]	@ (8003fd4 <MX_TIM3_Init+0xbc>)
 8003f50:	4a22      	ldr	r2, [pc, #136]	@ (8003fdc <MX_TIM3_Init+0xc4>)
 8003f52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f54:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd4 <MX_TIM3_Init+0xbc>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd4 <MX_TIM3_Init+0xbc>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f60:	0021      	movs	r1, r4
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	2203      	movs	r2, #3
 8003f66:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	2201      	movs	r2, #1
 8003f72:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	2200      	movs	r2, #0
 8003f78:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 15;
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	220f      	movs	r2, #15
 8003f7e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	2202      	movs	r2, #2
 8003f84:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	2201      	movs	r2, #1
 8003f8a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 15;
 8003f92:	187b      	adds	r3, r7, r1
 8003f94:	220f      	movs	r2, #15
 8003f96:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003f98:	187a      	adds	r2, r7, r1
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd4 <MX_TIM3_Init+0xbc>)
 8003f9c:	0011      	movs	r1, r2
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f009 ff96 	bl	800ded0 <HAL_TIM_Encoder_Init>
 8003fa4:	1e03      	subs	r3, r0, #0
 8003fa6:	d001      	beq.n	8003fac <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003fa8:	f001 fcbc 	bl	8005924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb2:	1d3b      	adds	r3, r7, #4
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fb8:	1d3a      	adds	r2, r7, #4
 8003fba:	4b06      	ldr	r3, [pc, #24]	@ (8003fd4 <MX_TIM3_Init+0xbc>)
 8003fbc:	0011      	movs	r1, r2
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f00a fd4a 	bl	800ea58 <HAL_TIMEx_MasterConfigSynchronization>
 8003fc4:	1e03      	subs	r3, r0, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003fc8:	f001 fcac 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003fcc:	46c0      	nop			@ (mov r8, r8)
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b00d      	add	sp, #52	@ 0x34
 8003fd2:	bd90      	pop	{r4, r7, pc}
 8003fd4:	200002cc 	.word	0x200002cc
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	0000ffff 	.word	0x0000ffff

08003fe0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <MX_TIM6_Init+0x38>)
 8003fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800401c <MX_TIM6_Init+0x3c>)
 8003fe8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999;
 8003fea:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <MX_TIM6_Init+0x38>)
 8003fec:	4a0c      	ldr	r2, [pc, #48]	@ (8004020 <MX_TIM6_Init+0x40>)
 8003fee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ff0:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <MX_TIM6_Init+0x38>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8003ff6:	4b08      	ldr	r3, [pc, #32]	@ (8004018 <MX_TIM6_Init+0x38>)
 8003ff8:	2264      	movs	r2, #100	@ 0x64
 8003ffa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <MX_TIM6_Init+0x38>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004002:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <MX_TIM6_Init+0x38>)
 8004004:	0018      	movs	r0, r3
 8004006:	f009 fdc5 	bl	800db94 <HAL_TIM_Base_Init>
 800400a:	1e03      	subs	r3, r0, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 800400e:	f001 fc89 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000314 	.word	0x20000314
 800401c:	40001000 	.word	0x40001000
 8004020:	0000bb7f 	.word	0x0000bb7f

08004024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800402a:	4b10      	ldr	r3, [pc, #64]	@ (800406c <MX_DMA_Init+0x48>)
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	4b0f      	ldr	r3, [pc, #60]	@ (800406c <MX_DMA_Init+0x48>)
 8004030:	2101      	movs	r1, #1
 8004032:	430a      	orrs	r2, r1
 8004034:	615a      	str	r2, [r3, #20]
 8004036:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <MX_DMA_Init+0x48>)
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	2201      	movs	r2, #1
 800403c:	4013      	ands	r3, r2
 800403e:	607b      	str	r3, [r7, #4]
 8004040:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004042:	2200      	movs	r2, #0
 8004044:	2100      	movs	r1, #0
 8004046:	2009      	movs	r0, #9
 8004048:	f004 ff40 	bl	8008ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800404c:	2009      	movs	r0, #9
 800404e:	f004 ff52 	bl	8008ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004052:	2200      	movs	r2, #0
 8004054:	2100      	movs	r1, #0
 8004056:	200a      	movs	r0, #10
 8004058:	f004 ff38 	bl	8008ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800405c:	200a      	movs	r0, #10
 800405e:	f004 ff4a 	bl	8008ef6 <HAL_NVIC_EnableIRQ>

}
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	46bd      	mov	sp, r7
 8004066:	b002      	add	sp, #8
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			@ (mov r8, r8)
 800406c:	40021000 	.word	0x40021000

08004070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b08b      	sub	sp, #44	@ 0x2c
 8004074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004076:	2414      	movs	r4, #20
 8004078:	193b      	adds	r3, r7, r4
 800407a:	0018      	movs	r0, r3
 800407c:	2314      	movs	r3, #20
 800407e:	001a      	movs	r2, r3
 8004080:	2100      	movs	r1, #0
 8004082:	f00a fdaf 	bl	800ebe4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004086:	4b58      	ldr	r3, [pc, #352]	@ (80041e8 <MX_GPIO_Init+0x178>)
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	4b57      	ldr	r3, [pc, #348]	@ (80041e8 <MX_GPIO_Init+0x178>)
 800408c:	2180      	movs	r1, #128	@ 0x80
 800408e:	0309      	lsls	r1, r1, #12
 8004090:	430a      	orrs	r2, r1
 8004092:	615a      	str	r2, [r3, #20]
 8004094:	4b54      	ldr	r3, [pc, #336]	@ (80041e8 <MX_GPIO_Init+0x178>)
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	2380      	movs	r3, #128	@ 0x80
 800409a:	031b      	lsls	r3, r3, #12
 800409c:	4013      	ands	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040a2:	4b51      	ldr	r3, [pc, #324]	@ (80041e8 <MX_GPIO_Init+0x178>)
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	4b50      	ldr	r3, [pc, #320]	@ (80041e8 <MX_GPIO_Init+0x178>)
 80040a8:	2180      	movs	r1, #128	@ 0x80
 80040aa:	03c9      	lsls	r1, r1, #15
 80040ac:	430a      	orrs	r2, r1
 80040ae:	615a      	str	r2, [r3, #20]
 80040b0:	4b4d      	ldr	r3, [pc, #308]	@ (80041e8 <MX_GPIO_Init+0x178>)
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	2380      	movs	r3, #128	@ 0x80
 80040b6:	03db      	lsls	r3, r3, #15
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040be:	4b4a      	ldr	r3, [pc, #296]	@ (80041e8 <MX_GPIO_Init+0x178>)
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	4b49      	ldr	r3, [pc, #292]	@ (80041e8 <MX_GPIO_Init+0x178>)
 80040c4:	2180      	movs	r1, #128	@ 0x80
 80040c6:	0289      	lsls	r1, r1, #10
 80040c8:	430a      	orrs	r2, r1
 80040ca:	615a      	str	r2, [r3, #20]
 80040cc:	4b46      	ldr	r3, [pc, #280]	@ (80041e8 <MX_GPIO_Init+0x178>)
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	2380      	movs	r3, #128	@ 0x80
 80040d2:	029b      	lsls	r3, r3, #10
 80040d4:	4013      	ands	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040da:	4b43      	ldr	r3, [pc, #268]	@ (80041e8 <MX_GPIO_Init+0x178>)
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	4b42      	ldr	r3, [pc, #264]	@ (80041e8 <MX_GPIO_Init+0x178>)
 80040e0:	2180      	movs	r1, #128	@ 0x80
 80040e2:	02c9      	lsls	r1, r1, #11
 80040e4:	430a      	orrs	r2, r1
 80040e6:	615a      	str	r2, [r3, #20]
 80040e8:	4b3f      	ldr	r3, [pc, #252]	@ (80041e8 <MX_GPIO_Init+0x178>)
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	2380      	movs	r3, #128	@ 0x80
 80040ee:	02db      	lsls	r3, r3, #11
 80040f0:	4013      	ands	r3, r2
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I_DAC7_Pin|I_DAC8_Pin|I_DAC9_Pin, GPIO_PIN_RESET);
 80040f6:	23e0      	movs	r3, #224	@ 0xe0
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	483c      	ldr	r0, [pc, #240]	@ (80041ec <MX_GPIO_Init+0x17c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	0019      	movs	r1, r3
 8004100:	f005 fded 	bl	8009cde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, I_DAC3_Pin|I_DAC5_Pin, GPIO_PIN_RESET);
 8004104:	4b3a      	ldr	r3, [pc, #232]	@ (80041f0 <MX_GPIO_Init+0x180>)
 8004106:	2200      	movs	r2, #0
 8004108:	2103      	movs	r1, #3
 800410a:	0018      	movs	r0, r3
 800410c:	f005 fde7 	bl	8009cde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, I_DAC4_Pin|LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin
 8004110:	4938      	ldr	r1, [pc, #224]	@ (80041f4 <MX_GPIO_Init+0x184>)
 8004112:	2390      	movs	r3, #144	@ 0x90
 8004114:	05db      	lsls	r3, r3, #23
 8004116:	2200      	movs	r2, #0
 8004118:	0018      	movs	r0, r3
 800411a:	f005 fde0 	bl	8009cde <HAL_GPIO_WritePin>
                          |V_DAC4_Pin|V_DAC3_Pin|V_DAC2_Pin|V_DAC1_Pin
                          |I_DAC0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V_DAC0_Pin|V_DAC6_Pin|V_DAC7_Pin|V_DAC8_Pin
 800411e:	4936      	ldr	r1, [pc, #216]	@ (80041f8 <MX_GPIO_Init+0x188>)
 8004120:	4b36      	ldr	r3, [pc, #216]	@ (80041fc <MX_GPIO_Init+0x18c>)
 8004122:	2200      	movs	r2, #0
 8004124:	0018      	movs	r0, r3
 8004126:	f005 fdda 	bl	8009cde <HAL_GPIO_WritePin>
                          |V_DAC9_Pin|V_DAC5_Pin|I_DAC1_Pin|I_DAC2_Pin
                          |I_DAC6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : I_DAC7_Pin I_DAC8_Pin I_DAC9_Pin */
  GPIO_InitStruct.Pin = I_DAC7_Pin|I_DAC8_Pin|I_DAC9_Pin;
 800412a:	193b      	adds	r3, r7, r4
 800412c:	22e0      	movs	r2, #224	@ 0xe0
 800412e:	0212      	lsls	r2, r2, #8
 8004130:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004132:	193b      	adds	r3, r7, r4
 8004134:	2201      	movs	r2, #1
 8004136:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004138:	193b      	adds	r3, r7, r4
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800413e:	193b      	adds	r3, r7, r4
 8004140:	2200      	movs	r2, #0
 8004142:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004144:	193b      	adds	r3, r7, r4
 8004146:	4a29      	ldr	r2, [pc, #164]	@ (80041ec <MX_GPIO_Init+0x17c>)
 8004148:	0019      	movs	r1, r3
 800414a:	0010      	movs	r0, r2
 800414c:	f005 fc3a 	bl	80099c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I_DAC3_Pin I_DAC5_Pin */
  GPIO_InitStruct.Pin = I_DAC3_Pin|I_DAC5_Pin;
 8004150:	193b      	adds	r3, r7, r4
 8004152:	2203      	movs	r2, #3
 8004154:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004156:	193b      	adds	r3, r7, r4
 8004158:	2201      	movs	r2, #1
 800415a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415c:	193b      	adds	r3, r7, r4
 800415e:	2200      	movs	r2, #0
 8004160:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004162:	193b      	adds	r3, r7, r4
 8004164:	2200      	movs	r2, #0
 8004166:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004168:	193b      	adds	r3, r7, r4
 800416a:	4a21      	ldr	r2, [pc, #132]	@ (80041f0 <MX_GPIO_Init+0x180>)
 800416c:	0019      	movs	r1, r3
 800416e:	0010      	movs	r0, r2
 8004170:	f005 fc28 	bl	80099c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I_DAC4_Pin LCD_RST_Pin LCD_DC_Pin LCD_CS_Pin
                           V_DAC4_Pin V_DAC3_Pin V_DAC2_Pin V_DAC1_Pin
                           I_DAC0_Pin */
  GPIO_InitStruct.Pin = I_DAC4_Pin|LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin
 8004174:	193b      	adds	r3, r7, r4
 8004176:	4a1f      	ldr	r2, [pc, #124]	@ (80041f4 <MX_GPIO_Init+0x184>)
 8004178:	601a      	str	r2, [r3, #0]
                          |V_DAC4_Pin|V_DAC3_Pin|V_DAC2_Pin|V_DAC1_Pin
                          |I_DAC0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800417a:	193b      	adds	r3, r7, r4
 800417c:	2201      	movs	r2, #1
 800417e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	193b      	adds	r3, r7, r4
 8004182:	2200      	movs	r2, #0
 8004184:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004186:	193b      	adds	r3, r7, r4
 8004188:	2200      	movs	r2, #0
 800418a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800418c:	193a      	adds	r2, r7, r4
 800418e:	2390      	movs	r3, #144	@ 0x90
 8004190:	05db      	lsls	r3, r3, #23
 8004192:	0011      	movs	r1, r2
 8004194:	0018      	movs	r0, r3
 8004196:	f005 fc15 	bl	80099c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_T_Pin */
  GPIO_InitStruct.Pin = SW_T_Pin;
 800419a:	193b      	adds	r3, r7, r4
 800419c:	2201      	movs	r2, #1
 800419e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041a0:	193b      	adds	r3, r7, r4
 80041a2:	2200      	movs	r2, #0
 80041a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041a6:	193b      	adds	r3, r7, r4
 80041a8:	2201      	movs	r2, #1
 80041aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_T_GPIO_Port, &GPIO_InitStruct);
 80041ac:	193b      	adds	r3, r7, r4
 80041ae:	4a13      	ldr	r2, [pc, #76]	@ (80041fc <MX_GPIO_Init+0x18c>)
 80041b0:	0019      	movs	r1, r3
 80041b2:	0010      	movs	r0, r2
 80041b4:	f005 fc06 	bl	80099c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : V_DAC0_Pin V_DAC6_Pin V_DAC7_Pin V_DAC8_Pin
                           V_DAC9_Pin V_DAC5_Pin I_DAC1_Pin I_DAC2_Pin
                           I_DAC6_Pin */
  GPIO_InitStruct.Pin = V_DAC0_Pin|V_DAC6_Pin|V_DAC7_Pin|V_DAC8_Pin
 80041b8:	0021      	movs	r1, r4
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	4a0e      	ldr	r2, [pc, #56]	@ (80041f8 <MX_GPIO_Init+0x188>)
 80041be:	601a      	str	r2, [r3, #0]
                          |V_DAC9_Pin|V_DAC5_Pin|I_DAC1_Pin|I_DAC2_Pin
                          |I_DAC6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c0:	187b      	adds	r3, r7, r1
 80041c2:	2201      	movs	r2, #1
 80041c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c6:	187b      	adds	r3, r7, r1
 80041c8:	2200      	movs	r2, #0
 80041ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041cc:	187b      	adds	r3, r7, r1
 80041ce:	2200      	movs	r2, #0
 80041d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d2:	187b      	adds	r3, r7, r1
 80041d4:	4a09      	ldr	r2, [pc, #36]	@ (80041fc <MX_GPIO_Init+0x18c>)
 80041d6:	0019      	movs	r1, r3
 80041d8:	0010      	movs	r0, r2
 80041da:	f005 fbf3 	bl	80099c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b00b      	add	sp, #44	@ 0x2c
 80041e4:	bd90      	pop	{r4, r7, pc}
 80041e6:	46c0      	nop			@ (mov r8, r8)
 80041e8:	40021000 	.word	0x40021000
 80041ec:	48000800 	.word	0x48000800
 80041f0:	48001400 	.word	0x48001400
 80041f4:	00009b5c 	.word	0x00009b5c
 80041f8:	0000f30e 	.word	0x0000f30e
 80041fc:	48000400 	.word	0x48000400

08004200 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //every 100mS
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM6) //check if the interrupt comes from TIM6
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a34      	ldr	r2, [pc, #208]	@ (80042e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d161      	bne.n	80042d6 <HAL_TIM_PeriodElapsedCallback+0xd6>
        {
    		enc_cnt = TIM3->CNT; TIM3->CNT = 0;
 8004212:	4b34      	ldr	r3, [pc, #208]	@ (80042e4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	b21a      	sxth	r2, r3
 8004218:	4b33      	ldr	r3, [pc, #204]	@ (80042e8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	4b31      	ldr	r3, [pc, #196]	@ (80042e4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800421e:	2200      	movs	r2, #0
 8004220:	625a      	str	r2, [r3, #36]	@ 0x24
    		if (enc_cnt >0)
 8004222:	4b31      	ldr	r3, [pc, #196]	@ (80042e8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004224:	2200      	movs	r2, #0
 8004226:	5e9b      	ldrsh	r3, [r3, r2]
 8004228:	2b00      	cmp	r3, #0
 800422a:	dd13      	ble.n	8004254 <HAL_TIM_PeriodElapsedCallback+0x54>
    		{
    			if(enc_cnt <= TRN_SLOW_NORM) enc = INC_TRN_SLOW;
 800422c:	4b2e      	ldr	r3, [pc, #184]	@ (80042e8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800422e:	2200      	movs	r2, #0
 8004230:	5e9b      	ldrsh	r3, [r3, r2]
 8004232:	2b04      	cmp	r3, #4
 8004234:	dc03      	bgt.n	800423e <HAL_TIM_PeriodElapsedCallback+0x3e>
 8004236:	4b2d      	ldr	r3, [pc, #180]	@ (80042ec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	e002      	b.n	8004244 <HAL_TIM_PeriodElapsedCallback+0x44>
    			else enc = INC_TRN_NORM;
 800423e:	4b2b      	ldr	r3, [pc, #172]	@ (80042ec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004240:	2202      	movs	r2, #2
 8004242:	701a      	strb	r2, [r3, #0]
    			if(enc_cnt > TRN_NORM_FAST) enc = INC_TRN_FAST;
 8004244:	4b28      	ldr	r3, [pc, #160]	@ (80042e8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004246:	2200      	movs	r2, #0
 8004248:	5e9b      	ldrsh	r3, [r3, r2]
 800424a:	2b0a      	cmp	r3, #10
 800424c:	dd02      	ble.n	8004254 <HAL_TIM_PeriodElapsedCallback+0x54>
 800424e:	4b27      	ldr	r3, [pc, #156]	@ (80042ec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004250:	2203      	movs	r2, #3
 8004252:	701a      	strb	r2, [r3, #0]
    		}
    		if (enc_cnt < 0)
 8004254:	4b24      	ldr	r3, [pc, #144]	@ (80042e8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004256:	2200      	movs	r2, #0
 8004258:	5e9b      	ldrsh	r3, [r3, r2]
 800425a:	2b00      	cmp	r3, #0
 800425c:	da13      	bge.n	8004286 <HAL_TIM_PeriodElapsedCallback+0x86>
    		{
    			if(enc_cnt >= (-TRN_SLOW_NORM)) enc = DEC_TRN_SLOW;
 800425e:	4b22      	ldr	r3, [pc, #136]	@ (80042e8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004260:	2200      	movs	r2, #0
 8004262:	5e9b      	ldrsh	r3, [r3, r2]
 8004264:	3304      	adds	r3, #4
 8004266:	db03      	blt.n	8004270 <HAL_TIM_PeriodElapsedCallback+0x70>
 8004268:	4b20      	ldr	r3, [pc, #128]	@ (80042ec <HAL_TIM_PeriodElapsedCallback+0xec>)
 800426a:	2204      	movs	r2, #4
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	e002      	b.n	8004276 <HAL_TIM_PeriodElapsedCallback+0x76>
    			else enc = DEC_TRN_NORM;
 8004270:	4b1e      	ldr	r3, [pc, #120]	@ (80042ec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004272:	2205      	movs	r2, #5
 8004274:	701a      	strb	r2, [r3, #0]
    			if(enc_cnt < (-TRN_NORM_FAST)) enc = DEC_TRN_FAST;
 8004276:	4b1c      	ldr	r3, [pc, #112]	@ (80042e8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8004278:	2200      	movs	r2, #0
 800427a:	5e9b      	ldrsh	r3, [r3, r2]
 800427c:	330a      	adds	r3, #10
 800427e:	da02      	bge.n	8004286 <HAL_TIM_PeriodElapsedCallback+0x86>
 8004280:	4b1a      	ldr	r3, [pc, #104]	@ (80042ec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004282:	2206      	movs	r2, #6
 8004284:	701a      	strb	r2, [r3, #0]
    		}

    		if (!HAL_GPIO_ReadPin(SW_T_GPIO_Port,SW_T_Pin)) // Button is pressed
 8004286:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004288:	2101      	movs	r1, #1
 800428a:	0018      	movs	r0, r3
 800428c:	f005 fd0a 	bl	8009ca4 <HAL_GPIO_ReadPin>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d111      	bne.n	80042b8 <HAL_TIM_PeriodElapsedCallback+0xb8>
    		{
    			if(btn == NO_PRESS)
 8004294:	4b17      	ldr	r3, [pc, #92]	@ (80042f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <HAL_TIM_PeriodElapsedCallback+0xaa>
    				{
    					btn = FIRST_EDGE;
 800429c:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800429e:	2201      	movs	r2, #1
 80042a0:	701a      	strb	r2, [r3, #0]
    					btn_cnt =0;
 80042a2:	4b15      	ldr	r3, [pc, #84]	@ (80042f8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
    				if(btn_cnt < 5) btn = PRESS_NORM; // less than 500mS press
    				else btn = PRESS_LONG;
    			}
    		}
        }
}
 80042a8:	e015      	b.n	80042d6 <HAL_TIM_PeriodElapsedCallback+0xd6>
    			else ++btn_cnt;
 80042aa:	4b13      	ldr	r3, [pc, #76]	@ (80042f8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	3301      	adds	r3, #1
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4b11      	ldr	r3, [pc, #68]	@ (80042f8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80042b4:	701a      	strb	r2, [r3, #0]
}
 80042b6:	e00e      	b.n	80042d6 <HAL_TIM_PeriodElapsedCallback+0xd6>
    			if (btn == FIRST_EDGE)
 80042b8:	4b0e      	ldr	r3, [pc, #56]	@ (80042f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d10a      	bne.n	80042d6 <HAL_TIM_PeriodElapsedCallback+0xd6>
    				if(btn_cnt < 5) btn = PRESS_NORM; // less than 500mS press
 80042c0:	4b0d      	ldr	r3, [pc, #52]	@ (80042f8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d803      	bhi.n	80042d0 <HAL_TIM_PeriodElapsedCallback+0xd0>
 80042c8:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80042ca:	2202      	movs	r2, #2
 80042cc:	701a      	strb	r2, [r3, #0]
}
 80042ce:	e002      	b.n	80042d6 <HAL_TIM_PeriodElapsedCallback+0xd6>
    				else btn = PRESS_LONG;
 80042d0:	4b08      	ldr	r3, [pc, #32]	@ (80042f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80042d2:	2203      	movs	r2, #3
 80042d4:	701a      	strb	r2, [r3, #0]
}
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	46bd      	mov	sp, r7
 80042da:	b002      	add	sp, #8
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	40001000 	.word	0x40001000
 80042e4:	40000400 	.word	0x40000400
 80042e8:	20000386 	.word	0x20000386
 80042ec:	20000383 	.word	0x20000383
 80042f0:	48000400 	.word	0x48000400
 80042f4:	20000384 	.word	0x20000384
 80042f8:	20000388 	.word	0x20000388

080042fc <menu_handler>:

void menu_handler(void)
{
 80042fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042fe:	b085      	sub	sp, #20
 8004300:	af04      	add	r7, sp, #16
	if(enc != NO_TRN)
 8004302:	4ba6      	ldr	r3, [pc, #664]	@ (800459c <menu_handler+0x2a0>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d100      	bne.n	800430c <menu_handler+0x10>
 800430a:	e393      	b.n	8004a34 <menu_handler+0x738>
	{
		switch(mnu_sel)
 800430c:	4ba4      	ldr	r3, [pc, #656]	@ (80045a0 <menu_handler+0x2a4>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d900      	bls.n	8004316 <menu_handler+0x1a>
 8004314:	e38b      	b.n	8004a2e <menu_handler+0x732>
 8004316:	009a      	lsls	r2, r3, #2
 8004318:	4ba2      	ldr	r3, [pc, #648]	@ (80045a4 <menu_handler+0x2a8>)
 800431a:	18d3      	adds	r3, r2, r3
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	469f      	mov	pc, r3
		{
		case ON_OFF:
		{
			if(enc == INC_TRN_SLOW)
 8004320:	4b9e      	ldr	r3, [pc, #632]	@ (800459c <menu_handler+0x2a0>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d112      	bne.n	800434e <menu_handler+0x52>
			{
				ST7735_DrawString(124,2," ON",Font_11x18,WHITE,GREEN);
 8004328:	4b9f      	ldr	r3, [pc, #636]	@ (80045a8 <menu_handler+0x2ac>)
 800432a:	48a0      	ldr	r0, [pc, #640]	@ (80045ac <menu_handler+0x2b0>)
 800432c:	22fc      	movs	r2, #252	@ 0xfc
 800432e:	00d2      	lsls	r2, r2, #3
 8004330:	9202      	str	r2, [sp, #8]
 8004332:	4a9f      	ldr	r2, [pc, #636]	@ (80045b0 <menu_handler+0x2b4>)
 8004334:	9201      	str	r2, [sp, #4]
 8004336:	466a      	mov	r2, sp
 8004338:	6859      	ldr	r1, [r3, #4]
 800433a:	6011      	str	r1, [r2, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	0002      	movs	r2, r0
 8004340:	2102      	movs	r1, #2
 8004342:	207c      	movs	r0, #124	@ 0x7c
 8004344:	f003 fb4a 	bl	80079dc <ST7735_DrawString>
				on_off = 1;
 8004348:	4b9a      	ldr	r3, [pc, #616]	@ (80045b4 <menu_handler+0x2b8>)
 800434a:	2201      	movs	r2, #1
 800434c:	701a      	strb	r2, [r3, #0]
			}
			if(enc == DEC_TRN_SLOW)
 800434e:	4b93      	ldr	r3, [pc, #588]	@ (800459c <menu_handler+0x2a0>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b04      	cmp	r3, #4
 8004354:	d000      	beq.n	8004358 <menu_handler+0x5c>
 8004356:	e367      	b.n	8004a28 <menu_handler+0x72c>
			{
				ST7735_DrawString(124,2,"OFF",Font_11x18,WHITE,RED);
 8004358:	4b93      	ldr	r3, [pc, #588]	@ (80045a8 <menu_handler+0x2ac>)
 800435a:	4897      	ldr	r0, [pc, #604]	@ (80045b8 <menu_handler+0x2bc>)
 800435c:	22f8      	movs	r2, #248	@ 0xf8
 800435e:	0212      	lsls	r2, r2, #8
 8004360:	9202      	str	r2, [sp, #8]
 8004362:	4a93      	ldr	r2, [pc, #588]	@ (80045b0 <menu_handler+0x2b4>)
 8004364:	9201      	str	r2, [sp, #4]
 8004366:	466a      	mov	r2, sp
 8004368:	6859      	ldr	r1, [r3, #4]
 800436a:	6011      	str	r1, [r2, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	0002      	movs	r2, r0
 8004370:	2102      	movs	r1, #2
 8004372:	207c      	movs	r0, #124	@ 0x7c
 8004374:	f003 fb32 	bl	80079dc <ST7735_DrawString>
				on_off = 0;
 8004378:	4b8e      	ldr	r3, [pc, #568]	@ (80045b4 <menu_handler+0x2b8>)
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800437e:	e353      	b.n	8004a28 <menu_handler+0x72c>
		}
		case MODE:
		{
			if(enc == INC_TRN_SLOW)
 8004380:	4b86      	ldr	r3, [pc, #536]	@ (800459c <menu_handler+0x2a0>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d111      	bne.n	80043ac <menu_handler+0xb0>
			{
				ST7735_DrawString(124,21," SL",Font_11x18,BLACK,GBLUE);
 8004388:	4b87      	ldr	r3, [pc, #540]	@ (80045a8 <menu_handler+0x2ac>)
 800438a:	488c      	ldr	r0, [pc, #560]	@ (80045bc <menu_handler+0x2c0>)
 800438c:	4a8c      	ldr	r2, [pc, #560]	@ (80045c0 <menu_handler+0x2c4>)
 800438e:	9202      	str	r2, [sp, #8]
 8004390:	2200      	movs	r2, #0
 8004392:	9201      	str	r2, [sp, #4]
 8004394:	466a      	mov	r2, sp
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	0002      	movs	r2, r0
 800439e:	2115      	movs	r1, #21
 80043a0:	207c      	movs	r0, #124	@ 0x7c
 80043a2:	f003 fb1b 	bl	80079dc <ST7735_DrawString>
				mod_sel_MS = false;
 80043a6:	4b87      	ldr	r3, [pc, #540]	@ (80045c4 <menu_handler+0x2c8>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
			}
			if(enc == DEC_TRN_SLOW)
 80043ac:	4b7b      	ldr	r3, [pc, #492]	@ (800459c <menu_handler+0x2a0>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d000      	beq.n	80043b6 <menu_handler+0xba>
 80043b4:	e33a      	b.n	8004a2c <menu_handler+0x730>
			{
				ST7735_DrawString(124,21," MS",Font_11x18,BLACK,BRRED);
 80043b6:	4b7c      	ldr	r3, [pc, #496]	@ (80045a8 <menu_handler+0x2ac>)
 80043b8:	4883      	ldr	r0, [pc, #524]	@ (80045c8 <menu_handler+0x2cc>)
 80043ba:	4a84      	ldr	r2, [pc, #528]	@ (80045cc <menu_handler+0x2d0>)
 80043bc:	9202      	str	r2, [sp, #8]
 80043be:	2200      	movs	r2, #0
 80043c0:	9201      	str	r2, [sp, #4]
 80043c2:	466a      	mov	r2, sp
 80043c4:	6859      	ldr	r1, [r3, #4]
 80043c6:	6011      	str	r1, [r2, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	0002      	movs	r2, r0
 80043cc:	2115      	movs	r1, #21
 80043ce:	207c      	movs	r0, #124	@ 0x7c
 80043d0:	f003 fb04 	bl	80079dc <ST7735_DrawString>
				mod_sel_MS = true ;
 80043d4:	4b7b      	ldr	r3, [pc, #492]	@ (80045c4 <menu_handler+0x2c8>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80043da:	e327      	b.n	8004a2c <menu_handler+0x730>
		}
		case MEM:
		{
				HAL_Delay(200);
 80043dc:	20c8      	movs	r0, #200	@ 0xc8
 80043de:	f003 ff79 	bl	80082d4 <HAL_Delay>
				if(enc == INC_TRN_SLOW)
 80043e2:	4b6e      	ldr	r3, [pc, #440]	@ (800459c <menu_handler+0x2a0>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d110      	bne.n	800440c <menu_handler+0x110>
				{
					mem_sel=mem_sel+1;
 80043ea:	4b79      	ldr	r3, [pc, #484]	@ (80045d0 <menu_handler+0x2d4>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	b25b      	sxtb	r3, r3
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	3301      	adds	r3, #1
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	b25a      	sxtb	r2, r3
 80043f8:	4b75      	ldr	r3, [pc, #468]	@ (80045d0 <menu_handler+0x2d4>)
 80043fa:	701a      	strb	r2, [r3, #0]
					if (mem_sel > 9) mem_sel=9;
 80043fc:	4b74      	ldr	r3, [pc, #464]	@ (80045d0 <menu_handler+0x2d4>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b25b      	sxtb	r3, r3
 8004402:	2b09      	cmp	r3, #9
 8004404:	dd02      	ble.n	800440c <menu_handler+0x110>
 8004406:	4b72      	ldr	r3, [pc, #456]	@ (80045d0 <menu_handler+0x2d4>)
 8004408:	2209      	movs	r2, #9
 800440a:	701a      	strb	r2, [r3, #0]
				}
				if(enc == DEC_TRN_SLOW)
 800440c:	4b63      	ldr	r3, [pc, #396]	@ (800459c <menu_handler+0x2a0>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b04      	cmp	r3, #4
 8004412:	d110      	bne.n	8004436 <menu_handler+0x13a>
				{
					mem_sel=mem_sel-1;
 8004414:	4b6e      	ldr	r3, [pc, #440]	@ (80045d0 <menu_handler+0x2d4>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	b25b      	sxtb	r3, r3
 800441a:	b2db      	uxtb	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b2db      	uxtb	r3, r3
 8004420:	b25a      	sxtb	r2, r3
 8004422:	4b6b      	ldr	r3, [pc, #428]	@ (80045d0 <menu_handler+0x2d4>)
 8004424:	701a      	strb	r2, [r3, #0]
					if (mem_sel < 0) mem_sel=0;
 8004426:	4b6a      	ldr	r3, [pc, #424]	@ (80045d0 <menu_handler+0x2d4>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	b25b      	sxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	da02      	bge.n	8004436 <menu_handler+0x13a>
 8004430:	4b67      	ldr	r3, [pc, #412]	@ (80045d0 <menu_handler+0x2d4>)
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
				}
				float_for_LCD[0]=0x30+mem_sel;
 8004436:	4b66      	ldr	r3, [pc, #408]	@ (80045d0 <menu_handler+0x2d4>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	b25b      	sxtb	r3, r3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	3330      	adds	r3, #48	@ 0x30
 8004440:	b2da      	uxtb	r2, r3
 8004442:	4b64      	ldr	r3, [pc, #400]	@ (80045d4 <menu_handler+0x2d8>)
 8004444:	701a      	strb	r2, [r3, #0]
				float_for_LCD[1]=0;
 8004446:	4b63      	ldr	r3, [pc, #396]	@ (80045d4 <menu_handler+0x2d8>)
 8004448:	2200      	movs	r2, #0
 800444a:	705a      	strb	r2, [r3, #1]
				ST7735_DrawString(124,40," M",Font_11x18,BLACK,GRAY);
 800444c:	4b56      	ldr	r3, [pc, #344]	@ (80045a8 <menu_handler+0x2ac>)
 800444e:	4862      	ldr	r0, [pc, #392]	@ (80045d8 <menu_handler+0x2dc>)
 8004450:	4a62      	ldr	r2, [pc, #392]	@ (80045dc <menu_handler+0x2e0>)
 8004452:	9202      	str	r2, [sp, #8]
 8004454:	2200      	movs	r2, #0
 8004456:	9201      	str	r2, [sp, #4]
 8004458:	466a      	mov	r2, sp
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	6011      	str	r1, [r2, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	0002      	movs	r2, r0
 8004462:	2128      	movs	r1, #40	@ 0x28
 8004464:	207c      	movs	r0, #124	@ 0x7c
 8004466:	f003 fab9 	bl	80079dc <ST7735_DrawString>
				ST7735_DrawString(146 ,40,float_for_LCD,Font_11x18,BLACK,GRAY);
 800446a:	4b4f      	ldr	r3, [pc, #316]	@ (80045a8 <menu_handler+0x2ac>)
 800446c:	4859      	ldr	r0, [pc, #356]	@ (80045d4 <menu_handler+0x2d8>)
 800446e:	4a5b      	ldr	r2, [pc, #364]	@ (80045dc <menu_handler+0x2e0>)
 8004470:	9202      	str	r2, [sp, #8]
 8004472:	2200      	movs	r2, #0
 8004474:	9201      	str	r2, [sp, #4]
 8004476:	466a      	mov	r2, sp
 8004478:	6859      	ldr	r1, [r3, #4]
 800447a:	6011      	str	r1, [r2, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	0002      	movs	r2, r0
 8004480:	2128      	movs	r1, #40	@ 0x28
 8004482:	2092      	movs	r0, #146	@ 0x92
 8004484:	f003 faaa 	bl	80079dc <ST7735_DrawString>
			break;
 8004488:	e2d1      	b.n	8004a2e <menu_handler+0x732>
		}
		case BL:
		{
			if(enc == INC_TRN_SLOW) lcd_pwm_bl = lcd_pwm_bl+1;
 800448a:	4b44      	ldr	r3, [pc, #272]	@ (800459c <menu_handler+0x2a0>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d108      	bne.n	80044a4 <menu_handler+0x1a8>
 8004492:	4b53      	ldr	r3, [pc, #332]	@ (80045e0 <menu_handler+0x2e4>)
 8004494:	2200      	movs	r2, #0
 8004496:	5e9b      	ldrsh	r3, [r3, r2]
 8004498:	b29b      	uxth	r3, r3
 800449a:	3301      	adds	r3, #1
 800449c:	b29b      	uxth	r3, r3
 800449e:	b21a      	sxth	r2, r3
 80044a0:	4b4f      	ldr	r3, [pc, #316]	@ (80045e0 <menu_handler+0x2e4>)
 80044a2:	801a      	strh	r2, [r3, #0]
			if(enc == INC_TRN_NORM) lcd_pwm_bl = lcd_pwm_bl+10;
 80044a4:	4b3d      	ldr	r3, [pc, #244]	@ (800459c <menu_handler+0x2a0>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d108      	bne.n	80044be <menu_handler+0x1c2>
 80044ac:	4b4c      	ldr	r3, [pc, #304]	@ (80045e0 <menu_handler+0x2e4>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	5e9b      	ldrsh	r3, [r3, r2]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	330a      	adds	r3, #10
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	b21a      	sxth	r2, r3
 80044ba:	4b49      	ldr	r3, [pc, #292]	@ (80045e0 <menu_handler+0x2e4>)
 80044bc:	801a      	strh	r2, [r3, #0]
			if(enc == INC_TRN_FAST) lcd_pwm_bl = lcd_pwm_bl+50;
 80044be:	4b37      	ldr	r3, [pc, #220]	@ (800459c <menu_handler+0x2a0>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d108      	bne.n	80044d8 <menu_handler+0x1dc>
 80044c6:	4b46      	ldr	r3, [pc, #280]	@ (80045e0 <menu_handler+0x2e4>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	5e9b      	ldrsh	r3, [r3, r2]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3332      	adds	r3, #50	@ 0x32
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	b21a      	sxth	r2, r3
 80044d4:	4b42      	ldr	r3, [pc, #264]	@ (80045e0 <menu_handler+0x2e4>)
 80044d6:	801a      	strh	r2, [r3, #0]
			if(enc == DEC_TRN_SLOW) lcd_pwm_bl = lcd_pwm_bl-1;
 80044d8:	4b30      	ldr	r3, [pc, #192]	@ (800459c <menu_handler+0x2a0>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d108      	bne.n	80044f2 <menu_handler+0x1f6>
 80044e0:	4b3f      	ldr	r3, [pc, #252]	@ (80045e0 <menu_handler+0x2e4>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	5e9b      	ldrsh	r3, [r3, r2]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	b21a      	sxth	r2, r3
 80044ee:	4b3c      	ldr	r3, [pc, #240]	@ (80045e0 <menu_handler+0x2e4>)
 80044f0:	801a      	strh	r2, [r3, #0]
			if(enc == DEC_TRN_NORM) lcd_pwm_bl = lcd_pwm_bl-10;
 80044f2:	4b2a      	ldr	r3, [pc, #168]	@ (800459c <menu_handler+0x2a0>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d108      	bne.n	800450c <menu_handler+0x210>
 80044fa:	4b39      	ldr	r3, [pc, #228]	@ (80045e0 <menu_handler+0x2e4>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	5e9b      	ldrsh	r3, [r3, r2]
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b0a      	subs	r3, #10
 8004504:	b29b      	uxth	r3, r3
 8004506:	b21a      	sxth	r2, r3
 8004508:	4b35      	ldr	r3, [pc, #212]	@ (80045e0 <menu_handler+0x2e4>)
 800450a:	801a      	strh	r2, [r3, #0]
			if(enc == DEC_TRN_FAST) lcd_pwm_bl = lcd_pwm_bl-50;
 800450c:	4b23      	ldr	r3, [pc, #140]	@ (800459c <menu_handler+0x2a0>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b06      	cmp	r3, #6
 8004512:	d108      	bne.n	8004526 <menu_handler+0x22a>
 8004514:	4b32      	ldr	r3, [pc, #200]	@ (80045e0 <menu_handler+0x2e4>)
 8004516:	2200      	movs	r2, #0
 8004518:	5e9b      	ldrsh	r3, [r3, r2]
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b32      	subs	r3, #50	@ 0x32
 800451e:	b29b      	uxth	r3, r3
 8004520:	b21a      	sxth	r2, r3
 8004522:	4b2f      	ldr	r3, [pc, #188]	@ (80045e0 <menu_handler+0x2e4>)
 8004524:	801a      	strh	r2, [r3, #0]
			if (lcd_pwm_bl < 0) lcd_pwm_bl = 0;
 8004526:	4b2e      	ldr	r3, [pc, #184]	@ (80045e0 <menu_handler+0x2e4>)
 8004528:	2200      	movs	r2, #0
 800452a:	5e9b      	ldrsh	r3, [r3, r2]
 800452c:	2b00      	cmp	r3, #0
 800452e:	da02      	bge.n	8004536 <menu_handler+0x23a>
 8004530:	4b2b      	ldr	r3, [pc, #172]	@ (80045e0 <menu_handler+0x2e4>)
 8004532:	2200      	movs	r2, #0
 8004534:	801a      	strh	r2, [r3, #0]
			if (lcd_pwm_bl > 200) lcd_pwm_bl = 200;
 8004536:	4b2a      	ldr	r3, [pc, #168]	@ (80045e0 <menu_handler+0x2e4>)
 8004538:	2200      	movs	r2, #0
 800453a:	5e9b      	ldrsh	r3, [r3, r2]
 800453c:	2bc8      	cmp	r3, #200	@ 0xc8
 800453e:	dd02      	ble.n	8004546 <menu_handler+0x24a>
 8004540:	4b27      	ldr	r3, [pc, #156]	@ (80045e0 <menu_handler+0x2e4>)
 8004542:	22c8      	movs	r2, #200	@ 0xc8
 8004544:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, lcd_pwm_bl);
 8004546:	4b26      	ldr	r3, [pc, #152]	@ (80045e0 <menu_handler+0x2e4>)
 8004548:	2200      	movs	r2, #0
 800454a:	5e9a      	ldrsh	r2, [r3, r2]
 800454c:	4b25      	ldr	r3, [pc, #148]	@ (80045e4 <menu_handler+0x2e8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	63da      	str	r2, [r3, #60]	@ 0x3c
			if (lcd_pwm_bl != 200)
 8004552:	4b23      	ldr	r3, [pc, #140]	@ (80045e0 <menu_handler+0x2e4>)
 8004554:	2200      	movs	r2, #0
 8004556:	5e9b      	ldrsh	r3, [r3, r2]
 8004558:	2bc8      	cmp	r3, #200	@ 0xc8
 800455a:	d00f      	beq.n	800457c <menu_handler+0x280>
				ST7735_DrawString(124,59,"LGT",Font_11x18,WHITE,MAGENTA);
 800455c:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <menu_handler+0x2ac>)
 800455e:	4822      	ldr	r0, [pc, #136]	@ (80045e8 <menu_handler+0x2ec>)
 8004560:	4a22      	ldr	r2, [pc, #136]	@ (80045ec <menu_handler+0x2f0>)
 8004562:	9202      	str	r2, [sp, #8]
 8004564:	4a12      	ldr	r2, [pc, #72]	@ (80045b0 <menu_handler+0x2b4>)
 8004566:	9201      	str	r2, [sp, #4]
 8004568:	466a      	mov	r2, sp
 800456a:	6859      	ldr	r1, [r3, #4]
 800456c:	6011      	str	r1, [r2, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	0002      	movs	r2, r0
 8004572:	213b      	movs	r1, #59	@ 0x3b
 8004574:	207c      	movs	r0, #124	@ 0x7c
 8004576:	f003 fa31 	bl	80079dc <ST7735_DrawString>
			else
				ST7735_DrawString(124,59,"MAX",Font_11x18,WHITE,MAGENTA);
			break;
 800457a:	e258      	b.n	8004a2e <menu_handler+0x732>
				ST7735_DrawString(124,59,"MAX",Font_11x18,WHITE,MAGENTA);
 800457c:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <menu_handler+0x2ac>)
 800457e:	481c      	ldr	r0, [pc, #112]	@ (80045f0 <menu_handler+0x2f4>)
 8004580:	4a1a      	ldr	r2, [pc, #104]	@ (80045ec <menu_handler+0x2f0>)
 8004582:	9202      	str	r2, [sp, #8]
 8004584:	4a0a      	ldr	r2, [pc, #40]	@ (80045b0 <menu_handler+0x2b4>)
 8004586:	9201      	str	r2, [sp, #4]
 8004588:	466a      	mov	r2, sp
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	6011      	str	r1, [r2, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0002      	movs	r2, r0
 8004592:	213b      	movs	r1, #59	@ 0x3b
 8004594:	207c      	movs	r0, #124	@ 0x7c
 8004596:	f003 fa21 	bl	80079dc <ST7735_DrawString>
			break;
 800459a:	e248      	b.n	8004a2e <menu_handler+0x732>
 800459c:	20000383 	.word	0x20000383
 80045a0:	20000014 	.word	0x20000014
 80045a4:	08018e90 	.word	0x08018e90
 80045a8:	20000038 	.word	0x20000038
 80045ac:	0800ecc0 	.word	0x0800ecc0
 80045b0:	0000ffff 	.word	0x0000ffff
 80045b4:	20000390 	.word	0x20000390
 80045b8:	0800ecc4 	.word	0x0800ecc4
 80045bc:	0800ecc8 	.word	0x0800ecc8
 80045c0:	000007ff 	.word	0x000007ff
 80045c4:	20000391 	.word	0x20000391
 80045c8:	0800eccc 	.word	0x0800eccc
 80045cc:	0000fc07 	.word	0x0000fc07
 80045d0:	20000392 	.word	0x20000392
 80045d4:	20000378 	.word	0x20000378
 80045d8:	0800ecd0 	.word	0x0800ecd0
 80045dc:	00008430 	.word	0x00008430
 80045e0:	20000016 	.word	0x20000016
 80045e4:	20000284 	.word	0x20000284
 80045e8:	0800ecd4 	.word	0x0800ecd4
 80045ec:	0000f81f 	.word	0x0000f81f
 80045f0:	0800ecd8 	.word	0x0800ecd8
		}
		case U:
		{
			if(enc == INC_TRN_SLOW) uSP=uSP+0.01; //0.03
 80045f4:	4be3      	ldr	r3, [pc, #908]	@ (8004984 <menu_handler+0x688>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d111      	bne.n	8004620 <menu_handler+0x324>
 80045fc:	4be2      	ldr	r3, [pc, #904]	@ (8004988 <menu_handler+0x68c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	1c18      	adds	r0, r3, #0
 8004602:	f7fe fc7d 	bl	8002f00 <__aeabi_f2d>
 8004606:	4ae1      	ldr	r2, [pc, #900]	@ (800498c <menu_handler+0x690>)
 8004608:	4be1      	ldr	r3, [pc, #900]	@ (8004990 <menu_handler+0x694>)
 800460a:	f7fc fe3f 	bl	800128c <__aeabi_dadd>
 800460e:	0002      	movs	r2, r0
 8004610:	000b      	movs	r3, r1
 8004612:	0010      	movs	r0, r2
 8004614:	0019      	movs	r1, r3
 8004616:	f7fe fcbb 	bl	8002f90 <__aeabi_d2f>
 800461a:	1c02      	adds	r2, r0, #0
 800461c:	4bda      	ldr	r3, [pc, #872]	@ (8004988 <menu_handler+0x68c>)
 800461e:	601a      	str	r2, [r3, #0]
			if(enc == INC_TRN_NORM) uSP=uSP+0.3;
 8004620:	4bd8      	ldr	r3, [pc, #864]	@ (8004984 <menu_handler+0x688>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d111      	bne.n	800464c <menu_handler+0x350>
 8004628:	4bd7      	ldr	r3, [pc, #860]	@ (8004988 <menu_handler+0x68c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	1c18      	adds	r0, r3, #0
 800462e:	f7fe fc67 	bl	8002f00 <__aeabi_f2d>
 8004632:	4ad8      	ldr	r2, [pc, #864]	@ (8004994 <menu_handler+0x698>)
 8004634:	4bd8      	ldr	r3, [pc, #864]	@ (8004998 <menu_handler+0x69c>)
 8004636:	f7fc fe29 	bl	800128c <__aeabi_dadd>
 800463a:	0002      	movs	r2, r0
 800463c:	000b      	movs	r3, r1
 800463e:	0010      	movs	r0, r2
 8004640:	0019      	movs	r1, r3
 8004642:	f7fe fca5 	bl	8002f90 <__aeabi_d2f>
 8004646:	1c02      	adds	r2, r0, #0
 8004648:	4bcf      	ldr	r3, [pc, #828]	@ (8004988 <menu_handler+0x68c>)
 800464a:	601a      	str	r2, [r3, #0]
			if(enc == INC_TRN_FAST) uSP=uSP+3;
 800464c:	4bcd      	ldr	r3, [pc, #820]	@ (8004984 <menu_handler+0x688>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d109      	bne.n	8004668 <menu_handler+0x36c>
 8004654:	4bcc      	ldr	r3, [pc, #816]	@ (8004988 <menu_handler+0x68c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	49d0      	ldr	r1, [pc, #832]	@ (800499c <menu_handler+0x6a0>)
 800465a:	1c18      	adds	r0, r3, #0
 800465c:	f7fb ff58 	bl	8000510 <__aeabi_fadd>
 8004660:	1c03      	adds	r3, r0, #0
 8004662:	1c1a      	adds	r2, r3, #0
 8004664:	4bc8      	ldr	r3, [pc, #800]	@ (8004988 <menu_handler+0x68c>)
 8004666:	601a      	str	r2, [r3, #0]
			if(enc == DEC_TRN_SLOW) uSP=uSP-0.01; //0.03
 8004668:	4bc6      	ldr	r3, [pc, #792]	@ (8004984 <menu_handler+0x688>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d111      	bne.n	8004694 <menu_handler+0x398>
 8004670:	4bc5      	ldr	r3, [pc, #788]	@ (8004988 <menu_handler+0x68c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	1c18      	adds	r0, r3, #0
 8004676:	f7fe fc43 	bl	8002f00 <__aeabi_f2d>
 800467a:	4ac4      	ldr	r2, [pc, #784]	@ (800498c <menu_handler+0x690>)
 800467c:	4bc4      	ldr	r3, [pc, #784]	@ (8004990 <menu_handler+0x694>)
 800467e:	f7fe f875 	bl	800276c <__aeabi_dsub>
 8004682:	0002      	movs	r2, r0
 8004684:	000b      	movs	r3, r1
 8004686:	0010      	movs	r0, r2
 8004688:	0019      	movs	r1, r3
 800468a:	f7fe fc81 	bl	8002f90 <__aeabi_d2f>
 800468e:	1c02      	adds	r2, r0, #0
 8004690:	4bbd      	ldr	r3, [pc, #756]	@ (8004988 <menu_handler+0x68c>)
 8004692:	601a      	str	r2, [r3, #0]
			if(enc == DEC_TRN_NORM) uSP=uSP-0.3;
 8004694:	4bbb      	ldr	r3, [pc, #748]	@ (8004984 <menu_handler+0x688>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b05      	cmp	r3, #5
 800469a:	d111      	bne.n	80046c0 <menu_handler+0x3c4>
 800469c:	4bba      	ldr	r3, [pc, #744]	@ (8004988 <menu_handler+0x68c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	1c18      	adds	r0, r3, #0
 80046a2:	f7fe fc2d 	bl	8002f00 <__aeabi_f2d>
 80046a6:	4abb      	ldr	r2, [pc, #748]	@ (8004994 <menu_handler+0x698>)
 80046a8:	4bbb      	ldr	r3, [pc, #748]	@ (8004998 <menu_handler+0x69c>)
 80046aa:	f7fe f85f 	bl	800276c <__aeabi_dsub>
 80046ae:	0002      	movs	r2, r0
 80046b0:	000b      	movs	r3, r1
 80046b2:	0010      	movs	r0, r2
 80046b4:	0019      	movs	r1, r3
 80046b6:	f7fe fc6b 	bl	8002f90 <__aeabi_d2f>
 80046ba:	1c02      	adds	r2, r0, #0
 80046bc:	4bb2      	ldr	r3, [pc, #712]	@ (8004988 <menu_handler+0x68c>)
 80046be:	601a      	str	r2, [r3, #0]
			if(enc == DEC_TRN_FAST) uSP=uSP-3;
 80046c0:	4bb0      	ldr	r3, [pc, #704]	@ (8004984 <menu_handler+0x688>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b06      	cmp	r3, #6
 80046c6:	d109      	bne.n	80046dc <menu_handler+0x3e0>
 80046c8:	4baf      	ldr	r3, [pc, #700]	@ (8004988 <menu_handler+0x68c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	49b3      	ldr	r1, [pc, #716]	@ (800499c <menu_handler+0x6a0>)
 80046ce:	1c18      	adds	r0, r3, #0
 80046d0:	f7fc fbcc 	bl	8000e6c <__aeabi_fsub>
 80046d4:	1c03      	adds	r3, r0, #0
 80046d6:	1c1a      	adds	r2, r3, #0
 80046d8:	4bab      	ldr	r3, [pc, #684]	@ (8004988 <menu_handler+0x68c>)
 80046da:	601a      	str	r2, [r3, #0]
			if(uSP>30) uSP=30; // no more 30V
 80046dc:	4baa      	ldr	r3, [pc, #680]	@ (8004988 <menu_handler+0x68c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	49af      	ldr	r1, [pc, #700]	@ (80049a0 <menu_handler+0x6a4>)
 80046e2:	1c18      	adds	r0, r3, #0
 80046e4:	f7fb fee8 	bl	80004b8 <__aeabi_fcmpgt>
 80046e8:	1e03      	subs	r3, r0, #0
 80046ea:	d002      	beq.n	80046f2 <menu_handler+0x3f6>
 80046ec:	4ba6      	ldr	r3, [pc, #664]	@ (8004988 <menu_handler+0x68c>)
 80046ee:	4aac      	ldr	r2, [pc, #688]	@ (80049a0 <menu_handler+0x6a4>)
 80046f0:	601a      	str	r2, [r3, #0]
			if(uSP<0) uSP=0; // no less 0V
 80046f2:	4ba5      	ldr	r3, [pc, #660]	@ (8004988 <menu_handler+0x68c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2100      	movs	r1, #0
 80046f8:	1c18      	adds	r0, r3, #0
 80046fa:	f7fb fec9 	bl	8000490 <__aeabi_fcmplt>
 80046fe:	1e03      	subs	r3, r0, #0
 8004700:	d002      	beq.n	8004708 <menu_handler+0x40c>
 8004702:	4ba1      	ldr	r3, [pc, #644]	@ (8004988 <menu_handler+0x68c>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
			ptr = float_to_char(uSP, float_for_LCD);
 8004708:	4b9f      	ldr	r3, [pc, #636]	@ (8004988 <menu_handler+0x68c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4aa5      	ldr	r2, [pc, #660]	@ (80049a4 <menu_handler+0x6a8>)
 800470e:	0011      	movs	r1, r2
 8004710:	1c18      	adds	r0, r3, #0
 8004712:	f001 fc1b 	bl	8005f4c <float_to_char>
 8004716:	0002      	movs	r2, r0
 8004718:	4ba3      	ldr	r3, [pc, #652]	@ (80049a8 <menu_handler+0x6ac>)
 800471a:	601a      	str	r2, [r3, #0]
			if(uSP<1)
 800471c:	4b9a      	ldr	r3, [pc, #616]	@ (8004988 <menu_handler+0x68c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	21fe      	movs	r1, #254	@ 0xfe
 8004722:	0589      	lsls	r1, r1, #22
 8004724:	1c18      	adds	r0, r3, #0
 8004726:	f7fb feb3 	bl	8000490 <__aeabi_fcmplt>
 800472a:	1e03      	subs	r3, r0, #0
 800472c:	d01f      	beq.n	800476e <menu_handler+0x472>
			{
				ST7735_DrawString(5,84," 0",Font_11x18,WHITE,BLACK);
 800472e:	4b9f      	ldr	r3, [pc, #636]	@ (80049ac <menu_handler+0x6b0>)
 8004730:	489f      	ldr	r0, [pc, #636]	@ (80049b0 <menu_handler+0x6b4>)
 8004732:	2200      	movs	r2, #0
 8004734:	9202      	str	r2, [sp, #8]
 8004736:	4a9f      	ldr	r2, [pc, #636]	@ (80049b4 <menu_handler+0x6b8>)
 8004738:	9201      	str	r2, [sp, #4]
 800473a:	466a      	mov	r2, sp
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	6011      	str	r1, [r2, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	0002      	movs	r2, r0
 8004744:	2154      	movs	r1, #84	@ 0x54
 8004746:	2005      	movs	r0, #5
 8004748:	f003 f948 	bl	80079dc <ST7735_DrawString>
				ST7735_DrawString(27,84,ptr,Font_11x18,WHITE,BLACK);
 800474c:	4b96      	ldr	r3, [pc, #600]	@ (80049a8 <menu_handler+0x6ac>)
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	4b96      	ldr	r3, [pc, #600]	@ (80049ac <menu_handler+0x6b0>)
 8004752:	2200      	movs	r2, #0
 8004754:	9202      	str	r2, [sp, #8]
 8004756:	4a97      	ldr	r2, [pc, #604]	@ (80049b4 <menu_handler+0x6b8>)
 8004758:	9201      	str	r2, [sp, #4]
 800475a:	466a      	mov	r2, sp
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	6011      	str	r1, [r2, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	0002      	movs	r2, r0
 8004764:	2154      	movs	r1, #84	@ 0x54
 8004766:	201b      	movs	r0, #27
 8004768:	f003 f938 	bl	80079dc <ST7735_DrawString>
 800476c:	e037      	b.n	80047de <menu_handler+0x4e2>
			}
			else
			{
				if(uSP<10)
 800476e:	4b86      	ldr	r3, [pc, #536]	@ (8004988 <menu_handler+0x68c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4991      	ldr	r1, [pc, #580]	@ (80049b8 <menu_handler+0x6bc>)
 8004774:	1c18      	adds	r0, r3, #0
 8004776:	f7fb fe8b 	bl	8000490 <__aeabi_fcmplt>
 800477a:	1e03      	subs	r3, r0, #0
 800477c:	d01f      	beq.n	80047be <menu_handler+0x4c2>
				{
					ST7735_DrawString(5,84," ",Font_11x18,WHITE,BLACK);
 800477e:	4b8b      	ldr	r3, [pc, #556]	@ (80049ac <menu_handler+0x6b0>)
 8004780:	488e      	ldr	r0, [pc, #568]	@ (80049bc <menu_handler+0x6c0>)
 8004782:	2200      	movs	r2, #0
 8004784:	9202      	str	r2, [sp, #8]
 8004786:	4a8b      	ldr	r2, [pc, #556]	@ (80049b4 <menu_handler+0x6b8>)
 8004788:	9201      	str	r2, [sp, #4]
 800478a:	466a      	mov	r2, sp
 800478c:	6859      	ldr	r1, [r3, #4]
 800478e:	6011      	str	r1, [r2, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	0002      	movs	r2, r0
 8004794:	2154      	movs	r1, #84	@ 0x54
 8004796:	2005      	movs	r0, #5
 8004798:	f003 f920 	bl	80079dc <ST7735_DrawString>
					ST7735_DrawString(16,84,ptr,Font_11x18,WHITE,BLACK);
 800479c:	4b82      	ldr	r3, [pc, #520]	@ (80049a8 <menu_handler+0x6ac>)
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	4b82      	ldr	r3, [pc, #520]	@ (80049ac <menu_handler+0x6b0>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	9202      	str	r2, [sp, #8]
 80047a6:	4a83      	ldr	r2, [pc, #524]	@ (80049b4 <menu_handler+0x6b8>)
 80047a8:	9201      	str	r2, [sp, #4]
 80047aa:	466a      	mov	r2, sp
 80047ac:	6859      	ldr	r1, [r3, #4]
 80047ae:	6011      	str	r1, [r2, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	0002      	movs	r2, r0
 80047b4:	2154      	movs	r1, #84	@ 0x54
 80047b6:	2010      	movs	r0, #16
 80047b8:	f003 f910 	bl	80079dc <ST7735_DrawString>
 80047bc:	e00f      	b.n	80047de <menu_handler+0x4e2>
				}
				else ST7735_DrawString(5,84,ptr,Font_11x18,WHITE,BLACK);
 80047be:	4b7a      	ldr	r3, [pc, #488]	@ (80049a8 <menu_handler+0x6ac>)
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	4b7a      	ldr	r3, [pc, #488]	@ (80049ac <menu_handler+0x6b0>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	9202      	str	r2, [sp, #8]
 80047c8:	4a7a      	ldr	r2, [pc, #488]	@ (80049b4 <menu_handler+0x6b8>)
 80047ca:	9201      	str	r2, [sp, #4]
 80047cc:	466a      	mov	r2, sp
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	6011      	str	r1, [r2, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	0002      	movs	r2, r0
 80047d6:	2154      	movs	r1, #84	@ 0x54
 80047d8:	2005      	movs	r0, #5
 80047da:	f003 f8ff 	bl	80079dc <ST7735_DrawString>
			}
			ST7735_DrawString( 60,84,"0V",Font_11x18,WHITE,BLACK);
 80047de:	4b73      	ldr	r3, [pc, #460]	@ (80049ac <menu_handler+0x6b0>)
 80047e0:	4877      	ldr	r0, [pc, #476]	@ (80049c0 <menu_handler+0x6c4>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	9202      	str	r2, [sp, #8]
 80047e6:	4a73      	ldr	r2, [pc, #460]	@ (80049b4 <menu_handler+0x6b8>)
 80047e8:	9201      	str	r2, [sp, #4]
 80047ea:	466a      	mov	r2, sp
 80047ec:	6859      	ldr	r1, [r3, #4]
 80047ee:	6011      	str	r1, [r2, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	0002      	movs	r2, r0
 80047f4:	2154      	movs	r1, #84	@ 0x54
 80047f6:	203c      	movs	r0, #60	@ 0x3c
 80047f8:	f003 f8f0 	bl	80079dc <ST7735_DrawString>
			break;
 80047fc:	e117      	b.n	8004a2e <menu_handler+0x732>
		}
		case I:
		{
			if(enc == INC_TRN_SLOW) iSP=iSP+0.001; //0.005
 80047fe:	4b61      	ldr	r3, [pc, #388]	@ (8004984 <menu_handler+0x688>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d111      	bne.n	800482a <menu_handler+0x52e>
 8004806:	4b6f      	ldr	r3, [pc, #444]	@ (80049c4 <menu_handler+0x6c8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	1c18      	adds	r0, r3, #0
 800480c:	f7fe fb78 	bl	8002f00 <__aeabi_f2d>
 8004810:	4a6d      	ldr	r2, [pc, #436]	@ (80049c8 <menu_handler+0x6cc>)
 8004812:	4b6e      	ldr	r3, [pc, #440]	@ (80049cc <menu_handler+0x6d0>)
 8004814:	f7fc fd3a 	bl	800128c <__aeabi_dadd>
 8004818:	0002      	movs	r2, r0
 800481a:	000b      	movs	r3, r1
 800481c:	0010      	movs	r0, r2
 800481e:	0019      	movs	r1, r3
 8004820:	f7fe fbb6 	bl	8002f90 <__aeabi_d2f>
 8004824:	1c02      	adds	r2, r0, #0
 8004826:	4b67      	ldr	r3, [pc, #412]	@ (80049c4 <menu_handler+0x6c8>)
 8004828:	601a      	str	r2, [r3, #0]
			if(enc == INC_TRN_NORM) iSP=iSP+0.05;
 800482a:	4b56      	ldr	r3, [pc, #344]	@ (8004984 <menu_handler+0x688>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d111      	bne.n	8004856 <menu_handler+0x55a>
 8004832:	4b64      	ldr	r3, [pc, #400]	@ (80049c4 <menu_handler+0x6c8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	1c18      	adds	r0, r3, #0
 8004838:	f7fe fb62 	bl	8002f00 <__aeabi_f2d>
 800483c:	4a64      	ldr	r2, [pc, #400]	@ (80049d0 <menu_handler+0x6d4>)
 800483e:	4b65      	ldr	r3, [pc, #404]	@ (80049d4 <menu_handler+0x6d8>)
 8004840:	f7fc fd24 	bl	800128c <__aeabi_dadd>
 8004844:	0002      	movs	r2, r0
 8004846:	000b      	movs	r3, r1
 8004848:	0010      	movs	r0, r2
 800484a:	0019      	movs	r1, r3
 800484c:	f7fe fba0 	bl	8002f90 <__aeabi_d2f>
 8004850:	1c02      	adds	r2, r0, #0
 8004852:	4b5c      	ldr	r3, [pc, #368]	@ (80049c4 <menu_handler+0x6c8>)
 8004854:	601a      	str	r2, [r3, #0]
			if(enc == INC_TRN_FAST) iSP=iSP+0.5;
 8004856:	4b4b      	ldr	r3, [pc, #300]	@ (8004984 <menu_handler+0x688>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b03      	cmp	r3, #3
 800485c:	d10a      	bne.n	8004874 <menu_handler+0x578>
 800485e:	4b59      	ldr	r3, [pc, #356]	@ (80049c4 <menu_handler+0x6c8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	21fc      	movs	r1, #252	@ 0xfc
 8004864:	0589      	lsls	r1, r1, #22
 8004866:	1c18      	adds	r0, r3, #0
 8004868:	f7fb fe52 	bl	8000510 <__aeabi_fadd>
 800486c:	1c03      	adds	r3, r0, #0
 800486e:	1c1a      	adds	r2, r3, #0
 8004870:	4b54      	ldr	r3, [pc, #336]	@ (80049c4 <menu_handler+0x6c8>)
 8004872:	601a      	str	r2, [r3, #0]
			if(enc == DEC_TRN_SLOW) iSP=iSP-0.001; //0.005
 8004874:	4b43      	ldr	r3, [pc, #268]	@ (8004984 <menu_handler+0x688>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d111      	bne.n	80048a0 <menu_handler+0x5a4>
 800487c:	4b51      	ldr	r3, [pc, #324]	@ (80049c4 <menu_handler+0x6c8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	1c18      	adds	r0, r3, #0
 8004882:	f7fe fb3d 	bl	8002f00 <__aeabi_f2d>
 8004886:	4a50      	ldr	r2, [pc, #320]	@ (80049c8 <menu_handler+0x6cc>)
 8004888:	4b50      	ldr	r3, [pc, #320]	@ (80049cc <menu_handler+0x6d0>)
 800488a:	f7fd ff6f 	bl	800276c <__aeabi_dsub>
 800488e:	0002      	movs	r2, r0
 8004890:	000b      	movs	r3, r1
 8004892:	0010      	movs	r0, r2
 8004894:	0019      	movs	r1, r3
 8004896:	f7fe fb7b 	bl	8002f90 <__aeabi_d2f>
 800489a:	1c02      	adds	r2, r0, #0
 800489c:	4b49      	ldr	r3, [pc, #292]	@ (80049c4 <menu_handler+0x6c8>)
 800489e:	601a      	str	r2, [r3, #0]
			if(enc == DEC_TRN_NORM) iSP=iSP-0.05;
 80048a0:	4b38      	ldr	r3, [pc, #224]	@ (8004984 <menu_handler+0x688>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b05      	cmp	r3, #5
 80048a6:	d111      	bne.n	80048cc <menu_handler+0x5d0>
 80048a8:	4b46      	ldr	r3, [pc, #280]	@ (80049c4 <menu_handler+0x6c8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	1c18      	adds	r0, r3, #0
 80048ae:	f7fe fb27 	bl	8002f00 <__aeabi_f2d>
 80048b2:	4a47      	ldr	r2, [pc, #284]	@ (80049d0 <menu_handler+0x6d4>)
 80048b4:	4b47      	ldr	r3, [pc, #284]	@ (80049d4 <menu_handler+0x6d8>)
 80048b6:	f7fd ff59 	bl	800276c <__aeabi_dsub>
 80048ba:	0002      	movs	r2, r0
 80048bc:	000b      	movs	r3, r1
 80048be:	0010      	movs	r0, r2
 80048c0:	0019      	movs	r1, r3
 80048c2:	f7fe fb65 	bl	8002f90 <__aeabi_d2f>
 80048c6:	1c02      	adds	r2, r0, #0
 80048c8:	4b3e      	ldr	r3, [pc, #248]	@ (80049c4 <menu_handler+0x6c8>)
 80048ca:	601a      	str	r2, [r3, #0]
			if(enc == DEC_TRN_FAST) iSP=iSP-0.5;
 80048cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004984 <menu_handler+0x688>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b06      	cmp	r3, #6
 80048d2:	d10a      	bne.n	80048ea <menu_handler+0x5ee>
 80048d4:	4b3b      	ldr	r3, [pc, #236]	@ (80049c4 <menu_handler+0x6c8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	21fc      	movs	r1, #252	@ 0xfc
 80048da:	0589      	lsls	r1, r1, #22
 80048dc:	1c18      	adds	r0, r3, #0
 80048de:	f7fc fac5 	bl	8000e6c <__aeabi_fsub>
 80048e2:	1c03      	adds	r3, r0, #0
 80048e4:	1c1a      	adds	r2, r3, #0
 80048e6:	4b37      	ldr	r3, [pc, #220]	@ (80049c4 <menu_handler+0x6c8>)
 80048e8:	601a      	str	r2, [r3, #0]
			if(iSP>4.6) iSP=4.6; //no more 4.6A
 80048ea:	4b36      	ldr	r3, [pc, #216]	@ (80049c4 <menu_handler+0x6c8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	1c18      	adds	r0, r3, #0
 80048f0:	f7fe fb06 	bl	8002f00 <__aeabi_f2d>
 80048f4:	4a38      	ldr	r2, [pc, #224]	@ (80049d8 <menu_handler+0x6dc>)
 80048f6:	4b39      	ldr	r3, [pc, #228]	@ (80049dc <menu_handler+0x6e0>)
 80048f8:	f7fb fda4 	bl	8000444 <__aeabi_dcmpgt>
 80048fc:	1e03      	subs	r3, r0, #0
 80048fe:	d002      	beq.n	8004906 <menu_handler+0x60a>
 8004900:	4b30      	ldr	r3, [pc, #192]	@ (80049c4 <menu_handler+0x6c8>)
 8004902:	4a37      	ldr	r2, [pc, #220]	@ (80049e0 <menu_handler+0x6e4>)
 8004904:	601a      	str	r2, [r3, #0]
			if(iSP<0) iSP=0; // no less 0A
 8004906:	4b2f      	ldr	r3, [pc, #188]	@ (80049c4 <menu_handler+0x6c8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2100      	movs	r1, #0
 800490c:	1c18      	adds	r0, r3, #0
 800490e:	f7fb fdbf 	bl	8000490 <__aeabi_fcmplt>
 8004912:	1e03      	subs	r3, r0, #0
 8004914:	d002      	beq.n	800491c <menu_handler+0x620>
 8004916:	4b2b      	ldr	r3, [pc, #172]	@ (80049c4 <menu_handler+0x6c8>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
			ptr = float_to_char(iSP, float_for_LCD);
 800491c:	4b29      	ldr	r3, [pc, #164]	@ (80049c4 <menu_handler+0x6c8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a20      	ldr	r2, [pc, #128]	@ (80049a4 <menu_handler+0x6a8>)
 8004922:	0011      	movs	r1, r2
 8004924:	1c18      	adds	r0, r3, #0
 8004926:	f001 fb11 	bl	8005f4c <float_to_char>
 800492a:	0002      	movs	r2, r0
 800492c:	4b1e      	ldr	r3, [pc, #120]	@ (80049a8 <menu_handler+0x6ac>)
 800492e:	601a      	str	r2, [r3, #0]
			if(iSP<1)
 8004930:	4b24      	ldr	r3, [pc, #144]	@ (80049c4 <menu_handler+0x6c8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	21fe      	movs	r1, #254	@ 0xfe
 8004936:	0589      	lsls	r1, r1, #22
 8004938:	1c18      	adds	r0, r3, #0
 800493a:	f7fb fda9 	bl	8000490 <__aeabi_fcmplt>
 800493e:	1e03      	subs	r3, r0, #0
 8004940:	d052      	beq.n	80049e8 <menu_handler+0x6ec>
			{
				ST7735_DrawString(89,84,"0",Font_11x18,WHITE,BLACK);
 8004942:	4b1a      	ldr	r3, [pc, #104]	@ (80049ac <menu_handler+0x6b0>)
 8004944:	4827      	ldr	r0, [pc, #156]	@ (80049e4 <menu_handler+0x6e8>)
 8004946:	2200      	movs	r2, #0
 8004948:	9202      	str	r2, [sp, #8]
 800494a:	4a1a      	ldr	r2, [pc, #104]	@ (80049b4 <menu_handler+0x6b8>)
 800494c:	9201      	str	r2, [sp, #4]
 800494e:	466a      	mov	r2, sp
 8004950:	6859      	ldr	r1, [r3, #4]
 8004952:	6011      	str	r1, [r2, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	0002      	movs	r2, r0
 8004958:	2154      	movs	r1, #84	@ 0x54
 800495a:	2059      	movs	r0, #89	@ 0x59
 800495c:	f003 f83e 	bl	80079dc <ST7735_DrawString>
				ST7735_DrawString(100,84,ptr,Font_11x18,WHITE,BLACK);
 8004960:	4b11      	ldr	r3, [pc, #68]	@ (80049a8 <menu_handler+0x6ac>)
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	4b11      	ldr	r3, [pc, #68]	@ (80049ac <menu_handler+0x6b0>)
 8004966:	2200      	movs	r2, #0
 8004968:	9202      	str	r2, [sp, #8]
 800496a:	4a12      	ldr	r2, [pc, #72]	@ (80049b4 <menu_handler+0x6b8>)
 800496c:	9201      	str	r2, [sp, #4]
 800496e:	466a      	mov	r2, sp
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	6011      	str	r1, [r2, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	0002      	movs	r2, r0
 8004978:	2154      	movs	r1, #84	@ 0x54
 800497a:	2064      	movs	r0, #100	@ 0x64
 800497c:	f003 f82e 	bl	80079dc <ST7735_DrawString>
 8004980:	e042      	b.n	8004a08 <menu_handler+0x70c>
 8004982:	46c0      	nop			@ (mov r8, r8)
 8004984:	20000383 	.word	0x20000383
 8004988:	20000018 	.word	0x20000018
 800498c:	47ae147b 	.word	0x47ae147b
 8004990:	3f847ae1 	.word	0x3f847ae1
 8004994:	33333333 	.word	0x33333333
 8004998:	3fd33333 	.word	0x3fd33333
 800499c:	40400000 	.word	0x40400000
 80049a0:	41f00000 	.word	0x41f00000
 80049a4:	20000378 	.word	0x20000378
 80049a8:	2000038c 	.word	0x2000038c
 80049ac:	20000038 	.word	0x20000038
 80049b0:	0800ec94 	.word	0x0800ec94
 80049b4:	0000ffff 	.word	0x0000ffff
 80049b8:	41200000 	.word	0x41200000
 80049bc:	0800ec98 	.word	0x0800ec98
 80049c0:	0800ec9c 	.word	0x0800ec9c
 80049c4:	2000001c 	.word	0x2000001c
 80049c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80049cc:	3f50624d 	.word	0x3f50624d
 80049d0:	9999999a 	.word	0x9999999a
 80049d4:	3fa99999 	.word	0x3fa99999
 80049d8:	66666666 	.word	0x66666666
 80049dc:	40126666 	.word	0x40126666
 80049e0:	40933333 	.word	0x40933333
 80049e4:	0800eca0 	.word	0x0800eca0
			}
			else ST7735_DrawString(89,84,ptr,Font_11x18,WHITE,BLACK);
 80049e8:	4bb8      	ldr	r3, [pc, #736]	@ (8004ccc <menu_handler+0x9d0>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	4bb8      	ldr	r3, [pc, #736]	@ (8004cd0 <menu_handler+0x9d4>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	9202      	str	r2, [sp, #8]
 80049f2:	4ab8      	ldr	r2, [pc, #736]	@ (8004cd4 <menu_handler+0x9d8>)
 80049f4:	9201      	str	r2, [sp, #4]
 80049f6:	466a      	mov	r2, sp
 80049f8:	6859      	ldr	r1, [r3, #4]
 80049fa:	6011      	str	r1, [r2, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	0002      	movs	r2, r0
 8004a00:	2154      	movs	r1, #84	@ 0x54
 8004a02:	2059      	movs	r0, #89	@ 0x59
 8004a04:	f002 ffea 	bl	80079dc <ST7735_DrawString>
			ST7735_DrawString(144,84,"A",Font_11x18,WHITE,BLACK);
 8004a08:	4bb1      	ldr	r3, [pc, #708]	@ (8004cd0 <menu_handler+0x9d4>)
 8004a0a:	48b3      	ldr	r0, [pc, #716]	@ (8004cd8 <menu_handler+0x9dc>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	9202      	str	r2, [sp, #8]
 8004a10:	4ab0      	ldr	r2, [pc, #704]	@ (8004cd4 <menu_handler+0x9d8>)
 8004a12:	9201      	str	r2, [sp, #4]
 8004a14:	466a      	mov	r2, sp
 8004a16:	6859      	ldr	r1, [r3, #4]
 8004a18:	6011      	str	r1, [r2, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0002      	movs	r2, r0
 8004a1e:	2154      	movs	r1, #84	@ 0x54
 8004a20:	2090      	movs	r0, #144	@ 0x90
 8004a22:	f002 ffdb 	bl	80079dc <ST7735_DrawString>
			break;
 8004a26:	e002      	b.n	8004a2e <menu_handler+0x732>
			break;
 8004a28:	46c0      	nop			@ (mov r8, r8)
 8004a2a:	e000      	b.n	8004a2e <menu_handler+0x732>
			break;
 8004a2c:	46c0      	nop			@ (mov r8, r8)
		}
		}
		enc=NO_TRN;
 8004a2e:	4bab      	ldr	r3, [pc, #684]	@ (8004cdc <menu_handler+0x9e0>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
	}

	if(btn != (NO_PRESS || FIRST_EDGE))
 8004a34:	4baa      	ldr	r3, [pc, #680]	@ (8004ce0 <menu_handler+0x9e4>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d100      	bne.n	8004a3e <menu_handler+0x742>
 8004a3c:	e1fc      	b.n	8004e38 <menu_handler+0xb3c>
	{
		if(btn == PRESS_NORM)
 8004a3e:	4ba8      	ldr	r3, [pc, #672]	@ (8004ce0 <menu_handler+0x9e4>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d000      	beq.n	8004a48 <menu_handler+0x74c>
 8004a46:	e081      	b.n	8004b4c <menu_handler+0x850>
		{
			switch(mnu_sel)
 8004a48:	4ba6      	ldr	r3, [pc, #664]	@ (8004ce4 <menu_handler+0x9e8>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b05      	cmp	r3, #5
 8004a4e:	d900      	bls.n	8004a52 <menu_handler+0x756>
 8004a50:	e07c      	b.n	8004b4c <menu_handler+0x850>
 8004a52:	009a      	lsls	r2, r3, #2
 8004a54:	4ba4      	ldr	r3, [pc, #656]	@ (8004ce8 <menu_handler+0x9ec>)
 8004a56:	18d3      	adds	r3, r2, r3
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	469f      	mov	pc, r3
			{
			case ON_OFF: //Power on, off
			{
				ST7735_DrawRect
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	2314      	movs	r3, #20
 8004a62:	2223      	movs	r2, #35	@ 0x23
 8004a64:	2101      	movs	r1, #1
 8004a66:	207b      	movs	r0, #123	@ 0x7b
 8004a68:	f003 fa2a 	bl	8007ec0 <ST7735_DrawRect>
					(123, 1, 35, 20, BLACK);
				ST7735_DrawRect
 8004a6c:	4b99      	ldr	r3, [pc, #612]	@ (8004cd4 <menu_handler+0x9d8>)
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	2314      	movs	r3, #20
 8004a72:	2223      	movs	r2, #35	@ 0x23
 8004a74:	2114      	movs	r1, #20
 8004a76:	207b      	movs	r0, #123	@ 0x7b
 8004a78:	f003 fa22 	bl	8007ec0 <ST7735_DrawRect>
					(123,20, 35, 20, WHITE);
				mnu_sel = MODE;
 8004a7c:	4b99      	ldr	r3, [pc, #612]	@ (8004ce4 <menu_handler+0x9e8>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
				break;
 8004a82:	e063      	b.n	8004b4c <menu_handler+0x850>
			}
			case MODE:  //Constant U or constant I
			{
				ST7735_DrawRect
 8004a84:	2300      	movs	r3, #0
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	2314      	movs	r3, #20
 8004a8a:	2223      	movs	r2, #35	@ 0x23
 8004a8c:	2114      	movs	r1, #20
 8004a8e:	207b      	movs	r0, #123	@ 0x7b
 8004a90:	f003 fa16 	bl	8007ec0 <ST7735_DrawRect>
					(123,20, 35, 20, BLACK);
				ST7735_DrawRect
 8004a94:	4b8f      	ldr	r3, [pc, #572]	@ (8004cd4 <menu_handler+0x9d8>)
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2314      	movs	r3, #20
 8004a9a:	2223      	movs	r2, #35	@ 0x23
 8004a9c:	2127      	movs	r1, #39	@ 0x27
 8004a9e:	207b      	movs	r0, #123	@ 0x7b
 8004aa0:	f003 fa0e 	bl	8007ec0 <ST7735_DrawRect>
					(123,39, 35, 20, WHITE);
				mnu_sel = MEM;
 8004aa4:	4b8f      	ldr	r3, [pc, #572]	@ (8004ce4 <menu_handler+0x9e8>)
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	701a      	strb	r2, [r3, #0]
				break;
 8004aaa:	e04f      	b.n	8004b4c <menu_handler+0x850>
			}
			case MEM: //Memory settings
			{
				ST7735_DrawRect
 8004aac:	2300      	movs	r3, #0
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	2314      	movs	r3, #20
 8004ab2:	2223      	movs	r2, #35	@ 0x23
 8004ab4:	2127      	movs	r1, #39	@ 0x27
 8004ab6:	207b      	movs	r0, #123	@ 0x7b
 8004ab8:	f003 fa02 	bl	8007ec0 <ST7735_DrawRect>
					(123,39, 35, 20, BLACK);
				ST7735_DrawRect
 8004abc:	4b85      	ldr	r3, [pc, #532]	@ (8004cd4 <menu_handler+0x9d8>)
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	2314      	movs	r3, #20
 8004ac2:	2223      	movs	r2, #35	@ 0x23
 8004ac4:	213a      	movs	r1, #58	@ 0x3a
 8004ac6:	207b      	movs	r0, #123	@ 0x7b
 8004ac8:	f003 f9fa 	bl	8007ec0 <ST7735_DrawRect>
					(123,58, 35, 20, WHITE);
				mnu_sel = BL;
 8004acc:	4b85      	ldr	r3, [pc, #532]	@ (8004ce4 <menu_handler+0x9e8>)
 8004ace:	2203      	movs	r2, #3
 8004ad0:	701a      	strb	r2, [r3, #0]
				break;
 8004ad2:	e03b      	b.n	8004b4c <menu_handler+0x850>
			}
			case BL: //Back Light setup
			{
				ST7735_DrawRect
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2314      	movs	r3, #20
 8004ada:	2223      	movs	r2, #35	@ 0x23
 8004adc:	213a      	movs	r1, #58	@ 0x3a
 8004ade:	207b      	movs	r0, #123	@ 0x7b
 8004ae0:	f003 f9ee 	bl	8007ec0 <ST7735_DrawRect>
					(123,58, 35, 20, BLACK);
				ST7735_DrawRect
 8004ae4:	4b7b      	ldr	r3, [pc, #492]	@ (8004cd4 <menu_handler+0x9d8>)
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	2314      	movs	r3, #20
 8004aea:	224f      	movs	r2, #79	@ 0x4f
 8004aec:	2153      	movs	r1, #83	@ 0x53
 8004aee:	2004      	movs	r0, #4
 8004af0:	f003 f9e6 	bl	8007ec0 <ST7735_DrawRect>
					(4,83, 79, 20, WHITE);
				mnu_sel = U;
 8004af4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ce4 <menu_handler+0x9e8>)
 8004af6:	2204      	movs	r2, #4
 8004af8:	701a      	strb	r2, [r3, #0]
				break;
 8004afa:	e027      	b.n	8004b4c <menu_handler+0x850>
			}
			case U: //Voltage set point
			{
				ST7735_DrawRect
 8004afc:	2300      	movs	r3, #0
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	2314      	movs	r3, #20
 8004b02:	224f      	movs	r2, #79	@ 0x4f
 8004b04:	2153      	movs	r1, #83	@ 0x53
 8004b06:	2004      	movs	r0, #4
 8004b08:	f003 f9da 	bl	8007ec0 <ST7735_DrawRect>
					(4,83, 79, 20, BLACK);
				ST7735_DrawRect
 8004b0c:	4b71      	ldr	r3, [pc, #452]	@ (8004cd4 <menu_handler+0x9d8>)
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2314      	movs	r3, #20
 8004b12:	2245      	movs	r2, #69	@ 0x45
 8004b14:	2153      	movs	r1, #83	@ 0x53
 8004b16:	2057      	movs	r0, #87	@ 0x57
 8004b18:	f003 f9d2 	bl	8007ec0 <ST7735_DrawRect>
					(87,83, 69, 20, WHITE);
				mnu_sel = I;
 8004b1c:	4b71      	ldr	r3, [pc, #452]	@ (8004ce4 <menu_handler+0x9e8>)
 8004b1e:	2205      	movs	r2, #5
 8004b20:	701a      	strb	r2, [r3, #0]
				break;
 8004b22:	e013      	b.n	8004b4c <menu_handler+0x850>
			}
			case I: //Current set point
			{
				ST7735_DrawRect
 8004b24:	2300      	movs	r3, #0
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	2314      	movs	r3, #20
 8004b2a:	2245      	movs	r2, #69	@ 0x45
 8004b2c:	2153      	movs	r1, #83	@ 0x53
 8004b2e:	2057      	movs	r0, #87	@ 0x57
 8004b30:	f003 f9c6 	bl	8007ec0 <ST7735_DrawRect>
					(87,83, 69, 20, BLACK);
				ST7735_DrawRect
 8004b34:	4b67      	ldr	r3, [pc, #412]	@ (8004cd4 <menu_handler+0x9d8>)
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	2314      	movs	r3, #20
 8004b3a:	2223      	movs	r2, #35	@ 0x23
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	207b      	movs	r0, #123	@ 0x7b
 8004b40:	f003 f9be 	bl	8007ec0 <ST7735_DrawRect>
					(123, 1, 35, 20, WHITE);
				mnu_sel = ON_OFF;
 8004b44:	4b67      	ldr	r3, [pc, #412]	@ (8004ce4 <menu_handler+0x9e8>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
				break;
 8004b4a:	46c0      	nop			@ (mov r8, r8)
			}
			}
		}
		if(btn == PRESS_LONG)
 8004b4c:	4b64      	ldr	r3, [pc, #400]	@ (8004ce0 <menu_handler+0x9e4>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d000      	beq.n	8004b56 <menu_handler+0x85a>
 8004b54:	e16d      	b.n	8004e32 <menu_handler+0xb36>
		{
			if(mnu_sel != MEM)
 8004b56:	4b63      	ldr	r3, [pc, #396]	@ (8004ce4 <menu_handler+0x9e8>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d02b      	beq.n	8004bb6 <menu_handler+0x8ba>
			{
				if(on_off)
 8004b5e:	4b63      	ldr	r3, [pc, #396]	@ (8004cec <menu_handler+0x9f0>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d013      	beq.n	8004b8e <menu_handler+0x892>
				{
					ST7735_DrawString(124,2,"OFF",Font_11x18,WHITE,RED);
 8004b66:	4b5a      	ldr	r3, [pc, #360]	@ (8004cd0 <menu_handler+0x9d4>)
 8004b68:	4861      	ldr	r0, [pc, #388]	@ (8004cf0 <menu_handler+0x9f4>)
 8004b6a:	22f8      	movs	r2, #248	@ 0xf8
 8004b6c:	0212      	lsls	r2, r2, #8
 8004b6e:	9202      	str	r2, [sp, #8]
 8004b70:	4a58      	ldr	r2, [pc, #352]	@ (8004cd4 <menu_handler+0x9d8>)
 8004b72:	9201      	str	r2, [sp, #4]
 8004b74:	466a      	mov	r2, sp
 8004b76:	6859      	ldr	r1, [r3, #4]
 8004b78:	6011      	str	r1, [r2, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	0002      	movs	r2, r0
 8004b7e:	2102      	movs	r1, #2
 8004b80:	207c      	movs	r0, #124	@ 0x7c
 8004b82:	f002 ff2b 	bl	80079dc <ST7735_DrawString>
					on_off = false;
 8004b86:	4b59      	ldr	r3, [pc, #356]	@ (8004cec <menu_handler+0x9f0>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	e151      	b.n	8004e32 <menu_handler+0xb36>
				}
				else
				{
					ST7735_DrawString(124,2," ON",Font_11x18,WHITE,GREEN);
 8004b8e:	4b50      	ldr	r3, [pc, #320]	@ (8004cd0 <menu_handler+0x9d4>)
 8004b90:	4858      	ldr	r0, [pc, #352]	@ (8004cf4 <menu_handler+0x9f8>)
 8004b92:	22fc      	movs	r2, #252	@ 0xfc
 8004b94:	00d2      	lsls	r2, r2, #3
 8004b96:	9202      	str	r2, [sp, #8]
 8004b98:	4a4e      	ldr	r2, [pc, #312]	@ (8004cd4 <menu_handler+0x9d8>)
 8004b9a:	9201      	str	r2, [sp, #4]
 8004b9c:	466a      	mov	r2, sp
 8004b9e:	6859      	ldr	r1, [r3, #4]
 8004ba0:	6011      	str	r1, [r2, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	0002      	movs	r2, r0
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	207c      	movs	r0, #124	@ 0x7c
 8004baa:	f002 ff17 	bl	80079dc <ST7735_DrawString>
					on_off = true;
 8004bae:	4b4f      	ldr	r3, [pc, #316]	@ (8004cec <menu_handler+0x9f0>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e13d      	b.n	8004e32 <menu_handler+0xb36>
				}
			}
			else // process memory pre-seting selection
			{
				if(on_off) //write SP as M to FLASH
 8004bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8004cec <menu_handler+0x9f0>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d017      	beq.n	8004bee <menu_handler+0x8f2>
				{
					save_settings(scaleU, scaleI, scaleUsp, scaleIsp, mem_sel, uSP, iSP);
 8004bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8004cf8 <menu_handler+0x9fc>)
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8004cfc <menu_handler+0xa00>)
 8004bc4:	681c      	ldr	r4, [r3, #0]
 8004bc6:	4b4e      	ldr	r3, [pc, #312]	@ (8004d00 <menu_handler+0xa04>)
 8004bc8:	681d      	ldr	r5, [r3, #0]
 8004bca:	4b4e      	ldr	r3, [pc, #312]	@ (8004d04 <menu_handler+0xa08>)
 8004bcc:	681e      	ldr	r6, [r3, #0]
 8004bce:	4b4e      	ldr	r3, [pc, #312]	@ (8004d08 <menu_handler+0xa0c>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	569a      	ldrsb	r2, [r3, r2]
 8004bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8004d0c <menu_handler+0xa10>)
 8004bd6:	6819      	ldr	r1, [r3, #0]
 8004bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8004d10 <menu_handler+0xa14>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	9302      	str	r3, [sp, #8]
 8004bde:	9101      	str	r1, [sp, #4]
 8004be0:	9200      	str	r2, [sp, #0]
 8004be2:	1c33      	adds	r3, r6, #0
 8004be4:	1c2a      	adds	r2, r5, #0
 8004be6:	1c21      	adds	r1, r4, #0
 8004be8:	f001 ff90 	bl	8006b0c <save_settings>
 8004bec:	e121      	b.n	8004e32 <menu_handler+0xb36>
				}
				else //get M values from FLASH
				{
					if(*( uint32_t *)(MEM_SEL_ARR_ADDR+(8*mem_sel)) != 0xFFFFFFFF)
 8004bee:	4b46      	ldr	r3, [pc, #280]	@ (8004d08 <menu_handler+0xa0c>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	b25b      	sxtb	r3, r3
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	4a47      	ldr	r2, [pc, #284]	@ (8004d14 <menu_handler+0xa18>)
 8004bf8:	4694      	mov	ip, r2
 8004bfa:	4463      	add	r3, ip
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	d009      	beq.n	8004c16 <menu_handler+0x91a>
						uSP=*( float *)(MEM_SEL_ARR_ADDR+(8*mem_sel));
 8004c02:	4b41      	ldr	r3, [pc, #260]	@ (8004d08 <menu_handler+0xa0c>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	b25b      	sxtb	r3, r3
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4a42      	ldr	r2, [pc, #264]	@ (8004d14 <menu_handler+0xa18>)
 8004c0c:	4694      	mov	ip, r2
 8004c0e:	4463      	add	r3, ip
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b3e      	ldr	r3, [pc, #248]	@ (8004d0c <menu_handler+0xa10>)
 8004c14:	601a      	str	r2, [r3, #0]
					ptr = float_to_char(uSP, float_for_LCD);
 8004c16:	4b3d      	ldr	r3, [pc, #244]	@ (8004d0c <menu_handler+0xa10>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d18 <menu_handler+0xa1c>)
 8004c1c:	0011      	movs	r1, r2
 8004c1e:	1c18      	adds	r0, r3, #0
 8004c20:	f001 f994 	bl	8005f4c <float_to_char>
 8004c24:	0002      	movs	r2, r0
 8004c26:	4b29      	ldr	r3, [pc, #164]	@ (8004ccc <menu_handler+0x9d0>)
 8004c28:	601a      	str	r2, [r3, #0]
					if(uSP<1)
 8004c2a:	4b38      	ldr	r3, [pc, #224]	@ (8004d0c <menu_handler+0xa10>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	21fe      	movs	r1, #254	@ 0xfe
 8004c30:	0589      	lsls	r1, r1, #22
 8004c32:	1c18      	adds	r0, r3, #0
 8004c34:	f7fb fc2c 	bl	8000490 <__aeabi_fcmplt>
 8004c38:	1e03      	subs	r3, r0, #0
 8004c3a:	d01f      	beq.n	8004c7c <menu_handler+0x980>
					{
						ST7735_DrawString(5,84," 0",Font_11x18,WHITE,BLACK);
 8004c3c:	4b24      	ldr	r3, [pc, #144]	@ (8004cd0 <menu_handler+0x9d4>)
 8004c3e:	4837      	ldr	r0, [pc, #220]	@ (8004d1c <menu_handler+0xa20>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	9202      	str	r2, [sp, #8]
 8004c44:	4a23      	ldr	r2, [pc, #140]	@ (8004cd4 <menu_handler+0x9d8>)
 8004c46:	9201      	str	r2, [sp, #4]
 8004c48:	466a      	mov	r2, sp
 8004c4a:	6859      	ldr	r1, [r3, #4]
 8004c4c:	6011      	str	r1, [r2, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	0002      	movs	r2, r0
 8004c52:	2154      	movs	r1, #84	@ 0x54
 8004c54:	2005      	movs	r0, #5
 8004c56:	f002 fec1 	bl	80079dc <ST7735_DrawString>
						ST7735_DrawString(27,84,ptr,Font_11x18,WHITE,BLACK);
 8004c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ccc <menu_handler+0x9d0>)
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004cd0 <menu_handler+0x9d4>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	9202      	str	r2, [sp, #8]
 8004c64:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd4 <menu_handler+0x9d8>)
 8004c66:	9201      	str	r2, [sp, #4]
 8004c68:	466a      	mov	r2, sp
 8004c6a:	6859      	ldr	r1, [r3, #4]
 8004c6c:	6011      	str	r1, [r2, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	0002      	movs	r2, r0
 8004c72:	2154      	movs	r1, #84	@ 0x54
 8004c74:	201b      	movs	r0, #27
 8004c76:	f002 feb1 	bl	80079dc <ST7735_DrawString>
 8004c7a:	e065      	b.n	8004d48 <menu_handler+0xa4c>
					}
					else
					{
						if(uSP<10)
 8004c7c:	4b23      	ldr	r3, [pc, #140]	@ (8004d0c <menu_handler+0xa10>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4927      	ldr	r1, [pc, #156]	@ (8004d20 <menu_handler+0xa24>)
 8004c82:	1c18      	adds	r0, r3, #0
 8004c84:	f7fb fc04 	bl	8000490 <__aeabi_fcmplt>
 8004c88:	1e03      	subs	r3, r0, #0
 8004c8a:	d04d      	beq.n	8004d28 <menu_handler+0xa2c>
						{
							ST7735_DrawString(5,84," ",Font_11x18,WHITE,BLACK);
 8004c8c:	4b10      	ldr	r3, [pc, #64]	@ (8004cd0 <menu_handler+0x9d4>)
 8004c8e:	4825      	ldr	r0, [pc, #148]	@ (8004d24 <menu_handler+0xa28>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	9202      	str	r2, [sp, #8]
 8004c94:	4a0f      	ldr	r2, [pc, #60]	@ (8004cd4 <menu_handler+0x9d8>)
 8004c96:	9201      	str	r2, [sp, #4]
 8004c98:	466a      	mov	r2, sp
 8004c9a:	6859      	ldr	r1, [r3, #4]
 8004c9c:	6011      	str	r1, [r2, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	0002      	movs	r2, r0
 8004ca2:	2154      	movs	r1, #84	@ 0x54
 8004ca4:	2005      	movs	r0, #5
 8004ca6:	f002 fe99 	bl	80079dc <ST7735_DrawString>
							ST7735_DrawString(16,84,ptr,Font_11x18,WHITE,BLACK);
 8004caa:	4b08      	ldr	r3, [pc, #32]	@ (8004ccc <menu_handler+0x9d0>)
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	4b08      	ldr	r3, [pc, #32]	@ (8004cd0 <menu_handler+0x9d4>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	9202      	str	r2, [sp, #8]
 8004cb4:	4a07      	ldr	r2, [pc, #28]	@ (8004cd4 <menu_handler+0x9d8>)
 8004cb6:	9201      	str	r2, [sp, #4]
 8004cb8:	466a      	mov	r2, sp
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	6011      	str	r1, [r2, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	0002      	movs	r2, r0
 8004cc2:	2154      	movs	r1, #84	@ 0x54
 8004cc4:	2010      	movs	r0, #16
 8004cc6:	f002 fe89 	bl	80079dc <ST7735_DrawString>
 8004cca:	e03d      	b.n	8004d48 <menu_handler+0xa4c>
 8004ccc:	2000038c 	.word	0x2000038c
 8004cd0:	20000038 	.word	0x20000038
 8004cd4:	0000ffff 	.word	0x0000ffff
 8004cd8:	0800eca4 	.word	0x0800eca4
 8004cdc:	20000383 	.word	0x20000383
 8004ce0:	20000384 	.word	0x20000384
 8004ce4:	20000014 	.word	0x20000014
 8004ce8:	08018ea8 	.word	0x08018ea8
 8004cec:	20000390 	.word	0x20000390
 8004cf0:	0800ecc4 	.word	0x0800ecc4
 8004cf4:	0800ecc0 	.word	0x0800ecc0
 8004cf8:	20000004 	.word	0x20000004
 8004cfc:	20000008 	.word	0x20000008
 8004d00:	2000000c 	.word	0x2000000c
 8004d04:	20000010 	.word	0x20000010
 8004d08:	20000392 	.word	0x20000392
 8004d0c:	20000018 	.word	0x20000018
 8004d10:	2000001c 	.word	0x2000001c
 8004d14:	0803f810 	.word	0x0803f810
 8004d18:	20000378 	.word	0x20000378
 8004d1c:	0800ec94 	.word	0x0800ec94
 8004d20:	41200000 	.word	0x41200000
 8004d24:	0800ec98 	.word	0x0800ec98
						}
						else ST7735_DrawString(5,84,ptr,Font_11x18,WHITE,BLACK);
 8004d28:	4b45      	ldr	r3, [pc, #276]	@ (8004e40 <menu_handler+0xb44>)
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	4b45      	ldr	r3, [pc, #276]	@ (8004e44 <menu_handler+0xb48>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	9202      	str	r2, [sp, #8]
 8004d32:	4a45      	ldr	r2, [pc, #276]	@ (8004e48 <menu_handler+0xb4c>)
 8004d34:	9201      	str	r2, [sp, #4]
 8004d36:	466a      	mov	r2, sp
 8004d38:	6859      	ldr	r1, [r3, #4]
 8004d3a:	6011      	str	r1, [r2, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	0002      	movs	r2, r0
 8004d40:	2154      	movs	r1, #84	@ 0x54
 8004d42:	2005      	movs	r0, #5
 8004d44:	f002 fe4a 	bl	80079dc <ST7735_DrawString>
					}
					ST7735_DrawString( 60,84,"0V",Font_11x18,WHITE,BLACK);
 8004d48:	4b3e      	ldr	r3, [pc, #248]	@ (8004e44 <menu_handler+0xb48>)
 8004d4a:	4840      	ldr	r0, [pc, #256]	@ (8004e4c <menu_handler+0xb50>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	9202      	str	r2, [sp, #8]
 8004d50:	4a3d      	ldr	r2, [pc, #244]	@ (8004e48 <menu_handler+0xb4c>)
 8004d52:	9201      	str	r2, [sp, #4]
 8004d54:	466a      	mov	r2, sp
 8004d56:	6859      	ldr	r1, [r3, #4]
 8004d58:	6011      	str	r1, [r2, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	0002      	movs	r2, r0
 8004d5e:	2154      	movs	r1, #84	@ 0x54
 8004d60:	203c      	movs	r0, #60	@ 0x3c
 8004d62:	f002 fe3b 	bl	80079dc <ST7735_DrawString>

					if(*( uint32_t *)(MEM_SEL_ARR_ADDR+(8*mem_sel)+4) != 0xFFFFFFFF)
 8004d66:	4b3a      	ldr	r3, [pc, #232]	@ (8004e50 <menu_handler+0xb54>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	b25b      	sxtb	r3, r3
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	4a39      	ldr	r2, [pc, #228]	@ (8004e54 <menu_handler+0xb58>)
 8004d70:	4694      	mov	ip, r2
 8004d72:	4463      	add	r3, ip
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	d009      	beq.n	8004d8e <menu_handler+0xa92>
						iSP=*( float *)(MEM_SEL_ARR_ADDR+(8*mem_sel)+4);
 8004d7a:	4b35      	ldr	r3, [pc, #212]	@ (8004e50 <menu_handler+0xb54>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	b25b      	sxtb	r3, r3
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4a34      	ldr	r2, [pc, #208]	@ (8004e54 <menu_handler+0xb58>)
 8004d84:	4694      	mov	ip, r2
 8004d86:	4463      	add	r3, ip
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4b33      	ldr	r3, [pc, #204]	@ (8004e58 <menu_handler+0xb5c>)
 8004d8c:	601a      	str	r2, [r3, #0]
					ptr = float_to_char(iSP, float_for_LCD);
 8004d8e:	4b32      	ldr	r3, [pc, #200]	@ (8004e58 <menu_handler+0xb5c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a32      	ldr	r2, [pc, #200]	@ (8004e5c <menu_handler+0xb60>)
 8004d94:	0011      	movs	r1, r2
 8004d96:	1c18      	adds	r0, r3, #0
 8004d98:	f001 f8d8 	bl	8005f4c <float_to_char>
 8004d9c:	0002      	movs	r2, r0
 8004d9e:	4b28      	ldr	r3, [pc, #160]	@ (8004e40 <menu_handler+0xb44>)
 8004da0:	601a      	str	r2, [r3, #0]
					if(iSP<1)
 8004da2:	4b2d      	ldr	r3, [pc, #180]	@ (8004e58 <menu_handler+0xb5c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	21fe      	movs	r1, #254	@ 0xfe
 8004da8:	0589      	lsls	r1, r1, #22
 8004daa:	1c18      	adds	r0, r3, #0
 8004dac:	f7fb fb70 	bl	8000490 <__aeabi_fcmplt>
 8004db0:	1e03      	subs	r3, r0, #0
 8004db2:	d01f      	beq.n	8004df4 <menu_handler+0xaf8>
					{
						ST7735_DrawString(89,84,"0",Font_11x18,WHITE,BLACK);
 8004db4:	4b23      	ldr	r3, [pc, #140]	@ (8004e44 <menu_handler+0xb48>)
 8004db6:	482a      	ldr	r0, [pc, #168]	@ (8004e60 <menu_handler+0xb64>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	9202      	str	r2, [sp, #8]
 8004dbc:	4a22      	ldr	r2, [pc, #136]	@ (8004e48 <menu_handler+0xb4c>)
 8004dbe:	9201      	str	r2, [sp, #4]
 8004dc0:	466a      	mov	r2, sp
 8004dc2:	6859      	ldr	r1, [r3, #4]
 8004dc4:	6011      	str	r1, [r2, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	0002      	movs	r2, r0
 8004dca:	2154      	movs	r1, #84	@ 0x54
 8004dcc:	2059      	movs	r0, #89	@ 0x59
 8004dce:	f002 fe05 	bl	80079dc <ST7735_DrawString>
						ST7735_DrawString(100,84,ptr,Font_11x18,WHITE,BLACK);
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e40 <menu_handler+0xb44>)
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e44 <menu_handler+0xb48>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	9202      	str	r2, [sp, #8]
 8004ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8004e48 <menu_handler+0xb4c>)
 8004dde:	9201      	str	r2, [sp, #4]
 8004de0:	466a      	mov	r2, sp
 8004de2:	6859      	ldr	r1, [r3, #4]
 8004de4:	6011      	str	r1, [r2, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	0002      	movs	r2, r0
 8004dea:	2154      	movs	r1, #84	@ 0x54
 8004dec:	2064      	movs	r0, #100	@ 0x64
 8004dee:	f002 fdf5 	bl	80079dc <ST7735_DrawString>
 8004df2:	e00f      	b.n	8004e14 <menu_handler+0xb18>
					}
					else ST7735_DrawString(89,84,ptr,Font_11x18,WHITE,BLACK);
 8004df4:	4b12      	ldr	r3, [pc, #72]	@ (8004e40 <menu_handler+0xb44>)
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	4b12      	ldr	r3, [pc, #72]	@ (8004e44 <menu_handler+0xb48>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	9202      	str	r2, [sp, #8]
 8004dfe:	4a12      	ldr	r2, [pc, #72]	@ (8004e48 <menu_handler+0xb4c>)
 8004e00:	9201      	str	r2, [sp, #4]
 8004e02:	466a      	mov	r2, sp
 8004e04:	6859      	ldr	r1, [r3, #4]
 8004e06:	6011      	str	r1, [r2, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	2154      	movs	r1, #84	@ 0x54
 8004e0e:	2059      	movs	r0, #89	@ 0x59
 8004e10:	f002 fde4 	bl	80079dc <ST7735_DrawString>
					ST7735_DrawString(144,84,"A",Font_11x18,WHITE,BLACK);
 8004e14:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <menu_handler+0xb48>)
 8004e16:	4813      	ldr	r0, [pc, #76]	@ (8004e64 <menu_handler+0xb68>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	9202      	str	r2, [sp, #8]
 8004e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e48 <menu_handler+0xb4c>)
 8004e1e:	9201      	str	r2, [sp, #4]
 8004e20:	466a      	mov	r2, sp
 8004e22:	6859      	ldr	r1, [r3, #4]
 8004e24:	6011      	str	r1, [r2, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	0002      	movs	r2, r0
 8004e2a:	2154      	movs	r1, #84	@ 0x54
 8004e2c:	2090      	movs	r0, #144	@ 0x90
 8004e2e:	f002 fdd5 	bl	80079dc <ST7735_DrawString>
				}
			}
		}
		btn=NO_PRESS;
 8004e32:	4b0d      	ldr	r3, [pc, #52]	@ (8004e68 <menu_handler+0xb6c>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
	}
}
 8004e38:	46c0      	nop			@ (mov r8, r8)
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b001      	add	sp, #4
 8004e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e40:	2000038c 	.word	0x2000038c
 8004e44:	20000038 	.word	0x20000038
 8004e48:	0000ffff 	.word	0x0000ffff
 8004e4c:	0800ec9c 	.word	0x0800ec9c
 8004e50:	20000392 	.word	0x20000392
 8004e54:	0803f814 	.word	0x0803f814
 8004e58:	2000001c 	.word	0x2000001c
 8004e5c:	20000378 	.word	0x20000378
 8004e60:	0800eca0 	.word	0x0800eca0
 8004e64:	0800eca4 	.word	0x0800eca4
 8004e68:	20000384 	.word	0x20000384

08004e6c <device_settings>:

void device_settings(void)
{
 8004e6c:	b590      	push	{r4, r7, lr}
 8004e6e:	b089      	sub	sp, #36	@ 0x24
 8004e70:	af04      	add	r7, sp, #16
	while(!HAL_GPIO_ReadPin(SW_T_GPIO_Port,SW_T_Pin)); // wait Button is released
 8004e72:	46c0      	nop			@ (mov r8, r8)
 8004e74:	4ba5      	ldr	r3, [pc, #660]	@ (800510c <device_settings+0x2a0>)
 8004e76:	2101      	movs	r1, #1
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f004 ff13 	bl	8009ca4 <HAL_GPIO_ReadPin>
 8004e7e:	1e03      	subs	r3, r0, #0
 8004e80:	d0f8      	beq.n	8004e74 <device_settings+0x8>
    HAL_Delay(200);
 8004e82:	20c8      	movs	r0, #200	@ 0xc8
 8004e84:	f003 fa26 	bl	80082d4 <HAL_Delay>
	btn=NO_PRESS;
 8004e88:	4ba1      	ldr	r3, [pc, #644]	@ (8005110 <device_settings+0x2a4>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
	ST7735_FillScreen(BLACK);
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f002 ff86 	bl	8007da0 <ST7735_FillScreen>

	float scaleU_tmp = scaleU, scaleI_tmp = scaleI,
 8004e94:	4b9f      	ldr	r3, [pc, #636]	@ (8005114 <device_settings+0x2a8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	4b9f      	ldr	r3, [pc, #636]	@ (8005118 <device_settings+0x2ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60bb      	str	r3, [r7, #8]
		scaleUsp_tmp = scaleUsp, scaleIsp_tmp = scaleIsp;
 8004ea0:	4b9e      	ldr	r3, [pc, #632]	@ (800511c <device_settings+0x2b0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	4b9e      	ldr	r3, [pc, #632]	@ (8005120 <device_settings+0x2b4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	603b      	str	r3, [r7, #0]

	ST7735_DrawString(1,2,"C>Udsp:",Font_11x18,WHITE, BLACK);
 8004eac:	4b9d      	ldr	r3, [pc, #628]	@ (8005124 <device_settings+0x2b8>)
 8004eae:	489e      	ldr	r0, [pc, #632]	@ (8005128 <device_settings+0x2bc>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	9202      	str	r2, [sp, #8]
 8004eb4:	4a9d      	ldr	r2, [pc, #628]	@ (800512c <device_settings+0x2c0>)
 8004eb6:	9201      	str	r2, [sp, #4]
 8004eb8:	466a      	mov	r2, sp
 8004eba:	6859      	ldr	r1, [r3, #4]
 8004ebc:	6011      	str	r1, [r2, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	0002      	movs	r2, r0
 8004ec2:	2102      	movs	r1, #2
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	f002 fd89 	bl	80079dc <ST7735_DrawString>
	ptr = float_to_char(scaleU, float_for_LCD);
 8004eca:	4b92      	ldr	r3, [pc, #584]	@ (8005114 <device_settings+0x2a8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a98      	ldr	r2, [pc, #608]	@ (8005130 <device_settings+0x2c4>)
 8004ed0:	0011      	movs	r1, r2
 8004ed2:	1c18      	adds	r0, r3, #0
 8004ed4:	f001 f83a 	bl	8005f4c <float_to_char>
 8004ed8:	0002      	movs	r2, r0
 8004eda:	4b96      	ldr	r3, [pc, #600]	@ (8005134 <device_settings+0x2c8>)
 8004edc:	601a      	str	r2, [r3, #0]
	ST7735_DrawString(81,2,ptr,Font_11x18,WHITE, BLACK);
 8004ede:	4b95      	ldr	r3, [pc, #596]	@ (8005134 <device_settings+0x2c8>)
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	4b90      	ldr	r3, [pc, #576]	@ (8005124 <device_settings+0x2b8>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	9202      	str	r2, [sp, #8]
 8004ee8:	4a90      	ldr	r2, [pc, #576]	@ (800512c <device_settings+0x2c0>)
 8004eea:	9201      	str	r2, [sp, #4]
 8004eec:	466a      	mov	r2, sp
 8004eee:	6859      	ldr	r1, [r3, #4]
 8004ef0:	6011      	str	r1, [r2, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	0002      	movs	r2, r0
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	2051      	movs	r0, #81	@ 0x51
 8004efa:	f002 fd6f 	bl	80079dc <ST7735_DrawString>

	ST7735_DrawString(1,22,"C>Idsp:",Font_11x18,WHITE, BLACK);
 8004efe:	4b89      	ldr	r3, [pc, #548]	@ (8005124 <device_settings+0x2b8>)
 8004f00:	488d      	ldr	r0, [pc, #564]	@ (8005138 <device_settings+0x2cc>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	9202      	str	r2, [sp, #8]
 8004f06:	4a89      	ldr	r2, [pc, #548]	@ (800512c <device_settings+0x2c0>)
 8004f08:	9201      	str	r2, [sp, #4]
 8004f0a:	466a      	mov	r2, sp
 8004f0c:	6859      	ldr	r1, [r3, #4]
 8004f0e:	6011      	str	r1, [r2, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	0002      	movs	r2, r0
 8004f14:	2116      	movs	r1, #22
 8004f16:	2001      	movs	r0, #1
 8004f18:	f002 fd60 	bl	80079dc <ST7735_DrawString>
	ptr = float_to_char(scaleI, float_for_LCD);
 8004f1c:	4b7e      	ldr	r3, [pc, #504]	@ (8005118 <device_settings+0x2ac>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a83      	ldr	r2, [pc, #524]	@ (8005130 <device_settings+0x2c4>)
 8004f22:	0011      	movs	r1, r2
 8004f24:	1c18      	adds	r0, r3, #0
 8004f26:	f001 f811 	bl	8005f4c <float_to_char>
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	4b81      	ldr	r3, [pc, #516]	@ (8005134 <device_settings+0x2c8>)
 8004f2e:	601a      	str	r2, [r3, #0]
	ST7735_DrawString(81,22,ptr,Font_11x18,WHITE, BLACK);
 8004f30:	4b80      	ldr	r3, [pc, #512]	@ (8005134 <device_settings+0x2c8>)
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	4b7b      	ldr	r3, [pc, #492]	@ (8005124 <device_settings+0x2b8>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	9202      	str	r2, [sp, #8]
 8004f3a:	4a7c      	ldr	r2, [pc, #496]	@ (800512c <device_settings+0x2c0>)
 8004f3c:	9201      	str	r2, [sp, #4]
 8004f3e:	466a      	mov	r2, sp
 8004f40:	6859      	ldr	r1, [r3, #4]
 8004f42:	6011      	str	r1, [r2, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	0002      	movs	r2, r0
 8004f48:	2116      	movs	r1, #22
 8004f4a:	2051      	movs	r0, #81	@ 0x51
 8004f4c:	f002 fd46 	bl	80079dc <ST7735_DrawString>

	ST7735_DrawString(1,42,"C>Ustp:",Font_11x18,WHITE, BLACK);
 8004f50:	4b74      	ldr	r3, [pc, #464]	@ (8005124 <device_settings+0x2b8>)
 8004f52:	487a      	ldr	r0, [pc, #488]	@ (800513c <device_settings+0x2d0>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	9202      	str	r2, [sp, #8]
 8004f58:	4a74      	ldr	r2, [pc, #464]	@ (800512c <device_settings+0x2c0>)
 8004f5a:	9201      	str	r2, [sp, #4]
 8004f5c:	466a      	mov	r2, sp
 8004f5e:	6859      	ldr	r1, [r3, #4]
 8004f60:	6011      	str	r1, [r2, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	0002      	movs	r2, r0
 8004f66:	212a      	movs	r1, #42	@ 0x2a
 8004f68:	2001      	movs	r0, #1
 8004f6a:	f002 fd37 	bl	80079dc <ST7735_DrawString>
	ptr = float_to_char(scaleUsp, float_for_LCD);
 8004f6e:	4b6b      	ldr	r3, [pc, #428]	@ (800511c <device_settings+0x2b0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a6f      	ldr	r2, [pc, #444]	@ (8005130 <device_settings+0x2c4>)
 8004f74:	0011      	movs	r1, r2
 8004f76:	1c18      	adds	r0, r3, #0
 8004f78:	f000 ffe8 	bl	8005f4c <float_to_char>
 8004f7c:	0002      	movs	r2, r0
 8004f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8005134 <device_settings+0x2c8>)
 8004f80:	601a      	str	r2, [r3, #0]
	ST7735_DrawString(81,42,ptr,Font_11x18,WHITE, BLACK);
 8004f82:	4b6c      	ldr	r3, [pc, #432]	@ (8005134 <device_settings+0x2c8>)
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	4b67      	ldr	r3, [pc, #412]	@ (8005124 <device_settings+0x2b8>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	9202      	str	r2, [sp, #8]
 8004f8c:	4a67      	ldr	r2, [pc, #412]	@ (800512c <device_settings+0x2c0>)
 8004f8e:	9201      	str	r2, [sp, #4]
 8004f90:	466a      	mov	r2, sp
 8004f92:	6859      	ldr	r1, [r3, #4]
 8004f94:	6011      	str	r1, [r2, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	0002      	movs	r2, r0
 8004f9a:	212a      	movs	r1, #42	@ 0x2a
 8004f9c:	2051      	movs	r0, #81	@ 0x51
 8004f9e:	f002 fd1d 	bl	80079dc <ST7735_DrawString>

	ST7735_DrawString(1,62,"C>Istp:",Font_11x18,WHITE, BLACK);
 8004fa2:	4b60      	ldr	r3, [pc, #384]	@ (8005124 <device_settings+0x2b8>)
 8004fa4:	4866      	ldr	r0, [pc, #408]	@ (8005140 <device_settings+0x2d4>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	9202      	str	r2, [sp, #8]
 8004faa:	4a60      	ldr	r2, [pc, #384]	@ (800512c <device_settings+0x2c0>)
 8004fac:	9201      	str	r2, [sp, #4]
 8004fae:	466a      	mov	r2, sp
 8004fb0:	6859      	ldr	r1, [r3, #4]
 8004fb2:	6011      	str	r1, [r2, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	213e      	movs	r1, #62	@ 0x3e
 8004fba:	2001      	movs	r0, #1
 8004fbc:	f002 fd0e 	bl	80079dc <ST7735_DrawString>
	ptr = float_to_char(scaleIsp, float_for_LCD);
 8004fc0:	4b57      	ldr	r3, [pc, #348]	@ (8005120 <device_settings+0x2b4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a5a      	ldr	r2, [pc, #360]	@ (8005130 <device_settings+0x2c4>)
 8004fc6:	0011      	movs	r1, r2
 8004fc8:	1c18      	adds	r0, r3, #0
 8004fca:	f000 ffbf 	bl	8005f4c <float_to_char>
 8004fce:	0002      	movs	r2, r0
 8004fd0:	4b58      	ldr	r3, [pc, #352]	@ (8005134 <device_settings+0x2c8>)
 8004fd2:	601a      	str	r2, [r3, #0]
	ST7735_DrawString(81,62,ptr,Font_11x18,WHITE, BLACK);
 8004fd4:	4b57      	ldr	r3, [pc, #348]	@ (8005134 <device_settings+0x2c8>)
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	4b52      	ldr	r3, [pc, #328]	@ (8005124 <device_settings+0x2b8>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	9202      	str	r2, [sp, #8]
 8004fde:	4a53      	ldr	r2, [pc, #332]	@ (800512c <device_settings+0x2c0>)
 8004fe0:	9201      	str	r2, [sp, #4]
 8004fe2:	466a      	mov	r2, sp
 8004fe4:	6859      	ldr	r1, [r3, #4]
 8004fe6:	6011      	str	r1, [r2, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	0002      	movs	r2, r0
 8004fec:	213e      	movs	r1, #62	@ 0x3e
 8004fee:	2051      	movs	r0, #81	@ 0x51
 8004ff0:	f002 fcf4 	bl	80079dc <ST7735_DrawString>

	ST7735_DrawString(3,107,"EXIT SAVE&EXIT",Font_11x18,WHITE, BLACK);
 8004ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8005124 <device_settings+0x2b8>)
 8004ff6:	4853      	ldr	r0, [pc, #332]	@ (8005144 <device_settings+0x2d8>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	9202      	str	r2, [sp, #8]
 8004ffc:	4a4b      	ldr	r2, [pc, #300]	@ (800512c <device_settings+0x2c0>)
 8004ffe:	9201      	str	r2, [sp, #4]
 8005000:	466a      	mov	r2, sp
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	6011      	str	r1, [r2, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	0002      	movs	r2, r0
 800500a:	216b      	movs	r1, #107	@ 0x6b
 800500c:	2003      	movs	r0, #3
 800500e:	f002 fce5 	bl	80079dc <ST7735_DrawString>

	ST7735_DrawRect(79, 0, 80, 21, WHITE);
 8005012:	4b46      	ldr	r3, [pc, #280]	@ (800512c <device_settings+0x2c0>)
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	2315      	movs	r3, #21
 8005018:	2250      	movs	r2, #80	@ 0x50
 800501a:	2100      	movs	r1, #0
 800501c:	204f      	movs	r0, #79	@ 0x4f
 800501e:	f002 ff4f 	bl	8007ec0 <ST7735_DrawRect>


	while ((btn != PRESS_LONG) || ((ds_mnu_sel != EXIT)&&(ds_mnu_sel != SAVE_EXIT)))
 8005022:	e375      	b.n	8005710 <device_settings+0x8a4>
	{
		if(btn == PRESS_NORM)
 8005024:	4b3a      	ldr	r3, [pc, #232]	@ (8005110 <device_settings+0x2a4>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d000      	beq.n	800502e <device_settings+0x1c2>
 800502c:	e0a7      	b.n	800517e <device_settings+0x312>
		{
			 switch(ds_mnu_sel)
 800502e:	4b46      	ldr	r3, [pc, #280]	@ (8005148 <device_settings+0x2dc>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b05      	cmp	r3, #5
 8005034:	d900      	bls.n	8005038 <device_settings+0x1cc>
 8005036:	e09f      	b.n	8005178 <device_settings+0x30c>
 8005038:	009a      	lsls	r2, r3, #2
 800503a:	4b44      	ldr	r3, [pc, #272]	@ (800514c <device_settings+0x2e0>)
 800503c:	18d3      	adds	r3, r2, r3
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	469f      	mov	pc, r3
			{
			case U_DISP:
			{
				ST7735_DrawRect(79, 0, 80, 21, BLACK);
 8005042:	2300      	movs	r3, #0
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	2315      	movs	r3, #21
 8005048:	2250      	movs	r2, #80	@ 0x50
 800504a:	2100      	movs	r1, #0
 800504c:	204f      	movs	r0, #79	@ 0x4f
 800504e:	f002 ff37 	bl	8007ec0 <ST7735_DrawRect>
				ST7735_DrawRect(79, 20, 80, 21, WHITE);
 8005052:	4b36      	ldr	r3, [pc, #216]	@ (800512c <device_settings+0x2c0>)
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2315      	movs	r3, #21
 8005058:	2250      	movs	r2, #80	@ 0x50
 800505a:	2114      	movs	r1, #20
 800505c:	204f      	movs	r0, #79	@ 0x4f
 800505e:	f002 ff2f 	bl	8007ec0 <ST7735_DrawRect>
				ds_mnu_sel = I_DISP;
 8005062:	4b39      	ldr	r3, [pc, #228]	@ (8005148 <device_settings+0x2dc>)
 8005064:	2201      	movs	r2, #1
 8005066:	701a      	strb	r2, [r3, #0]
				break;
 8005068:	e086      	b.n	8005178 <device_settings+0x30c>
			}
			case I_DISP:
			{
				ST7735_DrawRect(79, 20, 80, 21, BLACK);
 800506a:	2300      	movs	r3, #0
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	2315      	movs	r3, #21
 8005070:	2250      	movs	r2, #80	@ 0x50
 8005072:	2114      	movs	r1, #20
 8005074:	204f      	movs	r0, #79	@ 0x4f
 8005076:	f002 ff23 	bl	8007ec0 <ST7735_DrawRect>
				ST7735_DrawRect(79, 40, 80, 21, WHITE);
 800507a:	4b2c      	ldr	r3, [pc, #176]	@ (800512c <device_settings+0x2c0>)
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	2315      	movs	r3, #21
 8005080:	2250      	movs	r2, #80	@ 0x50
 8005082:	2128      	movs	r1, #40	@ 0x28
 8005084:	204f      	movs	r0, #79	@ 0x4f
 8005086:	f002 ff1b 	bl	8007ec0 <ST7735_DrawRect>
				ds_mnu_sel = U_SETP;
 800508a:	4b2f      	ldr	r3, [pc, #188]	@ (8005148 <device_settings+0x2dc>)
 800508c:	2202      	movs	r2, #2
 800508e:	701a      	strb	r2, [r3, #0]
				break;
 8005090:	e072      	b.n	8005178 <device_settings+0x30c>
			}
			case U_SETP:
			{
				ST7735_DrawRect(79, 40, 80, 21, BLACK);
 8005092:	2300      	movs	r3, #0
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	2315      	movs	r3, #21
 8005098:	2250      	movs	r2, #80	@ 0x50
 800509a:	2128      	movs	r1, #40	@ 0x28
 800509c:	204f      	movs	r0, #79	@ 0x4f
 800509e:	f002 ff0f 	bl	8007ec0 <ST7735_DrawRect>
				ST7735_DrawRect(79, 60, 80, 21, WHITE);
 80050a2:	4b22      	ldr	r3, [pc, #136]	@ (800512c <device_settings+0x2c0>)
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	2315      	movs	r3, #21
 80050a8:	2250      	movs	r2, #80	@ 0x50
 80050aa:	213c      	movs	r1, #60	@ 0x3c
 80050ac:	204f      	movs	r0, #79	@ 0x4f
 80050ae:	f002 ff07 	bl	8007ec0 <ST7735_DrawRect>
				ds_mnu_sel = I_SETP;
 80050b2:	4b25      	ldr	r3, [pc, #148]	@ (8005148 <device_settings+0x2dc>)
 80050b4:	2203      	movs	r2, #3
 80050b6:	701a      	strb	r2, [r3, #0]
				break;
 80050b8:	e05e      	b.n	8005178 <device_settings+0x30c>
			}
			case I_SETP:
			{
				ST7735_DrawRect(79, 60, 80, 21, BLACK);
 80050ba:	2300      	movs	r3, #0
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	2315      	movs	r3, #21
 80050c0:	2250      	movs	r2, #80	@ 0x50
 80050c2:	213c      	movs	r1, #60	@ 0x3c
 80050c4:	204f      	movs	r0, #79	@ 0x4f
 80050c6:	f002 fefb 	bl	8007ec0 <ST7735_DrawRect>
				ST7735_DrawRect(1, 105, 49, 21, WHITE);
 80050ca:	4b18      	ldr	r3, [pc, #96]	@ (800512c <device_settings+0x2c0>)
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2315      	movs	r3, #21
 80050d0:	2231      	movs	r2, #49	@ 0x31
 80050d2:	2169      	movs	r1, #105	@ 0x69
 80050d4:	2001      	movs	r0, #1
 80050d6:	f002 fef3 	bl	8007ec0 <ST7735_DrawRect>
				ds_mnu_sel = EXIT;
 80050da:	4b1b      	ldr	r3, [pc, #108]	@ (8005148 <device_settings+0x2dc>)
 80050dc:	2204      	movs	r2, #4
 80050de:	701a      	strb	r2, [r3, #0]
				break;
 80050e0:	e04a      	b.n	8005178 <device_settings+0x30c>
			}
			case EXIT:
			{
				ST7735_DrawRect(1, 105, 49, 21, BLACK);
 80050e2:	2300      	movs	r3, #0
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	2315      	movs	r3, #21
 80050e8:	2231      	movs	r2, #49	@ 0x31
 80050ea:	2169      	movs	r1, #105	@ 0x69
 80050ec:	2001      	movs	r0, #1
 80050ee:	f002 fee7 	bl	8007ec0 <ST7735_DrawRect>
				ST7735_DrawRect(55, 105, 105 , 21, WHITE);
 80050f2:	4b0e      	ldr	r3, [pc, #56]	@ (800512c <device_settings+0x2c0>)
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	2315      	movs	r3, #21
 80050f8:	2269      	movs	r2, #105	@ 0x69
 80050fa:	2169      	movs	r1, #105	@ 0x69
 80050fc:	2037      	movs	r0, #55	@ 0x37
 80050fe:	f002 fedf 	bl	8007ec0 <ST7735_DrawRect>
				ds_mnu_sel = SAVE_EXIT;
 8005102:	4b11      	ldr	r3, [pc, #68]	@ (8005148 <device_settings+0x2dc>)
 8005104:	2205      	movs	r2, #5
 8005106:	701a      	strb	r2, [r3, #0]
				break;
 8005108:	e036      	b.n	8005178 <device_settings+0x30c>
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	48000400 	.word	0x48000400
 8005110:	20000384 	.word	0x20000384
 8005114:	20000004 	.word	0x20000004
 8005118:	20000008 	.word	0x20000008
 800511c:	2000000c 	.word	0x2000000c
 8005120:	20000010 	.word	0x20000010
 8005124:	20000038 	.word	0x20000038
 8005128:	0800ecdc 	.word	0x0800ecdc
 800512c:	0000ffff 	.word	0x0000ffff
 8005130:	20000378 	.word	0x20000378
 8005134:	2000038c 	.word	0x2000038c
 8005138:	0800ece4 	.word	0x0800ece4
 800513c:	0800ecec 	.word	0x0800ecec
 8005140:	0800ecf4 	.word	0x0800ecf4
 8005144:	0800ecfc 	.word	0x0800ecfc
 8005148:	20000385 	.word	0x20000385
 800514c:	08018ec0 	.word	0x08018ec0
			}
			case SAVE_EXIT:
			{
				ST7735_DrawRect(55, 105, 105 , 21, BLACK);
 8005150:	2300      	movs	r3, #0
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	2315      	movs	r3, #21
 8005156:	2269      	movs	r2, #105	@ 0x69
 8005158:	2169      	movs	r1, #105	@ 0x69
 800515a:	2037      	movs	r0, #55	@ 0x37
 800515c:	f002 feb0 	bl	8007ec0 <ST7735_DrawRect>
				ST7735_DrawRect(79, 0, 80, 21, WHITE);
 8005160:	4bde      	ldr	r3, [pc, #888]	@ (80054dc <device_settings+0x670>)
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2315      	movs	r3, #21
 8005166:	2250      	movs	r2, #80	@ 0x50
 8005168:	2100      	movs	r1, #0
 800516a:	204f      	movs	r0, #79	@ 0x4f
 800516c:	f002 fea8 	bl	8007ec0 <ST7735_DrawRect>
				ds_mnu_sel = U_DISP;
 8005170:	4bdb      	ldr	r3, [pc, #876]	@ (80054e0 <device_settings+0x674>)
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
				break;
 8005176:	46c0      	nop			@ (mov r8, r8)
			}
			}
			btn=NO_PRESS;
 8005178:	4bda      	ldr	r3, [pc, #872]	@ (80054e4 <device_settings+0x678>)
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
		}
		if((btn == PRESS_LONG)&&
 800517e:	4bd9      	ldr	r3, [pc, #868]	@ (80054e4 <device_settings+0x678>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b03      	cmp	r3, #3
 8005184:	d112      	bne.n	80051ac <device_settings+0x340>
				((ds_mnu_sel == U_DISP)||(ds_mnu_sel == I_DISP)||
 8005186:	4bd6      	ldr	r3, [pc, #856]	@ (80054e0 <device_settings+0x674>)
 8005188:	781b      	ldrb	r3, [r3, #0]
		if((btn == PRESS_LONG)&&
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00b      	beq.n	80051a6 <device_settings+0x33a>
				((ds_mnu_sel == U_DISP)||(ds_mnu_sel == I_DISP)||
 800518e:	4bd4      	ldr	r3, [pc, #848]	@ (80054e0 <device_settings+0x674>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d007      	beq.n	80051a6 <device_settings+0x33a>
						(ds_mnu_sel == U_SETP)||(ds_mnu_sel == I_SETP)))
 8005196:	4bd2      	ldr	r3, [pc, #840]	@ (80054e0 <device_settings+0x674>)
 8005198:	781b      	ldrb	r3, [r3, #0]
				((ds_mnu_sel == U_DISP)||(ds_mnu_sel == I_DISP)||
 800519a:	2b02      	cmp	r3, #2
 800519c:	d003      	beq.n	80051a6 <device_settings+0x33a>
						(ds_mnu_sel == U_SETP)||(ds_mnu_sel == I_SETP)))
 800519e:	4bd0      	ldr	r3, [pc, #832]	@ (80054e0 <device_settings+0x674>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d102      	bne.n	80051ac <device_settings+0x340>
																btn=NO_PRESS;
 80051a6:	4bcf      	ldr	r3, [pc, #828]	@ (80054e4 <device_settings+0x678>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
		if(enc != NO_TRN)
 80051ac:	4bce      	ldr	r3, [pc, #824]	@ (80054e8 <device_settings+0x67c>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d100      	bne.n	80051b6 <device_settings+0x34a>
 80051b4:	e2ac      	b.n	8005710 <device_settings+0x8a4>
		{
			float_for_LCD[CHAR_BUFF_SIZE]= 0;//hard stop of converted string
 80051b6:	4bcd      	ldr	r3, [pc, #820]	@ (80054ec <device_settings+0x680>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	729a      	strb	r2, [r3, #10]
			if(ds_mnu_sel == U_DISP)
 80051bc:	4bc8      	ldr	r3, [pc, #800]	@ (80054e0 <device_settings+0x674>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d000      	beq.n	80051c6 <device_settings+0x35a>
 80051c4:	e0a8      	b.n	8005318 <device_settings+0x4ac>
			{
				if(enc == INC_TRN_SLOW) scaleU = scaleU+0.001;
 80051c6:	4bc8      	ldr	r3, [pc, #800]	@ (80054e8 <device_settings+0x67c>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d111      	bne.n	80051f2 <device_settings+0x386>
 80051ce:	4bc8      	ldr	r3, [pc, #800]	@ (80054f0 <device_settings+0x684>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	1c18      	adds	r0, r3, #0
 80051d4:	f7fd fe94 	bl	8002f00 <__aeabi_f2d>
 80051d8:	4ac6      	ldr	r2, [pc, #792]	@ (80054f4 <device_settings+0x688>)
 80051da:	4bc7      	ldr	r3, [pc, #796]	@ (80054f8 <device_settings+0x68c>)
 80051dc:	f7fc f856 	bl	800128c <__aeabi_dadd>
 80051e0:	0002      	movs	r2, r0
 80051e2:	000b      	movs	r3, r1
 80051e4:	0010      	movs	r0, r2
 80051e6:	0019      	movs	r1, r3
 80051e8:	f7fd fed2 	bl	8002f90 <__aeabi_d2f>
 80051ec:	1c02      	adds	r2, r0, #0
 80051ee:	4bc0      	ldr	r3, [pc, #768]	@ (80054f0 <device_settings+0x684>)
 80051f0:	601a      	str	r2, [r3, #0]
				if((enc == INC_TRN_NORM)||(enc == INC_TRN_NORM)) scaleU = scaleU+0.1;
 80051f2:	4bbd      	ldr	r3, [pc, #756]	@ (80054e8 <device_settings+0x67c>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d003      	beq.n	8005202 <device_settings+0x396>
 80051fa:	4bbb      	ldr	r3, [pc, #748]	@ (80054e8 <device_settings+0x67c>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d111      	bne.n	8005226 <device_settings+0x3ba>
 8005202:	4bbb      	ldr	r3, [pc, #748]	@ (80054f0 <device_settings+0x684>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	1c18      	adds	r0, r3, #0
 8005208:	f7fd fe7a 	bl	8002f00 <__aeabi_f2d>
 800520c:	4abb      	ldr	r2, [pc, #748]	@ (80054fc <device_settings+0x690>)
 800520e:	4bbc      	ldr	r3, [pc, #752]	@ (8005500 <device_settings+0x694>)
 8005210:	f7fc f83c 	bl	800128c <__aeabi_dadd>
 8005214:	0002      	movs	r2, r0
 8005216:	000b      	movs	r3, r1
 8005218:	0010      	movs	r0, r2
 800521a:	0019      	movs	r1, r3
 800521c:	f7fd feb8 	bl	8002f90 <__aeabi_d2f>
 8005220:	1c02      	adds	r2, r0, #0
 8005222:	4bb3      	ldr	r3, [pc, #716]	@ (80054f0 <device_settings+0x684>)
 8005224:	601a      	str	r2, [r3, #0]
				if(enc == DEC_TRN_SLOW) scaleU = scaleU-0.001;
 8005226:	4bb0      	ldr	r3, [pc, #704]	@ (80054e8 <device_settings+0x67c>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b04      	cmp	r3, #4
 800522c:	d111      	bne.n	8005252 <device_settings+0x3e6>
 800522e:	4bb0      	ldr	r3, [pc, #704]	@ (80054f0 <device_settings+0x684>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	1c18      	adds	r0, r3, #0
 8005234:	f7fd fe64 	bl	8002f00 <__aeabi_f2d>
 8005238:	4aae      	ldr	r2, [pc, #696]	@ (80054f4 <device_settings+0x688>)
 800523a:	4baf      	ldr	r3, [pc, #700]	@ (80054f8 <device_settings+0x68c>)
 800523c:	f7fd fa96 	bl	800276c <__aeabi_dsub>
 8005240:	0002      	movs	r2, r0
 8005242:	000b      	movs	r3, r1
 8005244:	0010      	movs	r0, r2
 8005246:	0019      	movs	r1, r3
 8005248:	f7fd fea2 	bl	8002f90 <__aeabi_d2f>
 800524c:	1c02      	adds	r2, r0, #0
 800524e:	4ba8      	ldr	r3, [pc, #672]	@ (80054f0 <device_settings+0x684>)
 8005250:	601a      	str	r2, [r3, #0]
				if((enc == DEC_TRN_NORM)||(enc == DEC_TRN_NORM)) scaleU = scaleU-0.1;
 8005252:	4ba5      	ldr	r3, [pc, #660]	@ (80054e8 <device_settings+0x67c>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b05      	cmp	r3, #5
 8005258:	d003      	beq.n	8005262 <device_settings+0x3f6>
 800525a:	4ba3      	ldr	r3, [pc, #652]	@ (80054e8 <device_settings+0x67c>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b05      	cmp	r3, #5
 8005260:	d111      	bne.n	8005286 <device_settings+0x41a>
 8005262:	4ba3      	ldr	r3, [pc, #652]	@ (80054f0 <device_settings+0x684>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	1c18      	adds	r0, r3, #0
 8005268:	f7fd fe4a 	bl	8002f00 <__aeabi_f2d>
 800526c:	4aa3      	ldr	r2, [pc, #652]	@ (80054fc <device_settings+0x690>)
 800526e:	4ba4      	ldr	r3, [pc, #656]	@ (8005500 <device_settings+0x694>)
 8005270:	f7fd fa7c 	bl	800276c <__aeabi_dsub>
 8005274:	0002      	movs	r2, r0
 8005276:	000b      	movs	r3, r1
 8005278:	0010      	movs	r0, r2
 800527a:	0019      	movs	r1, r3
 800527c:	f7fd fe88 	bl	8002f90 <__aeabi_d2f>
 8005280:	1c02      	adds	r2, r0, #0
 8005282:	4b9b      	ldr	r3, [pc, #620]	@ (80054f0 <device_settings+0x684>)
 8005284:	601a      	str	r2, [r3, #0]
				if (scaleU > SCALE_U_MAX) scaleU = SCALE_U_MAX;
 8005286:	4b9a      	ldr	r3, [pc, #616]	@ (80054f0 <device_settings+0x684>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	499e      	ldr	r1, [pc, #632]	@ (8005504 <device_settings+0x698>)
 800528c:	1c18      	adds	r0, r3, #0
 800528e:	f7fb f913 	bl	80004b8 <__aeabi_fcmpgt>
 8005292:	1e03      	subs	r3, r0, #0
 8005294:	d002      	beq.n	800529c <device_settings+0x430>
 8005296:	4b96      	ldr	r3, [pc, #600]	@ (80054f0 <device_settings+0x684>)
 8005298:	4a9a      	ldr	r2, [pc, #616]	@ (8005504 <device_settings+0x698>)
 800529a:	601a      	str	r2, [r3, #0]
				if (scaleU < SCALE_U_MIN) scaleU = SCALE_U_MIN;
 800529c:	4b94      	ldr	r3, [pc, #592]	@ (80054f0 <device_settings+0x684>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2182      	movs	r1, #130	@ 0x82
 80052a2:	05c9      	lsls	r1, r1, #23
 80052a4:	1c18      	adds	r0, r3, #0
 80052a6:	f7fb f8f3 	bl	8000490 <__aeabi_fcmplt>
 80052aa:	1e03      	subs	r3, r0, #0
 80052ac:	d003      	beq.n	80052b6 <device_settings+0x44a>
 80052ae:	4b90      	ldr	r3, [pc, #576]	@ (80054f0 <device_settings+0x684>)
 80052b0:	2282      	movs	r2, #130	@ 0x82
 80052b2:	05d2      	lsls	r2, r2, #23
 80052b4:	601a      	str	r2, [r3, #0]
				ptr = float_to_char(scaleU, float_for_LCD);
 80052b6:	4b8e      	ldr	r3, [pc, #568]	@ (80054f0 <device_settings+0x684>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a8c      	ldr	r2, [pc, #560]	@ (80054ec <device_settings+0x680>)
 80052bc:	0011      	movs	r1, r2
 80052be:	1c18      	adds	r0, r3, #0
 80052c0:	f000 fe44 	bl	8005f4c <float_to_char>
 80052c4:	0002      	movs	r2, r0
 80052c6:	4b90      	ldr	r3, [pc, #576]	@ (8005508 <device_settings+0x69c>)
 80052c8:	601a      	str	r2, [r3, #0]
				ST7735_DrawString(81,2,ptr,Font_11x18,WHITE, BLACK);
 80052ca:	4b8f      	ldr	r3, [pc, #572]	@ (8005508 <device_settings+0x69c>)
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	4b8f      	ldr	r3, [pc, #572]	@ (800550c <device_settings+0x6a0>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	9202      	str	r2, [sp, #8]
 80052d4:	4a81      	ldr	r2, [pc, #516]	@ (80054dc <device_settings+0x670>)
 80052d6:	9201      	str	r2, [sp, #4]
 80052d8:	466a      	mov	r2, sp
 80052da:	6859      	ldr	r1, [r3, #4]
 80052dc:	6011      	str	r1, [r2, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	0002      	movs	r2, r0
 80052e2:	2102      	movs	r1, #2
 80052e4:	2051      	movs	r0, #81	@ 0x51
 80052e6:	f002 fb79 	bl	80079dc <ST7735_DrawString>
				if (scaleU < 10.0)
 80052ea:	4b81      	ldr	r3, [pc, #516]	@ (80054f0 <device_settings+0x684>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4988      	ldr	r1, [pc, #544]	@ (8005510 <device_settings+0x6a4>)
 80052f0:	1c18      	adds	r0, r3, #0
 80052f2:	f7fb f8cd 	bl	8000490 <__aeabi_fcmplt>
 80052f6:	1e03      	subs	r3, r0, #0
 80052f8:	d00e      	beq.n	8005318 <device_settings+0x4ac>
					ST7735_DrawString(136,2," ",Font_11x18,WHITE, BLACK);
 80052fa:	4b84      	ldr	r3, [pc, #528]	@ (800550c <device_settings+0x6a0>)
 80052fc:	4885      	ldr	r0, [pc, #532]	@ (8005514 <device_settings+0x6a8>)
 80052fe:	2200      	movs	r2, #0
 8005300:	9202      	str	r2, [sp, #8]
 8005302:	4a76      	ldr	r2, [pc, #472]	@ (80054dc <device_settings+0x670>)
 8005304:	9201      	str	r2, [sp, #4]
 8005306:	466a      	mov	r2, sp
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	6011      	str	r1, [r2, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	0002      	movs	r2, r0
 8005310:	2102      	movs	r1, #2
 8005312:	2088      	movs	r0, #136	@ 0x88
 8005314:	f002 fb62 	bl	80079dc <ST7735_DrawString>

			}
			if(ds_mnu_sel == I_DISP)
 8005318:	4b71      	ldr	r3, [pc, #452]	@ (80054e0 <device_settings+0x674>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d000      	beq.n	8005322 <device_settings+0x4b6>
 8005320:	e0a5      	b.n	800546e <device_settings+0x602>
			{
				if(enc == INC_TRN_SLOW) scaleI = scaleI+0.001;
 8005322:	4b71      	ldr	r3, [pc, #452]	@ (80054e8 <device_settings+0x67c>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d111      	bne.n	800534e <device_settings+0x4e2>
 800532a:	4b7b      	ldr	r3, [pc, #492]	@ (8005518 <device_settings+0x6ac>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	1c18      	adds	r0, r3, #0
 8005330:	f7fd fde6 	bl	8002f00 <__aeabi_f2d>
 8005334:	4a6f      	ldr	r2, [pc, #444]	@ (80054f4 <device_settings+0x688>)
 8005336:	4b70      	ldr	r3, [pc, #448]	@ (80054f8 <device_settings+0x68c>)
 8005338:	f7fb ffa8 	bl	800128c <__aeabi_dadd>
 800533c:	0002      	movs	r2, r0
 800533e:	000b      	movs	r3, r1
 8005340:	0010      	movs	r0, r2
 8005342:	0019      	movs	r1, r3
 8005344:	f7fd fe24 	bl	8002f90 <__aeabi_d2f>
 8005348:	1c02      	adds	r2, r0, #0
 800534a:	4b73      	ldr	r3, [pc, #460]	@ (8005518 <device_settings+0x6ac>)
 800534c:	601a      	str	r2, [r3, #0]
				if((enc == INC_TRN_NORM)||(enc == INC_TRN_NORM)) scaleI = scaleI+0.1;
 800534e:	4b66      	ldr	r3, [pc, #408]	@ (80054e8 <device_settings+0x67c>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d003      	beq.n	800535e <device_settings+0x4f2>
 8005356:	4b64      	ldr	r3, [pc, #400]	@ (80054e8 <device_settings+0x67c>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d111      	bne.n	8005382 <device_settings+0x516>
 800535e:	4b6e      	ldr	r3, [pc, #440]	@ (8005518 <device_settings+0x6ac>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	1c18      	adds	r0, r3, #0
 8005364:	f7fd fdcc 	bl	8002f00 <__aeabi_f2d>
 8005368:	4a64      	ldr	r2, [pc, #400]	@ (80054fc <device_settings+0x690>)
 800536a:	4b65      	ldr	r3, [pc, #404]	@ (8005500 <device_settings+0x694>)
 800536c:	f7fb ff8e 	bl	800128c <__aeabi_dadd>
 8005370:	0002      	movs	r2, r0
 8005372:	000b      	movs	r3, r1
 8005374:	0010      	movs	r0, r2
 8005376:	0019      	movs	r1, r3
 8005378:	f7fd fe0a 	bl	8002f90 <__aeabi_d2f>
 800537c:	1c02      	adds	r2, r0, #0
 800537e:	4b66      	ldr	r3, [pc, #408]	@ (8005518 <device_settings+0x6ac>)
 8005380:	601a      	str	r2, [r3, #0]
				if(enc == DEC_TRN_SLOW) scaleI = scaleI-0.001;
 8005382:	4b59      	ldr	r3, [pc, #356]	@ (80054e8 <device_settings+0x67c>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b04      	cmp	r3, #4
 8005388:	d111      	bne.n	80053ae <device_settings+0x542>
 800538a:	4b63      	ldr	r3, [pc, #396]	@ (8005518 <device_settings+0x6ac>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	1c18      	adds	r0, r3, #0
 8005390:	f7fd fdb6 	bl	8002f00 <__aeabi_f2d>
 8005394:	4a57      	ldr	r2, [pc, #348]	@ (80054f4 <device_settings+0x688>)
 8005396:	4b58      	ldr	r3, [pc, #352]	@ (80054f8 <device_settings+0x68c>)
 8005398:	f7fd f9e8 	bl	800276c <__aeabi_dsub>
 800539c:	0002      	movs	r2, r0
 800539e:	000b      	movs	r3, r1
 80053a0:	0010      	movs	r0, r2
 80053a2:	0019      	movs	r1, r3
 80053a4:	f7fd fdf4 	bl	8002f90 <__aeabi_d2f>
 80053a8:	1c02      	adds	r2, r0, #0
 80053aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005518 <device_settings+0x6ac>)
 80053ac:	601a      	str	r2, [r3, #0]
				if((enc == DEC_TRN_NORM)||(enc == DEC_TRN_NORM)) scaleI = scaleI-0.1;
 80053ae:	4b4e      	ldr	r3, [pc, #312]	@ (80054e8 <device_settings+0x67c>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b05      	cmp	r3, #5
 80053b4:	d003      	beq.n	80053be <device_settings+0x552>
 80053b6:	4b4c      	ldr	r3, [pc, #304]	@ (80054e8 <device_settings+0x67c>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d111      	bne.n	80053e2 <device_settings+0x576>
 80053be:	4b56      	ldr	r3, [pc, #344]	@ (8005518 <device_settings+0x6ac>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	1c18      	adds	r0, r3, #0
 80053c4:	f7fd fd9c 	bl	8002f00 <__aeabi_f2d>
 80053c8:	4a4c      	ldr	r2, [pc, #304]	@ (80054fc <device_settings+0x690>)
 80053ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005500 <device_settings+0x694>)
 80053cc:	f7fd f9ce 	bl	800276c <__aeabi_dsub>
 80053d0:	0002      	movs	r2, r0
 80053d2:	000b      	movs	r3, r1
 80053d4:	0010      	movs	r0, r2
 80053d6:	0019      	movs	r1, r3
 80053d8:	f7fd fdda 	bl	8002f90 <__aeabi_d2f>
 80053dc:	1c02      	adds	r2, r0, #0
 80053de:	4b4e      	ldr	r3, [pc, #312]	@ (8005518 <device_settings+0x6ac>)
 80053e0:	601a      	str	r2, [r3, #0]
				if (scaleI > SCALE_I_MAX) scaleI = SCALE_I_MAX;
 80053e2:	4b4d      	ldr	r3, [pc, #308]	@ (8005518 <device_settings+0x6ac>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2180      	movs	r1, #128	@ 0x80
 80053e8:	05c9      	lsls	r1, r1, #23
 80053ea:	1c18      	adds	r0, r3, #0
 80053ec:	f7fb f864 	bl	80004b8 <__aeabi_fcmpgt>
 80053f0:	1e03      	subs	r3, r0, #0
 80053f2:	d003      	beq.n	80053fc <device_settings+0x590>
 80053f4:	4b48      	ldr	r3, [pc, #288]	@ (8005518 <device_settings+0x6ac>)
 80053f6:	2280      	movs	r2, #128	@ 0x80
 80053f8:	05d2      	lsls	r2, r2, #23
 80053fa:	601a      	str	r2, [r3, #0]
				if (scaleI < SCALE_I_MIN) scaleI = SCALE_I_MIN;
 80053fc:	4b46      	ldr	r3, [pc, #280]	@ (8005518 <device_settings+0x6ac>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	21fc      	movs	r1, #252	@ 0xfc
 8005402:	0589      	lsls	r1, r1, #22
 8005404:	1c18      	adds	r0, r3, #0
 8005406:	f7fb f843 	bl	8000490 <__aeabi_fcmplt>
 800540a:	1e03      	subs	r3, r0, #0
 800540c:	d003      	beq.n	8005416 <device_settings+0x5aa>
 800540e:	4b42      	ldr	r3, [pc, #264]	@ (8005518 <device_settings+0x6ac>)
 8005410:	22fc      	movs	r2, #252	@ 0xfc
 8005412:	0592      	lsls	r2, r2, #22
 8005414:	601a      	str	r2, [r3, #0]
				ptr = float_to_char(scaleI, float_for_LCD);
 8005416:	4b40      	ldr	r3, [pc, #256]	@ (8005518 <device_settings+0x6ac>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a34      	ldr	r2, [pc, #208]	@ (80054ec <device_settings+0x680>)
 800541c:	0011      	movs	r1, r2
 800541e:	1c18      	adds	r0, r3, #0
 8005420:	f000 fd94 	bl	8005f4c <float_to_char>
 8005424:	0002      	movs	r2, r0
 8005426:	4b38      	ldr	r3, [pc, #224]	@ (8005508 <device_settings+0x69c>)
 8005428:	601a      	str	r2, [r3, #0]
				if (scaleI < 1.0)
 800542a:	4b3b      	ldr	r3, [pc, #236]	@ (8005518 <device_settings+0x6ac>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	21fe      	movs	r1, #254	@ 0xfe
 8005430:	0589      	lsls	r1, r1, #22
 8005432:	1c18      	adds	r0, r3, #0
 8005434:	f7fb f82c 	bl	8000490 <__aeabi_fcmplt>
 8005438:	1e03      	subs	r3, r0, #0
 800543a:	d008      	beq.n	800544e <device_settings+0x5e2>
				{
					ptr--;
 800543c:	4b32      	ldr	r3, [pc, #200]	@ (8005508 <device_settings+0x69c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	1e5a      	subs	r2, r3, #1
 8005442:	4b31      	ldr	r3, [pc, #196]	@ (8005508 <device_settings+0x69c>)
 8005444:	601a      	str	r2, [r3, #0]
					*ptr = '0';
 8005446:	4b30      	ldr	r3, [pc, #192]	@ (8005508 <device_settings+0x69c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2230      	movs	r2, #48	@ 0x30
 800544c:	701a      	strb	r2, [r3, #0]
				}
				ST7735_DrawString(81,22,ptr,Font_11x18,WHITE, BLACK);
 800544e:	4b2e      	ldr	r3, [pc, #184]	@ (8005508 <device_settings+0x69c>)
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	4b2e      	ldr	r3, [pc, #184]	@ (800550c <device_settings+0x6a0>)
 8005454:	2200      	movs	r2, #0
 8005456:	9202      	str	r2, [sp, #8]
 8005458:	4a20      	ldr	r2, [pc, #128]	@ (80054dc <device_settings+0x670>)
 800545a:	9201      	str	r2, [sp, #4]
 800545c:	466a      	mov	r2, sp
 800545e:	6859      	ldr	r1, [r3, #4]
 8005460:	6011      	str	r1, [r2, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	0002      	movs	r2, r0
 8005466:	2116      	movs	r1, #22
 8005468:	2051      	movs	r0, #81	@ 0x51
 800546a:	f002 fab7 	bl	80079dc <ST7735_DrawString>
			}
			if(ds_mnu_sel == U_SETP)
 800546e:	4b1c      	ldr	r3, [pc, #112]	@ (80054e0 <device_settings+0x674>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d000      	beq.n	8005478 <device_settings+0x60c>
 8005476:	e0b3      	b.n	80055e0 <device_settings+0x774>
			{
				if(enc == INC_TRN_SLOW) scaleUsp = scaleUsp+0.001;
 8005478:	4b1b      	ldr	r3, [pc, #108]	@ (80054e8 <device_settings+0x67c>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d111      	bne.n	80054a4 <device_settings+0x638>
 8005480:	4b26      	ldr	r3, [pc, #152]	@ (800551c <device_settings+0x6b0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	1c18      	adds	r0, r3, #0
 8005486:	f7fd fd3b 	bl	8002f00 <__aeabi_f2d>
 800548a:	4a1a      	ldr	r2, [pc, #104]	@ (80054f4 <device_settings+0x688>)
 800548c:	4b1a      	ldr	r3, [pc, #104]	@ (80054f8 <device_settings+0x68c>)
 800548e:	f7fb fefd 	bl	800128c <__aeabi_dadd>
 8005492:	0002      	movs	r2, r0
 8005494:	000b      	movs	r3, r1
 8005496:	0010      	movs	r0, r2
 8005498:	0019      	movs	r1, r3
 800549a:	f7fd fd79 	bl	8002f90 <__aeabi_d2f>
 800549e:	1c02      	adds	r2, r0, #0
 80054a0:	4b1e      	ldr	r3, [pc, #120]	@ (800551c <device_settings+0x6b0>)
 80054a2:	601a      	str	r2, [r3, #0]
				if((enc == INC_TRN_NORM)||(enc == INC_TRN_NORM)) scaleUsp = scaleUsp+0.1;
 80054a4:	4b10      	ldr	r3, [pc, #64]	@ (80054e8 <device_settings+0x67c>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d003      	beq.n	80054b4 <device_settings+0x648>
 80054ac:	4b0e      	ldr	r3, [pc, #56]	@ (80054e8 <device_settings+0x67c>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d135      	bne.n	8005520 <device_settings+0x6b4>
 80054b4:	4b19      	ldr	r3, [pc, #100]	@ (800551c <device_settings+0x6b0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	1c18      	adds	r0, r3, #0
 80054ba:	f7fd fd21 	bl	8002f00 <__aeabi_f2d>
 80054be:	4a0f      	ldr	r2, [pc, #60]	@ (80054fc <device_settings+0x690>)
 80054c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005500 <device_settings+0x694>)
 80054c2:	f7fb fee3 	bl	800128c <__aeabi_dadd>
 80054c6:	0002      	movs	r2, r0
 80054c8:	000b      	movs	r3, r1
 80054ca:	0010      	movs	r0, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	f7fd fd5f 	bl	8002f90 <__aeabi_d2f>
 80054d2:	1c02      	adds	r2, r0, #0
 80054d4:	4b11      	ldr	r3, [pc, #68]	@ (800551c <device_settings+0x6b0>)
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e022      	b.n	8005520 <device_settings+0x6b4>
 80054da:	46c0      	nop			@ (mov r8, r8)
 80054dc:	0000ffff 	.word	0x0000ffff
 80054e0:	20000385 	.word	0x20000385
 80054e4:	20000384 	.word	0x20000384
 80054e8:	20000383 	.word	0x20000383
 80054ec:	20000378 	.word	0x20000378
 80054f0:	20000004 	.word	0x20000004
 80054f4:	d2f1a9fc 	.word	0xd2f1a9fc
 80054f8:	3f50624d 	.word	0x3f50624d
 80054fc:	9999999a 	.word	0x9999999a
 8005500:	3fb99999 	.word	0x3fb99999
 8005504:	41300000 	.word	0x41300000
 8005508:	2000038c 	.word	0x2000038c
 800550c:	20000038 	.word	0x20000038
 8005510:	41200000 	.word	0x41200000
 8005514:	0800ec98 	.word	0x0800ec98
 8005518:	20000008 	.word	0x20000008
 800551c:	2000000c 	.word	0x2000000c
				if(enc == DEC_TRN_SLOW) scaleUsp = scaleUsp-0.001;
 8005520:	4b98      	ldr	r3, [pc, #608]	@ (8005784 <device_settings+0x918>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b04      	cmp	r3, #4
 8005526:	d111      	bne.n	800554c <device_settings+0x6e0>
 8005528:	4b97      	ldr	r3, [pc, #604]	@ (8005788 <device_settings+0x91c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	1c18      	adds	r0, r3, #0
 800552e:	f7fd fce7 	bl	8002f00 <__aeabi_f2d>
 8005532:	4a96      	ldr	r2, [pc, #600]	@ (800578c <device_settings+0x920>)
 8005534:	4b96      	ldr	r3, [pc, #600]	@ (8005790 <device_settings+0x924>)
 8005536:	f7fd f919 	bl	800276c <__aeabi_dsub>
 800553a:	0002      	movs	r2, r0
 800553c:	000b      	movs	r3, r1
 800553e:	0010      	movs	r0, r2
 8005540:	0019      	movs	r1, r3
 8005542:	f7fd fd25 	bl	8002f90 <__aeabi_d2f>
 8005546:	1c02      	adds	r2, r0, #0
 8005548:	4b8f      	ldr	r3, [pc, #572]	@ (8005788 <device_settings+0x91c>)
 800554a:	601a      	str	r2, [r3, #0]
				if((enc == DEC_TRN_NORM)||(enc == DEC_TRN_NORM)) scaleUsp = scaleUsp-0.1;
 800554c:	4b8d      	ldr	r3, [pc, #564]	@ (8005784 <device_settings+0x918>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b05      	cmp	r3, #5
 8005552:	d003      	beq.n	800555c <device_settings+0x6f0>
 8005554:	4b8b      	ldr	r3, [pc, #556]	@ (8005784 <device_settings+0x918>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b05      	cmp	r3, #5
 800555a:	d111      	bne.n	8005580 <device_settings+0x714>
 800555c:	4b8a      	ldr	r3, [pc, #552]	@ (8005788 <device_settings+0x91c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	1c18      	adds	r0, r3, #0
 8005562:	f7fd fccd 	bl	8002f00 <__aeabi_f2d>
 8005566:	4a8b      	ldr	r2, [pc, #556]	@ (8005794 <device_settings+0x928>)
 8005568:	4b8b      	ldr	r3, [pc, #556]	@ (8005798 <device_settings+0x92c>)
 800556a:	f7fd f8ff 	bl	800276c <__aeabi_dsub>
 800556e:	0002      	movs	r2, r0
 8005570:	000b      	movs	r3, r1
 8005572:	0010      	movs	r0, r2
 8005574:	0019      	movs	r1, r3
 8005576:	f7fd fd0b 	bl	8002f90 <__aeabi_d2f>
 800557a:	1c02      	adds	r2, r0, #0
 800557c:	4b82      	ldr	r3, [pc, #520]	@ (8005788 <device_settings+0x91c>)
 800557e:	601a      	str	r2, [r3, #0]
				if (scaleUsp > SCALE_U_SP_MAX) scaleUsp = SCALE_U_SP_MAX;
 8005580:	4b81      	ldr	r3, [pc, #516]	@ (8005788 <device_settings+0x91c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4985      	ldr	r1, [pc, #532]	@ (800579c <device_settings+0x930>)
 8005586:	1c18      	adds	r0, r3, #0
 8005588:	f7fa ff96 	bl	80004b8 <__aeabi_fcmpgt>
 800558c:	1e03      	subs	r3, r0, #0
 800558e:	d002      	beq.n	8005596 <device_settings+0x72a>
 8005590:	4b7d      	ldr	r3, [pc, #500]	@ (8005788 <device_settings+0x91c>)
 8005592:	4a82      	ldr	r2, [pc, #520]	@ (800579c <device_settings+0x930>)
 8005594:	601a      	str	r2, [r3, #0]
				if (scaleUsp < SCALE_U_SP_MIN) scaleUsp = SCALE_U_SP_MIN;
 8005596:	4b7c      	ldr	r3, [pc, #496]	@ (8005788 <device_settings+0x91c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4981      	ldr	r1, [pc, #516]	@ (80057a0 <device_settings+0x934>)
 800559c:	1c18      	adds	r0, r3, #0
 800559e:	f7fa ff77 	bl	8000490 <__aeabi_fcmplt>
 80055a2:	1e03      	subs	r3, r0, #0
 80055a4:	d002      	beq.n	80055ac <device_settings+0x740>
 80055a6:	4b78      	ldr	r3, [pc, #480]	@ (8005788 <device_settings+0x91c>)
 80055a8:	4a7d      	ldr	r2, [pc, #500]	@ (80057a0 <device_settings+0x934>)
 80055aa:	601a      	str	r2, [r3, #0]
				ptr = float_to_char(scaleUsp, float_for_LCD);
 80055ac:	4b76      	ldr	r3, [pc, #472]	@ (8005788 <device_settings+0x91c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a7c      	ldr	r2, [pc, #496]	@ (80057a4 <device_settings+0x938>)
 80055b2:	0011      	movs	r1, r2
 80055b4:	1c18      	adds	r0, r3, #0
 80055b6:	f000 fcc9 	bl	8005f4c <float_to_char>
 80055ba:	0002      	movs	r2, r0
 80055bc:	4b7a      	ldr	r3, [pc, #488]	@ (80057a8 <device_settings+0x93c>)
 80055be:	601a      	str	r2, [r3, #0]
				ST7735_DrawString(81,42,ptr,Font_11x18,WHITE, BLACK);
 80055c0:	4b79      	ldr	r3, [pc, #484]	@ (80057a8 <device_settings+0x93c>)
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	4b79      	ldr	r3, [pc, #484]	@ (80057ac <device_settings+0x940>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	9202      	str	r2, [sp, #8]
 80055ca:	4a79      	ldr	r2, [pc, #484]	@ (80057b0 <device_settings+0x944>)
 80055cc:	9201      	str	r2, [sp, #4]
 80055ce:	466a      	mov	r2, sp
 80055d0:	6859      	ldr	r1, [r3, #4]
 80055d2:	6011      	str	r1, [r2, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	0002      	movs	r2, r0
 80055d8:	212a      	movs	r1, #42	@ 0x2a
 80055da:	2051      	movs	r0, #81	@ 0x51
 80055dc:	f002 f9fe 	bl	80079dc <ST7735_DrawString>
			}
			if(ds_mnu_sel == I_SETP)
 80055e0:	4b74      	ldr	r3, [pc, #464]	@ (80057b4 <device_settings+0x948>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d000      	beq.n	80055ea <device_settings+0x77e>
 80055e8:	e08f      	b.n	800570a <device_settings+0x89e>
			{
				if(enc == INC_TRN_SLOW) scaleIsp = scaleIsp+0.001;
 80055ea:	4b66      	ldr	r3, [pc, #408]	@ (8005784 <device_settings+0x918>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d111      	bne.n	8005616 <device_settings+0x7aa>
 80055f2:	4b71      	ldr	r3, [pc, #452]	@ (80057b8 <device_settings+0x94c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	1c18      	adds	r0, r3, #0
 80055f8:	f7fd fc82 	bl	8002f00 <__aeabi_f2d>
 80055fc:	4a63      	ldr	r2, [pc, #396]	@ (800578c <device_settings+0x920>)
 80055fe:	4b64      	ldr	r3, [pc, #400]	@ (8005790 <device_settings+0x924>)
 8005600:	f7fb fe44 	bl	800128c <__aeabi_dadd>
 8005604:	0002      	movs	r2, r0
 8005606:	000b      	movs	r3, r1
 8005608:	0010      	movs	r0, r2
 800560a:	0019      	movs	r1, r3
 800560c:	f7fd fcc0 	bl	8002f90 <__aeabi_d2f>
 8005610:	1c02      	adds	r2, r0, #0
 8005612:	4b69      	ldr	r3, [pc, #420]	@ (80057b8 <device_settings+0x94c>)
 8005614:	601a      	str	r2, [r3, #0]
				if((enc == INC_TRN_NORM)||(enc == INC_TRN_NORM)) scaleIsp = scaleIsp+0.1;
 8005616:	4b5b      	ldr	r3, [pc, #364]	@ (8005784 <device_settings+0x918>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d003      	beq.n	8005626 <device_settings+0x7ba>
 800561e:	4b59      	ldr	r3, [pc, #356]	@ (8005784 <device_settings+0x918>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d111      	bne.n	800564a <device_settings+0x7de>
 8005626:	4b64      	ldr	r3, [pc, #400]	@ (80057b8 <device_settings+0x94c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	1c18      	adds	r0, r3, #0
 800562c:	f7fd fc68 	bl	8002f00 <__aeabi_f2d>
 8005630:	4a58      	ldr	r2, [pc, #352]	@ (8005794 <device_settings+0x928>)
 8005632:	4b59      	ldr	r3, [pc, #356]	@ (8005798 <device_settings+0x92c>)
 8005634:	f7fb fe2a 	bl	800128c <__aeabi_dadd>
 8005638:	0002      	movs	r2, r0
 800563a:	000b      	movs	r3, r1
 800563c:	0010      	movs	r0, r2
 800563e:	0019      	movs	r1, r3
 8005640:	f7fd fca6 	bl	8002f90 <__aeabi_d2f>
 8005644:	1c02      	adds	r2, r0, #0
 8005646:	4b5c      	ldr	r3, [pc, #368]	@ (80057b8 <device_settings+0x94c>)
 8005648:	601a      	str	r2, [r3, #0]
				if(enc == DEC_TRN_SLOW) scaleIsp = scaleIsp-0.001;
 800564a:	4b4e      	ldr	r3, [pc, #312]	@ (8005784 <device_settings+0x918>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b04      	cmp	r3, #4
 8005650:	d111      	bne.n	8005676 <device_settings+0x80a>
 8005652:	4b59      	ldr	r3, [pc, #356]	@ (80057b8 <device_settings+0x94c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	1c18      	adds	r0, r3, #0
 8005658:	f7fd fc52 	bl	8002f00 <__aeabi_f2d>
 800565c:	4a4b      	ldr	r2, [pc, #300]	@ (800578c <device_settings+0x920>)
 800565e:	4b4c      	ldr	r3, [pc, #304]	@ (8005790 <device_settings+0x924>)
 8005660:	f7fd f884 	bl	800276c <__aeabi_dsub>
 8005664:	0002      	movs	r2, r0
 8005666:	000b      	movs	r3, r1
 8005668:	0010      	movs	r0, r2
 800566a:	0019      	movs	r1, r3
 800566c:	f7fd fc90 	bl	8002f90 <__aeabi_d2f>
 8005670:	1c02      	adds	r2, r0, #0
 8005672:	4b51      	ldr	r3, [pc, #324]	@ (80057b8 <device_settings+0x94c>)
 8005674:	601a      	str	r2, [r3, #0]
				if((enc == DEC_TRN_NORM)||(enc == DEC_TRN_NORM)) scaleIsp = scaleIsp-0.1;
 8005676:	4b43      	ldr	r3, [pc, #268]	@ (8005784 <device_settings+0x918>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b05      	cmp	r3, #5
 800567c:	d003      	beq.n	8005686 <device_settings+0x81a>
 800567e:	4b41      	ldr	r3, [pc, #260]	@ (8005784 <device_settings+0x918>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b05      	cmp	r3, #5
 8005684:	d111      	bne.n	80056aa <device_settings+0x83e>
 8005686:	4b4c      	ldr	r3, [pc, #304]	@ (80057b8 <device_settings+0x94c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	1c18      	adds	r0, r3, #0
 800568c:	f7fd fc38 	bl	8002f00 <__aeabi_f2d>
 8005690:	4a40      	ldr	r2, [pc, #256]	@ (8005794 <device_settings+0x928>)
 8005692:	4b41      	ldr	r3, [pc, #260]	@ (8005798 <device_settings+0x92c>)
 8005694:	f7fd f86a 	bl	800276c <__aeabi_dsub>
 8005698:	0002      	movs	r2, r0
 800569a:	000b      	movs	r3, r1
 800569c:	0010      	movs	r0, r2
 800569e:	0019      	movs	r1, r3
 80056a0:	f7fd fc76 	bl	8002f90 <__aeabi_d2f>
 80056a4:	1c02      	adds	r2, r0, #0
 80056a6:	4b44      	ldr	r3, [pc, #272]	@ (80057b8 <device_settings+0x94c>)
 80056a8:	601a      	str	r2, [r3, #0]
				if (scaleIsp > SCALE_I_SP_MAX) scaleIsp = SCALE_I_SP_MAX;
 80056aa:	4b43      	ldr	r3, [pc, #268]	@ (80057b8 <device_settings+0x94c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4943      	ldr	r1, [pc, #268]	@ (80057bc <device_settings+0x950>)
 80056b0:	1c18      	adds	r0, r3, #0
 80056b2:	f7fa ff01 	bl	80004b8 <__aeabi_fcmpgt>
 80056b6:	1e03      	subs	r3, r0, #0
 80056b8:	d002      	beq.n	80056c0 <device_settings+0x854>
 80056ba:	4b3f      	ldr	r3, [pc, #252]	@ (80057b8 <device_settings+0x94c>)
 80056bc:	4a3f      	ldr	r2, [pc, #252]	@ (80057bc <device_settings+0x950>)
 80056be:	601a      	str	r2, [r3, #0]
				if (scaleIsp < SCALE_I_SP_MIN) scaleIsp = SCALE_I_SP_MIN;
 80056c0:	4b3d      	ldr	r3, [pc, #244]	@ (80057b8 <device_settings+0x94c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	493e      	ldr	r1, [pc, #248]	@ (80057c0 <device_settings+0x954>)
 80056c6:	1c18      	adds	r0, r3, #0
 80056c8:	f7fa fee2 	bl	8000490 <__aeabi_fcmplt>
 80056cc:	1e03      	subs	r3, r0, #0
 80056ce:	d002      	beq.n	80056d6 <device_settings+0x86a>
 80056d0:	4b39      	ldr	r3, [pc, #228]	@ (80057b8 <device_settings+0x94c>)
 80056d2:	4a3b      	ldr	r2, [pc, #236]	@ (80057c0 <device_settings+0x954>)
 80056d4:	601a      	str	r2, [r3, #0]
				ptr = float_to_char(scaleIsp, float_for_LCD);
 80056d6:	4b38      	ldr	r3, [pc, #224]	@ (80057b8 <device_settings+0x94c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a32      	ldr	r2, [pc, #200]	@ (80057a4 <device_settings+0x938>)
 80056dc:	0011      	movs	r1, r2
 80056de:	1c18      	adds	r0, r3, #0
 80056e0:	f000 fc34 	bl	8005f4c <float_to_char>
 80056e4:	0002      	movs	r2, r0
 80056e6:	4b30      	ldr	r3, [pc, #192]	@ (80057a8 <device_settings+0x93c>)
 80056e8:	601a      	str	r2, [r3, #0]
				ST7735_DrawString(81,62,ptr,Font_11x18,WHITE, BLACK);
 80056ea:	4b2f      	ldr	r3, [pc, #188]	@ (80057a8 <device_settings+0x93c>)
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	4b2f      	ldr	r3, [pc, #188]	@ (80057ac <device_settings+0x940>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	9202      	str	r2, [sp, #8]
 80056f4:	4a2e      	ldr	r2, [pc, #184]	@ (80057b0 <device_settings+0x944>)
 80056f6:	9201      	str	r2, [sp, #4]
 80056f8:	466a      	mov	r2, sp
 80056fa:	6859      	ldr	r1, [r3, #4]
 80056fc:	6011      	str	r1, [r2, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	0002      	movs	r2, r0
 8005702:	213e      	movs	r1, #62	@ 0x3e
 8005704:	2051      	movs	r0, #81	@ 0x51
 8005706:	f002 f969 	bl	80079dc <ST7735_DrawString>
			}
			enc=NO_TRN;
 800570a:	4b1e      	ldr	r3, [pc, #120]	@ (8005784 <device_settings+0x918>)
 800570c:	2200      	movs	r2, #0
 800570e:	701a      	strb	r2, [r3, #0]
	while ((btn != PRESS_LONG) || ((ds_mnu_sel != EXIT)&&(ds_mnu_sel != SAVE_EXIT)))
 8005710:	4b2c      	ldr	r3, [pc, #176]	@ (80057c4 <device_settings+0x958>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d000      	beq.n	800571a <device_settings+0x8ae>
 8005718:	e484      	b.n	8005024 <device_settings+0x1b8>
 800571a:	4b26      	ldr	r3, [pc, #152]	@ (80057b4 <device_settings+0x948>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b04      	cmp	r3, #4
 8005720:	d004      	beq.n	800572c <device_settings+0x8c0>
 8005722:	4b24      	ldr	r3, [pc, #144]	@ (80057b4 <device_settings+0x948>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b05      	cmp	r3, #5
 8005728:	d000      	beq.n	800572c <device_settings+0x8c0>
 800572a:	e47b      	b.n	8005024 <device_settings+0x1b8>
		}
	}
	if (ds_mnu_sel == SAVE_EXIT)
 800572c:	4b21      	ldr	r3, [pc, #132]	@ (80057b4 <device_settings+0x948>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b05      	cmp	r3, #5
 8005732:	d110      	bne.n	8005756 <device_settings+0x8ea>
		save_settings(scaleU, scaleI, scaleUsp, scaleIsp, 10,0,0);
 8005734:	4b24      	ldr	r3, [pc, #144]	@ (80057c8 <device_settings+0x95c>)
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	4b24      	ldr	r3, [pc, #144]	@ (80057cc <device_settings+0x960>)
 800573a:	6819      	ldr	r1, [r3, #0]
 800573c:	4b12      	ldr	r3, [pc, #72]	@ (8005788 <device_settings+0x91c>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b1d      	ldr	r3, [pc, #116]	@ (80057b8 <device_settings+0x94c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2400      	movs	r4, #0
 8005746:	9402      	str	r4, [sp, #8]
 8005748:	2400      	movs	r4, #0
 800574a:	9401      	str	r4, [sp, #4]
 800574c:	240a      	movs	r4, #10
 800574e:	9400      	str	r4, [sp, #0]
 8005750:	f001 f9dc 	bl	8006b0c <save_settings>
 8005754:	e00b      	b.n	800576e <device_settings+0x902>
	else
	{
		scaleU = scaleU_tmp; scaleI = scaleI_tmp;
 8005756:	4b1c      	ldr	r3, [pc, #112]	@ (80057c8 <device_settings+0x95c>)
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	4b1b      	ldr	r3, [pc, #108]	@ (80057cc <device_settings+0x960>)
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	601a      	str	r2, [r3, #0]
		scaleUsp = scaleUsp_tmp; scaleIsp = scaleIsp_tmp;
 8005762:	4b09      	ldr	r3, [pc, #36]	@ (8005788 <device_settings+0x91c>)
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	4b13      	ldr	r3, [pc, #76]	@ (80057b8 <device_settings+0x94c>)
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	601a      	str	r2, [r3, #0]
	}
	enc=NO_TRN;
 800576e:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <device_settings+0x918>)
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
	btn=NO_PRESS;
 8005774:	4b13      	ldr	r3, [pc, #76]	@ (80057c4 <device_settings+0x958>)
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
}
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	46bd      	mov	sp, r7
 800577e:	b005      	add	sp, #20
 8005780:	bd90      	pop	{r4, r7, pc}
 8005782:	46c0      	nop			@ (mov r8, r8)
 8005784:	20000383 	.word	0x20000383
 8005788:	2000000c 	.word	0x2000000c
 800578c:	d2f1a9fc 	.word	0xd2f1a9fc
 8005790:	3f50624d 	.word	0x3f50624d
 8005794:	9999999a 	.word	0x9999999a
 8005798:	3fb99999 	.word	0x3fb99999
 800579c:	42180000 	.word	0x42180000
 80057a0:	41d80000 	.word	0x41d80000
 80057a4:	20000378 	.word	0x20000378
 80057a8:	2000038c 	.word	0x2000038c
 80057ac:	20000038 	.word	0x20000038
 80057b0:	0000ffff 	.word	0x0000ffff
 80057b4:	20000385 	.word	0x20000385
 80057b8:	20000010 	.word	0x20000010
 80057bc:	43660000 	.word	0x43660000
 80057c0:	434d0000 	.word	0x434d0000
 80057c4:	20000384 	.word	0x20000384
 80057c8:	20000004 	.word	0x20000004
 80057cc:	20000008 	.word	0x20000008

080057d0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  bool temp_b;
  float temp_f;
  if (hi2c == &hi2c2)
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	4b40      	ldr	r3, [pc, #256]	@ (80058dc <HAL_I2C_SlaveRxCpltCallback+0x10c>)
 80057dc:	429a      	cmp	r2, r3
 80057de:	d000      	beq.n	80057e2 <HAL_I2C_SlaveRxCpltCallback+0x12>
 80057e0:	e077      	b.n	80058d2 <HAL_I2C_SlaveRxCpltCallback+0x102>
  {
 	  slaveTxBuf[0]=(uint8_t)on_off;
 80057e2:	4b3f      	ldr	r3, [pc, #252]	@ (80058e0 <HAL_I2C_SlaveRxCpltCallback+0x110>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	001a      	movs	r2, r3
 80057e8:	4b3e      	ldr	r3, [pc, #248]	@ (80058e4 <HAL_I2C_SlaveRxCpltCallback+0x114>)
 80057ea:	701a      	strb	r2, [r3, #0]
	  memcpy(&slaveTxBuf[1], &outU, sizeof(outU));
 80057ec:	493e      	ldr	r1, [pc, #248]	@ (80058e8 <HAL_I2C_SlaveRxCpltCallback+0x118>)
 80057ee:	4b3f      	ldr	r3, [pc, #252]	@ (80058ec <HAL_I2C_SlaveRxCpltCallback+0x11c>)
 80057f0:	2204      	movs	r2, #4
 80057f2:	0018      	movs	r0, r3
 80057f4:	f009 fa22 	bl	800ec3c <memcpy>
	  memcpy(&slaveTxBuf[5], &outI, sizeof(outI));
 80057f8:	493d      	ldr	r1, [pc, #244]	@ (80058f0 <HAL_I2C_SlaveRxCpltCallback+0x120>)
 80057fa:	4b3e      	ldr	r3, [pc, #248]	@ (80058f4 <HAL_I2C_SlaveRxCpltCallback+0x124>)
 80057fc:	2204      	movs	r2, #4
 80057fe:	0018      	movs	r0, r3
 8005800:	f009 fa1c 	bl	800ec3c <memcpy>
	  tempCRC = HAL_CRC_Calculate(&hcrc,(uint32_t *)slaveTxBuf, (I2C_BUFF_LEN/4)-1);
 8005804:	4937      	ldr	r1, [pc, #220]	@ (80058e4 <HAL_I2C_SlaveRxCpltCallback+0x114>)
 8005806:	4b3c      	ldr	r3, [pc, #240]	@ (80058f8 <HAL_I2C_SlaveRxCpltCallback+0x128>)
 8005808:	2203      	movs	r2, #3
 800580a:	0018      	movs	r0, r3
 800580c:	f003 fbd7 	bl	8008fbe <HAL_CRC_Calculate>
 8005810:	0002      	movs	r2, r0
 8005812:	4b3a      	ldr	r3, [pc, #232]	@ (80058fc <HAL_I2C_SlaveRxCpltCallback+0x12c>)
 8005814:	601a      	str	r2, [r3, #0]
	  memcpy(&slaveTxBuf[I2C_BUFF_LEN-4],&tempCRC,sizeof(tempCRC));
 8005816:	4b39      	ldr	r3, [pc, #228]	@ (80058fc <HAL_I2C_SlaveRxCpltCallback+0x12c>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b32      	ldr	r3, [pc, #200]	@ (80058e4 <HAL_I2C_SlaveRxCpltCallback+0x114>)
 800581c:	60da      	str	r2, [r3, #12]
	  HAL_I2C_Slave_Transmit_IT(&hi2c2, (uint8_t*) &slaveTxBuf, I2C_BUFF_LEN);
 800581e:	4931      	ldr	r1, [pc, #196]	@ (80058e4 <HAL_I2C_SlaveRxCpltCallback+0x114>)
 8005820:	4b2e      	ldr	r3, [pc, #184]	@ (80058dc <HAL_I2C_SlaveRxCpltCallback+0x10c>)
 8005822:	2210      	movs	r2, #16
 8005824:	0018      	movs	r0, r3
 8005826:	f004 fd4f 	bl	800a2c8 <HAL_I2C_Slave_Transmit_IT>
	  memcpy(&tempCRC, &slaveRxBuf[I2C_BUFF_LEN-4], sizeof(tempCRC));
 800582a:	4b35      	ldr	r3, [pc, #212]	@ (8005900 <HAL_I2C_SlaveRxCpltCallback+0x130>)
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	4b33      	ldr	r3, [pc, #204]	@ (80058fc <HAL_I2C_SlaveRxCpltCallback+0x12c>)
 8005830:	601a      	str	r2, [r3, #0]
	  if(tempCRC == HAL_CRC_Calculate(&hcrc,(uint32_t *)slaveRxBuf, (I2C_BUFF_LEN/4)-1))
 8005832:	4933      	ldr	r1, [pc, #204]	@ (8005900 <HAL_I2C_SlaveRxCpltCallback+0x130>)
 8005834:	4b30      	ldr	r3, [pc, #192]	@ (80058f8 <HAL_I2C_SlaveRxCpltCallback+0x128>)
 8005836:	2203      	movs	r2, #3
 8005838:	0018      	movs	r0, r3
 800583a:	f003 fbc0 	bl	8008fbe <HAL_CRC_Calculate>
 800583e:	0002      	movs	r2, r0
 8005840:	4b2e      	ldr	r3, [pc, #184]	@ (80058fc <HAL_I2C_SlaveRxCpltCallback+0x12c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d141      	bne.n	80058cc <HAL_I2C_SlaveRxCpltCallback+0xfc>
	  {
		  temp_b = (slaveRxBuf[0] != 0) ? true : false;
 8005848:	4b2d      	ldr	r3, [pc, #180]	@ (8005900 <HAL_I2C_SlaveRxCpltCallback+0x130>)
 800584a:	781a      	ldrb	r2, [r3, #0]
 800584c:	200f      	movs	r0, #15
 800584e:	183b      	adds	r3, r7, r0
 8005850:	1e51      	subs	r1, r2, #1
 8005852:	418a      	sbcs	r2, r1
 8005854:	701a      	strb	r2, [r3, #0]
		  if (temp_b != on_off) // if received value differ from current update LCD
 8005856:	4b22      	ldr	r3, [pc, #136]	@ (80058e0 <HAL_I2C_SlaveRxCpltCallback+0x110>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	183a      	adds	r2, r7, r0
 800585c:	7812      	ldrb	r2, [r2, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d006      	beq.n	8005870 <HAL_I2C_SlaveRxCpltCallback+0xa0>
		  {
			  on_off = temp_b;
 8005862:	4b1f      	ldr	r3, [pc, #124]	@ (80058e0 <HAL_I2C_SlaveRxCpltCallback+0x110>)
 8005864:	183a      	adds	r2, r7, r0
 8005866:	7812      	ldrb	r2, [r2, #0]
 8005868:	701a      	strb	r2, [r3, #0]
			  redraw_ST = true;
 800586a:	4b26      	ldr	r3, [pc, #152]	@ (8005904 <HAL_I2C_SlaveRxCpltCallback+0x134>)
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
		  }
		  memcpy(&temp_f, &slaveRxBuf[1], sizeof(temp_f));
 8005870:	4925      	ldr	r1, [pc, #148]	@ (8005908 <HAL_I2C_SlaveRxCpltCallback+0x138>)
 8005872:	2308      	movs	r3, #8
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	2204      	movs	r2, #4
 8005878:	0018      	movs	r0, r3
 800587a:	f009 f9df 	bl	800ec3c <memcpy>
		  if (temp_f != uSP) // if received value differ from current update LCD
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	4b22      	ldr	r3, [pc, #136]	@ (800590c <HAL_I2C_SlaveRxCpltCallback+0x13c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	1c19      	adds	r1, r3, #0
 8005886:	1c10      	adds	r0, r2, #0
 8005888:	f7fa fdfc 	bl	8000484 <__aeabi_fcmpeq>
 800588c:	1e03      	subs	r3, r0, #0
 800588e:	d105      	bne.n	800589c <HAL_I2C_SlaveRxCpltCallback+0xcc>
		  {
			  uSP = temp_f;
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	4b1e      	ldr	r3, [pc, #120]	@ (800590c <HAL_I2C_SlaveRxCpltCallback+0x13c>)
 8005894:	601a      	str	r2, [r3, #0]
			  redraw_uSP = true;
 8005896:	4b1e      	ldr	r3, [pc, #120]	@ (8005910 <HAL_I2C_SlaveRxCpltCallback+0x140>)
 8005898:	2201      	movs	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
		  }
		  memcpy(&temp_f, &slaveRxBuf[5], sizeof(temp_f));
 800589c:	491d      	ldr	r1, [pc, #116]	@ (8005914 <HAL_I2C_SlaveRxCpltCallback+0x144>)
 800589e:	2308      	movs	r3, #8
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	2204      	movs	r2, #4
 80058a4:	0018      	movs	r0, r3
 80058a6:	f009 f9c9 	bl	800ec3c <memcpy>
		  if (temp_f != iSP)
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005918 <HAL_I2C_SlaveRxCpltCallback+0x148>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	1c19      	adds	r1, r3, #0
 80058b2:	1c10      	adds	r0, r2, #0
 80058b4:	f7fa fde6 	bl	8000484 <__aeabi_fcmpeq>
 80058b8:	1e03      	subs	r3, r0, #0
 80058ba:	d000      	beq.n	80058be <HAL_I2C_SlaveRxCpltCallback+0xee>
			  redraw_iSP = true;
		  }
	  }
	  else i2cError = true;
  }
}
 80058bc:	e009      	b.n	80058d2 <HAL_I2C_SlaveRxCpltCallback+0x102>
			  iSP = temp_f;
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	4b15      	ldr	r3, [pc, #84]	@ (8005918 <HAL_I2C_SlaveRxCpltCallback+0x148>)
 80058c2:	601a      	str	r2, [r3, #0]
			  redraw_iSP = true;
 80058c4:	4b15      	ldr	r3, [pc, #84]	@ (800591c <HAL_I2C_SlaveRxCpltCallback+0x14c>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	701a      	strb	r2, [r3, #0]
}
 80058ca:	e002      	b.n	80058d2 <HAL_I2C_SlaveRxCpltCallback+0x102>
	  else i2cError = true;
 80058cc:	4b14      	ldr	r3, [pc, #80]	@ (8005920 <HAL_I2C_SlaveRxCpltCallback+0x150>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	701a      	strb	r2, [r3, #0]
}
 80058d2:	46c0      	nop			@ (mov r8, r8)
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b004      	add	sp, #16
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	46c0      	nop			@ (mov r8, r8)
 80058dc:	20000168 	.word	0x20000168
 80058e0:	20000390 	.word	0x20000390
 80058e4:	200003b8 	.word	0x200003b8
 80058e8:	2000036c 	.word	0x2000036c
 80058ec:	200003b9 	.word	0x200003b9
 80058f0:	20000370 	.word	0x20000370
 80058f4:	200003bd 	.word	0x200003bd
 80058f8:	200000f8 	.word	0x200000f8
 80058fc:	200003d8 	.word	0x200003d8
 8005900:	200003c8 	.word	0x200003c8
 8005904:	200003dd 	.word	0x200003dd
 8005908:	200003c9 	.word	0x200003c9
 800590c:	20000018 	.word	0x20000018
 8005910:	200003de 	.word	0x200003de
 8005914:	200003cd 	.word	0x200003cd
 8005918:	2000001c 	.word	0x2000001c
 800591c:	200003df 	.word	0x200003df
 8005920:	200003dc 	.word	0x200003dc

08005924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005928:	b672      	cpsid	i
}
 800592a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800592c:	46c0      	nop			@ (mov r8, r8)
 800592e:	e7fd      	b.n	800592c <Error_Handler+0x8>

08005930 <i_DAC10_Set>:
 *      Author: Ivan
 */
#include "psu.h"

void i_DAC10_Set(uint16_t iDACout)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	0002      	movs	r2, r0
 8005938:	1dbb      	adds	r3, r7, #6
 800593a:	801a      	strh	r2, [r3, #0]
	// output bit number 9 set
	if (iDACout & 0x0200)
 800593c:	1dbb      	adds	r3, r7, #6
 800593e:	881a      	ldrh	r2, [r3, #0]
 8005940:	2380      	movs	r3, #128	@ 0x80
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4013      	ands	r3, r2
 8005946:	d007      	beq.n	8005958 <i_DAC10_Set+0x28>
		 HAL_GPIO_WritePin(I_DAC9_GPIO_Port, I_DAC9_Pin, GPIO_PIN_SET);
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	4860      	ldr	r0, [pc, #384]	@ (8005ad0 <i_DAC10_Set+0x1a0>)
 800594e:	2201      	movs	r2, #1
 8005950:	0019      	movs	r1, r3
 8005952:	f004 f9c4 	bl	8009cde <HAL_GPIO_WritePin>
 8005956:	e006      	b.n	8005966 <i_DAC10_Set+0x36>
	else HAL_GPIO_WritePin(I_DAC9_GPIO_Port, I_DAC9_Pin, GPIO_PIN_RESET);
 8005958:	2380      	movs	r3, #128	@ 0x80
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	485c      	ldr	r0, [pc, #368]	@ (8005ad0 <i_DAC10_Set+0x1a0>)
 800595e:	2200      	movs	r2, #0
 8005960:	0019      	movs	r1, r3
 8005962:	f004 f9bc 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 8 set
	if (iDACout & 0x0100)
 8005966:	1dbb      	adds	r3, r7, #6
 8005968:	881a      	ldrh	r2, [r3, #0]
 800596a:	2380      	movs	r3, #128	@ 0x80
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	4013      	ands	r3, r2
 8005970:	d007      	beq.n	8005982 <i_DAC10_Set+0x52>
		 HAL_GPIO_WritePin(I_DAC8_GPIO_Port, I_DAC8_Pin, GPIO_PIN_SET);
 8005972:	2380      	movs	r3, #128	@ 0x80
 8005974:	01db      	lsls	r3, r3, #7
 8005976:	4856      	ldr	r0, [pc, #344]	@ (8005ad0 <i_DAC10_Set+0x1a0>)
 8005978:	2201      	movs	r2, #1
 800597a:	0019      	movs	r1, r3
 800597c:	f004 f9af 	bl	8009cde <HAL_GPIO_WritePin>
 8005980:	e006      	b.n	8005990 <i_DAC10_Set+0x60>
	else HAL_GPIO_WritePin(I_DAC8_GPIO_Port, I_DAC8_Pin, GPIO_PIN_RESET);
 8005982:	2380      	movs	r3, #128	@ 0x80
 8005984:	01db      	lsls	r3, r3, #7
 8005986:	4852      	ldr	r0, [pc, #328]	@ (8005ad0 <i_DAC10_Set+0x1a0>)
 8005988:	2200      	movs	r2, #0
 800598a:	0019      	movs	r1, r3
 800598c:	f004 f9a7 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 7 set
	if (iDACout & 0x0080)
 8005990:	1dbb      	adds	r3, r7, #6
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	2280      	movs	r2, #128	@ 0x80
 8005996:	4013      	ands	r3, r2
 8005998:	d007      	beq.n	80059aa <i_DAC10_Set+0x7a>
		 HAL_GPIO_WritePin(I_DAC7_GPIO_Port, I_DAC7_Pin, GPIO_PIN_SET);
 800599a:	2380      	movs	r3, #128	@ 0x80
 800599c:	019b      	lsls	r3, r3, #6
 800599e:	484c      	ldr	r0, [pc, #304]	@ (8005ad0 <i_DAC10_Set+0x1a0>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	0019      	movs	r1, r3
 80059a4:	f004 f99b 	bl	8009cde <HAL_GPIO_WritePin>
 80059a8:	e006      	b.n	80059b8 <i_DAC10_Set+0x88>
	else HAL_GPIO_WritePin(I_DAC7_GPIO_Port, I_DAC7_Pin, GPIO_PIN_RESET);
 80059aa:	2380      	movs	r3, #128	@ 0x80
 80059ac:	019b      	lsls	r3, r3, #6
 80059ae:	4848      	ldr	r0, [pc, #288]	@ (8005ad0 <i_DAC10_Set+0x1a0>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	0019      	movs	r1, r3
 80059b4:	f004 f993 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 6 set
	if (iDACout & 0x0040)
 80059b8:	1dbb      	adds	r3, r7, #6
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	2240      	movs	r2, #64	@ 0x40
 80059be:	4013      	ands	r3, r2
 80059c0:	d007      	beq.n	80059d2 <i_DAC10_Set+0xa2>
		 HAL_GPIO_WritePin(I_DAC6_GPIO_Port, I_DAC6_Pin, GPIO_PIN_SET);
 80059c2:	2380      	movs	r3, #128	@ 0x80
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4843      	ldr	r0, [pc, #268]	@ (8005ad4 <i_DAC10_Set+0x1a4>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	0019      	movs	r1, r3
 80059cc:	f004 f987 	bl	8009cde <HAL_GPIO_WritePin>
 80059d0:	e006      	b.n	80059e0 <i_DAC10_Set+0xb0>
	else HAL_GPIO_WritePin(I_DAC6_GPIO_Port, I_DAC6_Pin, GPIO_PIN_RESET);
 80059d2:	2380      	movs	r3, #128	@ 0x80
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	483f      	ldr	r0, [pc, #252]	@ (8005ad4 <i_DAC10_Set+0x1a4>)
 80059d8:	2200      	movs	r2, #0
 80059da:	0019      	movs	r1, r3
 80059dc:	f004 f97f 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 5 set
	if (iDACout & 0x0020)
 80059e0:	1dbb      	adds	r3, r7, #6
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	2220      	movs	r2, #32
 80059e6:	4013      	ands	r3, r2
 80059e8:	d006      	beq.n	80059f8 <i_DAC10_Set+0xc8>
		 HAL_GPIO_WritePin(I_DAC5_GPIO_Port, I_DAC5_Pin, GPIO_PIN_SET);
 80059ea:	4b3b      	ldr	r3, [pc, #236]	@ (8005ad8 <i_DAC10_Set+0x1a8>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	2102      	movs	r1, #2
 80059f0:	0018      	movs	r0, r3
 80059f2:	f004 f974 	bl	8009cde <HAL_GPIO_WritePin>
 80059f6:	e005      	b.n	8005a04 <i_DAC10_Set+0xd4>
	else HAL_GPIO_WritePin(I_DAC5_GPIO_Port, I_DAC5_Pin, GPIO_PIN_RESET);
 80059f8:	4b37      	ldr	r3, [pc, #220]	@ (8005ad8 <i_DAC10_Set+0x1a8>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	2102      	movs	r1, #2
 80059fe:	0018      	movs	r0, r3
 8005a00:	f004 f96d 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 4 set
	if (iDACout & 0x0010)
 8005a04:	1dbb      	adds	r3, r7, #6
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	2210      	movs	r2, #16
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d007      	beq.n	8005a1e <i_DAC10_Set+0xee>
		 HAL_GPIO_WritePin(I_DAC4_GPIO_Port, I_DAC4_Pin, GPIO_PIN_SET);
 8005a0e:	2390      	movs	r3, #144	@ 0x90
 8005a10:	05db      	lsls	r3, r3, #23
 8005a12:	2201      	movs	r2, #1
 8005a14:	2104      	movs	r1, #4
 8005a16:	0018      	movs	r0, r3
 8005a18:	f004 f961 	bl	8009cde <HAL_GPIO_WritePin>
 8005a1c:	e006      	b.n	8005a2c <i_DAC10_Set+0xfc>
	else HAL_GPIO_WritePin(I_DAC4_GPIO_Port, I_DAC4_Pin, GPIO_PIN_RESET);
 8005a1e:	2390      	movs	r3, #144	@ 0x90
 8005a20:	05db      	lsls	r3, r3, #23
 8005a22:	2200      	movs	r2, #0
 8005a24:	2104      	movs	r1, #4
 8005a26:	0018      	movs	r0, r3
 8005a28:	f004 f959 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 3 set
	if (iDACout & 0x0008)
 8005a2c:	1dbb      	adds	r3, r7, #6
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	2208      	movs	r2, #8
 8005a32:	4013      	ands	r3, r2
 8005a34:	d006      	beq.n	8005a44 <i_DAC10_Set+0x114>
		 HAL_GPIO_WritePin(I_DAC3_GPIO_Port, I_DAC3_Pin, GPIO_PIN_SET);
 8005a36:	4b28      	ldr	r3, [pc, #160]	@ (8005ad8 <i_DAC10_Set+0x1a8>)
 8005a38:	2201      	movs	r2, #1
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	f004 f94e 	bl	8009cde <HAL_GPIO_WritePin>
 8005a42:	e005      	b.n	8005a50 <i_DAC10_Set+0x120>
	else HAL_GPIO_WritePin(I_DAC3_GPIO_Port, I_DAC3_Pin, GPIO_PIN_RESET);
 8005a44:	4b24      	ldr	r3, [pc, #144]	@ (8005ad8 <i_DAC10_Set+0x1a8>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	2101      	movs	r1, #1
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f004 f947 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 2 set
	if (iDACout & 0x0004)
 8005a50:	1dbb      	adds	r3, r7, #6
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	2204      	movs	r2, #4
 8005a56:	4013      	ands	r3, r2
 8005a58:	d007      	beq.n	8005a6a <i_DAC10_Set+0x13a>
		 HAL_GPIO_WritePin(I_DAC2_GPIO_Port, I_DAC2_Pin, GPIO_PIN_SET);
 8005a5a:	2380      	movs	r3, #128	@ 0x80
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	481d      	ldr	r0, [pc, #116]	@ (8005ad4 <i_DAC10_Set+0x1a4>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	0019      	movs	r1, r3
 8005a64:	f004 f93b 	bl	8009cde <HAL_GPIO_WritePin>
 8005a68:	e006      	b.n	8005a78 <i_DAC10_Set+0x148>
	else HAL_GPIO_WritePin(I_DAC2_GPIO_Port, I_DAC2_Pin, GPIO_PIN_RESET);
 8005a6a:	2380      	movs	r3, #128	@ 0x80
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4819      	ldr	r0, [pc, #100]	@ (8005ad4 <i_DAC10_Set+0x1a4>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	0019      	movs	r1, r3
 8005a74:	f004 f933 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 1 set
	if (iDACout & 0x0002)
 8005a78:	1dbb      	adds	r3, r7, #6
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	4013      	ands	r3, r2
 8005a80:	d006      	beq.n	8005a90 <i_DAC10_Set+0x160>
		 HAL_GPIO_WritePin(I_DAC1_GPIO_Port, I_DAC1_Pin, GPIO_PIN_SET);
 8005a82:	4b14      	ldr	r3, [pc, #80]	@ (8005ad4 <i_DAC10_Set+0x1a4>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	2108      	movs	r1, #8
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f004 f928 	bl	8009cde <HAL_GPIO_WritePin>
 8005a8e:	e005      	b.n	8005a9c <i_DAC10_Set+0x16c>
	else HAL_GPIO_WritePin(I_DAC1_GPIO_Port, I_DAC1_Pin, GPIO_PIN_RESET);
 8005a90:	4b10      	ldr	r3, [pc, #64]	@ (8005ad4 <i_DAC10_Set+0x1a4>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	2108      	movs	r1, #8
 8005a96:	0018      	movs	r0, r3
 8005a98:	f004 f921 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 0 set
	if (iDACout & 0x0001)
 8005a9c:	1dbb      	adds	r3, r7, #6
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d008      	beq.n	8005ab8 <i_DAC10_Set+0x188>
		 HAL_GPIO_WritePin(I_DAC0_GPIO_Port, I_DAC0_Pin, GPIO_PIN_SET);
 8005aa6:	2380      	movs	r3, #128	@ 0x80
 8005aa8:	0219      	lsls	r1, r3, #8
 8005aaa:	2390      	movs	r3, #144	@ 0x90
 8005aac:	05db      	lsls	r3, r3, #23
 8005aae:	2201      	movs	r2, #1
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f004 f914 	bl	8009cde <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(I_DAC0_GPIO_Port, I_DAC0_Pin, GPIO_PIN_RESET);
}
 8005ab6:	e007      	b.n	8005ac8 <i_DAC10_Set+0x198>
	else HAL_GPIO_WritePin(I_DAC0_GPIO_Port, I_DAC0_Pin, GPIO_PIN_RESET);
 8005ab8:	2380      	movs	r3, #128	@ 0x80
 8005aba:	0219      	lsls	r1, r3, #8
 8005abc:	2390      	movs	r3, #144	@ 0x90
 8005abe:	05db      	lsls	r3, r3, #23
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f004 f90b 	bl	8009cde <HAL_GPIO_WritePin>
}
 8005ac8:	46c0      	nop			@ (mov r8, r8)
 8005aca:	46bd      	mov	sp, r7
 8005acc:	b002      	add	sp, #8
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	48000800 	.word	0x48000800
 8005ad4:	48000400 	.word	0x48000400
 8005ad8:	48001400 	.word	0x48001400

08005adc <v_DAC10_Set>:

void v_DAC10_Set(uint16_t vDACout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	0002      	movs	r2, r0
 8005ae4:	1dbb      	adds	r3, r7, #6
 8005ae6:	801a      	strh	r2, [r3, #0]
	// output bit number 9 set
	if (vDACout & 0x0200)
 8005ae8:	1dbb      	adds	r3, r7, #6
 8005aea:	881a      	ldrh	r2, [r3, #0]
 8005aec:	2380      	movs	r3, #128	@ 0x80
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4013      	ands	r3, r2
 8005af2:	d007      	beq.n	8005b04 <v_DAC10_Set+0x28>
		 HAL_GPIO_WritePin(V_DAC9_GPIO_Port, V_DAC9_Pin, GPIO_PIN_SET);
 8005af4:	2380      	movs	r3, #128	@ 0x80
 8005af6:	01db      	lsls	r3, r3, #7
 8005af8:	4864      	ldr	r0, [pc, #400]	@ (8005c8c <v_DAC10_Set+0x1b0>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	0019      	movs	r1, r3
 8005afe:	f004 f8ee 	bl	8009cde <HAL_GPIO_WritePin>
 8005b02:	e006      	b.n	8005b12 <v_DAC10_Set+0x36>
	else HAL_GPIO_WritePin(V_DAC9_GPIO_Port, V_DAC9_Pin, GPIO_PIN_RESET);
 8005b04:	2380      	movs	r3, #128	@ 0x80
 8005b06:	01db      	lsls	r3, r3, #7
 8005b08:	4860      	ldr	r0, [pc, #384]	@ (8005c8c <v_DAC10_Set+0x1b0>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	0019      	movs	r1, r3
 8005b0e:	f004 f8e6 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 8 set
	if (vDACout & 0x0100)
 8005b12:	1dbb      	adds	r3, r7, #6
 8005b14:	881a      	ldrh	r2, [r3, #0]
 8005b16:	2380      	movs	r3, #128	@ 0x80
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d007      	beq.n	8005b2e <v_DAC10_Set+0x52>
		 HAL_GPIO_WritePin(V_DAC8_GPIO_Port, V_DAC8_Pin, GPIO_PIN_SET);
 8005b1e:	2380      	movs	r3, #128	@ 0x80
 8005b20:	019b      	lsls	r3, r3, #6
 8005b22:	485a      	ldr	r0, [pc, #360]	@ (8005c8c <v_DAC10_Set+0x1b0>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	0019      	movs	r1, r3
 8005b28:	f004 f8d9 	bl	8009cde <HAL_GPIO_WritePin>
 8005b2c:	e006      	b.n	8005b3c <v_DAC10_Set+0x60>
	else HAL_GPIO_WritePin(V_DAC8_GPIO_Port, V_DAC8_Pin, GPIO_PIN_RESET);
 8005b2e:	2380      	movs	r3, #128	@ 0x80
 8005b30:	019b      	lsls	r3, r3, #6
 8005b32:	4856      	ldr	r0, [pc, #344]	@ (8005c8c <v_DAC10_Set+0x1b0>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	0019      	movs	r1, r3
 8005b38:	f004 f8d1 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 7 set
	if (vDACout & 0x0080)
 8005b3c:	1dbb      	adds	r3, r7, #6
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	2280      	movs	r2, #128	@ 0x80
 8005b42:	4013      	ands	r3, r2
 8005b44:	d007      	beq.n	8005b56 <v_DAC10_Set+0x7a>
		 HAL_GPIO_WritePin(V_DAC7_GPIO_Port, V_DAC7_Pin, GPIO_PIN_SET);
 8005b46:	2380      	movs	r3, #128	@ 0x80
 8005b48:	015b      	lsls	r3, r3, #5
 8005b4a:	4850      	ldr	r0, [pc, #320]	@ (8005c8c <v_DAC10_Set+0x1b0>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	0019      	movs	r1, r3
 8005b50:	f004 f8c5 	bl	8009cde <HAL_GPIO_WritePin>
 8005b54:	e006      	b.n	8005b64 <v_DAC10_Set+0x88>
	else HAL_GPIO_WritePin(V_DAC7_GPIO_Port, V_DAC7_Pin, GPIO_PIN_RESET);
 8005b56:	2380      	movs	r3, #128	@ 0x80
 8005b58:	015b      	lsls	r3, r3, #5
 8005b5a:	484c      	ldr	r0, [pc, #304]	@ (8005c8c <v_DAC10_Set+0x1b0>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	0019      	movs	r1, r3
 8005b60:	f004 f8bd 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 6 set
	if (vDACout & 0x0040)
 8005b64:	1dbb      	adds	r3, r7, #6
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	2240      	movs	r2, #64	@ 0x40
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	d006      	beq.n	8005b7c <v_DAC10_Set+0xa0>
		 HAL_GPIO_WritePin(V_DAC6_GPIO_Port, V_DAC6_Pin, GPIO_PIN_SET);
 8005b6e:	4b47      	ldr	r3, [pc, #284]	@ (8005c8c <v_DAC10_Set+0x1b0>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	2104      	movs	r1, #4
 8005b74:	0018      	movs	r0, r3
 8005b76:	f004 f8b2 	bl	8009cde <HAL_GPIO_WritePin>
 8005b7a:	e005      	b.n	8005b88 <v_DAC10_Set+0xac>
	else HAL_GPIO_WritePin(V_DAC6_GPIO_Port, V_DAC6_Pin, GPIO_PIN_RESET);
 8005b7c:	4b43      	ldr	r3, [pc, #268]	@ (8005c8c <v_DAC10_Set+0x1b0>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2104      	movs	r1, #4
 8005b82:	0018      	movs	r0, r3
 8005b84:	f004 f8ab 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 5 set
	if (vDACout & 0x0020)
 8005b88:	1dbb      	adds	r3, r7, #6
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d007      	beq.n	8005ba2 <v_DAC10_Set+0xc6>
		 HAL_GPIO_WritePin(V_DAC5_GPIO_Port, V_DAC5_Pin, GPIO_PIN_SET);
 8005b92:	2380      	movs	r3, #128	@ 0x80
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	483d      	ldr	r0, [pc, #244]	@ (8005c8c <v_DAC10_Set+0x1b0>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	f004 f89f 	bl	8009cde <HAL_GPIO_WritePin>
 8005ba0:	e006      	b.n	8005bb0 <v_DAC10_Set+0xd4>
	else HAL_GPIO_WritePin(V_DAC5_GPIO_Port, V_DAC5_Pin, GPIO_PIN_RESET);
 8005ba2:	2380      	movs	r3, #128	@ 0x80
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	4839      	ldr	r0, [pc, #228]	@ (8005c8c <v_DAC10_Set+0x1b0>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	0019      	movs	r1, r3
 8005bac:	f004 f897 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 4 set
	if (vDACout & 0x0010)
 8005bb0:	1dbb      	adds	r3, r7, #6
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	2210      	movs	r2, #16
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	d008      	beq.n	8005bcc <v_DAC10_Set+0xf0>
		 HAL_GPIO_WritePin(V_DAC4_GPIO_Port, V_DAC4_Pin, GPIO_PIN_SET);
 8005bba:	2380      	movs	r3, #128	@ 0x80
 8005bbc:	0059      	lsls	r1, r3, #1
 8005bbe:	2390      	movs	r3, #144	@ 0x90
 8005bc0:	05db      	lsls	r3, r3, #23
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f004 f88a 	bl	8009cde <HAL_GPIO_WritePin>
 8005bca:	e007      	b.n	8005bdc <v_DAC10_Set+0x100>
	else HAL_GPIO_WritePin(V_DAC4_GPIO_Port, V_DAC4_Pin, GPIO_PIN_RESET);
 8005bcc:	2380      	movs	r3, #128	@ 0x80
 8005bce:	0059      	lsls	r1, r3, #1
 8005bd0:	2390      	movs	r3, #144	@ 0x90
 8005bd2:	05db      	lsls	r3, r3, #23
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f004 f881 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 3 set
	if (vDACout & 0x0008)
 8005bdc:	1dbb      	adds	r3, r7, #6
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	2208      	movs	r2, #8
 8005be2:	4013      	ands	r3, r2
 8005be4:	d008      	beq.n	8005bf8 <v_DAC10_Set+0x11c>
		 HAL_GPIO_WritePin(V_DAC3_GPIO_Port, V_DAC3_Pin, GPIO_PIN_SET);
 8005be6:	2380      	movs	r3, #128	@ 0x80
 8005be8:	0099      	lsls	r1, r3, #2
 8005bea:	2390      	movs	r3, #144	@ 0x90
 8005bec:	05db      	lsls	r3, r3, #23
 8005bee:	2201      	movs	r2, #1
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f004 f874 	bl	8009cde <HAL_GPIO_WritePin>
 8005bf6:	e007      	b.n	8005c08 <v_DAC10_Set+0x12c>
	else HAL_GPIO_WritePin(V_DAC3_GPIO_Port, V_DAC3_Pin, GPIO_PIN_RESET);
 8005bf8:	2380      	movs	r3, #128	@ 0x80
 8005bfa:	0099      	lsls	r1, r3, #2
 8005bfc:	2390      	movs	r3, #144	@ 0x90
 8005bfe:	05db      	lsls	r3, r3, #23
 8005c00:	2200      	movs	r2, #0
 8005c02:	0018      	movs	r0, r3
 8005c04:	f004 f86b 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 2 set
	if (vDACout & 0x0004)
 8005c08:	1dbb      	adds	r3, r7, #6
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	4013      	ands	r3, r2
 8005c10:	d008      	beq.n	8005c24 <v_DAC10_Set+0x148>
		 HAL_GPIO_WritePin(V_DAC2_GPIO_Port, V_DAC2_Pin, GPIO_PIN_SET);
 8005c12:	2380      	movs	r3, #128	@ 0x80
 8005c14:	0119      	lsls	r1, r3, #4
 8005c16:	2390      	movs	r3, #144	@ 0x90
 8005c18:	05db      	lsls	r3, r3, #23
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f004 f85e 	bl	8009cde <HAL_GPIO_WritePin>
 8005c22:	e007      	b.n	8005c34 <v_DAC10_Set+0x158>
	else HAL_GPIO_WritePin(V_DAC2_GPIO_Port, V_DAC2_Pin, GPIO_PIN_RESET);
 8005c24:	2380      	movs	r3, #128	@ 0x80
 8005c26:	0119      	lsls	r1, r3, #4
 8005c28:	2390      	movs	r3, #144	@ 0x90
 8005c2a:	05db      	lsls	r3, r3, #23
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f004 f855 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 1 set
	if (vDACout & 0x0002)
 8005c34:	1dbb      	adds	r3, r7, #6
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	d008      	beq.n	8005c50 <v_DAC10_Set+0x174>
		 HAL_GPIO_WritePin(V_DAC1_GPIO_Port, V_DAC1_Pin, GPIO_PIN_SET);
 8005c3e:	2380      	movs	r3, #128	@ 0x80
 8005c40:	0159      	lsls	r1, r3, #5
 8005c42:	2390      	movs	r3, #144	@ 0x90
 8005c44:	05db      	lsls	r3, r3, #23
 8005c46:	2201      	movs	r2, #1
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f004 f848 	bl	8009cde <HAL_GPIO_WritePin>
 8005c4e:	e007      	b.n	8005c60 <v_DAC10_Set+0x184>
	else HAL_GPIO_WritePin(V_DAC1_GPIO_Port, V_DAC1_Pin, GPIO_PIN_RESET);
 8005c50:	2380      	movs	r3, #128	@ 0x80
 8005c52:	0159      	lsls	r1, r3, #5
 8005c54:	2390      	movs	r3, #144	@ 0x90
 8005c56:	05db      	lsls	r3, r3, #23
 8005c58:	2200      	movs	r2, #0
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f004 f83f 	bl	8009cde <HAL_GPIO_WritePin>

	// output bit number 0 set
	if (vDACout & 0x0001)
 8005c60:	1dbb      	adds	r3, r7, #6
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	2201      	movs	r2, #1
 8005c66:	4013      	ands	r3, r2
 8005c68:	d006      	beq.n	8005c78 <v_DAC10_Set+0x19c>
		 HAL_GPIO_WritePin(V_DAC0_GPIO_Port, V_DAC0_Pin, GPIO_PIN_SET);
 8005c6a:	4b08      	ldr	r3, [pc, #32]	@ (8005c8c <v_DAC10_Set+0x1b0>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	2102      	movs	r1, #2
 8005c70:	0018      	movs	r0, r3
 8005c72:	f004 f834 	bl	8009cde <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(V_DAC0_GPIO_Port, V_DAC0_Pin, GPIO_PIN_RESET);
}
 8005c76:	e005      	b.n	8005c84 <v_DAC10_Set+0x1a8>
	else HAL_GPIO_WritePin(V_DAC0_GPIO_Port, V_DAC0_Pin, GPIO_PIN_RESET);
 8005c78:	4b04      	ldr	r3, [pc, #16]	@ (8005c8c <v_DAC10_Set+0x1b0>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f004 f82d 	bl	8009cde <HAL_GPIO_WritePin>
}
 8005c84:	46c0      	nop			@ (mov r8, r8)
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b002      	add	sp, #8
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	48000400 	.word	0x48000400

08005c90 <get_adcs>:

void get_adcs(volatile uint16_t adc_RAW[], float *temp_MCU,
		float *outU,float *outI, float constU, float constI, float vdd)
{
 8005c90:	b5b0      	push	{r4, r5, r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
	  //calculate internal MCU temperature
	  *temp_MCU = (((int32_t)adc_RAW[2] * vdd/3.3)- (int32_t) *TEMP30_CAL_ADDR );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7fb faa4 	bl	80011f4 <__aeabi_i2f>
 8005cac:	1c03      	adds	r3, r0, #0
 8005cae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005cb0:	1c18      	adds	r0, r3, #0
 8005cb2:	f7fa ff9d 	bl	8000bf0 <__aeabi_fmul>
 8005cb6:	1c03      	adds	r3, r0, #0
 8005cb8:	1c18      	adds	r0, r3, #0
 8005cba:	f7fd f921 	bl	8002f00 <__aeabi_f2d>
 8005cbe:	4a98      	ldr	r2, [pc, #608]	@ (8005f20 <get_adcs+0x290>)
 8005cc0:	4b98      	ldr	r3, [pc, #608]	@ (8005f24 <get_adcs+0x294>)
 8005cc2:	f7fb fe47 	bl	8001954 <__aeabi_ddiv>
 8005cc6:	0002      	movs	r2, r0
 8005cc8:	000b      	movs	r3, r1
 8005cca:	0014      	movs	r4, r2
 8005ccc:	001d      	movs	r5, r3
 8005cce:	4b96      	ldr	r3, [pc, #600]	@ (8005f28 <get_adcs+0x298>)
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f7fd f8e6 	bl	8002ea4 <__aeabi_i2d>
 8005cd8:	0002      	movs	r2, r0
 8005cda:	000b      	movs	r3, r1
 8005cdc:	0020      	movs	r0, r4
 8005cde:	0029      	movs	r1, r5
 8005ce0:	f7fc fd44 	bl	800276c <__aeabi_dsub>
 8005ce4:	0002      	movs	r2, r0
 8005ce6:	000b      	movs	r3, r1
 8005ce8:	0010      	movs	r0, r2
 8005cea:	0019      	movs	r1, r3
 8005cec:	f7fd f950 	bl	8002f90 <__aeabi_d2f>
 8005cf0:	1c02      	adds	r2, r0, #0
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	601a      	str	r2, [r3, #0]
	  *temp_MCU = *temp_MCU * (int32_t)(110 - 30);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	498c      	ldr	r1, [pc, #560]	@ (8005f2c <get_adcs+0x29c>)
 8005cfc:	1c18      	adds	r0, r3, #0
 8005cfe:	f7fa ff77 	bl	8000bf0 <__aeabi_fmul>
 8005d02:	1c03      	adds	r3, r0, #0
 8005d04:	1c1a      	adds	r2, r3, #0
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	601a      	str	r2, [r3, #0]
	  *temp_MCU = *temp_MCU / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	681c      	ldr	r4, [r3, #0]
 8005d0e:	4b88      	ldr	r3, [pc, #544]	@ (8005f30 <get_adcs+0x2a0>)
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	001a      	movs	r2, r3
 8005d14:	4b84      	ldr	r3, [pc, #528]	@ (8005f28 <get_adcs+0x298>)
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f7fb fa6a 	bl	80011f4 <__aeabi_i2f>
 8005d20:	1c03      	adds	r3, r0, #0
 8005d22:	1c19      	adds	r1, r3, #0
 8005d24:	1c20      	adds	r0, r4, #0
 8005d26:	f7fa fd7d 	bl	8000824 <__aeabi_fdiv>
 8005d2a:	1c03      	adds	r3, r0, #0
 8005d2c:	1c1a      	adds	r2, r3, #0
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	601a      	str	r2, [r3, #0]
	  *temp_MCU = *temp_MCU + 30;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	497f      	ldr	r1, [pc, #508]	@ (8005f34 <get_adcs+0x2a4>)
 8005d38:	1c18      	adds	r0, r3, #0
 8005d3a:	f7fa fbe9 	bl	8000510 <__aeabi_fadd>
 8005d3e:	1c03      	adds	r3, r0, #0
 8005d40:	1c1a      	adds	r2, r3, #0
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	601a      	str	r2, [r3, #0]
	  #define FILTER_DEPTH 45  //max.16 else OVERFLOW, if average method used
	  static uint8_t  filt_cnt;
	  static uint16_t adc_RAW_U[FILTER_DEPTH];
	  static uint16_t adc_RAW_I[FILTER_DEPTH];

	  adc_RAW_U[filt_cnt] = adc_RAW[0];
 8005d46:	4b7c      	ldr	r3, [pc, #496]	@ (8005f38 <get_adcs+0x2a8>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	001a      	movs	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b299      	uxth	r1, r3
 8005d52:	4b7a      	ldr	r3, [pc, #488]	@ (8005f3c <get_adcs+0x2ac>)
 8005d54:	0052      	lsls	r2, r2, #1
 8005d56:	52d1      	strh	r1, [r2, r3]
	  adc_RAW_I[filt_cnt] = adc_RAW[1];
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3302      	adds	r3, #2
 8005d5c:	4a76      	ldr	r2, [pc, #472]	@ (8005f38 <get_adcs+0x2a8>)
 8005d5e:	7812      	ldrb	r2, [r2, #0]
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b299      	uxth	r1, r3
 8005d64:	4b76      	ldr	r3, [pc, #472]	@ (8005f40 <get_adcs+0x2b0>)
 8005d66:	0052      	lsls	r2, r2, #1
 8005d68:	52d1      	strh	r1, [r2, r3]
	  filt_cnt++;
 8005d6a:	4b73      	ldr	r3, [pc, #460]	@ (8005f38 <get_adcs+0x2a8>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	4b71      	ldr	r3, [pc, #452]	@ (8005f38 <get_adcs+0x2a8>)
 8005d74:	701a      	strb	r2, [r3, #0]
	  if(filt_cnt > (FILTER_DEPTH-1)) filt_cnt = 0;
 8005d76:	4b70      	ldr	r3, [pc, #448]	@ (8005f38 <get_adcs+0x2a8>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b2c      	cmp	r3, #44	@ 0x2c
 8005d7c:	d902      	bls.n	8005d84 <get_adcs+0xf4>
 8005d7e:	4b6e      	ldr	r3, [pc, #440]	@ (8005f38 <get_adcs+0x2a8>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	701a      	strb	r2, [r3, #0]
	  *outI = constI*avg_I;
	  *outU = constU*avg_U;
	  */

	  // Method to find most common values
	    uint16_t maxCountU = 0;  // Maximum number of encounters -U
 8005d84:	231e      	movs	r3, #30
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	2200      	movs	r2, #0
 8005d8a:	801a      	strh	r2, [r3, #0]
	    uint16_t maxCountI = 0;  // Maximum number of encounters -I
 8005d8c:	231c      	movs	r3, #28
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	2200      	movs	r2, #0
 8005d92:	801a      	strh	r2, [r3, #0]
	    uint16_t mostFrequentU = adc_RAW_U[0];  // Most common number - U
 8005d94:	231a      	movs	r3, #26
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	4a68      	ldr	r2, [pc, #416]	@ (8005f3c <get_adcs+0x2ac>)
 8005d9a:	8812      	ldrh	r2, [r2, #0]
 8005d9c:	801a      	strh	r2, [r3, #0]
	    uint16_t mostFrequentI = adc_RAW_I[0];  // Most common number - I
 8005d9e:	2318      	movs	r3, #24
 8005da0:	18fb      	adds	r3, r7, r3
 8005da2:	4a67      	ldr	r2, [pc, #412]	@ (8005f40 <get_adcs+0x2b0>)
 8005da4:	8812      	ldrh	r2, [r2, #0]
 8005da6:	801a      	strh	r2, [r3, #0]

	    for (uint8_t i = 0; i < FILTER_DEPTH; i++) {
 8005da8:	2317      	movs	r3, #23
 8005daa:	18fb      	adds	r3, r7, r3
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e074      	b.n	8005e9c <get_adcs+0x20c>
	        uint8_t currentCountU = 1;  // We reset the counter for the current number-U
 8005db2:	2316      	movs	r3, #22
 8005db4:	18fb      	adds	r3, r7, r3
 8005db6:	2201      	movs	r2, #1
 8005db8:	701a      	strb	r2, [r3, #0]
	        uint8_t currentCountI = 1;  // We reset the counter for the current number-I
 8005dba:	2315      	movs	r3, #21
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	701a      	strb	r2, [r3, #0]

	        // We loop through the remaining elements of the array and count
	        //the occurrences of the current number
	        for (uint8_t j = i + 1; j < FILTER_DEPTH; j++) {
 8005dc2:	2314      	movs	r3, #20
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	2217      	movs	r2, #23
 8005dc8:	18ba      	adds	r2, r7, r2
 8005dca:	7812      	ldrb	r2, [r2, #0]
 8005dcc:	3201      	adds	r2, #1
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	e02d      	b.n	8005e2e <get_adcs+0x19e>
	            if (adc_RAW_U[i] == adc_RAW_U[j]) currentCountU++;
 8005dd2:	2317      	movs	r3, #23
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	781a      	ldrb	r2, [r3, #0]
 8005dd8:	4b58      	ldr	r3, [pc, #352]	@ (8005f3c <get_adcs+0x2ac>)
 8005dda:	0052      	lsls	r2, r2, #1
 8005ddc:	5ad2      	ldrh	r2, [r2, r3]
 8005dde:	2314      	movs	r3, #20
 8005de0:	18fb      	adds	r3, r7, r3
 8005de2:	7819      	ldrb	r1, [r3, #0]
 8005de4:	4b55      	ldr	r3, [pc, #340]	@ (8005f3c <get_adcs+0x2ac>)
 8005de6:	0049      	lsls	r1, r1, #1
 8005de8:	5acb      	ldrh	r3, [r1, r3]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d105      	bne.n	8005dfa <get_adcs+0x16a>
 8005dee:	2116      	movs	r1, #22
 8005df0:	187b      	adds	r3, r7, r1
 8005df2:	781a      	ldrb	r2, [r3, #0]
 8005df4:	187b      	adds	r3, r7, r1
 8005df6:	3201      	adds	r2, #1
 8005df8:	701a      	strb	r2, [r3, #0]
	            if (adc_RAW_I[i] == adc_RAW_I[j]) currentCountI++;
 8005dfa:	2317      	movs	r3, #23
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	781a      	ldrb	r2, [r3, #0]
 8005e00:	4b4f      	ldr	r3, [pc, #316]	@ (8005f40 <get_adcs+0x2b0>)
 8005e02:	0052      	lsls	r2, r2, #1
 8005e04:	5ad2      	ldrh	r2, [r2, r3]
 8005e06:	2314      	movs	r3, #20
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	7819      	ldrb	r1, [r3, #0]
 8005e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8005f40 <get_adcs+0x2b0>)
 8005e0e:	0049      	lsls	r1, r1, #1
 8005e10:	5acb      	ldrh	r3, [r1, r3]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d105      	bne.n	8005e22 <get_adcs+0x192>
 8005e16:	2115      	movs	r1, #21
 8005e18:	187b      	adds	r3, r7, r1
 8005e1a:	781a      	ldrb	r2, [r3, #0]
 8005e1c:	187b      	adds	r3, r7, r1
 8005e1e:	3201      	adds	r2, #1
 8005e20:	701a      	strb	r2, [r3, #0]
	        for (uint8_t j = i + 1; j < FILTER_DEPTH; j++) {
 8005e22:	2114      	movs	r1, #20
 8005e24:	187b      	adds	r3, r7, r1
 8005e26:	781a      	ldrb	r2, [r3, #0]
 8005e28:	187b      	adds	r3, r7, r1
 8005e2a:	3201      	adds	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	2314      	movs	r3, #20
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b2c      	cmp	r3, #44	@ 0x2c
 8005e36:	d9cc      	bls.n	8005dd2 <get_adcs+0x142>
	        }

	        //We check if the current number has more occurrences than the maximum for U
	        if (currentCountU > maxCountU) {
 8005e38:	2116      	movs	r1, #22
 8005e3a:	187b      	adds	r3, r7, r1
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	201e      	movs	r0, #30
 8005e42:	183a      	adds	r2, r7, r0
 8005e44:	8812      	ldrh	r2, [r2, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d20c      	bcs.n	8005e64 <get_adcs+0x1d4>
	            maxCountU = currentCountU;
 8005e4a:	183b      	adds	r3, r7, r0
 8005e4c:	187a      	adds	r2, r7, r1
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	801a      	strh	r2, [r3, #0]
	            mostFrequentU = adc_RAW_U[i];
 8005e52:	2317      	movs	r3, #23
 8005e54:	18fb      	adds	r3, r7, r3
 8005e56:	7819      	ldrb	r1, [r3, #0]
 8005e58:	231a      	movs	r3, #26
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	4a37      	ldr	r2, [pc, #220]	@ (8005f3c <get_adcs+0x2ac>)
 8005e5e:	0049      	lsls	r1, r1, #1
 8005e60:	5a8a      	ldrh	r2, [r1, r2]
 8005e62:	801a      	strh	r2, [r3, #0]
	        }
	        //We check if the current number has more occurrences than the maximum for I
	        if (currentCountI > maxCountI) {
 8005e64:	2115      	movs	r1, #21
 8005e66:	187b      	adds	r3, r7, r1
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	201c      	movs	r0, #28
 8005e6e:	183a      	adds	r2, r7, r0
 8005e70:	8812      	ldrh	r2, [r2, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d20c      	bcs.n	8005e90 <get_adcs+0x200>
	            maxCountI = currentCountI;
 8005e76:	183b      	adds	r3, r7, r0
 8005e78:	187a      	adds	r2, r7, r1
 8005e7a:	7812      	ldrb	r2, [r2, #0]
 8005e7c:	801a      	strh	r2, [r3, #0]
	            mostFrequentI = adc_RAW_I[i];
 8005e7e:	2317      	movs	r3, #23
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	7819      	ldrb	r1, [r3, #0]
 8005e84:	2318      	movs	r3, #24
 8005e86:	18fb      	adds	r3, r7, r3
 8005e88:	4a2d      	ldr	r2, [pc, #180]	@ (8005f40 <get_adcs+0x2b0>)
 8005e8a:	0049      	lsls	r1, r1, #1
 8005e8c:	5a8a      	ldrh	r2, [r1, r2]
 8005e8e:	801a      	strh	r2, [r3, #0]
	    for (uint8_t i = 0; i < FILTER_DEPTH; i++) {
 8005e90:	2117      	movs	r1, #23
 8005e92:	187b      	adds	r3, r7, r1
 8005e94:	781a      	ldrb	r2, [r3, #0]
 8005e96:	187b      	adds	r3, r7, r1
 8005e98:	3201      	adds	r2, #1
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	2317      	movs	r3, #23
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b2c      	cmp	r3, #44	@ 0x2c
 8005ea4:	d800      	bhi.n	8005ea8 <get_adcs+0x218>
 8005ea6:	e784      	b.n	8005db2 <get_adcs+0x122>
	        }
	    }
		  *outI = constI*mostFrequentI;
 8005ea8:	2318      	movs	r3, #24
 8005eaa:	18fb      	adds	r3, r7, r3
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f7fb f9a0 	bl	80011f4 <__aeabi_i2f>
 8005eb4:	1c03      	adds	r3, r0, #0
 8005eb6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005eb8:	1c18      	adds	r0, r3, #0
 8005eba:	f7fa fe99 	bl	8000bf0 <__aeabi_fmul>
 8005ebe:	1c03      	adds	r3, r0, #0
 8005ec0:	1c1a      	adds	r2, r3, #0
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	601a      	str	r2, [r3, #0]
		  *outU = constU*mostFrequentU-(0.18*(*outI));
 8005ec6:	231a      	movs	r3, #26
 8005ec8:	18fb      	adds	r3, r7, r3
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f7fb f991 	bl	80011f4 <__aeabi_i2f>
 8005ed2:	1c03      	adds	r3, r0, #0
 8005ed4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ed6:	1c18      	adds	r0, r3, #0
 8005ed8:	f7fa fe8a 	bl	8000bf0 <__aeabi_fmul>
 8005edc:	1c03      	adds	r3, r0, #0
 8005ede:	1c18      	adds	r0, r3, #0
 8005ee0:	f7fd f80e 	bl	8002f00 <__aeabi_f2d>
 8005ee4:	0004      	movs	r4, r0
 8005ee6:	000d      	movs	r5, r1
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	1c18      	adds	r0, r3, #0
 8005eee:	f7fd f807 	bl	8002f00 <__aeabi_f2d>
 8005ef2:	4a14      	ldr	r2, [pc, #80]	@ (8005f44 <get_adcs+0x2b4>)
 8005ef4:	4b14      	ldr	r3, [pc, #80]	@ (8005f48 <get_adcs+0x2b8>)
 8005ef6:	f7fc f971 	bl	80021dc <__aeabi_dmul>
 8005efa:	0002      	movs	r2, r0
 8005efc:	000b      	movs	r3, r1
 8005efe:	0020      	movs	r0, r4
 8005f00:	0029      	movs	r1, r5
 8005f02:	f7fc fc33 	bl	800276c <__aeabi_dsub>
 8005f06:	0002      	movs	r2, r0
 8005f08:	000b      	movs	r3, r1
 8005f0a:	0010      	movs	r0, r2
 8005f0c:	0019      	movs	r1, r3
 8005f0e:	f7fd f83f 	bl	8002f90 <__aeabi_d2f>
 8005f12:	1c02      	adds	r2, r0, #0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]
		  //*outU = constU*mostFrequentU;
}
 8005f18:	46c0      	nop			@ (mov r8, r8)
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	b008      	add	sp, #32
 8005f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f20:	66666666 	.word	0x66666666
 8005f24:	400a6666 	.word	0x400a6666
 8005f28:	1ffff7b8 	.word	0x1ffff7b8
 8005f2c:	42a00000 	.word	0x42a00000
 8005f30:	1ffff7c2 	.word	0x1ffff7c2
 8005f34:	41f00000 	.word	0x41f00000
 8005f38:	200003e0 	.word	0x200003e0
 8005f3c:	200003e4 	.word	0x200003e4
 8005f40:	20000440 	.word	0x20000440
 8005f44:	70a3d70a 	.word	0x70a3d70a
 8005f48:	3fc70a3d 	.word	0x3fc70a3d

08005f4c <float_to_char>:

char * float_to_char(float x, char *p)
{
 8005f4c:	b5b0      	push	{r4, r5, r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
    char *s = p + CHAR_BUFF_SIZE; // go to end of buffer
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	330a      	adds	r3, #10
 8005f5a:	617b      	str	r3, [r7, #20]
    uint16_t decimals;  // variable to store the decimals
    int units;  // variable to store the units (part to left of decimal place)
    if (x < 0) { // take care of negative numbers
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fa fa96 	bl	8000490 <__aeabi_fcmplt>
 8005f64:	1e03      	subs	r3, r0, #0
 8005f66:	d01c      	beq.n	8005fa2 <float_to_char+0x56>
        decimals = (int)(x * -1000) % 1000; // make 1000 for 3 decimals etc.
 8005f68:	4955      	ldr	r1, [pc, #340]	@ (80060c0 <float_to_char+0x174>)
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fa fe40 	bl	8000bf0 <__aeabi_fmul>
 8005f70:	1c03      	adds	r3, r0, #0
 8005f72:	1c18      	adds	r0, r3, #0
 8005f74:	f7fb f91e 	bl	80011b4 <__aeabi_f2iz>
 8005f78:	0002      	movs	r2, r0
 8005f7a:	23fa      	movs	r3, #250	@ 0xfa
 8005f7c:	0099      	lsls	r1, r3, #2
 8005f7e:	0010      	movs	r0, r2
 8005f80:	f7fa fa30 	bl	80003e4 <__aeabi_idivmod>
 8005f84:	000b      	movs	r3, r1
 8005f86:	001a      	movs	r2, r3
 8005f88:	2312      	movs	r3, #18
 8005f8a:	18fb      	adds	r3, r7, r3
 8005f8c:	801a      	strh	r2, [r3, #0]
        units = (int)(-1 * x);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2280      	movs	r2, #128	@ 0x80
 8005f92:	0612      	lsls	r2, r2, #24
 8005f94:	4053      	eors	r3, r2
 8005f96:	1c18      	adds	r0, r3, #0
 8005f98:	f7fb f90c 	bl	80011b4 <__aeabi_f2iz>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e017      	b.n	8005fd2 <float_to_char+0x86>
    } else { // positive numbers
        decimals = (int)(x * 1000) % 1000;
 8005fa2:	4948      	ldr	r1, [pc, #288]	@ (80060c4 <float_to_char+0x178>)
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fa fe23 	bl	8000bf0 <__aeabi_fmul>
 8005faa:	1c03      	adds	r3, r0, #0
 8005fac:	1c18      	adds	r0, r3, #0
 8005fae:	f7fb f901 	bl	80011b4 <__aeabi_f2iz>
 8005fb2:	0002      	movs	r2, r0
 8005fb4:	23fa      	movs	r3, #250	@ 0xfa
 8005fb6:	0099      	lsls	r1, r3, #2
 8005fb8:	0010      	movs	r0, r2
 8005fba:	f7fa fa13 	bl	80003e4 <__aeabi_idivmod>
 8005fbe:	000b      	movs	r3, r1
 8005fc0:	001a      	movs	r2, r3
 8005fc2:	2312      	movs	r3, #18
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	801a      	strh	r2, [r3, #0]
        units = (int)x;
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fb f8f3 	bl	80011b4 <__aeabi_f2iz>
 8005fce:	0003      	movs	r3, r0
 8005fd0:	60fb      	str	r3, [r7, #12]
    }

    *--s = (decimals % 10) + '0';
 8005fd2:	2412      	movs	r4, #18
 8005fd4:	193b      	adds	r3, r7, r4
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	210a      	movs	r1, #10
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f7fa f918 	bl	8000210 <__aeabi_uidivmod>
 8005fe0:	000b      	movs	r3, r1
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	3a01      	subs	r2, #1
 8005fea:	617a      	str	r2, [r7, #20]
 8005fec:	3330      	adds	r3, #48	@ 0x30
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	701a      	strb	r2, [r3, #0]
    decimals /= 10; // repeat for as many decimal places as you need
 8005ff4:	0025      	movs	r5, r4
 8005ff6:	197c      	adds	r4, r7, r5
 8005ff8:	197b      	adds	r3, r7, r5
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	210a      	movs	r1, #10
 8005ffe:	0018      	movs	r0, r3
 8006000:	f7fa f880 	bl	8000104 <__udivsi3>
 8006004:	0003      	movs	r3, r0
 8006006:	8023      	strh	r3, [r4, #0]
    *--s = (decimals % 10) + '0';
 8006008:	002c      	movs	r4, r5
 800600a:	193b      	adds	r3, r7, r4
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	210a      	movs	r1, #10
 8006010:	0018      	movs	r0, r3
 8006012:	f7fa f8fd 	bl	8000210 <__aeabi_uidivmod>
 8006016:	000b      	movs	r3, r1
 8006018:	b29b      	uxth	r3, r3
 800601a:	b2db      	uxtb	r3, r3
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	3a01      	subs	r2, #1
 8006020:	617a      	str	r2, [r7, #20]
 8006022:	3330      	adds	r3, #48	@ 0x30
 8006024:	b2da      	uxtb	r2, r3
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	701a      	strb	r2, [r3, #0]
    decimals /= 10; // I want 3 decimals :-)
 800602a:	0025      	movs	r5, r4
 800602c:	197c      	adds	r4, r7, r5
 800602e:	197b      	adds	r3, r7, r5
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	210a      	movs	r1, #10
 8006034:	0018      	movs	r0, r3
 8006036:	f7fa f865 	bl	8000104 <__udivsi3>
 800603a:	0003      	movs	r3, r0
 800603c:	8023      	strh	r3, [r4, #0]
    *--s = (decimals % 10) + '0';
 800603e:	197b      	adds	r3, r7, r5
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	210a      	movs	r1, #10
 8006044:	0018      	movs	r0, r3
 8006046:	f7fa f8e3 	bl	8000210 <__aeabi_uidivmod>
 800604a:	000b      	movs	r3, r1
 800604c:	b29b      	uxth	r3, r3
 800604e:	b2db      	uxtb	r3, r3
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	3a01      	subs	r2, #1
 8006054:	617a      	str	r2, [r7, #20]
 8006056:	3330      	adds	r3, #48	@ 0x30
 8006058:	b2da      	uxtb	r2, r3
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	701a      	strb	r2, [r3, #0]
    *--s = '.';
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	3b01      	subs	r3, #1
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	222e      	movs	r2, #46	@ 0x2e
 8006068:	701a      	strb	r2, [r3, #0]

    while (units > 0) {
 800606a:	e014      	b.n	8006096 <float_to_char+0x14a>
        *--s = (units % 10) + '0';
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	210a      	movs	r1, #10
 8006070:	0018      	movs	r0, r3
 8006072:	f7fa f9b7 	bl	80003e4 <__aeabi_idivmod>
 8006076:	000b      	movs	r3, r1
 8006078:	b2db      	uxtb	r3, r3
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	3a01      	subs	r2, #1
 800607e:	617a      	str	r2, [r7, #20]
 8006080:	3330      	adds	r3, #48	@ 0x30
 8006082:	b2da      	uxtb	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	701a      	strb	r2, [r3, #0]
        units /= 10;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	210a      	movs	r1, #10
 800608c:	0018      	movs	r0, r3
 800608e:	f7fa f8c3 	bl	8000218 <__divsi3>
 8006092:	0003      	movs	r3, r0
 8006094:	60fb      	str	r3, [r7, #12]
    while (units > 0) {
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	dce7      	bgt.n	800606c <float_to_char+0x120>
    }
    if (x < 0) *--s = '-'; // unary minus sign for negative numbers
 800609c:	2100      	movs	r1, #0
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fa f9f6 	bl	8000490 <__aeabi_fcmplt>
 80060a4:	1e03      	subs	r3, r0, #0
 80060a6:	d005      	beq.n	80060b4 <float_to_char+0x168>
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	222d      	movs	r2, #45	@ 0x2d
 80060b2:	701a      	strb	r2, [r3, #0]
    return s;
 80060b4:	697b      	ldr	r3, [r7, #20]
}
 80060b6:	0018      	movs	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b006      	add	sp, #24
 80060bc:	bdb0      	pop	{r4, r5, r7, pc}
 80060be:	46c0      	nop			@ (mov r8, r8)
 80060c0:	c47a0000 	.word	0xc47a0000
 80060c4:	447a0000 	.word	0x447a0000

080060c8 <draw_main_st>:

void draw_main_st(COLOR backgr, COLOR front)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af04      	add	r7, sp, #16
 80060ce:	0002      	movs	r2, r0
 80060d0:	1dbb      	adds	r3, r7, #6
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	1c0a      	adds	r2, r1, #0
 80060d8:	801a      	strh	r2, [r3, #0]
	ST7735_FillScreen(backgr);
 80060da:	1dbb      	adds	r3, r7, #6
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	0018      	movs	r0, r3
 80060e0:	f001 fe5e 	bl	8007da0 <ST7735_FillScreen>
	ST7735_DrawRect(0, 0, 160, 128, front);
 80060e4:	1d3b      	adds	r3, r7, #4
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	2380      	movs	r3, #128	@ 0x80
 80060ec:	22a0      	movs	r2, #160	@ 0xa0
 80060ee:	2100      	movs	r1, #0
 80060f0:	2000      	movs	r0, #0
 80060f2:	f001 fee5 	bl	8007ec0 <ST7735_DrawRect>
	ST7735_DrawString(5,3,"00.000V",Font_16x26,YELLOW, backgr);
 80060f6:	4b69      	ldr	r3, [pc, #420]	@ (800629c <draw_main_st+0x1d4>)
 80060f8:	4869      	ldr	r0, [pc, #420]	@ (80062a0 <draw_main_st+0x1d8>)
 80060fa:	1dba      	adds	r2, r7, #6
 80060fc:	8812      	ldrh	r2, [r2, #0]
 80060fe:	9202      	str	r2, [sp, #8]
 8006100:	4a68      	ldr	r2, [pc, #416]	@ (80062a4 <draw_main_st+0x1dc>)
 8006102:	9201      	str	r2, [sp, #4]
 8006104:	466a      	mov	r2, sp
 8006106:	6859      	ldr	r1, [r3, #4]
 8006108:	6011      	str	r1, [r2, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	0002      	movs	r2, r0
 800610e:	2103      	movs	r1, #3
 8006110:	2005      	movs	r0, #5
 8006112:	f001 fc63 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(5,29," 0.000A",Font_16x26,YELLOW, backgr);
 8006116:	4b61      	ldr	r3, [pc, #388]	@ (800629c <draw_main_st+0x1d4>)
 8006118:	4863      	ldr	r0, [pc, #396]	@ (80062a8 <draw_main_st+0x1e0>)
 800611a:	1dba      	adds	r2, r7, #6
 800611c:	8812      	ldrh	r2, [r2, #0]
 800611e:	9202      	str	r2, [sp, #8]
 8006120:	4a60      	ldr	r2, [pc, #384]	@ (80062a4 <draw_main_st+0x1dc>)
 8006122:	9201      	str	r2, [sp, #4]
 8006124:	466a      	mov	r2, sp
 8006126:	6859      	ldr	r1, [r3, #4]
 8006128:	6011      	str	r1, [r2, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	0002      	movs	r2, r0
 800612e:	211d      	movs	r1, #29
 8006130:	2005      	movs	r0, #5
 8006132:	f001 fc53 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(5,55,"000.00W",Font_16x26,YELLOW, backgr);
 8006136:	4b59      	ldr	r3, [pc, #356]	@ (800629c <draw_main_st+0x1d4>)
 8006138:	485c      	ldr	r0, [pc, #368]	@ (80062ac <draw_main_st+0x1e4>)
 800613a:	1dba      	adds	r2, r7, #6
 800613c:	8812      	ldrh	r2, [r2, #0]
 800613e:	9202      	str	r2, [sp, #8]
 8006140:	4a58      	ldr	r2, [pc, #352]	@ (80062a4 <draw_main_st+0x1dc>)
 8006142:	9201      	str	r2, [sp, #4]
 8006144:	466a      	mov	r2, sp
 8006146:	6859      	ldr	r1, [r3, #4]
 8006148:	6011      	str	r1, [r2, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	0002      	movs	r2, r0
 800614e:	2137      	movs	r1, #55	@ 0x37
 8006150:	2005      	movs	r0, #5
 8006152:	f001 fc43 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(124,2,"OFF",Font_11x18,WHITE, RED);
 8006156:	4b56      	ldr	r3, [pc, #344]	@ (80062b0 <draw_main_st+0x1e8>)
 8006158:	4856      	ldr	r0, [pc, #344]	@ (80062b4 <draw_main_st+0x1ec>)
 800615a:	22f8      	movs	r2, #248	@ 0xf8
 800615c:	0212      	lsls	r2, r2, #8
 800615e:	9202      	str	r2, [sp, #8]
 8006160:	4a55      	ldr	r2, [pc, #340]	@ (80062b8 <draw_main_st+0x1f0>)
 8006162:	9201      	str	r2, [sp, #4]
 8006164:	466a      	mov	r2, sp
 8006166:	6859      	ldr	r1, [r3, #4]
 8006168:	6011      	str	r1, [r2, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	0002      	movs	r2, r0
 800616e:	2102      	movs	r1, #2
 8006170:	207c      	movs	r0, #124	@ 0x7c
 8006172:	f001 fc33 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(124,21," SL",Font_11x18,BLACK,GBLUE);
 8006176:	4b4e      	ldr	r3, [pc, #312]	@ (80062b0 <draw_main_st+0x1e8>)
 8006178:	4850      	ldr	r0, [pc, #320]	@ (80062bc <draw_main_st+0x1f4>)
 800617a:	4a51      	ldr	r2, [pc, #324]	@ (80062c0 <draw_main_st+0x1f8>)
 800617c:	9202      	str	r2, [sp, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	9201      	str	r2, [sp, #4]
 8006182:	466a      	mov	r2, sp
 8006184:	6859      	ldr	r1, [r3, #4]
 8006186:	6011      	str	r1, [r2, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	0002      	movs	r2, r0
 800618c:	2115      	movs	r1, #21
 800618e:	207c      	movs	r0, #124	@ 0x7c
 8006190:	f001 fc24 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(124,40," M0",Font_11x18,BLACK,GRAY);
 8006194:	4b46      	ldr	r3, [pc, #280]	@ (80062b0 <draw_main_st+0x1e8>)
 8006196:	484b      	ldr	r0, [pc, #300]	@ (80062c4 <draw_main_st+0x1fc>)
 8006198:	4a4b      	ldr	r2, [pc, #300]	@ (80062c8 <draw_main_st+0x200>)
 800619a:	9202      	str	r2, [sp, #8]
 800619c:	2200      	movs	r2, #0
 800619e:	9201      	str	r2, [sp, #4]
 80061a0:	466a      	mov	r2, sp
 80061a2:	6859      	ldr	r1, [r3, #4]
 80061a4:	6011      	str	r1, [r2, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	0002      	movs	r2, r0
 80061aa:	2128      	movs	r1, #40	@ 0x28
 80061ac:	207c      	movs	r0, #124	@ 0x7c
 80061ae:	f001 fc15 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(124,59,"LGT",Font_11x18,WHITE,MAGENTA);
 80061b2:	4b3f      	ldr	r3, [pc, #252]	@ (80062b0 <draw_main_st+0x1e8>)
 80061b4:	4845      	ldr	r0, [pc, #276]	@ (80062cc <draw_main_st+0x204>)
 80061b6:	4a46      	ldr	r2, [pc, #280]	@ (80062d0 <draw_main_st+0x208>)
 80061b8:	9202      	str	r2, [sp, #8]
 80061ba:	4a3f      	ldr	r2, [pc, #252]	@ (80062b8 <draw_main_st+0x1f0>)
 80061bc:	9201      	str	r2, [sp, #4]
 80061be:	466a      	mov	r2, sp
 80061c0:	6859      	ldr	r1, [r3, #4]
 80061c2:	6011      	str	r1, [r2, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	0002      	movs	r2, r0
 80061c8:	213b      	movs	r1, #59	@ 0x3b
 80061ca:	207c      	movs	r0, #124	@ 0x7c
 80061cc:	f001 fc06 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(5,84,"05.000V",Font_11x18,front,backgr);
 80061d0:	4b37      	ldr	r3, [pc, #220]	@ (80062b0 <draw_main_st+0x1e8>)
 80061d2:	4840      	ldr	r0, [pc, #256]	@ (80062d4 <draw_main_st+0x20c>)
 80061d4:	1dba      	adds	r2, r7, #6
 80061d6:	8812      	ldrh	r2, [r2, #0]
 80061d8:	9202      	str	r2, [sp, #8]
 80061da:	1d3a      	adds	r2, r7, #4
 80061dc:	8812      	ldrh	r2, [r2, #0]
 80061de:	9201      	str	r2, [sp, #4]
 80061e0:	466a      	mov	r2, sp
 80061e2:	6859      	ldr	r1, [r3, #4]
 80061e4:	6011      	str	r1, [r2, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	0002      	movs	r2, r0
 80061ea:	2154      	movs	r1, #84	@ 0x54
 80061ec:	2005      	movs	r0, #5
 80061ee:	f001 fbf5 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(89,84,"1.000A",Font_11x18,front, backgr);
 80061f2:	4b2f      	ldr	r3, [pc, #188]	@ (80062b0 <draw_main_st+0x1e8>)
 80061f4:	4838      	ldr	r0, [pc, #224]	@ (80062d8 <draw_main_st+0x210>)
 80061f6:	1dba      	adds	r2, r7, #6
 80061f8:	8812      	ldrh	r2, [r2, #0]
 80061fa:	9202      	str	r2, [sp, #8]
 80061fc:	1d3a      	adds	r2, r7, #4
 80061fe:	8812      	ldrh	r2, [r2, #0]
 8006200:	9201      	str	r2, [sp, #4]
 8006202:	466a      	mov	r2, sp
 8006204:	6859      	ldr	r1, [r3, #4]
 8006206:	6011      	str	r1, [r2, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	0002      	movs	r2, r0
 800620c:	2154      	movs	r1, #84	@ 0x54
 800620e:	2059      	movs	r0, #89	@ 0x59
 8006210:	f001 fbe4 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(3,106,"PonTime:000d00h00m00s",Font_7x10,front,backgr);
 8006214:	4b31      	ldr	r3, [pc, #196]	@ (80062dc <draw_main_st+0x214>)
 8006216:	4832      	ldr	r0, [pc, #200]	@ (80062e0 <draw_main_st+0x218>)
 8006218:	1dba      	adds	r2, r7, #6
 800621a:	8812      	ldrh	r2, [r2, #0]
 800621c:	9202      	str	r2, [sp, #8]
 800621e:	1d3a      	adds	r2, r7, #4
 8006220:	8812      	ldrh	r2, [r2, #0]
 8006222:	9201      	str	r2, [sp, #4]
 8006224:	466a      	mov	r2, sp
 8006226:	6859      	ldr	r1, [r3, #4]
 8006228:	6011      	str	r1, [r2, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	0002      	movs	r2, r0
 800622e:	216a      	movs	r1, #106	@ 0x6a
 8006230:	2003      	movs	r0, #3
 8006232:	f001 fbd3 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(3,117,"MCU temperature",Font_7x10,front,backgr);
 8006236:	4b29      	ldr	r3, [pc, #164]	@ (80062dc <draw_main_st+0x214>)
 8006238:	482a      	ldr	r0, [pc, #168]	@ (80062e4 <draw_main_st+0x21c>)
 800623a:	1dba      	adds	r2, r7, #6
 800623c:	8812      	ldrh	r2, [r2, #0]
 800623e:	9202      	str	r2, [sp, #8]
 8006240:	1d3a      	adds	r2, r7, #4
 8006242:	8812      	ldrh	r2, [r2, #0]
 8006244:	9201      	str	r2, [sp, #4]
 8006246:	466a      	mov	r2, sp
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	6011      	str	r1, [r2, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	0002      	movs	r2, r0
 8006250:	2175      	movs	r1, #117	@ 0x75
 8006252:	2003      	movs	r0, #3
 8006254:	f001 fbc2 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(144,117,"*",Font_7x10,WHITE,BLUE);
 8006258:	4b20      	ldr	r3, [pc, #128]	@ (80062dc <draw_main_st+0x214>)
 800625a:	4823      	ldr	r0, [pc, #140]	@ (80062e8 <draw_main_st+0x220>)
 800625c:	221f      	movs	r2, #31
 800625e:	9202      	str	r2, [sp, #8]
 8006260:	4a15      	ldr	r2, [pc, #84]	@ (80062b8 <draw_main_st+0x1f0>)
 8006262:	9201      	str	r2, [sp, #4]
 8006264:	466a      	mov	r2, sp
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	6011      	str	r1, [r2, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	0002      	movs	r2, r0
 800626e:	2175      	movs	r1, #117	@ 0x75
 8006270:	2090      	movs	r0, #144	@ 0x90
 8006272:	f001 fbb3 	bl	80079dc <ST7735_DrawString>
	ST7735_DrawString(151,117,"C",Font_7x10,WHITE,BLUE);
 8006276:	4b19      	ldr	r3, [pc, #100]	@ (80062dc <draw_main_st+0x214>)
 8006278:	481c      	ldr	r0, [pc, #112]	@ (80062ec <draw_main_st+0x224>)
 800627a:	221f      	movs	r2, #31
 800627c:	9202      	str	r2, [sp, #8]
 800627e:	4a0e      	ldr	r2, [pc, #56]	@ (80062b8 <draw_main_st+0x1f0>)
 8006280:	9201      	str	r2, [sp, #4]
 8006282:	466a      	mov	r2, sp
 8006284:	6859      	ldr	r1, [r3, #4]
 8006286:	6011      	str	r1, [r2, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	0002      	movs	r2, r0
 800628c:	2175      	movs	r1, #117	@ 0x75
 800628e:	2097      	movs	r0, #151	@ 0x97
 8006290:	f001 fba4 	bl	80079dc <ST7735_DrawString>
 }
 8006294:	46c0      	nop			@ (mov r8, r8)
 8006296:	46bd      	mov	sp, r7
 8006298:	b002      	add	sp, #8
 800629a:	bd80      	pop	{r7, pc}
 800629c:	20000040 	.word	0x20000040
 80062a0:	0800ed0c 	.word	0x0800ed0c
 80062a4:	0000ffe0 	.word	0x0000ffe0
 80062a8:	0800ed14 	.word	0x0800ed14
 80062ac:	0800ed1c 	.word	0x0800ed1c
 80062b0:	20000038 	.word	0x20000038
 80062b4:	0800ed24 	.word	0x0800ed24
 80062b8:	0000ffff 	.word	0x0000ffff
 80062bc:	0800ed28 	.word	0x0800ed28
 80062c0:	000007ff 	.word	0x000007ff
 80062c4:	0800ed2c 	.word	0x0800ed2c
 80062c8:	00008430 	.word	0x00008430
 80062cc:	0800ed30 	.word	0x0800ed30
 80062d0:	0000f81f 	.word	0x0000f81f
 80062d4:	0800ed34 	.word	0x0800ed34
 80062d8:	0800ed3c 	.word	0x0800ed3c
 80062dc:	20000030 	.word	0x20000030
 80062e0:	0800ed44 	.word	0x0800ed44
 80062e4:	0800ed5c 	.word	0x0800ed5c
 80062e8:	0800ed6c 	.word	0x0800ed6c
 80062ec:	0800ed70 	.word	0x0800ed70

080062f0 <get_time>:

void get_time(RTC_HandleTypeDef hrtc, char* onTd100, char* onTd10, char* onTd1 ,
		char* onTh10, char* onTh1, char* onTm10, char* onTm1, char* onTs10, char* onTs1,
		bool on_off)
{
 80062f0:	b084      	sub	sp, #16
 80062f2:	b5b0      	push	{r4, r5, r7, lr}
 80062f4:	b088      	sub	sp, #32
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	2530      	movs	r5, #48	@ 0x30
 80062fa:	197c      	adds	r4, r7, r5
 80062fc:	6020      	str	r0, [r4, #0]
 80062fe:	6061      	str	r1, [r4, #4]
 8006300:	60a2      	str	r2, [r4, #8]
 8006302:	60e3      	str	r3, [r4, #12]
	RTC_TimeTypeDef sTime = {0};
 8006304:	2408      	movs	r4, #8
 8006306:	193b      	adds	r3, r7, r4
 8006308:	0018      	movs	r0, r3
 800630a:	2314      	movs	r3, #20
 800630c:	001a      	movs	r2, r3
 800630e:	2100      	movs	r1, #0
 8006310:	f008 fc68 	bl	800ebe4 <memset>
	RTC_DateTypeDef sDate = {0};
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
	static uint8_t oldHours;
	static uint16_t daysON;
	uint32_t toChar; //temp. value to convert days into chars
	if(!on_off)
 800631a:	2344      	movs	r3, #68	@ 0x44
 800631c:	0028      	movs	r0, r5
 800631e:	181b      	adds	r3, r3, r0
 8006320:	19db      	adds	r3, r3, r7
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2201      	movs	r2, #1
 8006326:	4053      	eors	r3, r2
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d006      	beq.n	800633c <get_time+0x4c>
		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800632e:	1939      	adds	r1, r7, r4
 8006330:	183b      	adds	r3, r7, r0
 8006332:	2201      	movs	r2, #1
 8006334:	0018      	movs	r0, r3
 8006336:	f006 fcd7 	bl	800cce8 <HAL_RTC_SetTime>
 800633a:	e081      	b.n	8006440 <get_time+0x150>
	else
	{
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800633c:	2408      	movs	r4, #8
 800633e:	1939      	adds	r1, r7, r4
 8006340:	2530      	movs	r5, #48	@ 0x30
 8006342:	197b      	adds	r3, r7, r5
 8006344:	2201      	movs	r2, #1
 8006346:	0018      	movs	r0, r3
 8006348:	f006 fd74 	bl	800ce34 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800634c:	1d39      	adds	r1, r7, #4
 800634e:	197b      	adds	r3, r7, r5
 8006350:	2201      	movs	r2, #1
 8006352:	0018      	movs	r0, r3
 8006354:	f006 fdcc 	bl	800cef0 <HAL_RTC_GetDate>
		//Process RUN time
		*onTs1 = (sTime.Seconds & 0x0F) +'0';
 8006358:	0021      	movs	r1, r4
 800635a:	187b      	adds	r3, r7, r1
 800635c:	789b      	ldrb	r3, [r3, #2]
 800635e:	220f      	movs	r2, #15
 8006360:	4013      	ands	r3, r2
 8006362:	b2db      	uxtb	r3, r3
 8006364:	3330      	adds	r3, #48	@ 0x30
 8006366:	b2da      	uxtb	r2, r3
 8006368:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800636a:	701a      	strb	r2, [r3, #0]
		*onTs10 = (sTime.Seconds >> 4) + '0';
 800636c:	187b      	adds	r3, r7, r1
 800636e:	789b      	ldrb	r3, [r3, #2]
 8006370:	091b      	lsrs	r3, r3, #4
 8006372:	b2db      	uxtb	r3, r3
 8006374:	3330      	adds	r3, #48	@ 0x30
 8006376:	b2da      	uxtb	r2, r3
 8006378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800637a:	701a      	strb	r2, [r3, #0]
		*onTm1 = (sTime.Minutes & 0x0F) +'0';
 800637c:	187b      	adds	r3, r7, r1
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	220f      	movs	r2, #15
 8006382:	4013      	ands	r3, r2
 8006384:	b2db      	uxtb	r3, r3
 8006386:	3330      	adds	r3, #48	@ 0x30
 8006388:	b2da      	uxtb	r2, r3
 800638a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800638c:	701a      	strb	r2, [r3, #0]
		*onTm10 = (sTime.Minutes >> 4) + '0';
 800638e:	187b      	adds	r3, r7, r1
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	091b      	lsrs	r3, r3, #4
 8006394:	b2db      	uxtb	r3, r3
 8006396:	3330      	adds	r3, #48	@ 0x30
 8006398:	b2da      	uxtb	r2, r3
 800639a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800639c:	701a      	strb	r2, [r3, #0]
		*onTh1 = (sTime.Hours & 0x0F) +'0';
 800639e:	187b      	adds	r3, r7, r1
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	220f      	movs	r2, #15
 80063a4:	4013      	ands	r3, r2
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	3330      	adds	r3, #48	@ 0x30
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063ae:	701a      	strb	r2, [r3, #0]
		*onTh10 = (sTime.Hours >> 4) + '0';
 80063b0:	187b      	adds	r3, r7, r1
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	3330      	adds	r3, #48	@ 0x30
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063be:	701a      	strb	r2, [r3, #0]
		if(oldHours == 0x23)
 80063c0:	4b25      	ldr	r3, [pc, #148]	@ (8006458 <get_time+0x168>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b23      	cmp	r3, #35	@ 0x23
 80063c6:	d109      	bne.n	80063dc <get_time+0xec>
			if(sTime.Hours == 0) daysON++;
 80063c8:	187b      	adds	r3, r7, r1
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d105      	bne.n	80063dc <get_time+0xec>
 80063d0:	4b22      	ldr	r3, [pc, #136]	@ (800645c <get_time+0x16c>)
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	3301      	adds	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	4b20      	ldr	r3, [pc, #128]	@ (800645c <get_time+0x16c>)
 80063da:	801a      	strh	r2, [r3, #0]
		toChar = daysON;
 80063dc:	4b1f      	ldr	r3, [pc, #124]	@ (800645c <get_time+0x16c>)
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	61fb      	str	r3, [r7, #28]
		*onTd1 = (toChar % 10) + '0';
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	210a      	movs	r1, #10
 80063e6:	0018      	movs	r0, r3
 80063e8:	f7f9 ff12 	bl	8000210 <__aeabi_uidivmod>
 80063ec:	000b      	movs	r3, r1
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	3330      	adds	r3, #48	@ 0x30
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063f6:	701a      	strb	r2, [r3, #0]
		toChar /= 10;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	210a      	movs	r1, #10
 80063fc:	0018      	movs	r0, r3
 80063fe:	f7f9 fe81 	bl	8000104 <__udivsi3>
 8006402:	0003      	movs	r3, r0
 8006404:	61fb      	str	r3, [r7, #28]
		*onTd10 = (toChar % 10) + '0';
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	210a      	movs	r1, #10
 800640a:	0018      	movs	r0, r3
 800640c:	f7f9 ff00 	bl	8000210 <__aeabi_uidivmod>
 8006410:	000b      	movs	r3, r1
 8006412:	b2db      	uxtb	r3, r3
 8006414:	3330      	adds	r3, #48	@ 0x30
 8006416:	b2da      	uxtb	r2, r3
 8006418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641a:	701a      	strb	r2, [r3, #0]
		toChar /= 10;
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	210a      	movs	r1, #10
 8006420:	0018      	movs	r0, r3
 8006422:	f7f9 fe6f 	bl	8000104 <__udivsi3>
 8006426:	0003      	movs	r3, r0
 8006428:	61fb      	str	r3, [r7, #28]
		*onTd100 = (toChar % 10) + '0';
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	210a      	movs	r1, #10
 800642e:	0018      	movs	r0, r3
 8006430:	f7f9 feee 	bl	8000210 <__aeabi_uidivmod>
 8006434:	000b      	movs	r3, r1
 8006436:	b2db      	uxtb	r3, r3
 8006438:	3330      	adds	r3, #48	@ 0x30
 800643a:	b2da      	uxtb	r2, r3
 800643c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800643e:	701a      	strb	r2, [r3, #0]
	}
	oldHours = sTime.Hours;
 8006440:	2308      	movs	r3, #8
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	781a      	ldrb	r2, [r3, #0]
 8006446:	4b04      	ldr	r3, [pc, #16]	@ (8006458 <get_time+0x168>)
 8006448:	701a      	strb	r2, [r3, #0]
}
 800644a:	46c0      	nop			@ (mov r8, r8)
 800644c:	46bd      	mov	sp, r7
 800644e:	b008      	add	sp, #32
 8006450:	bcb0      	pop	{r4, r5, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	b004      	add	sp, #16
 8006456:	4718      	bx	r3
 8006458:	2000049a 	.word	0x2000049a
 800645c:	2000049c 	.word	0x2000049c

08006460 <draw_main_dy>:

void draw_main_dy(char* ptr, char* float_for_LCD, bool on_off, float outU, float outI,
					char onTd100, char onTd10, char onTd1, char onTh10, char onTh1,
					char onTm10, char onTm1, char onTs10, char onTs1, float temp_MCU)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08a      	sub	sp, #40	@ 0x28
 8006464:	af04      	add	r7, sp, #16
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	1dfb      	adds	r3, r7, #7
 800646e:	701a      	strb	r2, [r3, #0]
	static float old_outU, old_outI, old_outP;
	float outP = outU*outI;
 8006470:	6a39      	ldr	r1, [r7, #32]
 8006472:	6838      	ldr	r0, [r7, #0]
 8006474:	f7fa fbbc 	bl	8000bf0 <__aeabi_fmul>
 8006478:	1c03      	adds	r3, r0, #0
 800647a:	617b      	str	r3, [r7, #20]
	static char old_onTd100, old_onTd10, old_onTd1,
				old_onTh10, old_onTh1, old_onTm10, old_onTm1, old_onTs10;
	static bool old_on_off;
	static char old_ptr_0, old_ptr_1;
	if(on_off)
 800647c:	1dfb      	adds	r3, r7, #7
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d100      	bne.n	8006486 <draw_main_dy+0x26>
 8006484:	e19a      	b.n	80067bc <draw_main_dy+0x35c>
	{
		// Output Voltage
		if (old_outU != outU)
 8006486:	4bbe      	ldr	r3, [pc, #760]	@ (8006780 <draw_main_dy+0x320>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	1c19      	adds	r1, r3, #0
 800648c:	6838      	ldr	r0, [r7, #0]
 800648e:	f7f9 fff9 	bl	8000484 <__aeabi_fcmpeq>
 8006492:	1e03      	subs	r3, r0, #0
 8006494:	d170      	bne.n	8006578 <draw_main_dy+0x118>
		{
			ptr = float_to_char(outU, float_for_LCD);
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	0011      	movs	r1, r2
 800649c:	1c18      	adds	r0, r3, #0
 800649e:	f7ff fd55 	bl	8005f4c <float_to_char>
 80064a2:	0003      	movs	r3, r0
 80064a4:	60fb      	str	r3, [r7, #12]
			if(outU<1)
 80064a6:	21fe      	movs	r1, #254	@ 0xfe
 80064a8:	0589      	lsls	r1, r1, #22
 80064aa:	6838      	ldr	r0, [r7, #0]
 80064ac:	f7f9 fff0 	bl	8000490 <__aeabi_fcmplt>
 80064b0:	1e03      	subs	r3, r0, #0
 80064b2:	d01e      	beq.n	80064f2 <draw_main_dy+0x92>
			{
				ST7735_DrawString(5,3," 0",Font_16x26,WHITE,BLACK);
 80064b4:	4bb3      	ldr	r3, [pc, #716]	@ (8006784 <draw_main_dy+0x324>)
 80064b6:	48b4      	ldr	r0, [pc, #720]	@ (8006788 <draw_main_dy+0x328>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	9202      	str	r2, [sp, #8]
 80064bc:	4ab3      	ldr	r2, [pc, #716]	@ (800678c <draw_main_dy+0x32c>)
 80064be:	9201      	str	r2, [sp, #4]
 80064c0:	466a      	mov	r2, sp
 80064c2:	6859      	ldr	r1, [r3, #4]
 80064c4:	6011      	str	r1, [r2, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	0002      	movs	r2, r0
 80064ca:	2103      	movs	r1, #3
 80064cc:	2005      	movs	r0, #5
 80064ce:	f001 fa85 	bl	80079dc <ST7735_DrawString>
				ST7735_DrawString(37,3,ptr,Font_16x26,WHITE,BLACK);
 80064d2:	4bac      	ldr	r3, [pc, #688]	@ (8006784 <draw_main_dy+0x324>)
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	9202      	str	r2, [sp, #8]
 80064da:	4aac      	ldr	r2, [pc, #688]	@ (800678c <draw_main_dy+0x32c>)
 80064dc:	9201      	str	r2, [sp, #4]
 80064de:	466a      	mov	r2, sp
 80064e0:	6859      	ldr	r1, [r3, #4]
 80064e2:	6011      	str	r1, [r2, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	0002      	movs	r2, r0
 80064e8:	2103      	movs	r1, #3
 80064ea:	2025      	movs	r0, #37	@ 0x25
 80064ec:	f001 fa76 	bl	80079dc <ST7735_DrawString>
 80064f0:	e033      	b.n	800655a <draw_main_dy+0xfa>
			}
			else
			{
				if(outU<10)
 80064f2:	49a7      	ldr	r1, [pc, #668]	@ (8006790 <draw_main_dy+0x330>)
 80064f4:	6838      	ldr	r0, [r7, #0]
 80064f6:	f7f9 ffcb 	bl	8000490 <__aeabi_fcmplt>
 80064fa:	1e03      	subs	r3, r0, #0
 80064fc:	d01e      	beq.n	800653c <draw_main_dy+0xdc>
				{
					ST7735_DrawString(5,3," ",Font_16x26,WHITE,BLACK);
 80064fe:	4ba1      	ldr	r3, [pc, #644]	@ (8006784 <draw_main_dy+0x324>)
 8006500:	48a4      	ldr	r0, [pc, #656]	@ (8006794 <draw_main_dy+0x334>)
 8006502:	2200      	movs	r2, #0
 8006504:	9202      	str	r2, [sp, #8]
 8006506:	4aa1      	ldr	r2, [pc, #644]	@ (800678c <draw_main_dy+0x32c>)
 8006508:	9201      	str	r2, [sp, #4]
 800650a:	466a      	mov	r2, sp
 800650c:	6859      	ldr	r1, [r3, #4]
 800650e:	6011      	str	r1, [r2, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	0002      	movs	r2, r0
 8006514:	2103      	movs	r1, #3
 8006516:	2005      	movs	r0, #5
 8006518:	f001 fa60 	bl	80079dc <ST7735_DrawString>
					ST7735_DrawString(21,3,ptr,Font_16x26,WHITE,BLACK);
 800651c:	4b99      	ldr	r3, [pc, #612]	@ (8006784 <draw_main_dy+0x324>)
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	9202      	str	r2, [sp, #8]
 8006524:	4a99      	ldr	r2, [pc, #612]	@ (800678c <draw_main_dy+0x32c>)
 8006526:	9201      	str	r2, [sp, #4]
 8006528:	466a      	mov	r2, sp
 800652a:	6859      	ldr	r1, [r3, #4]
 800652c:	6011      	str	r1, [r2, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	0002      	movs	r2, r0
 8006532:	2103      	movs	r1, #3
 8006534:	2015      	movs	r0, #21
 8006536:	f001 fa51 	bl	80079dc <ST7735_DrawString>
 800653a:	e00e      	b.n	800655a <draw_main_dy+0xfa>
				}
				else ST7735_DrawString(5,3,ptr,Font_16x26,WHITE,BLACK);
 800653c:	4b91      	ldr	r3, [pc, #580]	@ (8006784 <draw_main_dy+0x324>)
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	9202      	str	r2, [sp, #8]
 8006544:	4a91      	ldr	r2, [pc, #580]	@ (800678c <draw_main_dy+0x32c>)
 8006546:	9201      	str	r2, [sp, #4]
 8006548:	466a      	mov	r2, sp
 800654a:	6859      	ldr	r1, [r3, #4]
 800654c:	6011      	str	r1, [r2, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	0002      	movs	r2, r0
 8006552:	2103      	movs	r1, #3
 8006554:	2005      	movs	r0, #5
 8006556:	f001 fa41 	bl	80079dc <ST7735_DrawString>
			}
			ST7735_DrawString(101, 3,"V",Font_16x26,WHITE,BLACK);
 800655a:	4b8a      	ldr	r3, [pc, #552]	@ (8006784 <draw_main_dy+0x324>)
 800655c:	488e      	ldr	r0, [pc, #568]	@ (8006798 <draw_main_dy+0x338>)
 800655e:	2200      	movs	r2, #0
 8006560:	9202      	str	r2, [sp, #8]
 8006562:	4a8a      	ldr	r2, [pc, #552]	@ (800678c <draw_main_dy+0x32c>)
 8006564:	9201      	str	r2, [sp, #4]
 8006566:	466a      	mov	r2, sp
 8006568:	6859      	ldr	r1, [r3, #4]
 800656a:	6011      	str	r1, [r2, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	0002      	movs	r2, r0
 8006570:	2103      	movs	r1, #3
 8006572:	2065      	movs	r0, #101	@ 0x65
 8006574:	f001 fa32 	bl	80079dc <ST7735_DrawString>
		}

		//Output current
		if(old_outI != outI)
 8006578:	4b88      	ldr	r3, [pc, #544]	@ (800679c <draw_main_dy+0x33c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	1c19      	adds	r1, r3, #0
 800657e:	6a38      	ldr	r0, [r7, #32]
 8006580:	f7f9 ff80 	bl	8000484 <__aeabi_fcmpeq>
 8006584:	1e03      	subs	r3, r0, #0
 8006586:	d14b      	bne.n	8006620 <draw_main_dy+0x1c0>
		{
			ptr = float_to_char(outI, float_for_LCD);
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	0011      	movs	r1, r2
 800658e:	1c18      	adds	r0, r3, #0
 8006590:	f7ff fcdc 	bl	8005f4c <float_to_char>
 8006594:	0003      	movs	r3, r0
 8006596:	60fb      	str	r3, [r7, #12]
			if(outI<1)
 8006598:	21fe      	movs	r1, #254	@ 0xfe
 800659a:	0589      	lsls	r1, r1, #22
 800659c:	6a38      	ldr	r0, [r7, #32]
 800659e:	f7f9 ff77 	bl	8000490 <__aeabi_fcmplt>
 80065a2:	1e03      	subs	r3, r0, #0
 80065a4:	d01e      	beq.n	80065e4 <draw_main_dy+0x184>
			{
				ST7735_DrawString(21,29,"0",Font_16x26,WHITE,BLACK);
 80065a6:	4b77      	ldr	r3, [pc, #476]	@ (8006784 <draw_main_dy+0x324>)
 80065a8:	487d      	ldr	r0, [pc, #500]	@ (80067a0 <draw_main_dy+0x340>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	9202      	str	r2, [sp, #8]
 80065ae:	4a77      	ldr	r2, [pc, #476]	@ (800678c <draw_main_dy+0x32c>)
 80065b0:	9201      	str	r2, [sp, #4]
 80065b2:	466a      	mov	r2, sp
 80065b4:	6859      	ldr	r1, [r3, #4]
 80065b6:	6011      	str	r1, [r2, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	0002      	movs	r2, r0
 80065bc:	211d      	movs	r1, #29
 80065be:	2015      	movs	r0, #21
 80065c0:	f001 fa0c 	bl	80079dc <ST7735_DrawString>
				ST7735_DrawString(37,29,ptr,Font_16x26,WHITE,BLACK);
 80065c4:	4b6f      	ldr	r3, [pc, #444]	@ (8006784 <draw_main_dy+0x324>)
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	9202      	str	r2, [sp, #8]
 80065cc:	4a6f      	ldr	r2, [pc, #444]	@ (800678c <draw_main_dy+0x32c>)
 80065ce:	9201      	str	r2, [sp, #4]
 80065d0:	466a      	mov	r2, sp
 80065d2:	6859      	ldr	r1, [r3, #4]
 80065d4:	6011      	str	r1, [r2, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	0002      	movs	r2, r0
 80065da:	211d      	movs	r1, #29
 80065dc:	2025      	movs	r0, #37	@ 0x25
 80065de:	f001 f9fd 	bl	80079dc <ST7735_DrawString>
 80065e2:	e00e      	b.n	8006602 <draw_main_dy+0x1a2>
			}
			else ST7735_DrawString(21,29,ptr,Font_16x26,WHITE,BLACK);
 80065e4:	4b67      	ldr	r3, [pc, #412]	@ (8006784 <draw_main_dy+0x324>)
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	9202      	str	r2, [sp, #8]
 80065ec:	4a67      	ldr	r2, [pc, #412]	@ (800678c <draw_main_dy+0x32c>)
 80065ee:	9201      	str	r2, [sp, #4]
 80065f0:	466a      	mov	r2, sp
 80065f2:	6859      	ldr	r1, [r3, #4]
 80065f4:	6011      	str	r1, [r2, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	0002      	movs	r2, r0
 80065fa:	211d      	movs	r1, #29
 80065fc:	2015      	movs	r0, #21
 80065fe:	f001 f9ed 	bl	80079dc <ST7735_DrawString>
			ST7735_DrawString(101,29,"A",Font_16x26,WHITE,BLACK);
 8006602:	4b60      	ldr	r3, [pc, #384]	@ (8006784 <draw_main_dy+0x324>)
 8006604:	4867      	ldr	r0, [pc, #412]	@ (80067a4 <draw_main_dy+0x344>)
 8006606:	2200      	movs	r2, #0
 8006608:	9202      	str	r2, [sp, #8]
 800660a:	4a60      	ldr	r2, [pc, #384]	@ (800678c <draw_main_dy+0x32c>)
 800660c:	9201      	str	r2, [sp, #4]
 800660e:	466a      	mov	r2, sp
 8006610:	6859      	ldr	r1, [r3, #4]
 8006612:	6011      	str	r1, [r2, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	0002      	movs	r2, r0
 8006618:	211d      	movs	r1, #29
 800661a:	2065      	movs	r0, #101	@ 0x65
 800661c:	f001 f9de 	bl	80079dc <ST7735_DrawString>
		}

		//Output Power
		if(old_outP != outP)
 8006620:	4b61      	ldr	r3, [pc, #388]	@ (80067a8 <draw_main_dy+0x348>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	1c19      	adds	r1, r3, #0
 8006626:	6978      	ldr	r0, [r7, #20]
 8006628:	f7f9 ff2c 	bl	8000484 <__aeabi_fcmpeq>
 800662c:	1e03      	subs	r3, r0, #0
 800662e:	d000      	beq.n	8006632 <draw_main_dy+0x1d2>
 8006630:	e0f7      	b.n	8006822 <draw_main_dy+0x3c2>
		{
			ptr = float_to_char(outP, float_for_LCD);
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	0011      	movs	r1, r2
 8006638:	1c18      	adds	r0, r3, #0
 800663a:	f7ff fc87 	bl	8005f4c <float_to_char>
 800663e:	0003      	movs	r3, r0
 8006640:	60fb      	str	r3, [r7, #12]
			if(outP < 1)
 8006642:	21fe      	movs	r1, #254	@ 0xfe
 8006644:	0589      	lsls	r1, r1, #22
 8006646:	6978      	ldr	r0, [r7, #20]
 8006648:	f7f9 ff22 	bl	8000490 <__aeabi_fcmplt>
 800664c:	1e03      	subs	r3, r0, #0
 800664e:	d022      	beq.n	8006696 <draw_main_dy+0x236>
			{
				ptr[3] = 0; //wild truncating
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3303      	adds	r3, #3
 8006654:	2200      	movs	r2, #0
 8006656:	701a      	strb	r2, [r3, #0]
				ST7735_DrawString(5,55,"  0",Font_16x26,WHITE,BLACK);
 8006658:	4b4a      	ldr	r3, [pc, #296]	@ (8006784 <draw_main_dy+0x324>)
 800665a:	4854      	ldr	r0, [pc, #336]	@ (80067ac <draw_main_dy+0x34c>)
 800665c:	2200      	movs	r2, #0
 800665e:	9202      	str	r2, [sp, #8]
 8006660:	4a4a      	ldr	r2, [pc, #296]	@ (800678c <draw_main_dy+0x32c>)
 8006662:	9201      	str	r2, [sp, #4]
 8006664:	466a      	mov	r2, sp
 8006666:	6859      	ldr	r1, [r3, #4]
 8006668:	6011      	str	r1, [r2, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	0002      	movs	r2, r0
 800666e:	2137      	movs	r1, #55	@ 0x37
 8006670:	2005      	movs	r0, #5
 8006672:	f001 f9b3 	bl	80079dc <ST7735_DrawString>
				ST7735_DrawString(53,55,ptr,Font_16x26,WHITE,BLACK);
 8006676:	4b43      	ldr	r3, [pc, #268]	@ (8006784 <draw_main_dy+0x324>)
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	9202      	str	r2, [sp, #8]
 800667e:	4a43      	ldr	r2, [pc, #268]	@ (800678c <draw_main_dy+0x32c>)
 8006680:	9201      	str	r2, [sp, #4]
 8006682:	466a      	mov	r2, sp
 8006684:	6859      	ldr	r1, [r3, #4]
 8006686:	6011      	str	r1, [r2, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	0002      	movs	r2, r0
 800668c:	2137      	movs	r1, #55	@ 0x37
 800668e:	2035      	movs	r0, #53	@ 0x35
 8006690:	f001 f9a4 	bl	80079dc <ST7735_DrawString>
 8006694:	e064      	b.n	8006760 <draw_main_dy+0x300>
			}
			else
			{
				if(outP < 10)
 8006696:	493e      	ldr	r1, [pc, #248]	@ (8006790 <draw_main_dy+0x330>)
 8006698:	6978      	ldr	r0, [r7, #20]
 800669a:	f7f9 fef9 	bl	8000490 <__aeabi_fcmplt>
 800669e:	1e03      	subs	r3, r0, #0
 80066a0:	d022      	beq.n	80066e8 <draw_main_dy+0x288>
				{
					ptr[4] = 0; //wild truncating
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3304      	adds	r3, #4
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]
					ST7735_DrawString(5,55,"  ",Font_16x26,WHITE,BLACK);
 80066aa:	4b36      	ldr	r3, [pc, #216]	@ (8006784 <draw_main_dy+0x324>)
 80066ac:	4840      	ldr	r0, [pc, #256]	@ (80067b0 <draw_main_dy+0x350>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	9202      	str	r2, [sp, #8]
 80066b2:	4a36      	ldr	r2, [pc, #216]	@ (800678c <draw_main_dy+0x32c>)
 80066b4:	9201      	str	r2, [sp, #4]
 80066b6:	466a      	mov	r2, sp
 80066b8:	6859      	ldr	r1, [r3, #4]
 80066ba:	6011      	str	r1, [r2, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	0002      	movs	r2, r0
 80066c0:	2137      	movs	r1, #55	@ 0x37
 80066c2:	2005      	movs	r0, #5
 80066c4:	f001 f98a 	bl	80079dc <ST7735_DrawString>
					ST7735_DrawString(37,55,ptr,Font_16x26,WHITE,BLACK);
 80066c8:	4b2e      	ldr	r3, [pc, #184]	@ (8006784 <draw_main_dy+0x324>)
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	9202      	str	r2, [sp, #8]
 80066d0:	4a2e      	ldr	r2, [pc, #184]	@ (800678c <draw_main_dy+0x32c>)
 80066d2:	9201      	str	r2, [sp, #4]
 80066d4:	466a      	mov	r2, sp
 80066d6:	6859      	ldr	r1, [r3, #4]
 80066d8:	6011      	str	r1, [r2, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	0002      	movs	r2, r0
 80066de:	2137      	movs	r1, #55	@ 0x37
 80066e0:	2025      	movs	r0, #37	@ 0x25
 80066e2:	f001 f97b 	bl	80079dc <ST7735_DrawString>
 80066e6:	e03b      	b.n	8006760 <draw_main_dy+0x300>
				}
				else
				{
					if(outP < 100)
 80066e8:	4932      	ldr	r1, [pc, #200]	@ (80067b4 <draw_main_dy+0x354>)
 80066ea:	6978      	ldr	r0, [r7, #20]
 80066ec:	f7f9 fed0 	bl	8000490 <__aeabi_fcmplt>
 80066f0:	1e03      	subs	r3, r0, #0
 80066f2:	d022      	beq.n	800673a <draw_main_dy+0x2da>
					{
						ptr[5] = 0; //wild truncating
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3305      	adds	r3, #5
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]
						ST7735_DrawString(5,55," ",Font_16x26,WHITE,BLACK);
 80066fc:	4b21      	ldr	r3, [pc, #132]	@ (8006784 <draw_main_dy+0x324>)
 80066fe:	4825      	ldr	r0, [pc, #148]	@ (8006794 <draw_main_dy+0x334>)
 8006700:	2200      	movs	r2, #0
 8006702:	9202      	str	r2, [sp, #8]
 8006704:	4a21      	ldr	r2, [pc, #132]	@ (800678c <draw_main_dy+0x32c>)
 8006706:	9201      	str	r2, [sp, #4]
 8006708:	466a      	mov	r2, sp
 800670a:	6859      	ldr	r1, [r3, #4]
 800670c:	6011      	str	r1, [r2, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	0002      	movs	r2, r0
 8006712:	2137      	movs	r1, #55	@ 0x37
 8006714:	2005      	movs	r0, #5
 8006716:	f001 f961 	bl	80079dc <ST7735_DrawString>
						ST7735_DrawString(21,55,ptr,Font_16x26,WHITE,BLACK);
 800671a:	4b1a      	ldr	r3, [pc, #104]	@ (8006784 <draw_main_dy+0x324>)
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	9202      	str	r2, [sp, #8]
 8006722:	4a1a      	ldr	r2, [pc, #104]	@ (800678c <draw_main_dy+0x32c>)
 8006724:	9201      	str	r2, [sp, #4]
 8006726:	466a      	mov	r2, sp
 8006728:	6859      	ldr	r1, [r3, #4]
 800672a:	6011      	str	r1, [r2, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	0002      	movs	r2, r0
 8006730:	2137      	movs	r1, #55	@ 0x37
 8006732:	2015      	movs	r0, #21
 8006734:	f001 f952 	bl	80079dc <ST7735_DrawString>
 8006738:	e012      	b.n	8006760 <draw_main_dy+0x300>
					}
					else
					{
						ptr[5] = 0; //wild truncating
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3305      	adds	r3, #5
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]
						ST7735_DrawString(5,55,ptr,Font_16x26,WHITE,BLACK);
 8006742:	4b10      	ldr	r3, [pc, #64]	@ (8006784 <draw_main_dy+0x324>)
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	9202      	str	r2, [sp, #8]
 800674a:	4a10      	ldr	r2, [pc, #64]	@ (800678c <draw_main_dy+0x32c>)
 800674c:	9201      	str	r2, [sp, #4]
 800674e:	466a      	mov	r2, sp
 8006750:	6859      	ldr	r1, [r3, #4]
 8006752:	6011      	str	r1, [r2, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	0002      	movs	r2, r0
 8006758:	2137      	movs	r1, #55	@ 0x37
 800675a:	2005      	movs	r0, #5
 800675c:	f001 f93e 	bl	80079dc <ST7735_DrawString>
					}
				}
			}
			ST7735_DrawString(101,55,"W",Font_16x26,WHITE,BLACK);
 8006760:	4b08      	ldr	r3, [pc, #32]	@ (8006784 <draw_main_dy+0x324>)
 8006762:	4815      	ldr	r0, [pc, #84]	@ (80067b8 <draw_main_dy+0x358>)
 8006764:	2200      	movs	r2, #0
 8006766:	9202      	str	r2, [sp, #8]
 8006768:	4a08      	ldr	r2, [pc, #32]	@ (800678c <draw_main_dy+0x32c>)
 800676a:	9201      	str	r2, [sp, #4]
 800676c:	466a      	mov	r2, sp
 800676e:	6859      	ldr	r1, [r3, #4]
 8006770:	6011      	str	r1, [r2, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	0002      	movs	r2, r0
 8006776:	2137      	movs	r1, #55	@ 0x37
 8006778:	2065      	movs	r0, #101	@ 0x65
 800677a:	f001 f92f 	bl	80079dc <ST7735_DrawString>
 800677e:	e050      	b.n	8006822 <draw_main_dy+0x3c2>
 8006780:	200004a0 	.word	0x200004a0
 8006784:	20000040 	.word	0x20000040
 8006788:	0800ed74 	.word	0x0800ed74
 800678c:	0000ffff 	.word	0x0000ffff
 8006790:	41200000 	.word	0x41200000
 8006794:	0800ed78 	.word	0x0800ed78
 8006798:	0800ed7c 	.word	0x0800ed7c
 800679c:	200004a4 	.word	0x200004a4
 80067a0:	0800ed80 	.word	0x0800ed80
 80067a4:	0800ed84 	.word	0x0800ed84
 80067a8:	200004a8 	.word	0x200004a8
 80067ac:	0800ed88 	.word	0x0800ed88
 80067b0:	0800ed8c 	.word	0x0800ed8c
 80067b4:	42c80000 	.word	0x42c80000
 80067b8:	0800ed90 	.word	0x0800ed90
		}
	}
	else //on_off=0/false
	{
		if(old_on_off != on_off)
 80067bc:	4bbd      	ldr	r3, [pc, #756]	@ (8006ab4 <draw_main_dy+0x654>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	1dfa      	adds	r2, r7, #7
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d02c      	beq.n	8006822 <draw_main_dy+0x3c2>
		{
			ST7735_DrawString(5,3," 0.000V",Font_16x26,YELLOW,BLACK);
 80067c8:	4bbb      	ldr	r3, [pc, #748]	@ (8006ab8 <draw_main_dy+0x658>)
 80067ca:	48bc      	ldr	r0, [pc, #752]	@ (8006abc <draw_main_dy+0x65c>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	9202      	str	r2, [sp, #8]
 80067d0:	4abb      	ldr	r2, [pc, #748]	@ (8006ac0 <draw_main_dy+0x660>)
 80067d2:	9201      	str	r2, [sp, #4]
 80067d4:	466a      	mov	r2, sp
 80067d6:	6859      	ldr	r1, [r3, #4]
 80067d8:	6011      	str	r1, [r2, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	0002      	movs	r2, r0
 80067de:	2103      	movs	r1, #3
 80067e0:	2005      	movs	r0, #5
 80067e2:	f001 f8fb 	bl	80079dc <ST7735_DrawString>
			ST7735_DrawString(5,29," 0.000A",Font_16x26,YELLOW,BLACK);
 80067e6:	4bb4      	ldr	r3, [pc, #720]	@ (8006ab8 <draw_main_dy+0x658>)
 80067e8:	48b6      	ldr	r0, [pc, #728]	@ (8006ac4 <draw_main_dy+0x664>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	9202      	str	r2, [sp, #8]
 80067ee:	4ab4      	ldr	r2, [pc, #720]	@ (8006ac0 <draw_main_dy+0x660>)
 80067f0:	9201      	str	r2, [sp, #4]
 80067f2:	466a      	mov	r2, sp
 80067f4:	6859      	ldr	r1, [r3, #4]
 80067f6:	6011      	str	r1, [r2, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	0002      	movs	r2, r0
 80067fc:	211d      	movs	r1, #29
 80067fe:	2005      	movs	r0, #5
 8006800:	f001 f8ec 	bl	80079dc <ST7735_DrawString>
			ST7735_DrawString(5,55,"  0.00W",Font_16x26,YELLOW,BLACK);
 8006804:	4bac      	ldr	r3, [pc, #688]	@ (8006ab8 <draw_main_dy+0x658>)
 8006806:	48b0      	ldr	r0, [pc, #704]	@ (8006ac8 <draw_main_dy+0x668>)
 8006808:	2200      	movs	r2, #0
 800680a:	9202      	str	r2, [sp, #8]
 800680c:	4aac      	ldr	r2, [pc, #688]	@ (8006ac0 <draw_main_dy+0x660>)
 800680e:	9201      	str	r2, [sp, #4]
 8006810:	466a      	mov	r2, sp
 8006812:	6859      	ldr	r1, [r3, #4]
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	0002      	movs	r2, r0
 800681a:	2137      	movs	r1, #55	@ 0x37
 800681c:	2005      	movs	r0, #5
 800681e:	f001 f8dd 	bl	80079dc <ST7735_DrawString>
		}
	}
	// Time with powered output
	if(old_onTd100 != onTd100)
 8006822:	4baa      	ldr	r3, [pc, #680]	@ (8006acc <draw_main_dy+0x66c>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2124      	movs	r1, #36	@ 0x24
 8006828:	187a      	adds	r2, r7, r1
 800682a:	7812      	ldrb	r2, [r2, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d00f      	beq.n	8006850 <draw_main_dy+0x3f0>
		ST7735_DrawChar(59,106,onTd100,Font_7x10,WHITE,BLACK);
 8006830:	4ba7      	ldr	r3, [pc, #668]	@ (8006ad0 <draw_main_dy+0x670>)
 8006832:	187a      	adds	r2, r7, r1
 8006834:	7810      	ldrb	r0, [r2, #0]
 8006836:	2200      	movs	r2, #0
 8006838:	9202      	str	r2, [sp, #8]
 800683a:	4aa6      	ldr	r2, [pc, #664]	@ (8006ad4 <draw_main_dy+0x674>)
 800683c:	9201      	str	r2, [sp, #4]
 800683e:	466a      	mov	r2, sp
 8006840:	6859      	ldr	r1, [r3, #4]
 8006842:	6011      	str	r1, [r2, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	0002      	movs	r2, r0
 8006848:	216a      	movs	r1, #106	@ 0x6a
 800684a:	203b      	movs	r0, #59	@ 0x3b
 800684c:	f001 f95c 	bl	8007b08 <ST7735_DrawChar>
	if(old_onTd10 != onTd10)
 8006850:	4ba1      	ldr	r3, [pc, #644]	@ (8006ad8 <draw_main_dy+0x678>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2128      	movs	r1, #40	@ 0x28
 8006856:	187a      	adds	r2, r7, r1
 8006858:	7812      	ldrb	r2, [r2, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d00f      	beq.n	800687e <draw_main_dy+0x41e>
		ST7735_DrawChar(66,106,onTd10,Font_7x10,WHITE,BLACK);
 800685e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ad0 <draw_main_dy+0x670>)
 8006860:	187a      	adds	r2, r7, r1
 8006862:	7810      	ldrb	r0, [r2, #0]
 8006864:	2200      	movs	r2, #0
 8006866:	9202      	str	r2, [sp, #8]
 8006868:	4a9a      	ldr	r2, [pc, #616]	@ (8006ad4 <draw_main_dy+0x674>)
 800686a:	9201      	str	r2, [sp, #4]
 800686c:	466a      	mov	r2, sp
 800686e:	6859      	ldr	r1, [r3, #4]
 8006870:	6011      	str	r1, [r2, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	0002      	movs	r2, r0
 8006876:	216a      	movs	r1, #106	@ 0x6a
 8006878:	2042      	movs	r0, #66	@ 0x42
 800687a:	f001 f945 	bl	8007b08 <ST7735_DrawChar>
	if(old_onTd1 != onTd1)
 800687e:	4b97      	ldr	r3, [pc, #604]	@ (8006adc <draw_main_dy+0x67c>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	212c      	movs	r1, #44	@ 0x2c
 8006884:	187a      	adds	r2, r7, r1
 8006886:	7812      	ldrb	r2, [r2, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d00f      	beq.n	80068ac <draw_main_dy+0x44c>
		ST7735_DrawChar(73,106,onTd1,Font_7x10,WHITE,BLACK);
 800688c:	4b90      	ldr	r3, [pc, #576]	@ (8006ad0 <draw_main_dy+0x670>)
 800688e:	187a      	adds	r2, r7, r1
 8006890:	7810      	ldrb	r0, [r2, #0]
 8006892:	2200      	movs	r2, #0
 8006894:	9202      	str	r2, [sp, #8]
 8006896:	4a8f      	ldr	r2, [pc, #572]	@ (8006ad4 <draw_main_dy+0x674>)
 8006898:	9201      	str	r2, [sp, #4]
 800689a:	466a      	mov	r2, sp
 800689c:	6859      	ldr	r1, [r3, #4]
 800689e:	6011      	str	r1, [r2, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	0002      	movs	r2, r0
 80068a4:	216a      	movs	r1, #106	@ 0x6a
 80068a6:	2049      	movs	r0, #73	@ 0x49
 80068a8:	f001 f92e 	bl	8007b08 <ST7735_DrawChar>
	if(old_onTh10 != onTh10)
 80068ac:	4b8c      	ldr	r3, [pc, #560]	@ (8006ae0 <draw_main_dy+0x680>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	2130      	movs	r1, #48	@ 0x30
 80068b2:	187a      	adds	r2, r7, r1
 80068b4:	7812      	ldrb	r2, [r2, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d00f      	beq.n	80068da <draw_main_dy+0x47a>
		ST7735_DrawChar(87,106,onTh10,Font_7x10,WHITE,BLACK);
 80068ba:	4b85      	ldr	r3, [pc, #532]	@ (8006ad0 <draw_main_dy+0x670>)
 80068bc:	187a      	adds	r2, r7, r1
 80068be:	7810      	ldrb	r0, [r2, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	9202      	str	r2, [sp, #8]
 80068c4:	4a83      	ldr	r2, [pc, #524]	@ (8006ad4 <draw_main_dy+0x674>)
 80068c6:	9201      	str	r2, [sp, #4]
 80068c8:	466a      	mov	r2, sp
 80068ca:	6859      	ldr	r1, [r3, #4]
 80068cc:	6011      	str	r1, [r2, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	0002      	movs	r2, r0
 80068d2:	216a      	movs	r1, #106	@ 0x6a
 80068d4:	2057      	movs	r0, #87	@ 0x57
 80068d6:	f001 f917 	bl	8007b08 <ST7735_DrawChar>
	if(old_onTh1 != onTh1)
 80068da:	4b82      	ldr	r3, [pc, #520]	@ (8006ae4 <draw_main_dy+0x684>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2134      	movs	r1, #52	@ 0x34
 80068e0:	187a      	adds	r2, r7, r1
 80068e2:	7812      	ldrb	r2, [r2, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d00f      	beq.n	8006908 <draw_main_dy+0x4a8>
		ST7735_DrawChar(94,106,onTh1,Font_7x10,WHITE,BLACK);
 80068e8:	4b79      	ldr	r3, [pc, #484]	@ (8006ad0 <draw_main_dy+0x670>)
 80068ea:	187a      	adds	r2, r7, r1
 80068ec:	7810      	ldrb	r0, [r2, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	9202      	str	r2, [sp, #8]
 80068f2:	4a78      	ldr	r2, [pc, #480]	@ (8006ad4 <draw_main_dy+0x674>)
 80068f4:	9201      	str	r2, [sp, #4]
 80068f6:	466a      	mov	r2, sp
 80068f8:	6859      	ldr	r1, [r3, #4]
 80068fa:	6011      	str	r1, [r2, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	0002      	movs	r2, r0
 8006900:	216a      	movs	r1, #106	@ 0x6a
 8006902:	205e      	movs	r0, #94	@ 0x5e
 8006904:	f001 f900 	bl	8007b08 <ST7735_DrawChar>
	if(old_onTm10 != onTm10)
 8006908:	4b77      	ldr	r3, [pc, #476]	@ (8006ae8 <draw_main_dy+0x688>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2138      	movs	r1, #56	@ 0x38
 800690e:	187a      	adds	r2, r7, r1
 8006910:	7812      	ldrb	r2, [r2, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d00f      	beq.n	8006936 <draw_main_dy+0x4d6>
		ST7735_DrawChar(108,106,onTm10,Font_7x10,WHITE,BLACK);
 8006916:	4b6e      	ldr	r3, [pc, #440]	@ (8006ad0 <draw_main_dy+0x670>)
 8006918:	187a      	adds	r2, r7, r1
 800691a:	7810      	ldrb	r0, [r2, #0]
 800691c:	2200      	movs	r2, #0
 800691e:	9202      	str	r2, [sp, #8]
 8006920:	4a6c      	ldr	r2, [pc, #432]	@ (8006ad4 <draw_main_dy+0x674>)
 8006922:	9201      	str	r2, [sp, #4]
 8006924:	466a      	mov	r2, sp
 8006926:	6859      	ldr	r1, [r3, #4]
 8006928:	6011      	str	r1, [r2, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	0002      	movs	r2, r0
 800692e:	216a      	movs	r1, #106	@ 0x6a
 8006930:	206c      	movs	r0, #108	@ 0x6c
 8006932:	f001 f8e9 	bl	8007b08 <ST7735_DrawChar>
	if(old_onTm1 != onTm1)
 8006936:	4b6d      	ldr	r3, [pc, #436]	@ (8006aec <draw_main_dy+0x68c>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	213c      	movs	r1, #60	@ 0x3c
 800693c:	187a      	adds	r2, r7, r1
 800693e:	7812      	ldrb	r2, [r2, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d00f      	beq.n	8006964 <draw_main_dy+0x504>
		ST7735_DrawChar(115,106,onTm1,Font_7x10,WHITE,BLACK);
 8006944:	4b62      	ldr	r3, [pc, #392]	@ (8006ad0 <draw_main_dy+0x670>)
 8006946:	187a      	adds	r2, r7, r1
 8006948:	7810      	ldrb	r0, [r2, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	9202      	str	r2, [sp, #8]
 800694e:	4a61      	ldr	r2, [pc, #388]	@ (8006ad4 <draw_main_dy+0x674>)
 8006950:	9201      	str	r2, [sp, #4]
 8006952:	466a      	mov	r2, sp
 8006954:	6859      	ldr	r1, [r3, #4]
 8006956:	6011      	str	r1, [r2, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	0002      	movs	r2, r0
 800695c:	216a      	movs	r1, #106	@ 0x6a
 800695e:	2073      	movs	r0, #115	@ 0x73
 8006960:	f001 f8d2 	bl	8007b08 <ST7735_DrawChar>
	if(old_onTs10 != onTs10)
 8006964:	4b62      	ldr	r3, [pc, #392]	@ (8006af0 <draw_main_dy+0x690>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2220      	movs	r2, #32
 800696a:	2120      	movs	r1, #32
 800696c:	1852      	adds	r2, r2, r1
 800696e:	19d2      	adds	r2, r2, r7
 8006970:	7812      	ldrb	r2, [r2, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d011      	beq.n	800699a <draw_main_dy+0x53a>
		ST7735_DrawChar(129,106,onTs10,Font_7x10,WHITE,BLACK);
 8006976:	4b56      	ldr	r3, [pc, #344]	@ (8006ad0 <draw_main_dy+0x670>)
 8006978:	2220      	movs	r2, #32
 800697a:	1852      	adds	r2, r2, r1
 800697c:	19d2      	adds	r2, r2, r7
 800697e:	7810      	ldrb	r0, [r2, #0]
 8006980:	2200      	movs	r2, #0
 8006982:	9202      	str	r2, [sp, #8]
 8006984:	4a53      	ldr	r2, [pc, #332]	@ (8006ad4 <draw_main_dy+0x674>)
 8006986:	9201      	str	r2, [sp, #4]
 8006988:	466a      	mov	r2, sp
 800698a:	6859      	ldr	r1, [r3, #4]
 800698c:	6011      	str	r1, [r2, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	0002      	movs	r2, r0
 8006992:	216a      	movs	r1, #106	@ 0x6a
 8006994:	2081      	movs	r0, #129	@ 0x81
 8006996:	f001 f8b7 	bl	8007b08 <ST7735_DrawChar>
	ST7735_DrawChar(136,106,onTs1,Font_7x10,WHITE,BLACK);
 800699a:	4b4d      	ldr	r3, [pc, #308]	@ (8006ad0 <draw_main_dy+0x670>)
 800699c:	2224      	movs	r2, #36	@ 0x24
 800699e:	2120      	movs	r1, #32
 80069a0:	1852      	adds	r2, r2, r1
 80069a2:	19d2      	adds	r2, r2, r7
 80069a4:	7810      	ldrb	r0, [r2, #0]
 80069a6:	2200      	movs	r2, #0
 80069a8:	9202      	str	r2, [sp, #8]
 80069aa:	4a4a      	ldr	r2, [pc, #296]	@ (8006ad4 <draw_main_dy+0x674>)
 80069ac:	9201      	str	r2, [sp, #4]
 80069ae:	466a      	mov	r2, sp
 80069b0:	6859      	ldr	r1, [r3, #4]
 80069b2:	6011      	str	r1, [r2, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	0002      	movs	r2, r0
 80069b8:	216a      	movs	r1, #106	@ 0x6a
 80069ba:	2088      	movs	r0, #136	@ 0x88
 80069bc:	f001 f8a4 	bl	8007b08 <ST7735_DrawChar>
	//display MCU temperature
	ptr = float_to_char(temp_MCU, float_for_LCD);
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069c4:	0011      	movs	r1, r2
 80069c6:	1c18      	adds	r0, r3, #0
 80069c8:	f7ff fac0 	bl	8005f4c <float_to_char>
 80069cc:	0003      	movs	r3, r0
 80069ce:	60fb      	str	r3, [r7, #12]
	if(old_ptr_0 != ptr[0])
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	781a      	ldrb	r2, [r3, #0]
 80069d4:	4b47      	ldr	r3, [pc, #284]	@ (8006af4 <draw_main_dy+0x694>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d00f      	beq.n	80069fc <draw_main_dy+0x59c>
		ST7735_DrawChar(130,117,ptr[0],Font_7x10,WHITE,ORANGE);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	7818      	ldrb	r0, [r3, #0]
 80069e0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ad0 <draw_main_dy+0x670>)
 80069e2:	4a45      	ldr	r2, [pc, #276]	@ (8006af8 <draw_main_dy+0x698>)
 80069e4:	9202      	str	r2, [sp, #8]
 80069e6:	4a3b      	ldr	r2, [pc, #236]	@ (8006ad4 <draw_main_dy+0x674>)
 80069e8:	9201      	str	r2, [sp, #4]
 80069ea:	466a      	mov	r2, sp
 80069ec:	6859      	ldr	r1, [r3, #4]
 80069ee:	6011      	str	r1, [r2, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	0002      	movs	r2, r0
 80069f4:	2175      	movs	r1, #117	@ 0x75
 80069f6:	2082      	movs	r0, #130	@ 0x82
 80069f8:	f001 f886 	bl	8007b08 <ST7735_DrawChar>
	if(old_ptr_1 != ptr[1 ])
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3301      	adds	r3, #1
 8006a00:	781a      	ldrb	r2, [r3, #0]
 8006a02:	4b3e      	ldr	r3, [pc, #248]	@ (8006afc <draw_main_dy+0x69c>)
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d010      	beq.n	8006a2c <draw_main_dy+0x5cc>
		ST7735_DrawChar(137,117,ptr[1],Font_7x10,WHITE,ORANGE);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	7818      	ldrb	r0, [r3, #0]
 8006a10:	4b2f      	ldr	r3, [pc, #188]	@ (8006ad0 <draw_main_dy+0x670>)
 8006a12:	4a39      	ldr	r2, [pc, #228]	@ (8006af8 <draw_main_dy+0x698>)
 8006a14:	9202      	str	r2, [sp, #8]
 8006a16:	4a2f      	ldr	r2, [pc, #188]	@ (8006ad4 <draw_main_dy+0x674>)
 8006a18:	9201      	str	r2, [sp, #4]
 8006a1a:	466a      	mov	r2, sp
 8006a1c:	6859      	ldr	r1, [r3, #4]
 8006a1e:	6011      	str	r1, [r2, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	0002      	movs	r2, r0
 8006a24:	2175      	movs	r1, #117	@ 0x75
 8006a26:	2089      	movs	r0, #137	@ 0x89
 8006a28:	f001 f86e 	bl	8007b08 <ST7735_DrawChar>
	old_ptr_0 = ptr[0];
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	4b30      	ldr	r3, [pc, #192]	@ (8006af4 <draw_main_dy+0x694>)
 8006a32:	701a      	strb	r2, [r3, #0]
	old_ptr_1 = ptr[1];
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	785a      	ldrb	r2, [r3, #1]
 8006a38:	4b30      	ldr	r3, [pc, #192]	@ (8006afc <draw_main_dy+0x69c>)
 8006a3a:	701a      	strb	r2, [r3, #0]
	//Create logic to update only changed positions on LCD
	old_outU = outU;
 8006a3c:	4b30      	ldr	r3, [pc, #192]	@ (8006b00 <draw_main_dy+0x6a0>)
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	601a      	str	r2, [r3, #0]
	old_outI = outI;
 8006a42:	4b30      	ldr	r3, [pc, #192]	@ (8006b04 <draw_main_dy+0x6a4>)
 8006a44:	6a3a      	ldr	r2, [r7, #32]
 8006a46:	601a      	str	r2, [r3, #0]
	old_outP = outP;
 8006a48:	4b2f      	ldr	r3, [pc, #188]	@ (8006b08 <draw_main_dy+0x6a8>)
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	601a      	str	r2, [r3, #0]
	old_onTd100 = onTd100;
 8006a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8006acc <draw_main_dy+0x66c>)
 8006a50:	2224      	movs	r2, #36	@ 0x24
 8006a52:	18ba      	adds	r2, r7, r2
 8006a54:	7812      	ldrb	r2, [r2, #0]
 8006a56:	701a      	strb	r2, [r3, #0]
	old_onTd10 = onTd10;
 8006a58:	4b1f      	ldr	r3, [pc, #124]	@ (8006ad8 <draw_main_dy+0x678>)
 8006a5a:	2228      	movs	r2, #40	@ 0x28
 8006a5c:	18ba      	adds	r2, r7, r2
 8006a5e:	7812      	ldrb	r2, [r2, #0]
 8006a60:	701a      	strb	r2, [r3, #0]
	old_onTd1 = onTd1;
 8006a62:	4b1e      	ldr	r3, [pc, #120]	@ (8006adc <draw_main_dy+0x67c>)
 8006a64:	222c      	movs	r2, #44	@ 0x2c
 8006a66:	18ba      	adds	r2, r7, r2
 8006a68:	7812      	ldrb	r2, [r2, #0]
 8006a6a:	701a      	strb	r2, [r3, #0]
	old_onTh10 = onTh10;
 8006a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae0 <draw_main_dy+0x680>)
 8006a6e:	2230      	movs	r2, #48	@ 0x30
 8006a70:	18ba      	adds	r2, r7, r2
 8006a72:	7812      	ldrb	r2, [r2, #0]
 8006a74:	701a      	strb	r2, [r3, #0]
	old_onTh1 = onTh1;
 8006a76:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae4 <draw_main_dy+0x684>)
 8006a78:	2234      	movs	r2, #52	@ 0x34
 8006a7a:	18ba      	adds	r2, r7, r2
 8006a7c:	7812      	ldrb	r2, [r2, #0]
 8006a7e:	701a      	strb	r2, [r3, #0]
	old_onTm10 = onTm10;
 8006a80:	4b19      	ldr	r3, [pc, #100]	@ (8006ae8 <draw_main_dy+0x688>)
 8006a82:	2238      	movs	r2, #56	@ 0x38
 8006a84:	18ba      	adds	r2, r7, r2
 8006a86:	7812      	ldrb	r2, [r2, #0]
 8006a88:	701a      	strb	r2, [r3, #0]
	old_onTm1 = onTm1;
 8006a8a:	4b18      	ldr	r3, [pc, #96]	@ (8006aec <draw_main_dy+0x68c>)
 8006a8c:	223c      	movs	r2, #60	@ 0x3c
 8006a8e:	18ba      	adds	r2, r7, r2
 8006a90:	7812      	ldrb	r2, [r2, #0]
 8006a92:	701a      	strb	r2, [r3, #0]
	old_onTs10 = onTs10;
 8006a94:	4b16      	ldr	r3, [pc, #88]	@ (8006af0 <draw_main_dy+0x690>)
 8006a96:	2220      	movs	r2, #32
 8006a98:	2120      	movs	r1, #32
 8006a9a:	1852      	adds	r2, r2, r1
 8006a9c:	19d2      	adds	r2, r2, r7
 8006a9e:	7812      	ldrb	r2, [r2, #0]
 8006aa0:	701a      	strb	r2, [r3, #0]
	old_on_off = on_off;
 8006aa2:	4b04      	ldr	r3, [pc, #16]	@ (8006ab4 <draw_main_dy+0x654>)
 8006aa4:	1dfa      	adds	r2, r7, #7
 8006aa6:	7812      	ldrb	r2, [r2, #0]
 8006aa8:	701a      	strb	r2, [r3, #0]
}
 8006aaa:	46c0      	nop			@ (mov r8, r8)
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b006      	add	sp, #24
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	46c0      	nop			@ (mov r8, r8)
 8006ab4:	200004ac 	.word	0x200004ac
 8006ab8:	20000040 	.word	0x20000040
 8006abc:	0800ed94 	.word	0x0800ed94
 8006ac0:	0000ffe0 	.word	0x0000ffe0
 8006ac4:	0800ed14 	.word	0x0800ed14
 8006ac8:	0800ed9c 	.word	0x0800ed9c
 8006acc:	200004ad 	.word	0x200004ad
 8006ad0:	20000030 	.word	0x20000030
 8006ad4:	0000ffff 	.word	0x0000ffff
 8006ad8:	200004ae 	.word	0x200004ae
 8006adc:	200004af 	.word	0x200004af
 8006ae0:	200004b0 	.word	0x200004b0
 8006ae4:	200004b1 	.word	0x200004b1
 8006ae8:	200004b2 	.word	0x200004b2
 8006aec:	200004b3 	.word	0x200004b3
 8006af0:	200004b4 	.word	0x200004b4
 8006af4:	200004b5 	.word	0x200004b5
 8006af8:	0000fb08 	.word	0x0000fb08
 8006afc:	200004b6 	.word	0x200004b6
 8006b00:	200004a0 	.word	0x200004a0
 8006b04:	200004a4 	.word	0x200004a4
 8006b08:	200004a8 	.word	0x200004a8

08006b0c <save_settings>:

void save_settings(float scaleU, float scaleI, float scaleUsp, float scaleIsp,
											int8_t mem_sel, float uSP, float iSP)
{
 8006b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b0e:	b0af      	sub	sp, #188	@ 0xbc
 8006b10:	af04      	add	r7, sp, #16
 8006b12:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b14:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b18:	62bb      	str	r3, [r7, #40]	@ 0x28
	//	__IO uint32_t data32 = 0 , MemoryProgramStatus = 0;
	uint32_t Address, PageError = 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2294      	movs	r2, #148	@ 0x94
 8006b1e:	2108      	movs	r1, #8
 8006b20:	1852      	adds	r2, r2, r1
 8006b22:	19d2      	adds	r2, r2, r7
 8006b24:	6013      	str	r3, [r2, #0]
	float scaleU_FLASH, scaleI_FLASH, scaleUsp_FLASH, scaleIsp_FLASH;
	float mem_sel_img_FLASH[10][2]; // first is set point for U, second for I
	static FLASH_EraseInitTypeDef EraseInitStruct; // Variable used for Erase procedure

	// Create image of current flash memory
	scaleU_FLASH = *( float *)(SCALE_U_ADDR);
 8006b26:	4bc3      	ldr	r3, [pc, #780]	@ (8006e34 <save_settings+0x328>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2290      	movs	r2, #144	@ 0x90
 8006b2c:	2108      	movs	r1, #8
 8006b2e:	1852      	adds	r2, r2, r1
 8006b30:	19d2      	adds	r2, r2, r7
 8006b32:	6013      	str	r3, [r2, #0]
	scaleI_FLASH = *( float *)(SCALE_I_ADDR);
 8006b34:	4bc0      	ldr	r3, [pc, #768]	@ (8006e38 <save_settings+0x32c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	228c      	movs	r2, #140	@ 0x8c
 8006b3a:	2108      	movs	r1, #8
 8006b3c:	1852      	adds	r2, r2, r1
 8006b3e:	19d2      	adds	r2, r2, r7
 8006b40:	6013      	str	r3, [r2, #0]
	scaleUsp_FLASH = *( float *)(SCALE_U_SP_ADDR);
 8006b42:	4bbe      	ldr	r3, [pc, #760]	@ (8006e3c <save_settings+0x330>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2288      	movs	r2, #136	@ 0x88
 8006b48:	2108      	movs	r1, #8
 8006b4a:	1852      	adds	r2, r2, r1
 8006b4c:	19d2      	adds	r2, r2, r7
 8006b4e:	6013      	str	r3, [r2, #0]
	scaleIsp_FLASH = *( float *)(SCALE_I_SP_ADDR);
 8006b50:	4bbb      	ldr	r3, [pc, #748]	@ (8006e40 <save_settings+0x334>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2284      	movs	r2, #132	@ 0x84
 8006b56:	2108      	movs	r1, #8
 8006b58:	1852      	adds	r2, r2, r1
 8006b5a:	19d2      	adds	r2, r2, r7
 8006b5c:	6013      	str	r3, [r2, #0]
	Address = MEM_SEL_ARR_ADDR;
 8006b5e:	4bb9      	ldr	r3, [pc, #740]	@ (8006e44 <save_settings+0x338>)
 8006b60:	229c      	movs	r2, #156	@ 0x9c
 8006b62:	2108      	movs	r1, #8
 8006b64:	1852      	adds	r2, r2, r1
 8006b66:	19d2      	adds	r2, r2, r7
 8006b68:	6013      	str	r3, [r2, #0]
	for(i=0; i<10; i++)
 8006b6a:	237b      	movs	r3, #123	@ 0x7b
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	189b      	adds	r3, r3, r2
 8006b70:	2208      	movs	r2, #8
 8006b72:	4694      	mov	ip, r2
 8006b74:	44bc      	add	ip, r7
 8006b76:	4463      	add	r3, ip
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	e056      	b.n	8006c2c <save_settings+0x120>
	{
		for(j=0;j<2; j++)
 8006b7e:	237a      	movs	r3, #122	@ 0x7a
 8006b80:	2220      	movs	r2, #32
 8006b82:	189b      	adds	r3, r3, r2
 8006b84:	2208      	movs	r2, #8
 8006b86:	4694      	mov	ip, r2
 8006b88:	44bc      	add	ip, r7
 8006b8a:	4463      	add	r3, ip
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	e034      	b.n	8006bfc <save_settings+0xf0>
		{
			mem_sel_img_FLASH[i][j]=*( float *)(Address);
 8006b92:	269c      	movs	r6, #156	@ 0x9c
 8006b94:	2308      	movs	r3, #8
 8006b96:	18f3      	adds	r3, r6, r3
 8006b98:	19db      	adds	r3, r3, r7
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	237b      	movs	r3, #123	@ 0x7b
 8006b9e:	2520      	movs	r5, #32
 8006ba0:	195b      	adds	r3, r3, r5
 8006ba2:	2108      	movs	r1, #8
 8006ba4:	468c      	mov	ip, r1
 8006ba6:	44bc      	add	ip, r7
 8006ba8:	4463      	add	r3, ip
 8006baa:	7818      	ldrb	r0, [r3, #0]
 8006bac:	217a      	movs	r1, #122	@ 0x7a
 8006bae:	194b      	adds	r3, r1, r5
 8006bb0:	2108      	movs	r1, #8
 8006bb2:	468c      	mov	ip, r1
 8006bb4:	44bc      	add	ip, r7
 8006bb6:	4463      	add	r3, ip
 8006bb8:	7819      	ldrb	r1, [r3, #0]
 8006bba:	6814      	ldr	r4, [r2, #0]
 8006bbc:	2314      	movs	r3, #20
 8006bbe:	195b      	adds	r3, r3, r5
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	18ba      	adds	r2, r7, r2
 8006bc4:	189a      	adds	r2, r3, r2
 8006bc6:	0043      	lsls	r3, r0, #1
 8006bc8:	185b      	adds	r3, r3, r1
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	509c      	str	r4, [r3, r2]
			Address = Address+4;
 8006bce:	2308      	movs	r3, #8
 8006bd0:	18f3      	adds	r3, r6, r3
 8006bd2:	19db      	adds	r3, r3, r7
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	2208      	movs	r2, #8
 8006bda:	18b2      	adds	r2, r6, r2
 8006bdc:	19d2      	adds	r2, r2, r7
 8006bde:	6013      	str	r3, [r2, #0]
		for(j=0;j<2; j++)
 8006be0:	217a      	movs	r1, #122	@ 0x7a
 8006be2:	194b      	adds	r3, r1, r5
 8006be4:	2208      	movs	r2, #8
 8006be6:	4694      	mov	ip, r2
 8006be8:	44bc      	add	ip, r7
 8006bea:	4463      	add	r3, ip
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	194b      	adds	r3, r1, r5
 8006bf0:	2108      	movs	r1, #8
 8006bf2:	468c      	mov	ip, r1
 8006bf4:	44bc      	add	ip, r7
 8006bf6:	4463      	add	r3, ip
 8006bf8:	3201      	adds	r2, #1
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	237a      	movs	r3, #122	@ 0x7a
 8006bfe:	2020      	movs	r0, #32
 8006c00:	181b      	adds	r3, r3, r0
 8006c02:	2208      	movs	r2, #8
 8006c04:	4694      	mov	ip, r2
 8006c06:	44bc      	add	ip, r7
 8006c08:	4463      	add	r3, ip
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d9c0      	bls.n	8006b92 <save_settings+0x86>
	for(i=0; i<10; i++)
 8006c10:	217b      	movs	r1, #123	@ 0x7b
 8006c12:	180b      	adds	r3, r1, r0
 8006c14:	2208      	movs	r2, #8
 8006c16:	4694      	mov	ip, r2
 8006c18:	44bc      	add	ip, r7
 8006c1a:	4463      	add	r3, ip
 8006c1c:	781a      	ldrb	r2, [r3, #0]
 8006c1e:	180b      	adds	r3, r1, r0
 8006c20:	2108      	movs	r1, #8
 8006c22:	468c      	mov	ip, r1
 8006c24:	44bc      	add	ip, r7
 8006c26:	4463      	add	r3, ip
 8006c28:	3201      	adds	r2, #1
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	237b      	movs	r3, #123	@ 0x7b
 8006c2e:	2420      	movs	r4, #32
 8006c30:	191b      	adds	r3, r3, r4
 8006c32:	2208      	movs	r2, #8
 8006c34:	4694      	mov	ip, r2
 8006c36:	44bc      	add	ip, r7
 8006c38:	4463      	add	r3, ip
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b09      	cmp	r3, #9
 8006c3e:	d99e      	bls.n	8006b7e <save_settings+0x72>
		}
	}
	HAL_FLASH_Unlock();
 8006c40:	f002 fd54 	bl	80096ec <HAL_FLASH_Unlock>
	// Fill EraseInit structure
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8006c44:	4b80      	ldr	r3, [pc, #512]	@ (8006e48 <save_settings+0x33c>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = FLASH_USER_START_ADDR;
 8006c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e48 <save_settings+0x33c>)
 8006c4c:	4a79      	ldr	r2, [pc, #484]	@ (8006e34 <save_settings+0x328>)
 8006c4e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.NbPages = (FLASH_USER_END_ADDR - FLASH_USER_START_ADDR) / FLASH_PAGE_SIZE;
 8006c50:	4b7d      	ldr	r3, [pc, #500]	@ (8006e48 <save_settings+0x33c>)
 8006c52:	2201      	movs	r2, #1
 8006c54:	609a      	str	r2, [r3, #8]
	//Erase flash page 63
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8006c56:	2374      	movs	r3, #116	@ 0x74
 8006c58:	191b      	adds	r3, r3, r4
 8006c5a:	2208      	movs	r2, #8
 8006c5c:	18ba      	adds	r2, r7, r2
 8006c5e:	189a      	adds	r2, r3, r2
 8006c60:	4b79      	ldr	r3, [pc, #484]	@ (8006e48 <save_settings+0x33c>)
 8006c62:	0011      	movs	r1, r2
 8006c64:	0018      	movs	r0, r3
 8006c66:	f002 fe01 	bl	800986c <HAL_FLASHEx_Erase>
 8006c6a:	1e03      	subs	r3, r0, #0
 8006c6c:	d020      	beq.n	8006cb0 <save_settings+0x1a4>
	{	//PageError will contain the faulty page and then to know the code error on this page,
		//user can call function 'HAL_FLASH_GetError()'
		while (1)   // Infinite loop
		{
			ST7735_FillScreen(RED);
 8006c6e:	23f8      	movs	r3, #248	@ 0xf8
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	0018      	movs	r0, r3
 8006c74:	f001 f894 	bl	8007da0 <ST7735_FillScreen>
			HAL_Delay(500);
 8006c78:	23fa      	movs	r3, #250	@ 0xfa
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f001 fb29 	bl	80082d4 <HAL_Delay>
			ST7735_DrawString(0,52,"Error on FLASH erasing!",Font_11x18,WHITE, RED);
 8006c82:	4b72      	ldr	r3, [pc, #456]	@ (8006e4c <save_settings+0x340>)
 8006c84:	4872      	ldr	r0, [pc, #456]	@ (8006e50 <save_settings+0x344>)
 8006c86:	22f8      	movs	r2, #248	@ 0xf8
 8006c88:	0212      	lsls	r2, r2, #8
 8006c8a:	9202      	str	r2, [sp, #8]
 8006c8c:	4a71      	ldr	r2, [pc, #452]	@ (8006e54 <save_settings+0x348>)
 8006c8e:	9201      	str	r2, [sp, #4]
 8006c90:	466a      	mov	r2, sp
 8006c92:	6859      	ldr	r1, [r3, #4]
 8006c94:	6011      	str	r1, [r2, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	0002      	movs	r2, r0
 8006c9a:	2134      	movs	r1, #52	@ 0x34
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f000 fe9d 	bl	80079dc <ST7735_DrawString>
			HAL_Delay(1000);
 8006ca2:	23fa      	movs	r3, #250	@ 0xfa
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f001 fb14 	bl	80082d4 <HAL_Delay>
			ST7735_FillScreen(RED);
 8006cac:	46c0      	nop			@ (mov r8, r8)
 8006cae:	e7de      	b.n	8006c6e <save_settings+0x162>
		}
	}
    //Modify flash image
	if(mem_sel > 9)//selected to modify scale coefficients
 8006cb0:	2398      	movs	r3, #152	@ 0x98
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	189b      	adds	r3, r3, r2
 8006cb6:	2208      	movs	r2, #8
 8006cb8:	4694      	mov	ip, r2
 8006cba:	44bc      	add	ip, r7
 8006cbc:	4463      	add	r3, ip
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	b25b      	sxtb	r3, r3
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	dd18      	ble.n	8006cf8 <save_settings+0x1ec>
	{
		scaleU_FLASH = scaleU; scaleI_FLASH =scaleI;
 8006cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc8:	2290      	movs	r2, #144	@ 0x90
 8006cca:	2108      	movs	r1, #8
 8006ccc:	1852      	adds	r2, r2, r1
 8006cce:	19d2      	adds	r2, r2, r7
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	228c      	movs	r2, #140	@ 0x8c
 8006cd6:	2108      	movs	r1, #8
 8006cd8:	1852      	adds	r2, r2, r1
 8006cda:	19d2      	adds	r2, r2, r7
 8006cdc:	6013      	str	r3, [r2, #0]
		scaleUsp_FLASH = scaleUsp; scaleIsp_FLASH = scaleIsp;
 8006cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce0:	2288      	movs	r2, #136	@ 0x88
 8006ce2:	2108      	movs	r1, #8
 8006ce4:	1852      	adds	r2, r2, r1
 8006ce6:	19d2      	adds	r2, r2, r7
 8006ce8:	6013      	str	r3, [r2, #0]
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	2284      	movs	r2, #132	@ 0x84
 8006cee:	2108      	movs	r1, #8
 8006cf0:	1852      	adds	r2, r2, r1
 8006cf2:	19d2      	adds	r2, r2, r7
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	e02f      	b.n	8006d58 <save_settings+0x24c>
	}
	else //selected to modify work memories settings
	{
		mem_sel_img_FLASH[mem_sel][0] = uSP;
 8006cf8:	2098      	movs	r0, #152	@ 0x98
 8006cfa:	2120      	movs	r1, #32
 8006cfc:	1843      	adds	r3, r0, r1
 8006cfe:	2208      	movs	r2, #8
 8006d00:	4694      	mov	ip, r2
 8006d02:	44bc      	add	ip, r7
 8006d04:	4463      	add	r3, ip
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	b25b      	sxtb	r3, r3
 8006d0a:	2414      	movs	r4, #20
 8006d0c:	000d      	movs	r5, r1
 8006d0e:	1862      	adds	r2, r4, r1
 8006d10:	2108      	movs	r1, #8
 8006d12:	468c      	mov	ip, r1
 8006d14:	44bc      	add	ip, r7
 8006d16:	4462      	add	r2, ip
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	219c      	movs	r1, #156	@ 0x9c
 8006d1c:	194e      	adds	r6, r1, r5
 8006d1e:	2108      	movs	r1, #8
 8006d20:	1879      	adds	r1, r7, r1
 8006d22:	1871      	adds	r1, r6, r1
 8006d24:	6809      	ldr	r1, [r1, #0]
 8006d26:	5099      	str	r1, [r3, r2]
		mem_sel_img_FLASH[mem_sel][1] = iSP;
 8006d28:	0029      	movs	r1, r5
 8006d2a:	1843      	adds	r3, r0, r1
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	4694      	mov	ip, r2
 8006d30:	44bc      	add	ip, r7
 8006d32:	4463      	add	r3, ip
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	b25b      	sxtb	r3, r3
 8006d38:	1862      	adds	r2, r4, r1
 8006d3a:	2008      	movs	r0, #8
 8006d3c:	4684      	mov	ip, r0
 8006d3e:	44bc      	add	ip, r7
 8006d40:	4462      	add	r2, ip
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	18d3      	adds	r3, r2, r3
 8006d46:	3304      	adds	r3, #4
 8006d48:	22a0      	movs	r2, #160	@ 0xa0
 8006d4a:	1852      	adds	r2, r2, r1
 8006d4c:	2108      	movs	r1, #8
 8006d4e:	468c      	mov	ip, r1
 8006d50:	44bc      	add	ip, r7
 8006d52:	4462      	add	r2, ip
 8006d54:	6812      	ldr	r2, [r2, #0]
 8006d56:	601a      	str	r2, [r3, #0]
	}
	//Write image to flash memory
	if (HAL_FLASH_Program
			  (FLASH_TYPEPROGRAM_WORD, SCALE_U_ADDR, *(uint32_t*)&scaleU_FLASH) != HAL_OK)
 8006d58:	2370      	movs	r3, #112	@ 0x70
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	189b      	adds	r3, r3, r2
 8006d5e:	2208      	movs	r2, #8
 8006d60:	4694      	mov	ip, r2
 8006d62:	44bc      	add	ip, r7
 8006d64:	4463      	add	r3, ip
 8006d66:	681b      	ldr	r3, [r3, #0]
	if (HAL_FLASH_Program
 8006d68:	603b      	str	r3, [r7, #0]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	607b      	str	r3, [r7, #4]
 8006d6e:	4931      	ldr	r1, [pc, #196]	@ (8006e34 <save_settings+0x328>)
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2002      	movs	r0, #2
 8006d76:	f002 fc23 	bl	80095c0 <HAL_FLASH_Program>
 8006d7a:	1e03      	subs	r3, r0, #0
 8006d7c:	d001      	beq.n	8006d82 <save_settings+0x276>
		  	  	  err_flash_writing();
 8006d7e:	f000 f8d9 	bl	8006f34 <err_flash_writing>
	if (HAL_FLASH_Program
			  (FLASH_TYPEPROGRAM_WORD, SCALE_I_ADDR, *(uint32_t*)&scaleI_FLASH) != HAL_OK)
 8006d82:	236c      	movs	r3, #108	@ 0x6c
 8006d84:	2220      	movs	r2, #32
 8006d86:	189b      	adds	r3, r3, r2
 8006d88:	2208      	movs	r2, #8
 8006d8a:	4694      	mov	ip, r2
 8006d8c:	44bc      	add	ip, r7
 8006d8e:	4463      	add	r3, ip
 8006d90:	681b      	ldr	r3, [r3, #0]
	if (HAL_FLASH_Program
 8006d92:	623b      	str	r3, [r7, #32]
 8006d94:	2300      	movs	r3, #0
 8006d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d98:	4927      	ldr	r1, [pc, #156]	@ (8006e38 <save_settings+0x32c>)
 8006d9a:	6a3a      	ldr	r2, [r7, #32]
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9e:	2002      	movs	r0, #2
 8006da0:	f002 fc0e 	bl	80095c0 <HAL_FLASH_Program>
 8006da4:	1e03      	subs	r3, r0, #0
 8006da6:	d001      	beq.n	8006dac <save_settings+0x2a0>
		  	  	  err_flash_writing();
 8006da8:	f000 f8c4 	bl	8006f34 <err_flash_writing>
	if (HAL_FLASH_Program
			  (FLASH_TYPEPROGRAM_WORD, SCALE_U_SP_ADDR, *(uint32_t*)&scaleUsp_FLASH) != HAL_OK)
 8006dac:	2368      	movs	r3, #104	@ 0x68
 8006dae:	2220      	movs	r2, #32
 8006db0:	189b      	adds	r3, r3, r2
 8006db2:	2208      	movs	r2, #8
 8006db4:	4694      	mov	ip, r2
 8006db6:	44bc      	add	ip, r7
 8006db8:	4463      	add	r3, ip
 8006dba:	681b      	ldr	r3, [r3, #0]
	if (HAL_FLASH_Program
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	491e      	ldr	r1, [pc, #120]	@ (8006e3c <save_settings+0x330>)
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	2002      	movs	r0, #2
 8006dca:	f002 fbf9 	bl	80095c0 <HAL_FLASH_Program>
 8006dce:	1e03      	subs	r3, r0, #0
 8006dd0:	d001      	beq.n	8006dd6 <save_settings+0x2ca>
		  	  	  err_flash_writing();
 8006dd2:	f000 f8af 	bl	8006f34 <err_flash_writing>
	if (HAL_FLASH_Program
			  (FLASH_TYPEPROGRAM_WORD, SCALE_I_SP_ADDR, *(uint32_t*)&scaleIsp_FLASH) != HAL_OK)
 8006dd6:	2364      	movs	r3, #100	@ 0x64
 8006dd8:	2220      	movs	r2, #32
 8006dda:	189b      	adds	r3, r3, r2
 8006ddc:	2208      	movs	r2, #8
 8006dde:	4694      	mov	ip, r2
 8006de0:	44bc      	add	ip, r7
 8006de2:	4463      	add	r3, ip
 8006de4:	681b      	ldr	r3, [r3, #0]
	if (HAL_FLASH_Program
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	4914      	ldr	r1, [pc, #80]	@ (8006e40 <save_settings+0x334>)
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2002      	movs	r0, #2
 8006df4:	f002 fbe4 	bl	80095c0 <HAL_FLASH_Program>
 8006df8:	1e03      	subs	r3, r0, #0
 8006dfa:	d001      	beq.n	8006e00 <save_settings+0x2f4>
		  	  	  err_flash_writing();
 8006dfc:	f000 f89a 	bl	8006f34 <err_flash_writing>
	Address = MEM_SEL_ARR_ADDR;
 8006e00:	4b10      	ldr	r3, [pc, #64]	@ (8006e44 <save_settings+0x338>)
 8006e02:	229c      	movs	r2, #156	@ 0x9c
 8006e04:	2108      	movs	r1, #8
 8006e06:	1852      	adds	r2, r2, r1
 8006e08:	19d2      	adds	r2, r2, r7
 8006e0a:	6013      	str	r3, [r2, #0]
	for(i=0; i<10; i++)
 8006e0c:	237b      	movs	r3, #123	@ 0x7b
 8006e0e:	2220      	movs	r2, #32
 8006e10:	189b      	adds	r3, r3, r2
 8006e12:	2208      	movs	r2, #8
 8006e14:	4694      	mov	ip, r2
 8006e16:	44bc      	add	ip, r7
 8006e18:	4463      	add	r3, ip
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e077      	b.n	8006f10 <save_settings+0x404>
	{
		for(j=0;j<2; j++)
 8006e20:	237a      	movs	r3, #122	@ 0x7a
 8006e22:	2220      	movs	r2, #32
 8006e24:	189b      	adds	r3, r3, r2
 8006e26:	2208      	movs	r2, #8
 8006e28:	4694      	mov	ip, r2
 8006e2a:	44bc      	add	ip, r7
 8006e2c:	4463      	add	r3, ip
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	e055      	b.n	8006ee0 <save_settings+0x3d4>
 8006e34:	0803f800 	.word	0x0803f800
 8006e38:	0803f804 	.word	0x0803f804
 8006e3c:	0803f808 	.word	0x0803f808
 8006e40:	0803f80c 	.word	0x0803f80c
 8006e44:	0803f810 	.word	0x0803f810
 8006e48:	200004b8 	.word	0x200004b8
 8006e4c:	20000038 	.word	0x20000038
 8006e50:	0800eda4 	.word	0x0800eda4
 8006e54:	0000ffff 	.word	0x0000ffff
		{
			if (HAL_FLASH_Program
					(FLASH_TYPEPROGRAM_WORD, Address,
							*(uint32_t*)&mem_sel_img_FLASH[i][j]) != HAL_OK)
 8006e58:	237b      	movs	r3, #123	@ 0x7b
 8006e5a:	2020      	movs	r0, #32
 8006e5c:	181b      	adds	r3, r3, r0
 8006e5e:	2208      	movs	r2, #8
 8006e60:	4694      	mov	ip, r2
 8006e62:	44bc      	add	ip, r7
 8006e64:	4463      	add	r3, ip
 8006e66:	7819      	ldrb	r1, [r3, #0]
 8006e68:	237a      	movs	r3, #122	@ 0x7a
 8006e6a:	181b      	adds	r3, r3, r0
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	4694      	mov	ip, r2
 8006e70:	44bc      	add	ip, r7
 8006e72:	4463      	add	r3, ip
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2214      	movs	r2, #20
 8006e78:	1812      	adds	r2, r2, r0
 8006e7a:	2008      	movs	r0, #8
 8006e7c:	4684      	mov	ip, r0
 8006e7e:	44bc      	add	ip, r7
 8006e80:	4462      	add	r2, ip
 8006e82:	0049      	lsls	r1, r1, #1
 8006e84:	18cb      	adds	r3, r1, r3
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	18d3      	adds	r3, r2, r3
 8006e8a:	681b      	ldr	r3, [r3, #0]
			if (HAL_FLASH_Program
 8006e8c:	60bb      	str	r3, [r7, #8]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	239c      	movs	r3, #156	@ 0x9c
 8006e94:	2208      	movs	r2, #8
 8006e96:	189b      	adds	r3, r3, r2
 8006e98:	19db      	adds	r3, r3, r7
 8006e9a:	6819      	ldr	r1, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2002      	movs	r0, #2
 8006ea2:	f002 fb8d 	bl	80095c0 <HAL_FLASH_Program>
 8006ea6:	1e03      	subs	r3, r0, #0
 8006ea8:	d001      	beq.n	8006eae <save_settings+0x3a2>
					  	  	  	  	  	  	  	  	  	  	  	  err_flash_writing();
 8006eaa:	f000 f843 	bl	8006f34 <err_flash_writing>
			Address = Address+4;
 8006eae:	229c      	movs	r2, #156	@ 0x9c
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	18d3      	adds	r3, r2, r3
 8006eb4:	19db      	adds	r3, r3, r7
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	2108      	movs	r1, #8
 8006ebc:	1852      	adds	r2, r2, r1
 8006ebe:	19d2      	adds	r2, r2, r7
 8006ec0:	6013      	str	r3, [r2, #0]
		for(j=0;j<2; j++)
 8006ec2:	217a      	movs	r1, #122	@ 0x7a
 8006ec4:	2020      	movs	r0, #32
 8006ec6:	180b      	adds	r3, r1, r0
 8006ec8:	2208      	movs	r2, #8
 8006eca:	4694      	mov	ip, r2
 8006ecc:	44bc      	add	ip, r7
 8006ece:	4463      	add	r3, ip
 8006ed0:	781a      	ldrb	r2, [r3, #0]
 8006ed2:	180b      	adds	r3, r1, r0
 8006ed4:	2108      	movs	r1, #8
 8006ed6:	468c      	mov	ip, r1
 8006ed8:	44bc      	add	ip, r7
 8006eda:	4463      	add	r3, ip
 8006edc:	3201      	adds	r2, #1
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	237a      	movs	r3, #122	@ 0x7a
 8006ee2:	2020      	movs	r0, #32
 8006ee4:	181b      	adds	r3, r3, r0
 8006ee6:	2208      	movs	r2, #8
 8006ee8:	4694      	mov	ip, r2
 8006eea:	44bc      	add	ip, r7
 8006eec:	4463      	add	r3, ip
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d9b1      	bls.n	8006e58 <save_settings+0x34c>
	for(i=0; i<10; i++)
 8006ef4:	217b      	movs	r1, #123	@ 0x7b
 8006ef6:	180b      	adds	r3, r1, r0
 8006ef8:	2208      	movs	r2, #8
 8006efa:	4694      	mov	ip, r2
 8006efc:	44bc      	add	ip, r7
 8006efe:	4463      	add	r3, ip
 8006f00:	781a      	ldrb	r2, [r3, #0]
 8006f02:	180b      	adds	r3, r1, r0
 8006f04:	2108      	movs	r1, #8
 8006f06:	468c      	mov	ip, r1
 8006f08:	44bc      	add	ip, r7
 8006f0a:	4463      	add	r3, ip
 8006f0c:	3201      	adds	r2, #1
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	237b      	movs	r3, #123	@ 0x7b
 8006f12:	2220      	movs	r2, #32
 8006f14:	189b      	adds	r3, r3, r2
 8006f16:	2208      	movs	r2, #8
 8006f18:	4694      	mov	ip, r2
 8006f1a:	44bc      	add	ip, r7
 8006f1c:	4463      	add	r3, ip
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b09      	cmp	r3, #9
 8006f22:	d800      	bhi.n	8006f26 <save_settings+0x41a>
 8006f24:	e77c      	b.n	8006e20 <save_settings+0x314>
		}
	}
	HAL_FLASH_Lock();
 8006f26:	f002 fc07 	bl	8009738 <HAL_FLASH_Lock>
}
 8006f2a:	46c0      	nop			@ (mov r8, r8)
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	b02b      	add	sp, #172	@ 0xac
 8006f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f32:	46c0      	nop			@ (mov r8, r8)

08006f34 <err_flash_writing>:


void err_flash_writing(void)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af04      	add	r7, sp, #16
	while (1)   // Infinite loop
	{
		ST7735_FillScreen(BLUE);
 8006f3a:	201f      	movs	r0, #31
 8006f3c:	f000 ff30 	bl	8007da0 <ST7735_FillScreen>
		HAL_Delay(500);
 8006f40:	23fa      	movs	r3, #250	@ 0xfa
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	0018      	movs	r0, r3
 8006f46:	f001 f9c5 	bl	80082d4 <HAL_Delay>
		ST7735_DrawString(0,52,"Error on FLASH writing!",Font_11x18,WHITE, BLUE);
 8006f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f78 <err_flash_writing+0x44>)
 8006f4c:	480b      	ldr	r0, [pc, #44]	@ (8006f7c <err_flash_writing+0x48>)
 8006f4e:	221f      	movs	r2, #31
 8006f50:	9202      	str	r2, [sp, #8]
 8006f52:	4a0b      	ldr	r2, [pc, #44]	@ (8006f80 <err_flash_writing+0x4c>)
 8006f54:	9201      	str	r2, [sp, #4]
 8006f56:	466a      	mov	r2, sp
 8006f58:	6859      	ldr	r1, [r3, #4]
 8006f5a:	6011      	str	r1, [r2, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	0002      	movs	r2, r0
 8006f60:	2134      	movs	r1, #52	@ 0x34
 8006f62:	2000      	movs	r0, #0
 8006f64:	f000 fd3a 	bl	80079dc <ST7735_DrawString>
		HAL_Delay(1000);
 8006f68:	23fa      	movs	r3, #250	@ 0xfa
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	f001 f9b1 	bl	80082d4 <HAL_Delay>
		ST7735_FillScreen(BLUE);
 8006f72:	46c0      	nop			@ (mov r8, r8)
 8006f74:	e7e1      	b.n	8006f3a <err_flash_writing+0x6>
 8006f76:	46c0      	nop			@ (mov r8, r8)
 8006f78:	20000038 	.word	0x20000038
 8006f7c:	0800edbc 	.word	0x0800edbc
 8006f80:	0000ffff 	.word	0x0000ffff

08006f84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc8 <HAL_MspInit+0x44>)
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fc8 <HAL_MspInit+0x44>)
 8006f90:	2101      	movs	r1, #1
 8006f92:	430a      	orrs	r2, r1
 8006f94:	619a      	str	r2, [r3, #24]
 8006f96:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc8 <HAL_MspInit+0x44>)
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	607b      	str	r3, [r7, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006fa2:	4b09      	ldr	r3, [pc, #36]	@ (8006fc8 <HAL_MspInit+0x44>)
 8006fa4:	69da      	ldr	r2, [r3, #28]
 8006fa6:	4b08      	ldr	r3, [pc, #32]	@ (8006fc8 <HAL_MspInit+0x44>)
 8006fa8:	2180      	movs	r1, #128	@ 0x80
 8006faa:	0549      	lsls	r1, r1, #21
 8006fac:	430a      	orrs	r2, r1
 8006fae:	61da      	str	r2, [r3, #28]
 8006fb0:	4b05      	ldr	r3, [pc, #20]	@ (8006fc8 <HAL_MspInit+0x44>)
 8006fb2:	69da      	ldr	r2, [r3, #28]
 8006fb4:	2380      	movs	r3, #128	@ 0x80
 8006fb6:	055b      	lsls	r3, r3, #21
 8006fb8:	4013      	ands	r3, r2
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006fbe:	46c0      	nop			@ (mov r8, r8)
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	b002      	add	sp, #8
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	46c0      	nop			@ (mov r8, r8)
 8006fc8:	40021000 	.word	0x40021000

08006fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006fcc:	b590      	push	{r4, r7, lr}
 8006fce:	b08b      	sub	sp, #44	@ 0x2c
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd4:	2414      	movs	r4, #20
 8006fd6:	193b      	adds	r3, r7, r4
 8006fd8:	0018      	movs	r0, r3
 8006fda:	2314      	movs	r3, #20
 8006fdc:	001a      	movs	r2, r3
 8006fde:	2100      	movs	r1, #0
 8006fe0:	f007 fe00 	bl	800ebe4 <memset>
  if(hadc->Instance==ADC1)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a39      	ldr	r2, [pc, #228]	@ (80070d0 <HAL_ADC_MspInit+0x104>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d16b      	bne.n	80070c6 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006fee:	4b39      	ldr	r3, [pc, #228]	@ (80070d4 <HAL_ADC_MspInit+0x108>)
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	4b38      	ldr	r3, [pc, #224]	@ (80070d4 <HAL_ADC_MspInit+0x108>)
 8006ff4:	2180      	movs	r1, #128	@ 0x80
 8006ff6:	0089      	lsls	r1, r1, #2
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	619a      	str	r2, [r3, #24]
 8006ffc:	4b35      	ldr	r3, [pc, #212]	@ (80070d4 <HAL_ADC_MspInit+0x108>)
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	2380      	movs	r3, #128	@ 0x80
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4013      	ands	r3, r2
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800700a:	4b32      	ldr	r3, [pc, #200]	@ (80070d4 <HAL_ADC_MspInit+0x108>)
 800700c:	695a      	ldr	r2, [r3, #20]
 800700e:	4b31      	ldr	r3, [pc, #196]	@ (80070d4 <HAL_ADC_MspInit+0x108>)
 8007010:	2180      	movs	r1, #128	@ 0x80
 8007012:	0289      	lsls	r1, r1, #10
 8007014:	430a      	orrs	r2, r1
 8007016:	615a      	str	r2, [r3, #20]
 8007018:	4b2e      	ldr	r3, [pc, #184]	@ (80070d4 <HAL_ADC_MspInit+0x108>)
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	2380      	movs	r3, #128	@ 0x80
 800701e:	029b      	lsls	r3, r3, #10
 8007020:	4013      	ands	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = V_ADC_Pin|I_ADC_Pin;
 8007026:	193b      	adds	r3, r7, r4
 8007028:	2203      	movs	r2, #3
 800702a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800702c:	193b      	adds	r3, r7, r4
 800702e:	2203      	movs	r2, #3
 8007030:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007032:	193b      	adds	r3, r7, r4
 8007034:	2200      	movs	r2, #0
 8007036:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007038:	193a      	adds	r2, r7, r4
 800703a:	2390      	movs	r3, #144	@ 0x90
 800703c:	05db      	lsls	r3, r3, #23
 800703e:	0011      	movs	r1, r2
 8007040:	0018      	movs	r0, r3
 8007042:	f002 fcbf 	bl	80099c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8007046:	4b24      	ldr	r3, [pc, #144]	@ (80070d8 <HAL_ADC_MspInit+0x10c>)
 8007048:	4a24      	ldr	r2, [pc, #144]	@ (80070dc <HAL_ADC_MspInit+0x110>)
 800704a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800704c:	4b22      	ldr	r3, [pc, #136]	@ (80070d8 <HAL_ADC_MspInit+0x10c>)
 800704e:	2200      	movs	r2, #0
 8007050:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8007052:	4b21      	ldr	r3, [pc, #132]	@ (80070d8 <HAL_ADC_MspInit+0x10c>)
 8007054:	2200      	movs	r2, #0
 8007056:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8007058:	4b1f      	ldr	r3, [pc, #124]	@ (80070d8 <HAL_ADC_MspInit+0x10c>)
 800705a:	2280      	movs	r2, #128	@ 0x80
 800705c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800705e:	4b1e      	ldr	r3, [pc, #120]	@ (80070d8 <HAL_ADC_MspInit+0x10c>)
 8007060:	2280      	movs	r2, #128	@ 0x80
 8007062:	0052      	lsls	r2, r2, #1
 8007064:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007066:	4b1c      	ldr	r3, [pc, #112]	@ (80070d8 <HAL_ADC_MspInit+0x10c>)
 8007068:	2280      	movs	r2, #128	@ 0x80
 800706a:	00d2      	lsls	r2, r2, #3
 800706c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800706e:	4b1a      	ldr	r3, [pc, #104]	@ (80070d8 <HAL_ADC_MspInit+0x10c>)
 8007070:	2220      	movs	r2, #32
 8007072:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8007074:	4b18      	ldr	r3, [pc, #96]	@ (80070d8 <HAL_ADC_MspInit+0x10c>)
 8007076:	2200      	movs	r2, #0
 8007078:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800707a:	4b17      	ldr	r3, [pc, #92]	@ (80070d8 <HAL_ADC_MspInit+0x10c>)
 800707c:	0018      	movs	r0, r3
 800707e:	f002 f8b5 	bl	80091ec <HAL_DMA_Init>
 8007082:	1e03      	subs	r3, r0, #0
 8007084:	d001      	beq.n	800708a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8007086:	f7fe fc4d 	bl	8005924 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 800708a:	4a15      	ldr	r2, [pc, #84]	@ (80070e0 <HAL_ADC_MspInit+0x114>)
 800708c:	23a8      	movs	r3, #168	@ 0xa8
 800708e:	58d3      	ldr	r3, [r2, r3]
 8007090:	4913      	ldr	r1, [pc, #76]	@ (80070e0 <HAL_ADC_MspInit+0x114>)
 8007092:	220f      	movs	r2, #15
 8007094:	4393      	bics	r3, r2
 8007096:	22a8      	movs	r2, #168	@ 0xa8
 8007098:	508b      	str	r3, [r1, r2]
 800709a:	4a11      	ldr	r2, [pc, #68]	@ (80070e0 <HAL_ADC_MspInit+0x114>)
 800709c:	23a8      	movs	r3, #168	@ 0xa8
 800709e:	58d3      	ldr	r3, [r2, r3]
 80070a0:	490f      	ldr	r1, [pc, #60]	@ (80070e0 <HAL_ADC_MspInit+0x114>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	4313      	orrs	r3, r2
 80070a6:	22a8      	movs	r2, #168	@ 0xa8
 80070a8:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a0a      	ldr	r2, [pc, #40]	@ (80070d8 <HAL_ADC_MspInit+0x10c>)
 80070ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80070b0:	4b09      	ldr	r3, [pc, #36]	@ (80070d8 <HAL_ADC_MspInit+0x10c>)
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80070b6:	2200      	movs	r2, #0
 80070b8:	2100      	movs	r1, #0
 80070ba:	200c      	movs	r0, #12
 80070bc:	f001 ff06 	bl	8008ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80070c0:	200c      	movs	r0, #12
 80070c2:	f001 ff18 	bl	8008ef6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80070c6:	46c0      	nop			@ (mov r8, r8)
 80070c8:	46bd      	mov	sp, r7
 80070ca:	b00b      	add	sp, #44	@ 0x2c
 80070cc:	bd90      	pop	{r4, r7, pc}
 80070ce:	46c0      	nop			@ (mov r8, r8)
 80070d0:	40012400 	.word	0x40012400
 80070d4:	40021000 	.word	0x40021000
 80070d8:	200000b4 	.word	0x200000b4
 80070dc:	40020008 	.word	0x40020008
 80070e0:	40020000 	.word	0x40020000

080070e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a09      	ldr	r2, [pc, #36]	@ (8007118 <HAL_CRC_MspInit+0x34>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d10b      	bne.n	800710e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80070f6:	4b09      	ldr	r3, [pc, #36]	@ (800711c <HAL_CRC_MspInit+0x38>)
 80070f8:	695a      	ldr	r2, [r3, #20]
 80070fa:	4b08      	ldr	r3, [pc, #32]	@ (800711c <HAL_CRC_MspInit+0x38>)
 80070fc:	2140      	movs	r1, #64	@ 0x40
 80070fe:	430a      	orrs	r2, r1
 8007100:	615a      	str	r2, [r3, #20]
 8007102:	4b06      	ldr	r3, [pc, #24]	@ (800711c <HAL_CRC_MspInit+0x38>)
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	2240      	movs	r2, #64	@ 0x40
 8007108:	4013      	ands	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800710e:	46c0      	nop			@ (mov r8, r8)
 8007110:	46bd      	mov	sp, r7
 8007112:	b004      	add	sp, #16
 8007114:	bd80      	pop	{r7, pc}
 8007116:	46c0      	nop			@ (mov r8, r8)
 8007118:	40023000 	.word	0x40023000
 800711c:	40021000 	.word	0x40021000

08007120 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007120:	b590      	push	{r4, r7, lr}
 8007122:	b08d      	sub	sp, #52	@ 0x34
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007128:	241c      	movs	r4, #28
 800712a:	193b      	adds	r3, r7, r4
 800712c:	0018      	movs	r0, r3
 800712e:	2314      	movs	r3, #20
 8007130:	001a      	movs	r2, r3
 8007132:	2100      	movs	r1, #0
 8007134:	f007 fd56 	bl	800ebe4 <memset>
  if(hi2c->Instance==I2C1)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a3c      	ldr	r2, [pc, #240]	@ (8007230 <HAL_I2C_MspInit+0x110>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d132      	bne.n	80071a8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007142:	4b3c      	ldr	r3, [pc, #240]	@ (8007234 <HAL_I2C_MspInit+0x114>)
 8007144:	695a      	ldr	r2, [r3, #20]
 8007146:	4b3b      	ldr	r3, [pc, #236]	@ (8007234 <HAL_I2C_MspInit+0x114>)
 8007148:	2180      	movs	r1, #128	@ 0x80
 800714a:	02c9      	lsls	r1, r1, #11
 800714c:	430a      	orrs	r2, r1
 800714e:	615a      	str	r2, [r3, #20]
 8007150:	4b38      	ldr	r3, [pc, #224]	@ (8007234 <HAL_I2C_MspInit+0x114>)
 8007152:	695a      	ldr	r2, [r3, #20]
 8007154:	2380      	movs	r3, #128	@ 0x80
 8007156:	02db      	lsls	r3, r3, #11
 8007158:	4013      	ands	r3, r2
 800715a:	61bb      	str	r3, [r7, #24]
 800715c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800715e:	0021      	movs	r1, r4
 8007160:	187b      	adds	r3, r7, r1
 8007162:	22c0      	movs	r2, #192	@ 0xc0
 8007164:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007166:	187b      	adds	r3, r7, r1
 8007168:	2212      	movs	r2, #18
 800716a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800716c:	187b      	adds	r3, r7, r1
 800716e:	2200      	movs	r2, #0
 8007170:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007172:	187b      	adds	r3, r7, r1
 8007174:	2203      	movs	r2, #3
 8007176:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8007178:	187b      	adds	r3, r7, r1
 800717a:	2201      	movs	r2, #1
 800717c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800717e:	187b      	adds	r3, r7, r1
 8007180:	4a2d      	ldr	r2, [pc, #180]	@ (8007238 <HAL_I2C_MspInit+0x118>)
 8007182:	0019      	movs	r1, r3
 8007184:	0010      	movs	r0, r2
 8007186:	f002 fc1d 	bl	80099c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800718a:	4b2a      	ldr	r3, [pc, #168]	@ (8007234 <HAL_I2C_MspInit+0x114>)
 800718c:	69da      	ldr	r2, [r3, #28]
 800718e:	4b29      	ldr	r3, [pc, #164]	@ (8007234 <HAL_I2C_MspInit+0x114>)
 8007190:	2180      	movs	r1, #128	@ 0x80
 8007192:	0389      	lsls	r1, r1, #14
 8007194:	430a      	orrs	r2, r1
 8007196:	61da      	str	r2, [r3, #28]
 8007198:	4b26      	ldr	r3, [pc, #152]	@ (8007234 <HAL_I2C_MspInit+0x114>)
 800719a:	69da      	ldr	r2, [r3, #28]
 800719c:	2380      	movs	r3, #128	@ 0x80
 800719e:	039b      	lsls	r3, r3, #14
 80071a0:	4013      	ands	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80071a6:	e03f      	b.n	8007228 <HAL_I2C_MspInit+0x108>
  else if(hi2c->Instance==I2C2)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a23      	ldr	r2, [pc, #140]	@ (800723c <HAL_I2C_MspInit+0x11c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d13a      	bne.n	8007228 <HAL_I2C_MspInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071b2:	4b20      	ldr	r3, [pc, #128]	@ (8007234 <HAL_I2C_MspInit+0x114>)
 80071b4:	695a      	ldr	r2, [r3, #20]
 80071b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007234 <HAL_I2C_MspInit+0x114>)
 80071b8:	2180      	movs	r1, #128	@ 0x80
 80071ba:	02c9      	lsls	r1, r1, #11
 80071bc:	430a      	orrs	r2, r1
 80071be:	615a      	str	r2, [r3, #20]
 80071c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007234 <HAL_I2C_MspInit+0x114>)
 80071c2:	695a      	ldr	r2, [r3, #20]
 80071c4:	2380      	movs	r3, #128	@ 0x80
 80071c6:	02db      	lsls	r3, r3, #11
 80071c8:	4013      	ands	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80071ce:	211c      	movs	r1, #28
 80071d0:	187b      	adds	r3, r7, r1
 80071d2:	22c0      	movs	r2, #192	@ 0xc0
 80071d4:	0112      	lsls	r2, r2, #4
 80071d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80071d8:	187b      	adds	r3, r7, r1
 80071da:	2212      	movs	r2, #18
 80071dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071de:	187b      	adds	r3, r7, r1
 80071e0:	2200      	movs	r2, #0
 80071e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80071e4:	187b      	adds	r3, r7, r1
 80071e6:	2203      	movs	r2, #3
 80071e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80071ea:	187b      	adds	r3, r7, r1
 80071ec:	2201      	movs	r2, #1
 80071ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071f0:	187b      	adds	r3, r7, r1
 80071f2:	4a11      	ldr	r2, [pc, #68]	@ (8007238 <HAL_I2C_MspInit+0x118>)
 80071f4:	0019      	movs	r1, r3
 80071f6:	0010      	movs	r0, r2
 80071f8:	f002 fbe4 	bl	80099c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80071fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007234 <HAL_I2C_MspInit+0x114>)
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	4b0c      	ldr	r3, [pc, #48]	@ (8007234 <HAL_I2C_MspInit+0x114>)
 8007202:	2180      	movs	r1, #128	@ 0x80
 8007204:	03c9      	lsls	r1, r1, #15
 8007206:	430a      	orrs	r2, r1
 8007208:	61da      	str	r2, [r3, #28]
 800720a:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <HAL_I2C_MspInit+0x114>)
 800720c:	69da      	ldr	r2, [r3, #28]
 800720e:	2380      	movs	r3, #128	@ 0x80
 8007210:	03db      	lsls	r3, r3, #15
 8007212:	4013      	ands	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8007218:	2200      	movs	r2, #0
 800721a:	2100      	movs	r1, #0
 800721c:	2018      	movs	r0, #24
 800721e:	f001 fe55 	bl	8008ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8007222:	2018      	movs	r0, #24
 8007224:	f001 fe67 	bl	8008ef6 <HAL_NVIC_EnableIRQ>
}
 8007228:	46c0      	nop			@ (mov r8, r8)
 800722a:	46bd      	mov	sp, r7
 800722c:	b00d      	add	sp, #52	@ 0x34
 800722e:	bd90      	pop	{r4, r7, pc}
 8007230:	40005400 	.word	0x40005400
 8007234:	40021000 	.word	0x40021000
 8007238:	48000400 	.word	0x48000400
 800723c:	40005800 	.word	0x40005800

08007240 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a06      	ldr	r2, [pc, #24]	@ (8007268 <HAL_RTC_MspInit+0x28>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d106      	bne.n	8007260 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007252:	4b06      	ldr	r3, [pc, #24]	@ (800726c <HAL_RTC_MspInit+0x2c>)
 8007254:	6a1a      	ldr	r2, [r3, #32]
 8007256:	4b05      	ldr	r3, [pc, #20]	@ (800726c <HAL_RTC_MspInit+0x2c>)
 8007258:	2180      	movs	r1, #128	@ 0x80
 800725a:	0209      	lsls	r1, r1, #8
 800725c:	430a      	orrs	r2, r1
 800725e:	621a      	str	r2, [r3, #32]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8007260:	46c0      	nop			@ (mov r8, r8)
 8007262:	46bd      	mov	sp, r7
 8007264:	b002      	add	sp, #8
 8007266:	bd80      	pop	{r7, pc}
 8007268:	40002800 	.word	0x40002800
 800726c:	40021000 	.word	0x40021000

08007270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007270:	b590      	push	{r4, r7, lr}
 8007272:	b08b      	sub	sp, #44	@ 0x2c
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007278:	2414      	movs	r4, #20
 800727a:	193b      	adds	r3, r7, r4
 800727c:	0018      	movs	r0, r3
 800727e:	2314      	movs	r3, #20
 8007280:	001a      	movs	r2, r3
 8007282:	2100      	movs	r1, #0
 8007284:	f007 fcae 	bl	800ebe4 <memset>
  if(hspi->Instance==SPI1)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a38      	ldr	r2, [pc, #224]	@ (8007370 <HAL_SPI_MspInit+0x100>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d169      	bne.n	8007366 <HAL_SPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007292:	4b38      	ldr	r3, [pc, #224]	@ (8007374 <HAL_SPI_MspInit+0x104>)
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	4b37      	ldr	r3, [pc, #220]	@ (8007374 <HAL_SPI_MspInit+0x104>)
 8007298:	2180      	movs	r1, #128	@ 0x80
 800729a:	0149      	lsls	r1, r1, #5
 800729c:	430a      	orrs	r2, r1
 800729e:	619a      	str	r2, [r3, #24]
 80072a0:	4b34      	ldr	r3, [pc, #208]	@ (8007374 <HAL_SPI_MspInit+0x104>)
 80072a2:	699a      	ldr	r2, [r3, #24]
 80072a4:	2380      	movs	r3, #128	@ 0x80
 80072a6:	015b      	lsls	r3, r3, #5
 80072a8:	4013      	ands	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072ae:	4b31      	ldr	r3, [pc, #196]	@ (8007374 <HAL_SPI_MspInit+0x104>)
 80072b0:	695a      	ldr	r2, [r3, #20]
 80072b2:	4b30      	ldr	r3, [pc, #192]	@ (8007374 <HAL_SPI_MspInit+0x104>)
 80072b4:	2180      	movs	r1, #128	@ 0x80
 80072b6:	0289      	lsls	r1, r1, #10
 80072b8:	430a      	orrs	r2, r1
 80072ba:	615a      	str	r2, [r3, #20]
 80072bc:	4b2d      	ldr	r3, [pc, #180]	@ (8007374 <HAL_SPI_MspInit+0x104>)
 80072be:	695a      	ldr	r2, [r3, #20]
 80072c0:	2380      	movs	r3, #128	@ 0x80
 80072c2:	029b      	lsls	r3, r3, #10
 80072c4:	4013      	ands	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80072ca:	0021      	movs	r1, r4
 80072cc:	187b      	adds	r3, r7, r1
 80072ce:	22a0      	movs	r2, #160	@ 0xa0
 80072d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072d2:	187b      	adds	r3, r7, r1
 80072d4:	2202      	movs	r2, #2
 80072d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d8:	187b      	adds	r3, r7, r1
 80072da:	2200      	movs	r2, #0
 80072dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072de:	187b      	adds	r3, r7, r1
 80072e0:	2203      	movs	r2, #3
 80072e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80072e4:	187b      	adds	r3, r7, r1
 80072e6:	2200      	movs	r2, #0
 80072e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072ea:	187a      	adds	r2, r7, r1
 80072ec:	2390      	movs	r3, #144	@ 0x90
 80072ee:	05db      	lsls	r3, r3, #23
 80072f0:	0011      	movs	r1, r2
 80072f2:	0018      	movs	r0, r3
 80072f4:	f002 fb66 	bl	80099c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80072f8:	4b1f      	ldr	r3, [pc, #124]	@ (8007378 <HAL_SPI_MspInit+0x108>)
 80072fa:	4a20      	ldr	r2, [pc, #128]	@ (800737c <HAL_SPI_MspInit+0x10c>)
 80072fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007378 <HAL_SPI_MspInit+0x108>)
 8007300:	2210      	movs	r2, #16
 8007302:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007304:	4b1c      	ldr	r3, [pc, #112]	@ (8007378 <HAL_SPI_MspInit+0x108>)
 8007306:	2200      	movs	r2, #0
 8007308:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800730a:	4b1b      	ldr	r3, [pc, #108]	@ (8007378 <HAL_SPI_MspInit+0x108>)
 800730c:	2280      	movs	r2, #128	@ 0x80
 800730e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007310:	4b19      	ldr	r3, [pc, #100]	@ (8007378 <HAL_SPI_MspInit+0x108>)
 8007312:	2200      	movs	r2, #0
 8007314:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007316:	4b18      	ldr	r3, [pc, #96]	@ (8007378 <HAL_SPI_MspInit+0x108>)
 8007318:	2200      	movs	r2, #0
 800731a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800731c:	4b16      	ldr	r3, [pc, #88]	@ (8007378 <HAL_SPI_MspInit+0x108>)
 800731e:	2200      	movs	r2, #0
 8007320:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007322:	4b15      	ldr	r3, [pc, #84]	@ (8007378 <HAL_SPI_MspInit+0x108>)
 8007324:	2200      	movs	r2, #0
 8007326:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007328:	4b13      	ldr	r3, [pc, #76]	@ (8007378 <HAL_SPI_MspInit+0x108>)
 800732a:	0018      	movs	r0, r3
 800732c:	f001 ff5e 	bl	80091ec <HAL_DMA_Init>
 8007330:	1e03      	subs	r3, r0, #0
 8007332:	d001      	beq.n	8007338 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 8007334:	f7fe faf6 	bl	8005924 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_SPI1_TX);
 8007338:	4a11      	ldr	r2, [pc, #68]	@ (8007380 <HAL_SPI_MspInit+0x110>)
 800733a:	23a8      	movs	r3, #168	@ 0xa8
 800733c:	58d3      	ldr	r3, [r2, r3]
 800733e:	4910      	ldr	r1, [pc, #64]	@ (8007380 <HAL_SPI_MspInit+0x110>)
 8007340:	4a10      	ldr	r2, [pc, #64]	@ (8007384 <HAL_SPI_MspInit+0x114>)
 8007342:	4013      	ands	r3, r2
 8007344:	22a8      	movs	r2, #168	@ 0xa8
 8007346:	508b      	str	r3, [r1, r2]
 8007348:	4a0d      	ldr	r2, [pc, #52]	@ (8007380 <HAL_SPI_MspInit+0x110>)
 800734a:	23a8      	movs	r3, #168	@ 0xa8
 800734c:	58d3      	ldr	r3, [r2, r3]
 800734e:	490c      	ldr	r1, [pc, #48]	@ (8007380 <HAL_SPI_MspInit+0x110>)
 8007350:	22c0      	movs	r2, #192	@ 0xc0
 8007352:	0092      	lsls	r2, r2, #2
 8007354:	4313      	orrs	r3, r2
 8007356:	22a8      	movs	r2, #168	@ 0xa8
 8007358:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a06      	ldr	r2, [pc, #24]	@ (8007378 <HAL_SPI_MspInit+0x108>)
 800735e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007360:	4b05      	ldr	r3, [pc, #20]	@ (8007378 <HAL_SPI_MspInit+0x108>)
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8007366:	46c0      	nop			@ (mov r8, r8)
 8007368:	46bd      	mov	sp, r7
 800736a:	b00b      	add	sp, #44	@ 0x2c
 800736c:	bd90      	pop	{r4, r7, pc}
 800736e:	46c0      	nop			@ (mov r8, r8)
 8007370:	40013000 	.word	0x40013000
 8007374:	40021000 	.word	0x40021000
 8007378:	20000240 	.word	0x20000240
 800737c:	40020030 	.word	0x40020030
 8007380:	40020000 	.word	0x40020000
 8007384:	fffff0ff 	.word	0xfffff0ff

08007388 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a0a      	ldr	r2, [pc, #40]	@ (80073c0 <HAL_TIM_PWM_MspInit+0x38>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d10d      	bne.n	80073b6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800739a:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <HAL_TIM_PWM_MspInit+0x3c>)
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	4b09      	ldr	r3, [pc, #36]	@ (80073c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80073a0:	2180      	movs	r1, #128	@ 0x80
 80073a2:	0109      	lsls	r1, r1, #4
 80073a4:	430a      	orrs	r2, r1
 80073a6:	619a      	str	r2, [r3, #24]
 80073a8:	4b06      	ldr	r3, [pc, #24]	@ (80073c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80073aa:	699a      	ldr	r2, [r3, #24]
 80073ac:	2380      	movs	r3, #128	@ 0x80
 80073ae:	011b      	lsls	r3, r3, #4
 80073b0:	4013      	ands	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80073b6:	46c0      	nop			@ (mov r8, r8)
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b004      	add	sp, #16
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	46c0      	nop			@ (mov r8, r8)
 80073c0:	40012c00 	.word	0x40012c00
 80073c4:	40021000 	.word	0x40021000

080073c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80073c8:	b590      	push	{r4, r7, lr}
 80073ca:	b08b      	sub	sp, #44	@ 0x2c
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073d0:	2414      	movs	r4, #20
 80073d2:	193b      	adds	r3, r7, r4
 80073d4:	0018      	movs	r0, r3
 80073d6:	2314      	movs	r3, #20
 80073d8:	001a      	movs	r2, r3
 80073da:	2100      	movs	r1, #0
 80073dc:	f007 fc02 	bl	800ebe4 <memset>
  if(htim_encoder->Instance==TIM3)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007454 <HAL_TIM_Encoder_MspInit+0x8c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d12f      	bne.n	800744a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80073ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007458 <HAL_TIM_Encoder_MspInit+0x90>)
 80073ec:	69da      	ldr	r2, [r3, #28]
 80073ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007458 <HAL_TIM_Encoder_MspInit+0x90>)
 80073f0:	2102      	movs	r1, #2
 80073f2:	430a      	orrs	r2, r1
 80073f4:	61da      	str	r2, [r3, #28]
 80073f6:	4b18      	ldr	r3, [pc, #96]	@ (8007458 <HAL_TIM_Encoder_MspInit+0x90>)
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	2202      	movs	r2, #2
 80073fc:	4013      	ands	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007402:	4b15      	ldr	r3, [pc, #84]	@ (8007458 <HAL_TIM_Encoder_MspInit+0x90>)
 8007404:	695a      	ldr	r2, [r3, #20]
 8007406:	4b14      	ldr	r3, [pc, #80]	@ (8007458 <HAL_TIM_Encoder_MspInit+0x90>)
 8007408:	2180      	movs	r1, #128	@ 0x80
 800740a:	02c9      	lsls	r1, r1, #11
 800740c:	430a      	orrs	r2, r1
 800740e:	615a      	str	r2, [r3, #20]
 8007410:	4b11      	ldr	r3, [pc, #68]	@ (8007458 <HAL_TIM_Encoder_MspInit+0x90>)
 8007412:	695a      	ldr	r2, [r3, #20]
 8007414:	2380      	movs	r3, #128	@ 0x80
 8007416:	02db      	lsls	r3, r3, #11
 8007418:	4013      	ands	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = SW_A_Pin|SW_B_Pin;
 800741e:	0021      	movs	r1, r4
 8007420:	187b      	adds	r3, r7, r1
 8007422:	2230      	movs	r2, #48	@ 0x30
 8007424:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007426:	187b      	adds	r3, r7, r1
 8007428:	2202      	movs	r2, #2
 800742a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800742c:	187b      	adds	r3, r7, r1
 800742e:	2201      	movs	r2, #1
 8007430:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007432:	187b      	adds	r3, r7, r1
 8007434:	2200      	movs	r2, #0
 8007436:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8007438:	187b      	adds	r3, r7, r1
 800743a:	2201      	movs	r2, #1
 800743c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800743e:	187b      	adds	r3, r7, r1
 8007440:	4a06      	ldr	r2, [pc, #24]	@ (800745c <HAL_TIM_Encoder_MspInit+0x94>)
 8007442:	0019      	movs	r1, r3
 8007444:	0010      	movs	r0, r2
 8007446:	f002 fabd 	bl	80099c4 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800744a:	46c0      	nop			@ (mov r8, r8)
 800744c:	46bd      	mov	sp, r7
 800744e:	b00b      	add	sp, #44	@ 0x2c
 8007450:	bd90      	pop	{r4, r7, pc}
 8007452:	46c0      	nop			@ (mov r8, r8)
 8007454:	40000400 	.word	0x40000400
 8007458:	40021000 	.word	0x40021000
 800745c:	48000400 	.word	0x48000400

08007460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a0d      	ldr	r2, [pc, #52]	@ (80074a4 <HAL_TIM_Base_MspInit+0x44>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d113      	bne.n	800749a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007472:	4b0d      	ldr	r3, [pc, #52]	@ (80074a8 <HAL_TIM_Base_MspInit+0x48>)
 8007474:	69da      	ldr	r2, [r3, #28]
 8007476:	4b0c      	ldr	r3, [pc, #48]	@ (80074a8 <HAL_TIM_Base_MspInit+0x48>)
 8007478:	2110      	movs	r1, #16
 800747a:	430a      	orrs	r2, r1
 800747c:	61da      	str	r2, [r3, #28]
 800747e:	4b0a      	ldr	r3, [pc, #40]	@ (80074a8 <HAL_TIM_Base_MspInit+0x48>)
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	2210      	movs	r2, #16
 8007484:	4013      	ands	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800748a:	2200      	movs	r2, #0
 800748c:	2100      	movs	r1, #0
 800748e:	2011      	movs	r0, #17
 8007490:	f001 fd1c 	bl	8008ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8007494:	2011      	movs	r0, #17
 8007496:	f001 fd2e 	bl	8008ef6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800749a:	46c0      	nop			@ (mov r8, r8)
 800749c:	46bd      	mov	sp, r7
 800749e:	b004      	add	sp, #16
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	46c0      	nop			@ (mov r8, r8)
 80074a4:	40001000 	.word	0x40001000
 80074a8:	40021000 	.word	0x40021000

080074ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b089      	sub	sp, #36	@ 0x24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074b4:	240c      	movs	r4, #12
 80074b6:	193b      	adds	r3, r7, r4
 80074b8:	0018      	movs	r0, r3
 80074ba:	2314      	movs	r3, #20
 80074bc:	001a      	movs	r2, r3
 80074be:	2100      	movs	r1, #0
 80074c0:	f007 fb90 	bl	800ebe4 <memset>
  if(htim->Instance==TIM1)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a16      	ldr	r2, [pc, #88]	@ (8007524 <HAL_TIM_MspPostInit+0x78>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d125      	bne.n	800751a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074ce:	4b16      	ldr	r3, [pc, #88]	@ (8007528 <HAL_TIM_MspPostInit+0x7c>)
 80074d0:	695a      	ldr	r2, [r3, #20]
 80074d2:	4b15      	ldr	r3, [pc, #84]	@ (8007528 <HAL_TIM_MspPostInit+0x7c>)
 80074d4:	2180      	movs	r1, #128	@ 0x80
 80074d6:	0289      	lsls	r1, r1, #10
 80074d8:	430a      	orrs	r2, r1
 80074da:	615a      	str	r2, [r3, #20]
 80074dc:	4b12      	ldr	r3, [pc, #72]	@ (8007528 <HAL_TIM_MspPostInit+0x7c>)
 80074de:	695a      	ldr	r2, [r3, #20]
 80074e0:	2380      	movs	r3, #128	@ 0x80
 80074e2:	029b      	lsls	r3, r3, #10
 80074e4:	4013      	ands	r3, r2
 80074e6:	60bb      	str	r3, [r7, #8]
 80074e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 80074ea:	193b      	adds	r3, r7, r4
 80074ec:	2280      	movs	r2, #128	@ 0x80
 80074ee:	00d2      	lsls	r2, r2, #3
 80074f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f2:	0021      	movs	r1, r4
 80074f4:	187b      	adds	r3, r7, r1
 80074f6:	2202      	movs	r2, #2
 80074f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fa:	187b      	adds	r3, r7, r1
 80074fc:	2200      	movs	r2, #0
 80074fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007500:	187b      	adds	r3, r7, r1
 8007502:	2200      	movs	r2, #0
 8007504:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8007506:	187b      	adds	r3, r7, r1
 8007508:	2202      	movs	r2, #2
 800750a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 800750c:	187a      	adds	r2, r7, r1
 800750e:	2390      	movs	r3, #144	@ 0x90
 8007510:	05db      	lsls	r3, r3, #23
 8007512:	0011      	movs	r1, r2
 8007514:	0018      	movs	r0, r3
 8007516:	f002 fa55 	bl	80099c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800751a:	46c0      	nop			@ (mov r8, r8)
 800751c:	46bd      	mov	sp, r7
 800751e:	b009      	add	sp, #36	@ 0x24
 8007520:	bd90      	pop	{r4, r7, pc}
 8007522:	46c0      	nop			@ (mov r8, r8)
 8007524:	40012c00 	.word	0x40012c00
 8007528:	40021000 	.word	0x40021000

0800752c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007530:	46c0      	nop			@ (mov r8, r8)
 8007532:	e7fd      	b.n	8007530 <NMI_Handler+0x4>

08007534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007538:	46c0      	nop			@ (mov r8, r8)
 800753a:	e7fd      	b.n	8007538 <HardFault_Handler+0x4>

0800753c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007540:	46c0      	nop			@ (mov r8, r8)
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800754a:	46c0      	nop			@ (mov r8, r8)
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007554:	f000 fea2 	bl	800829c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007558:	46c0      	nop			@ (mov r8, r8)
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8007564:	4b03      	ldr	r3, [pc, #12]	@ (8007574 <DMA1_Channel1_IRQHandler+0x14>)
 8007566:	0018      	movs	r0, r3
 8007568:	f001 ff33 	bl	80093d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800756c:	46c0      	nop			@ (mov r8, r8)
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	46c0      	nop			@ (mov r8, r8)
 8007574:	200000b4 	.word	0x200000b4

08007578 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800757c:	4b03      	ldr	r3, [pc, #12]	@ (800758c <DMA1_Channel2_3_IRQHandler+0x14>)
 800757e:	0018      	movs	r0, r3
 8007580:	f001 ff27 	bl	80093d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8007584:	46c0      	nop			@ (mov r8, r8)
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	46c0      	nop			@ (mov r8, r8)
 800758c:	20000240 	.word	0x20000240

08007590 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8007594:	4b03      	ldr	r3, [pc, #12]	@ (80075a4 <ADC1_IRQHandler+0x14>)
 8007596:	0018      	movs	r0, r3
 8007598:	f001 f882 	bl	80086a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800759c:	46c0      	nop			@ (mov r8, r8)
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	46c0      	nop			@ (mov r8, r8)
 80075a4:	20000074 	.word	0x20000074

080075a8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80075ac:	4b03      	ldr	r3, [pc, #12]	@ (80075bc <TIM6_IRQHandler+0x14>)
 80075ae:	0018      	movs	r0, r3
 80075b0:	f006 fdda 	bl	800e168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80075b4:	46c0      	nop			@ (mov r8, r8)
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	46c0      	nop			@ (mov r8, r8)
 80075bc:	20000314 	.word	0x20000314

080075c0 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80075c4:	4b09      	ldr	r3, [pc, #36]	@ (80075ec <I2C2_IRQHandler+0x2c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	23e0      	movs	r3, #224	@ 0xe0
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	4013      	ands	r3, r2
 80075d0:	d004      	beq.n	80075dc <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80075d2:	4b06      	ldr	r3, [pc, #24]	@ (80075ec <I2C2_IRQHandler+0x2c>)
 80075d4:	0018      	movs	r0, r3
 80075d6:	f002 ff5b 	bl	800a490 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80075da:	e003      	b.n	80075e4 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80075dc:	4b03      	ldr	r3, [pc, #12]	@ (80075ec <I2C2_IRQHandler+0x2c>)
 80075de:	0018      	movs	r0, r3
 80075e0:	f002 ff3c 	bl	800a45c <HAL_I2C_EV_IRQHandler>
}
 80075e4:	46c0      	nop			@ (mov r8, r8)
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	46c0      	nop			@ (mov r8, r8)
 80075ec:	20000168 	.word	0x20000168

080075f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80075f4:	46c0      	nop			@ (mov r8, r8)
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80075fc:	480d      	ldr	r0, [pc, #52]	@ (8007634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80075fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007600:	f7ff fff6 	bl	80075f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007604:	480c      	ldr	r0, [pc, #48]	@ (8007638 <LoopForever+0x6>)
  ldr r1, =_edata
 8007606:	490d      	ldr	r1, [pc, #52]	@ (800763c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007608:	4a0d      	ldr	r2, [pc, #52]	@ (8007640 <LoopForever+0xe>)
  movs r3, #0
 800760a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800760c:	e002      	b.n	8007614 <LoopCopyDataInit>

0800760e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800760e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007612:	3304      	adds	r3, #4

08007614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007618:	d3f9      	bcc.n	800760e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800761a:	4a0a      	ldr	r2, [pc, #40]	@ (8007644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800761c:	4c0a      	ldr	r4, [pc, #40]	@ (8007648 <LoopForever+0x16>)
  movs r3, #0
 800761e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007620:	e001      	b.n	8007626 <LoopFillZerobss>

08007622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007624:	3204      	adds	r2, #4

08007626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007628:	d3fb      	bcc.n	8007622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800762a:	f007 fae3 	bl	800ebf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800762e:	f7fb fd51 	bl	80030d4 <main>

08007632 <LoopForever>:

LoopForever:
    b LoopForever
 8007632:	e7fe      	b.n	8007632 <LoopForever>
  ldr   r0, =_estack
 8007634:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8007638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800763c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8007640:	0801b79c 	.word	0x0801b79c
  ldr r2, =_sbss
 8007644:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8007648:	200004f0 	.word	0x200004f0

0800764c <DMA1_Channel4_5_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800764c:	e7fe      	b.n	800764c <DMA1_Channel4_5_IRQHandler>

0800764e <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 8007652:	46c0      	nop			@ (mov r8, r8)
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <ST7735_Reset>:

static void ST7735_Reset()
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
	TFT_RES_L();
 800765c:	2390      	movs	r3, #144	@ 0x90
 800765e:	05db      	lsls	r3, r3, #23
 8007660:	2208      	movs	r2, #8
 8007662:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(20);
 8007664:	2014      	movs	r0, #20
 8007666:	f000 fe35 	bl	80082d4 <HAL_Delay>
	TFT_RES_H();
 800766a:	2390      	movs	r3, #144	@ 0x90
 800766c:	05db      	lsls	r3, r3, #23
 800766e:	2208      	movs	r2, #8
 8007670:	619a      	str	r2, [r3, #24]
}
 8007672:	46c0      	nop			@ (mov r8, r8)
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	0002      	movs	r2, r0
 8007680:	1dfb      	adds	r3, r7, #7
 8007682:	701a      	strb	r2, [r3, #0]
	TFT_DC_C();
 8007684:	2390      	movs	r3, #144	@ 0x90
 8007686:	05db      	lsls	r3, r3, #23
 8007688:	2210      	movs	r2, #16
 800768a:	629a      	str	r2, [r3, #40]	@ 0x28
#ifdef USE_SPI_DMA
  completed1 = 0;
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else*/
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800768c:	2301      	movs	r3, #1
 800768e:	425b      	negs	r3, r3
 8007690:	1df9      	adds	r1, r7, #7
 8007692:	4804      	ldr	r0, [pc, #16]	@ (80076a4 <ST7735_WriteCommand+0x2c>)
 8007694:	2201      	movs	r2, #1
 8007696:	f005 fe07 	bl	800d2a8 <HAL_SPI_Transmit>
//#endif
}
 800769a:	46c0      	nop			@ (mov r8, r8)
 800769c:	46bd      	mov	sp, r7
 800769e:	b002      	add	sp, #8
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	46c0      	nop			@ (mov r8, r8)
 80076a4:	200001dc 	.word	0x200001dc

080076a8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 80076b2:	2390      	movs	r3, #144	@ 0x90
 80076b4:	05db      	lsls	r3, r3, #23
 80076b6:	2210      	movs	r2, #16
 80076b8:	619a      	str	r2, [r3, #24]
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	b29a      	uxth	r2, r3
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	4b07      	ldr	r3, [pc, #28]	@ (80076e0 <ST7735_WriteData+0x38>)
 80076c2:	0018      	movs	r0, r3
 80076c4:	f005 ff50 	bl	800d568 <HAL_SPI_Transmit_DMA>
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
 80076c8:	46c0      	nop			@ (mov r8, r8)
 80076ca:	4b05      	ldr	r3, [pc, #20]	@ (80076e0 <ST7735_WriteData+0x38>)
 80076cc:	225d      	movs	r2, #93	@ 0x5d
 80076ce:	5c9b      	ldrb	r3, [r3, r2]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d0f9      	beq.n	80076ca <ST7735_WriteData+0x22>
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
#endif
}
 80076d6:	46c0      	nop			@ (mov r8, r8)
 80076d8:	46c0      	nop			@ (mov r8, r8)
 80076da:	46bd      	mov	sp, r7
 80076dc:	b002      	add	sp, #8
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	200001dc 	.word	0x200001dc

080076e4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 80076e4:	b590      	push	{r4, r7, lr}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	220f      	movs	r2, #15
 80076f4:	18ba      	adds	r2, r7, r2
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	7013      	strb	r3, [r2, #0]
    while(numCommands--)
 80076fa:	e04a      	b.n	8007792 <ST7735_ExecuteCommandList+0xae>
    {
    	uint8_t cmd = *addr++;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	607a      	str	r2, [r7, #4]
 8007702:	210b      	movs	r1, #11
 8007704:	187a      	adds	r2, r7, r1
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 800770a:	187b      	adds	r3, r7, r1
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	0018      	movs	r0, r3
 8007710:	f7ff ffb2 	bl	8007678 <ST7735_WriteCommand>

        numArgs = *addr++;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	607a      	str	r2, [r7, #4]
 800771a:	200a      	movs	r0, #10
 800771c:	183a      	adds	r2, r7, r0
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8007722:	183b      	adds	r3, r7, r0
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	b29a      	uxth	r2, r3
 8007728:	230c      	movs	r3, #12
 800772a:	18fb      	adds	r3, r7, r3
 800772c:	2180      	movs	r1, #128	@ 0x80
 800772e:	400a      	ands	r2, r1
 8007730:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8007732:	183b      	adds	r3, r7, r0
 8007734:	183a      	adds	r2, r7, r0
 8007736:	7812      	ldrb	r2, [r2, #0]
 8007738:	217f      	movs	r1, #127	@ 0x7f
 800773a:	400a      	ands	r2, r1
 800773c:	701a      	strb	r2, [r3, #0]
        if(numArgs)
 800773e:	183b      	adds	r3, r7, r0
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00c      	beq.n	8007760 <ST7735_ExecuteCommandList+0x7c>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8007746:	0004      	movs	r4, r0
 8007748:	183b      	adds	r3, r7, r0
 800774a:	781a      	ldrb	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	0011      	movs	r1, r2
 8007750:	0018      	movs	r0, r3
 8007752:	f7ff ffa9 	bl	80076a8 <ST7735_WriteData>
            addr += numArgs;
 8007756:	193b      	adds	r3, r7, r4
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	18d3      	adds	r3, r2, r3
 800775e:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8007760:	210c      	movs	r1, #12
 8007762:	187b      	adds	r3, r7, r1
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d013      	beq.n	8007792 <ST7735_ExecuteCommandList+0xae>
        {
            ms = *addr++;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	781a      	ldrb	r2, [r3, #0]
 8007772:	187b      	adds	r3, r7, r1
 8007774:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8007776:	187b      	adds	r3, r7, r1
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	2bff      	cmp	r3, #255	@ 0xff
 800777c:	d103      	bne.n	8007786 <ST7735_ExecuteCommandList+0xa2>
 800777e:	187b      	adds	r3, r7, r1
 8007780:	22fa      	movs	r2, #250	@ 0xfa
 8007782:	0052      	lsls	r2, r2, #1
 8007784:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8007786:	230c      	movs	r3, #12
 8007788:	18fb      	adds	r3, r7, r3
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	0018      	movs	r0, r3
 800778e:	f000 fda1 	bl	80082d4 <HAL_Delay>
    while(numCommands--)
 8007792:	220f      	movs	r2, #15
 8007794:	18bb      	adds	r3, r7, r2
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	18ba      	adds	r2, r7, r2
 800779a:	1e59      	subs	r1, r3, #1
 800779c:	7011      	strb	r1, [r2, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1ac      	bne.n	80076fc <ST7735_ExecuteCommandList+0x18>
        }
    }
}
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	46c0      	nop			@ (mov r8, r8)
 80077a6:	46bd      	mov	sp, r7
 80077a8:	b005      	add	sp, #20
 80077aa:	bd90      	pop	{r4, r7, pc}

080077ac <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80077ac:	b5b0      	push	{r4, r5, r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	0005      	movs	r5, r0
 80077b4:	000c      	movs	r4, r1
 80077b6:	0010      	movs	r0, r2
 80077b8:	0019      	movs	r1, r3
 80077ba:	1dfb      	adds	r3, r7, #7
 80077bc:	1c2a      	adds	r2, r5, #0
 80077be:	701a      	strb	r2, [r3, #0]
 80077c0:	1dbb      	adds	r3, r7, #6
 80077c2:	1c22      	adds	r2, r4, #0
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	1d7b      	adds	r3, r7, #5
 80077c8:	1c02      	adds	r2, r0, #0
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	1d3b      	adds	r3, r7, #4
 80077ce:	1c0a      	adds	r2, r1, #0
 80077d0:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80077d2:	202a      	movs	r0, #42	@ 0x2a
 80077d4:	f7ff ff50 	bl	8007678 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80077d8:	210c      	movs	r1, #12
 80077da:	187b      	adds	r3, r7, r1
 80077dc:	2200      	movs	r2, #0
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007854 <ST7735_SetAddressWindow+0xa8>)
 80077e2:	781a      	ldrb	r2, [r3, #0]
 80077e4:	1dfb      	adds	r3, r7, #7
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	18d3      	adds	r3, r2, r3
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	187b      	adds	r3, r7, r1
 80077ee:	705a      	strb	r2, [r3, #1]
 80077f0:	187b      	adds	r3, r7, r1
 80077f2:	2200      	movs	r2, #0
 80077f4:	709a      	strb	r2, [r3, #2]
 80077f6:	4b17      	ldr	r3, [pc, #92]	@ (8007854 <ST7735_SetAddressWindow+0xa8>)
 80077f8:	781a      	ldrb	r2, [r3, #0]
 80077fa:	1d7b      	adds	r3, r7, #5
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	18d3      	adds	r3, r2, r3
 8007800:	b2da      	uxtb	r2, r3
 8007802:	187b      	adds	r3, r7, r1
 8007804:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8007806:	000c      	movs	r4, r1
 8007808:	187b      	adds	r3, r7, r1
 800780a:	2104      	movs	r1, #4
 800780c:	0018      	movs	r0, r3
 800780e:	f7ff ff4b 	bl	80076a8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8007812:	202b      	movs	r0, #43	@ 0x2b
 8007814:	f7ff ff30 	bl	8007678 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8007818:	4b0f      	ldr	r3, [pc, #60]	@ (8007858 <ST7735_SetAddressWindow+0xac>)
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	1dbb      	adds	r3, r7, #6
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	18d3      	adds	r3, r2, r3
 8007822:	b2da      	uxtb	r2, r3
 8007824:	0021      	movs	r1, r4
 8007826:	187b      	adds	r3, r7, r1
 8007828:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 800782a:	4b0b      	ldr	r3, [pc, #44]	@ (8007858 <ST7735_SetAddressWindow+0xac>)
 800782c:	781a      	ldrb	r2, [r3, #0]
 800782e:	1d3b      	adds	r3, r7, #4
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	18d3      	adds	r3, r2, r3
 8007834:	b2da      	uxtb	r2, r3
 8007836:	187b      	adds	r3, r7, r1
 8007838:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800783a:	187b      	adds	r3, r7, r1
 800783c:	2104      	movs	r1, #4
 800783e:	0018      	movs	r0, r3
 8007840:	f7ff ff32 	bl	80076a8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8007844:	202c      	movs	r0, #44	@ 0x2c
 8007846:	f7ff ff17 	bl	8007678 <ST7735_WriteCommand>
}
 800784a:	46c0      	nop			@ (mov r8, r8)
 800784c:	46bd      	mov	sp, r7
 800784e:	b004      	add	sp, #16
 8007850:	bdb0      	pop	{r4, r5, r7, pc}
 8007852:	46c0      	nop			@ (mov r8, r8)
 8007854:	200004c5 	.word	0x200004c5
 8007858:	200004c6 	.word	0x200004c6

0800785c <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800785c:	b082      	sub	sp, #8
 800785e:	b5b0      	push	{r4, r5, r7, lr}
 8007860:	b088      	sub	sp, #32
 8007862:	af00      	add	r7, sp, #0
 8007864:	0004      	movs	r4, r0
 8007866:	0008      	movs	r0, r1
 8007868:	0011      	movs	r1, r2
 800786a:	2204      	movs	r2, #4
 800786c:	2530      	movs	r5, #48	@ 0x30
 800786e:	1952      	adds	r2, r2, r5
 8007870:	19d2      	adds	r2, r2, r7
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	1dbb      	adds	r3, r7, #6
 8007876:	1c22      	adds	r2, r4, #0
 8007878:	801a      	strh	r2, [r3, #0]
 800787a:	1d3b      	adds	r3, r7, #4
 800787c:	1c02      	adds	r2, r0, #0
 800787e:	801a      	strh	r2, [r3, #0]
 8007880:	1cfb      	adds	r3, r7, #3
 8007882:	1c0a      	adds	r2, r1, #0
 8007884:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8007886:	1dbb      	adds	r3, r7, #6
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	b2d8      	uxtb	r0, r3
 800788c:	1d3b      	adds	r3, r7, #4
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	b2d9      	uxtb	r1, r3
 8007892:	1dbb      	adds	r3, r7, #6
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b2da      	uxtb	r2, r3
 8007898:	2304      	movs	r3, #4
 800789a:	195b      	adds	r3, r3, r5
 800789c:	19db      	adds	r3, r3, r7
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	18d3      	adds	r3, r2, r3
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b2dc      	uxtb	r4, r3
 80078a8:	1d3b      	adds	r3, r7, #4
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	2304      	movs	r3, #4
 80078b0:	195b      	adds	r3, r3, r5
 80078b2:	19db      	adds	r3, r3, r7
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	18d3      	adds	r3, r2, r3
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	3b01      	subs	r3, #1
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	0022      	movs	r2, r4
 80078c0:	f7ff ff74 	bl	80077ac <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 80078c4:	2300      	movs	r3, #0
 80078c6:	61fb      	str	r3, [r7, #28]
 80078c8:	e053      	b.n	8007972 <ST7735_WriteChar+0x116>
    {
        b = font.data[(ch - 32) * font.height + i];
 80078ca:	2304      	movs	r3, #4
 80078cc:	2030      	movs	r0, #48	@ 0x30
 80078ce:	181b      	adds	r3, r3, r0
 80078d0:	19db      	adds	r3, r3, r7
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	1cfb      	adds	r3, r7, #3
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	3b20      	subs	r3, #32
 80078da:	2104      	movs	r1, #4
 80078dc:	1809      	adds	r1, r1, r0
 80078de:	19c9      	adds	r1, r1, r7
 80078e0:	7849      	ldrb	r1, [r1, #1]
 80078e2:	434b      	muls	r3, r1
 80078e4:	0019      	movs	r1, r3
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	18cb      	adds	r3, r1, r3
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	18d3      	adds	r3, r2, r3
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 80078f2:	2300      	movs	r3, #0
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	e030      	b.n	800795a <ST7735_WriteChar+0xfe>
        {
            if((b << j) & 0x8000)
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	409a      	lsls	r2, r3
 80078fe:	2380      	movs	r3, #128	@ 0x80
 8007900:	021b      	lsls	r3, r3, #8
 8007902:	4013      	ands	r3, r2
 8007904:	d013      	beq.n	800792e <ST7735_WriteChar+0xd2>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8007906:	203c      	movs	r0, #60	@ 0x3c
 8007908:	183b      	adds	r3, r7, r0
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	0a1b      	lsrs	r3, r3, #8
 800790e:	b29b      	uxth	r3, r3
 8007910:	b2da      	uxtb	r2, r3
 8007912:	2110      	movs	r1, #16
 8007914:	187b      	adds	r3, r7, r1
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	183b      	adds	r3, r7, r0
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b2da      	uxtb	r2, r3
 800791e:	187b      	adds	r3, r7, r1
 8007920:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 8007922:	187b      	adds	r3, r7, r1
 8007924:	2102      	movs	r1, #2
 8007926:	0018      	movs	r0, r3
 8007928:	f7ff febe 	bl	80076a8 <ST7735_WriteData>
 800792c:	e012      	b.n	8007954 <ST7735_WriteChar+0xf8>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800792e:	2040      	movs	r0, #64	@ 0x40
 8007930:	183b      	adds	r3, r7, r0
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	b29b      	uxth	r3, r3
 8007938:	b2da      	uxtb	r2, r3
 800793a:	210c      	movs	r1, #12
 800793c:	187b      	adds	r3, r7, r1
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	183b      	adds	r3, r7, r0
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	b2da      	uxtb	r2, r3
 8007946:	187b      	adds	r3, r7, r1
 8007948:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 800794a:	187b      	adds	r3, r7, r1
 800794c:	2102      	movs	r1, #2
 800794e:	0018      	movs	r0, r3
 8007950:	f7ff feaa 	bl	80076a8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	3301      	adds	r3, #1
 8007958:	61bb      	str	r3, [r7, #24]
 800795a:	2304      	movs	r3, #4
 800795c:	2230      	movs	r2, #48	@ 0x30
 800795e:	189b      	adds	r3, r3, r2
 8007960:	19db      	adds	r3, r3, r7
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	001a      	movs	r2, r3
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	4293      	cmp	r3, r2
 800796a:	d3c5      	bcc.n	80078f8 <ST7735_WriteChar+0x9c>
    for(i = 0; i < font.height; i++)
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	3301      	adds	r3, #1
 8007970:	61fb      	str	r3, [r7, #28]
 8007972:	2304      	movs	r3, #4
 8007974:	2230      	movs	r2, #48	@ 0x30
 8007976:	189b      	adds	r3, r3, r2
 8007978:	19db      	adds	r3, r3, r7
 800797a:	785b      	ldrb	r3, [r3, #1]
 800797c:	001a      	movs	r2, r3
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	4293      	cmp	r3, r2
 8007982:	d3a2      	bcc.n	80078ca <ST7735_WriteChar+0x6e>
            }
        }
    }
}
 8007984:	46c0      	nop			@ (mov r8, r8)
 8007986:	46c0      	nop			@ (mov r8, r8)
 8007988:	46bd      	mov	sp, r7
 800798a:	b008      	add	sp, #32
 800798c:	bcb0      	pop	{r4, r5, r7}
 800798e:	bc08      	pop	{r3}
 8007990:	b002      	add	sp, #8
 8007992:	4718      	bx	r3

08007994 <ST7735_Init>:

void ST7735_Init()
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8007998:	f7ff fe59 	bl	800764e <ST7735_GPIO_Init>
	TFT_CS_L();
 800799c:	2390      	movs	r3, #144	@ 0x90
 800799e:	05db      	lsls	r3, r3, #23
 80079a0:	2240      	movs	r2, #64	@ 0x40
 80079a2:	629a      	str	r2, [r3, #40]	@ 0x28
    ST7735_Reset();
 80079a4:	f7ff fe58 	bl	8007658 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80079a8:	4b09      	ldr	r3, [pc, #36]	@ (80079d0 <ST7735_Init+0x3c>)
 80079aa:	0018      	movs	r0, r3
 80079ac:	f7ff fe9a 	bl	80076e4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80079b0:	4b08      	ldr	r3, [pc, #32]	@ (80079d4 <ST7735_Init+0x40>)
 80079b2:	0018      	movs	r0, r3
 80079b4:	f7ff fe96 	bl	80076e4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80079b8:	4b07      	ldr	r3, [pc, #28]	@ (80079d8 <ST7735_Init+0x44>)
 80079ba:	0018      	movs	r0, r3
 80079bc:	f7ff fe92 	bl	80076e4 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 80079c0:	2390      	movs	r3, #144	@ 0x90
 80079c2:	05db      	lsls	r3, r3, #23
 80079c4:	2240      	movs	r2, #64	@ 0x40
 80079c6:	619a      	str	r2, [r3, #24]
}
 80079c8:	46c0      	nop			@ (mov r8, r8)
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	46c0      	nop			@ (mov r8, r8)
 80079d0:	0801b6fc 	.word	0x0801b6fc
 80079d4:	0801b738 	.word	0x0801b738
 80079d8:	0801b748 	.word	0x0801b748

080079dc <ST7735_DrawString>:

    TFT_CS_H();
}

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80079dc:	b082      	sub	sp, #8
 80079de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e0:	b087      	sub	sp, #28
 80079e2:	af04      	add	r7, sp, #16
 80079e4:	603a      	str	r2, [r7, #0]
 80079e6:	2204      	movs	r2, #4
 80079e8:	2418      	movs	r4, #24
 80079ea:	1912      	adds	r2, r2, r4
 80079ec:	2408      	movs	r4, #8
 80079ee:	46a4      	mov	ip, r4
 80079f0:	44bc      	add	ip, r7
 80079f2:	4462      	add	r2, ip
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	1dbb      	adds	r3, r7, #6
 80079f8:	1c02      	adds	r2, r0, #0
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	1d3b      	adds	r3, r7, #4
 80079fe:	1c0a      	adds	r2, r1, #0
 8007a00:	801a      	strh	r2, [r3, #0]
	TFT_CS_L();
 8007a02:	2390      	movs	r3, #144	@ 0x90
 8007a04:	05db      	lsls	r3, r3, #23
 8007a06:	2240      	movs	r2, #64	@ 0x40
 8007a08:	629a      	str	r2, [r3, #40]	@ 0x28

    while(*str)
 8007a0a:	e067      	b.n	8007adc <ST7735_DrawString+0x100>
    {
        if(x + font.width >= _width)
 8007a0c:	1dbb      	adds	r3, r7, #6
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	2204      	movs	r2, #4
 8007a12:	2118      	movs	r1, #24
 8007a14:	1852      	adds	r2, r2, r1
 8007a16:	2008      	movs	r0, #8
 8007a18:	4684      	mov	ip, r0
 8007a1a:	44bc      	add	ip, r7
 8007a1c:	4462      	add	r2, ip
 8007a1e:	7812      	ldrb	r2, [r2, #0]
 8007a20:	189b      	adds	r3, r3, r2
 8007a22:	4a37      	ldr	r2, [pc, #220]	@ (8007b00 <ST7735_DrawString+0x124>)
 8007a24:	2000      	movs	r0, #0
 8007a26:	5e12      	ldrsh	r2, [r2, r0]
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	db27      	blt.n	8007a7c <ST7735_DrawString+0xa0>
        {
            x = 0;
 8007a2c:	1dbb      	adds	r3, r7, #6
 8007a2e:	2200      	movs	r2, #0
 8007a30:	801a      	strh	r2, [r3, #0]
            y += font.height;
 8007a32:	2304      	movs	r3, #4
 8007a34:	0008      	movs	r0, r1
 8007a36:	185b      	adds	r3, r3, r1
 8007a38:	2208      	movs	r2, #8
 8007a3a:	4694      	mov	ip, r2
 8007a3c:	44bc      	add	ip, r7
 8007a3e:	4463      	add	r3, ip
 8007a40:	785b      	ldrb	r3, [r3, #1]
 8007a42:	0019      	movs	r1, r3
 8007a44:	1d3b      	adds	r3, r7, #4
 8007a46:	1d3a      	adds	r2, r7, #4
 8007a48:	8812      	ldrh	r2, [r2, #0]
 8007a4a:	188a      	adds	r2, r1, r2
 8007a4c:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= _height)
 8007a4e:	1d3b      	adds	r3, r7, #4
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	2204      	movs	r2, #4
 8007a54:	1812      	adds	r2, r2, r0
 8007a56:	2108      	movs	r1, #8
 8007a58:	468c      	mov	ip, r1
 8007a5a:	44bc      	add	ip, r7
 8007a5c:	4462      	add	r2, ip
 8007a5e:	7852      	ldrb	r2, [r2, #1]
 8007a60:	189b      	adds	r3, r3, r2
 8007a62:	4a28      	ldr	r2, [pc, #160]	@ (8007b04 <ST7735_DrawString+0x128>)
 8007a64:	2100      	movs	r1, #0
 8007a66:	5e52      	ldrsh	r2, [r2, r1]
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	da3c      	bge.n	8007ae6 <ST7735_DrawString+0x10a>
            {
                break;
            }

            if(*str == ' ')
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d103      	bne.n	8007a7c <ST7735_DrawString+0xa0>
            {
                // skip spaces in the beginning of the new line
                str++;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	3301      	adds	r3, #1
 8007a78:	603b      	str	r3, [r7, #0]
                continue;
 8007a7a:	e02f      	b.n	8007adc <ST7735_DrawString+0x100>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781d      	ldrb	r5, [r3, #0]
 8007a80:	2304      	movs	r3, #4
 8007a82:	2618      	movs	r6, #24
 8007a84:	199b      	adds	r3, r3, r6
 8007a86:	2208      	movs	r2, #8
 8007a88:	4694      	mov	ip, r2
 8007a8a:	44bc      	add	ip, r7
 8007a8c:	4463      	add	r3, ip
 8007a8e:	1d3a      	adds	r2, r7, #4
 8007a90:	8814      	ldrh	r4, [r2, #0]
 8007a92:	1dba      	adds	r2, r7, #6
 8007a94:	8810      	ldrh	r0, [r2, #0]
 8007a96:	2228      	movs	r2, #40	@ 0x28
 8007a98:	2108      	movs	r1, #8
 8007a9a:	1852      	adds	r2, r2, r1
 8007a9c:	19d2      	adds	r2, r2, r7
 8007a9e:	8812      	ldrh	r2, [r2, #0]
 8007aa0:	9202      	str	r2, [sp, #8]
 8007aa2:	2224      	movs	r2, #36	@ 0x24
 8007aa4:	1852      	adds	r2, r2, r1
 8007aa6:	19d2      	adds	r2, r2, r7
 8007aa8:	8812      	ldrh	r2, [r2, #0]
 8007aaa:	9201      	str	r2, [sp, #4]
 8007aac:	466a      	mov	r2, sp
 8007aae:	6859      	ldr	r1, [r3, #4]
 8007ab0:	6011      	str	r1, [r2, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	002a      	movs	r2, r5
 8007ab6:	0021      	movs	r1, r4
 8007ab8:	f7ff fed0 	bl	800785c <ST7735_WriteChar>
        x += font.width;
 8007abc:	2304      	movs	r3, #4
 8007abe:	199b      	adds	r3, r3, r6
 8007ac0:	2208      	movs	r2, #8
 8007ac2:	4694      	mov	ip, r2
 8007ac4:	44bc      	add	ip, r7
 8007ac6:	4463      	add	r3, ip
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	0019      	movs	r1, r3
 8007acc:	1dbb      	adds	r3, r7, #6
 8007ace:	1dba      	adds	r2, r7, #6
 8007ad0:	8812      	ldrh	r2, [r2, #0]
 8007ad2:	188a      	adds	r2, r1, r2
 8007ad4:	801a      	strh	r2, [r3, #0]
        str++;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	603b      	str	r3, [r7, #0]
    while(*str)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d193      	bne.n	8007a0c <ST7735_DrawString+0x30>
 8007ae4:	e000      	b.n	8007ae8 <ST7735_DrawString+0x10c>
                break;
 8007ae6:	46c0      	nop			@ (mov r8, r8)
    }
    TFT_CS_H();
 8007ae8:	2390      	movs	r3, #144	@ 0x90
 8007aea:	05db      	lsls	r3, r3, #23
 8007aec:	2240      	movs	r2, #64	@ 0x40
 8007aee:	619a      	str	r2, [r3, #24]
}
 8007af0:	46c0      	nop			@ (mov r8, r8)
 8007af2:	46bd      	mov	sp, r7
 8007af4:	b003      	add	sp, #12
 8007af6:	bcf0      	pop	{r4, r5, r6, r7}
 8007af8:	bc08      	pop	{r3}
 8007afa:	b002      	add	sp, #8
 8007afc:	4718      	bx	r3
 8007afe:	46c0      	nop			@ (mov r8, r8)
 8007b00:	2000004e 	.word	0x2000004e
 8007b04:	2000004c 	.word	0x2000004c

08007b08 <ST7735_DrawChar>:

void ST7735_DrawChar(uint16_t x, uint16_t y, char chr, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8007b08:	b082      	sub	sp, #8
 8007b0a:	b5b0      	push	{r4, r5, r7, lr}
 8007b0c:	b086      	sub	sp, #24
 8007b0e:	af04      	add	r7, sp, #16
 8007b10:	0004      	movs	r4, r0
 8007b12:	0008      	movs	r0, r1
 8007b14:	0011      	movs	r1, r2
 8007b16:	2204      	movs	r2, #4
 8007b18:	2518      	movs	r5, #24
 8007b1a:	1952      	adds	r2, r2, r5
 8007b1c:	19d2      	adds	r2, r2, r7
 8007b1e:	6013      	str	r3, [r2, #0]
 8007b20:	1dbb      	adds	r3, r7, #6
 8007b22:	1c22      	adds	r2, r4, #0
 8007b24:	801a      	strh	r2, [r3, #0]
 8007b26:	1d3b      	adds	r3, r7, #4
 8007b28:	1c02      	adds	r2, r0, #0
 8007b2a:	801a      	strh	r2, [r3, #0]
 8007b2c:	1cfb      	adds	r3, r7, #3
 8007b2e:	1c0a      	adds	r2, r1, #0
 8007b30:	701a      	strb	r2, [r3, #0]
	TFT_CS_L();
 8007b32:	2390      	movs	r3, #144	@ 0x90
 8007b34:	05db      	lsls	r3, r3, #23
 8007b36:	2240      	movs	r2, #64	@ 0x40
 8007b38:	629a      	str	r2, [r3, #40]	@ 0x28
	ST7735_WriteChar(x, y, chr, font, color, bgcolor);
 8007b3a:	2304      	movs	r3, #4
 8007b3c:	195b      	adds	r3, r3, r5
 8007b3e:	19db      	adds	r3, r3, r7
 8007b40:	1cfa      	adds	r2, r7, #3
 8007b42:	7815      	ldrb	r5, [r2, #0]
 8007b44:	1d3a      	adds	r2, r7, #4
 8007b46:	8814      	ldrh	r4, [r2, #0]
 8007b48:	1dba      	adds	r2, r7, #6
 8007b4a:	8810      	ldrh	r0, [r2, #0]
 8007b4c:	2228      	movs	r2, #40	@ 0x28
 8007b4e:	18ba      	adds	r2, r7, r2
 8007b50:	8812      	ldrh	r2, [r2, #0]
 8007b52:	9202      	str	r2, [sp, #8]
 8007b54:	2224      	movs	r2, #36	@ 0x24
 8007b56:	18ba      	adds	r2, r7, r2
 8007b58:	8812      	ldrh	r2, [r2, #0]
 8007b5a:	9201      	str	r2, [sp, #4]
 8007b5c:	466a      	mov	r2, sp
 8007b5e:	6859      	ldr	r1, [r3, #4]
 8007b60:	6011      	str	r1, [r2, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	002a      	movs	r2, r5
 8007b66:	0021      	movs	r1, r4
 8007b68:	f7ff fe78 	bl	800785c <ST7735_WriteChar>
	TFT_CS_H();
 8007b6c:	2390      	movs	r3, #144	@ 0x90
 8007b6e:	05db      	lsls	r3, r3, #23
 8007b70:	2240      	movs	r2, #64	@ 0x40
 8007b72:	619a      	str	r2, [r3, #24]
}
 8007b74:	46c0      	nop			@ (mov r8, r8)
 8007b76:	46bd      	mov	sp, r7
 8007b78:	b002      	add	sp, #8
 8007b7a:	bcb0      	pop	{r4, r5, r7}
 8007b7c:	bc08      	pop	{r3}
 8007b7e:	b002      	add	sp, #8
 8007b80:	4718      	bx	r3
	...

08007b84 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8007b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b86:	46c6      	mov	lr, r8
 8007b88:	b500      	push	{lr}
 8007b8a:	b08c      	sub	sp, #48	@ 0x30
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	468c      	mov	ip, r1
 8007b90:	0014      	movs	r4, r2
 8007b92:	0019      	movs	r1, r3
 8007b94:	231e      	movs	r3, #30
 8007b96:	18fa      	adds	r2, r7, r3
 8007b98:	1c03      	adds	r3, r0, #0
 8007b9a:	8013      	strh	r3, [r2, #0]
 8007b9c:	201c      	movs	r0, #28
 8007b9e:	183b      	adds	r3, r7, r0
 8007ba0:	4662      	mov	r2, ip
 8007ba2:	801a      	strh	r2, [r3, #0]
 8007ba4:	221a      	movs	r2, #26
 8007ba6:	18bb      	adds	r3, r7, r2
 8007ba8:	1c22      	adds	r2, r4, #0
 8007baa:	801a      	strh	r2, [r3, #0]
 8007bac:	2218      	movs	r2, #24
 8007bae:	18bb      	adds	r3, r7, r2
 8007bb0:	1c0a      	adds	r2, r1, #0
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	466b      	mov	r3, sp
 8007bb6:	4698      	mov	r8, r3
    // clipping
    if ((x >= _width) || (y >= _height))
 8007bb8:	231e      	movs	r3, #30
 8007bba:	18fb      	adds	r3, r7, r3
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	4a75      	ldr	r2, [pc, #468]	@ (8007d94 <ST7735_FillRectangle+0x210>)
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	5e52      	ldrsh	r2, [r2, r1]
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	da06      	bge.n	8007bd6 <ST7735_FillRectangle+0x52>
 8007bc8:	183b      	adds	r3, r7, r0
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	4a72      	ldr	r2, [pc, #456]	@ (8007d98 <ST7735_FillRectangle+0x214>)
 8007bce:	2100      	movs	r1, #0
 8007bd0:	5e52      	ldrsh	r2, [r2, r1]
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	db01      	blt.n	8007bda <ST7735_FillRectangle+0x56>
        return;
 8007bd6:	46c5      	mov	sp, r8
 8007bd8:	e0d7      	b.n	8007d8a <ST7735_FillRectangle+0x206>
    if ((x + w - 1) >= _width)
 8007bda:	241e      	movs	r4, #30
 8007bdc:	193b      	adds	r3, r7, r4
 8007bde:	881a      	ldrh	r2, [r3, #0]
 8007be0:	201a      	movs	r0, #26
 8007be2:	183b      	adds	r3, r7, r0
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	18d3      	adds	r3, r2, r3
 8007be8:	4a6a      	ldr	r2, [pc, #424]	@ (8007d94 <ST7735_FillRectangle+0x210>)
 8007bea:	2100      	movs	r1, #0
 8007bec:	5e52      	ldrsh	r2, [r2, r1]
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	dd08      	ble.n	8007c04 <ST7735_FillRectangle+0x80>
        w = _width - x;
 8007bf2:	4b68      	ldr	r3, [pc, #416]	@ (8007d94 <ST7735_FillRectangle+0x210>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	5e9b      	ldrsh	r3, [r3, r2]
 8007bf8:	b299      	uxth	r1, r3
 8007bfa:	183b      	adds	r3, r7, r0
 8007bfc:	193a      	adds	r2, r7, r4
 8007bfe:	8812      	ldrh	r2, [r2, #0]
 8007c00:	1a8a      	subs	r2, r1, r2
 8007c02:	801a      	strh	r2, [r3, #0]
    if ((y + h - 1) >= _height)
 8007c04:	241c      	movs	r4, #28
 8007c06:	193b      	adds	r3, r7, r4
 8007c08:	881a      	ldrh	r2, [r3, #0]
 8007c0a:	2018      	movs	r0, #24
 8007c0c:	183b      	adds	r3, r7, r0
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	18d3      	adds	r3, r2, r3
 8007c12:	4a61      	ldr	r2, [pc, #388]	@ (8007d98 <ST7735_FillRectangle+0x214>)
 8007c14:	2100      	movs	r1, #0
 8007c16:	5e52      	ldrsh	r2, [r2, r1]
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	dd08      	ble.n	8007c2e <ST7735_FillRectangle+0xaa>
        h = _height - y;
 8007c1c:	4b5e      	ldr	r3, [pc, #376]	@ (8007d98 <ST7735_FillRectangle+0x214>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	5e9b      	ldrsh	r3, [r3, r2]
 8007c22:	b299      	uxth	r1, r3
 8007c24:	183b      	adds	r3, r7, r0
 8007c26:	193a      	adds	r2, r7, r4
 8007c28:	8812      	ldrh	r2, [r2, #0]
 8007c2a:	1a8a      	subs	r2, r1, r2
 8007c2c:	801a      	strh	r2, [r3, #0]

    TFT_CS_L();
 8007c2e:	2390      	movs	r3, #144	@ 0x90
 8007c30:	05db      	lsls	r3, r3, #23
 8007c32:	2240      	movs	r2, #64	@ 0x40
 8007c34:	629a      	str	r2, [r3, #40]	@ 0x28
    ST7735_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8007c36:	221e      	movs	r2, #30
 8007c38:	18bb      	adds	r3, r7, r2
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b2dc      	uxtb	r4, r3
 8007c3e:	231c      	movs	r3, #28
 8007c40:	18fb      	adds	r3, r7, r3
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	b2d8      	uxtb	r0, r3
 8007c46:	18bb      	adds	r3, r7, r2
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	211a      	movs	r1, #26
 8007c4e:	187b      	adds	r3, r7, r1
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	18d3      	adds	r3, r2, r3
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	b2d9      	uxtb	r1, r3
 8007c5c:	231c      	movs	r3, #28
 8007c5e:	18fb      	adds	r3, r7, r3
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	2318      	movs	r3, #24
 8007c66:	18fb      	adds	r3, r7, r3
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	18d3      	adds	r3, r2, r3
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	3b01      	subs	r3, #1
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	000a      	movs	r2, r1
 8007c76:	0001      	movs	r1, r0
 8007c78:	0020      	movs	r0, r4
 8007c7a:	f7ff fd97 	bl	80077ac <ST7735_SetAddressWindow>

    uint8_t data[2] = { color >> 8, color & 0xFF };
 8007c7e:	2130      	movs	r1, #48	@ 0x30
 8007c80:	2418      	movs	r4, #24
 8007c82:	190a      	adds	r2, r1, r4
 8007c84:	19d3      	adds	r3, r2, r7
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	0a1b      	lsrs	r3, r3, #8
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	2008      	movs	r0, #8
 8007c90:	1903      	adds	r3, r0, r4
 8007c92:	19db      	adds	r3, r3, r7
 8007c94:	701a      	strb	r2, [r3, #0]
 8007c96:	190a      	adds	r2, r1, r4
 8007c98:	19d3      	adds	r3, r2, r7
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	1900      	adds	r0, r0, r4
 8007ca0:	19c3      	adds	r3, r0, r7
 8007ca2:	705a      	strb	r2, [r3, #1]
    TFT_DC_D();
 8007ca4:	2390      	movs	r3, #144	@ 0x90
 8007ca6:	05db      	lsls	r3, r3, #23
 8007ca8:	2210      	movs	r2, #16
 8007caa:	619a      	str	r2, [r3, #24]

#ifdef USE_SPI_DMA
    uint8_t tbuf[w*2];
 8007cac:	211a      	movs	r1, #26
 8007cae:	187b      	adds	r3, r7, r1
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	005c      	lsls	r4, r3, #1
 8007cb4:	1e63      	subs	r3, r4, #1
 8007cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cb8:	0023      	movs	r3, r4
 8007cba:	60bb      	str	r3, [r7, #8]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	68b9      	ldr	r1, [r7, #8]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	000b      	movs	r3, r1
 8007cc6:	0f5b      	lsrs	r3, r3, #29
 8007cc8:	0010      	movs	r0, r2
 8007cca:	00c0      	lsls	r0, r0, #3
 8007ccc:	6178      	str	r0, [r7, #20]
 8007cce:	6978      	ldr	r0, [r7, #20]
 8007cd0:	4318      	orrs	r0, r3
 8007cd2:	6178      	str	r0, [r7, #20]
 8007cd4:	000b      	movs	r3, r1
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	613b      	str	r3, [r7, #16]
 8007cda:	0023      	movs	r3, r4
 8007cdc:	603b      	str	r3, [r7, #0]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	607b      	str	r3, [r7, #4]
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	000b      	movs	r3, r1
 8007ce8:	0f5b      	lsrs	r3, r3, #29
 8007cea:	0010      	movs	r0, r2
 8007cec:	00c6      	lsls	r6, r0, #3
 8007cee:	431e      	orrs	r6, r3
 8007cf0:	000b      	movs	r3, r1
 8007cf2:	00dd      	lsls	r5, r3, #3
 8007cf4:	0023      	movs	r3, r4
 8007cf6:	3307      	adds	r3, #7
 8007cf8:	08db      	lsrs	r3, r3, #3
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	466a      	mov	r2, sp
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	469d      	mov	sp, r3
 8007d02:	466b      	mov	r3, sp
 8007d04:	3300      	adds	r3, #0
 8007d06:	627b      	str	r3, [r7, #36]	@ 0x24
    for (y = h; y > 0; y--) {
 8007d08:	231c      	movs	r3, #28
 8007d0a:	18fb      	adds	r3, r7, r3
 8007d0c:	2218      	movs	r2, #24
 8007d0e:	18ba      	adds	r2, r7, r2
 8007d10:	8812      	ldrh	r2, [r2, #0]
 8007d12:	801a      	strh	r2, [r3, #0]
 8007d14:	e02f      	b.n	8007d76 <ST7735_FillRectangle+0x1f2>
        for (int x = w * 2; x >= 0; x -= 2) {
 8007d16:	231a      	movs	r3, #26
 8007d18:	18fb      	adds	r3, r7, r3
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d20:	e013      	b.n	8007d4a <ST7735_FillRectangle+0x1c6>
            tbuf[x] = data[0];
 8007d22:	2008      	movs	r0, #8
 8007d24:	2518      	movs	r5, #24
 8007d26:	1943      	adds	r3, r0, r5
 8007d28:	19db      	adds	r3, r3, r7
 8007d2a:	7819      	ldrb	r1, [r3, #0]
 8007d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d30:	18d3      	adds	r3, r2, r3
 8007d32:	1c0a      	adds	r2, r1, #0
 8007d34:	701a      	strb	r2, [r3, #0]
            tbuf[x + 1] = data[1];
 8007d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d38:	3301      	adds	r3, #1
 8007d3a:	1942      	adds	r2, r0, r5
 8007d3c:	19d2      	adds	r2, r2, r7
 8007d3e:	7851      	ldrb	r1, [r2, #1]
 8007d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d42:	54d1      	strb	r1, [r2, r3]
        for (int x = w * 2; x >= 0; x -= 2) {
 8007d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d46:	3b02      	subs	r3, #2
 8007d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dae8      	bge.n	8007d22 <ST7735_FillRectangle+0x19e>
        }
        HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, tbuf, sizeof(tbuf));
 8007d50:	b2a2      	uxth	r2, r4
 8007d52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d54:	4b11      	ldr	r3, [pc, #68]	@ (8007d9c <ST7735_FillRectangle+0x218>)
 8007d56:	0018      	movs	r0, r3
 8007d58:	f005 fc06 	bl	800d568 <HAL_SPI_Transmit_DMA>
        while (hspi1.State == HAL_SPI_STATE_BUSY_TX) {
 8007d5c:	46c0      	nop			@ (mov r8, r8)
 8007d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d9c <ST7735_FillRectangle+0x218>)
 8007d60:	225d      	movs	r2, #93	@ 0x5d
 8007d62:	5c9b      	ldrb	r3, [r3, r2]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d0f9      	beq.n	8007d5e <ST7735_FillRectangle+0x1da>
    for (y = h; y > 0; y--) {
 8007d6a:	211c      	movs	r1, #28
 8007d6c:	187b      	adds	r3, r7, r1
 8007d6e:	881a      	ldrh	r2, [r3, #0]
 8007d70:	187b      	adds	r3, r7, r1
 8007d72:	3a01      	subs	r2, #1
 8007d74:	801a      	strh	r2, [r3, #0]
 8007d76:	231c      	movs	r3, #28
 8007d78:	18fb      	adds	r3, r7, r3
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1ca      	bne.n	8007d16 <ST7735_FillRectangle+0x192>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
        }
    }
#endif

    TFT_CS_H();
 8007d80:	2390      	movs	r3, #144	@ 0x90
 8007d82:	05db      	lsls	r3, r3, #23
 8007d84:	2240      	movs	r2, #64	@ 0x40
 8007d86:	619a      	str	r2, [r3, #24]
 8007d88:	46c5      	mov	sp, r8
}
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	b00c      	add	sp, #48	@ 0x30
 8007d8e:	bc80      	pop	{r7}
 8007d90:	46b8      	mov	r8, r7
 8007d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d94:	2000004e 	.word	0x2000004e
 8007d98:	2000004c 	.word	0x2000004c
 8007d9c:	200001dc 	.word	0x200001dc

08007da0 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af02      	add	r7, sp, #8
 8007da6:	0002      	movs	r2, r0
 8007da8:	1dbb      	adds	r3, r7, #6
 8007daa:	801a      	strh	r2, [r3, #0]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8007dac:	4b09      	ldr	r3, [pc, #36]	@ (8007dd4 <ST7735_FillScreen+0x34>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	5e9b      	ldrsh	r3, [r3, r2]
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	4b08      	ldr	r3, [pc, #32]	@ (8007dd8 <ST7735_FillScreen+0x38>)
 8007db6:	2100      	movs	r1, #0
 8007db8:	5e5b      	ldrsh	r3, [r3, r1]
 8007dba:	b299      	uxth	r1, r3
 8007dbc:	1dbb      	adds	r3, r7, #6
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	000b      	movs	r3, r1
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	f7ff fedc 	bl	8007b84 <ST7735_FillRectangle>
}
 8007dcc:	46c0      	nop			@ (mov r8, r8)
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	b002      	add	sp, #8
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	2000004e 	.word	0x2000004e
 8007dd8:	2000004c 	.word	0x2000004c

08007ddc <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data)
{
 8007ddc:	b5b0      	push	{r4, r5, r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	0005      	movs	r5, r0
 8007de4:	000c      	movs	r4, r1
 8007de6:	0010      	movs	r0, r2
 8007de8:	0019      	movs	r1, r3
 8007dea:	1dbb      	adds	r3, r7, #6
 8007dec:	1c2a      	adds	r2, r5, #0
 8007dee:	801a      	strh	r2, [r3, #0]
 8007df0:	1d3b      	adds	r3, r7, #4
 8007df2:	1c22      	adds	r2, r4, #0
 8007df4:	801a      	strh	r2, [r3, #0]
 8007df6:	1cbb      	adds	r3, r7, #2
 8007df8:	1c02      	adds	r2, r0, #0
 8007dfa:	801a      	strh	r2, [r3, #0]
 8007dfc:	003b      	movs	r3, r7
 8007dfe:	1c0a      	adds	r2, r1, #0
 8007e00:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8007e02:	1dbb      	adds	r3, r7, #6
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	4a2c      	ldr	r2, [pc, #176]	@ (8007eb8 <ST7735_DrawImage+0xdc>)
 8007e08:	2100      	movs	r1, #0
 8007e0a:	5e52      	ldrsh	r2, [r2, r1]
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	da4b      	bge.n	8007ea8 <ST7735_DrawImage+0xcc>
 8007e10:	1d3b      	adds	r3, r7, #4
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	4a29      	ldr	r2, [pc, #164]	@ (8007ebc <ST7735_DrawImage+0xe0>)
 8007e16:	2100      	movs	r1, #0
 8007e18:	5e52      	ldrsh	r2, [r2, r1]
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	da44      	bge.n	8007ea8 <ST7735_DrawImage+0xcc>
    if((x + w - 1) >= _width) return;
 8007e1e:	1dbb      	adds	r3, r7, #6
 8007e20:	881a      	ldrh	r2, [r3, #0]
 8007e22:	1cbb      	adds	r3, r7, #2
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	18d3      	adds	r3, r2, r3
 8007e28:	4a23      	ldr	r2, [pc, #140]	@ (8007eb8 <ST7735_DrawImage+0xdc>)
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	5e52      	ldrsh	r2, [r2, r1]
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	dc3c      	bgt.n	8007eac <ST7735_DrawImage+0xd0>
    if((y + h - 1) >= _height) return;
 8007e32:	1d3b      	adds	r3, r7, #4
 8007e34:	881a      	ldrh	r2, [r3, #0]
 8007e36:	003b      	movs	r3, r7
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	18d3      	adds	r3, r2, r3
 8007e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007ebc <ST7735_DrawImage+0xe0>)
 8007e3e:	2100      	movs	r1, #0
 8007e40:	5e52      	ldrsh	r2, [r2, r1]
 8007e42:	4293      	cmp	r3, r2
 8007e44:	dc34      	bgt.n	8007eb0 <ST7735_DrawImage+0xd4>

    TFT_CS_L();
 8007e46:	2390      	movs	r3, #144	@ 0x90
 8007e48:	05db      	lsls	r3, r3, #23
 8007e4a:	2240      	movs	r2, #64	@ 0x40
 8007e4c:	629a      	str	r2, [r3, #40]	@ 0x28
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8007e4e:	1dbb      	adds	r3, r7, #6
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	b2d8      	uxtb	r0, r3
 8007e54:	1d3b      	adds	r3, r7, #4
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	b2d9      	uxtb	r1, r3
 8007e5a:	1dbb      	adds	r3, r7, #6
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	1cbb      	adds	r3, r7, #2
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	18d3      	adds	r3, r2, r3
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b2dc      	uxtb	r4, r3
 8007e6e:	1d3b      	adds	r3, r7, #4
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	003b      	movs	r3, r7
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	18d3      	adds	r3, r2, r3
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	0022      	movs	r2, r4
 8007e84:	f7ff fc92 	bl	80077ac <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8007e88:	1cbb      	adds	r3, r7, #2
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	003a      	movs	r2, r7
 8007e8e:	8812      	ldrh	r2, [r2, #0]
 8007e90:	4353      	muls	r3, r2
 8007e92:	005a      	lsls	r2, r3, #1
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	0011      	movs	r1, r2
 8007e98:	0018      	movs	r0, r3
 8007e9a:	f7ff fc05 	bl	80076a8 <ST7735_WriteData>
    TFT_CS_H();
 8007e9e:	2390      	movs	r3, #144	@ 0x90
 8007ea0:	05db      	lsls	r3, r3, #23
 8007ea2:	2240      	movs	r2, #64	@ 0x40
 8007ea4:	619a      	str	r2, [r3, #24]
 8007ea6:	e004      	b.n	8007eb2 <ST7735_DrawImage+0xd6>
    if((x >= _width) || (y >= _height)) return;
 8007ea8:	46c0      	nop			@ (mov r8, r8)
 8007eaa:	e002      	b.n	8007eb2 <ST7735_DrawImage+0xd6>
    if((x + w - 1) >= _width) return;
 8007eac:	46c0      	nop			@ (mov r8, r8)
 8007eae:	e000      	b.n	8007eb2 <ST7735_DrawImage+0xd6>
    if((y + h - 1) >= _height) return;
 8007eb0:	46c0      	nop			@ (mov r8, r8)
}
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	b002      	add	sp, #8
 8007eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8007eb8:	2000004e 	.word	0x2000004e
 8007ebc:	2000004c 	.word	0x2000004c

08007ec0 <ST7735_DrawRect>:
** Function name:           drawRect
** Description:             Draw a rectangle outline
***************************************************************************************/
// Draw a rectangle
void ST7735_DrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8007ec0:	b5b0      	push	{r4, r5, r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	0005      	movs	r5, r0
 8007ec8:	000c      	movs	r4, r1
 8007eca:	0010      	movs	r0, r2
 8007ecc:	0019      	movs	r1, r3
 8007ece:	1dbb      	adds	r3, r7, #6
 8007ed0:	1c2a      	adds	r2, r5, #0
 8007ed2:	801a      	strh	r2, [r3, #0]
 8007ed4:	1d3b      	adds	r3, r7, #4
 8007ed6:	1c22      	adds	r2, r4, #0
 8007ed8:	801a      	strh	r2, [r3, #0]
 8007eda:	1cbb      	adds	r3, r7, #2
 8007edc:	1c02      	adds	r2, r0, #0
 8007ede:	801a      	strh	r2, [r3, #0]
 8007ee0:	003b      	movs	r3, r7
 8007ee2:	1c0a      	adds	r2, r1, #0
 8007ee4:	801a      	strh	r2, [r3, #0]
  ST7735_DrawFastHLine(x, y, w, color);
 8007ee6:	2518      	movs	r5, #24
 8007ee8:	197b      	adds	r3, r7, r5
 8007eea:	881c      	ldrh	r4, [r3, #0]
 8007eec:	1cbb      	adds	r3, r7, #2
 8007eee:	2200      	movs	r2, #0
 8007ef0:	5e9a      	ldrsh	r2, [r3, r2]
 8007ef2:	1d3b      	adds	r3, r7, #4
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	5e59      	ldrsh	r1, [r3, r1]
 8007ef8:	1dbb      	adds	r3, r7, #6
 8007efa:	2000      	movs	r0, #0
 8007efc:	5e18      	ldrsh	r0, [r3, r0]
 8007efe:	0023      	movs	r3, r4
 8007f00:	f000 f88a 	bl	8008018 <ST7735_DrawFastHLine>
  ST7735_DrawFastHLine(x, y + h - 1, w, color);
 8007f04:	1d3b      	adds	r3, r7, #4
 8007f06:	881a      	ldrh	r2, [r3, #0]
 8007f08:	003b      	movs	r3, r7
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	18d3      	adds	r3, r2, r3
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	3b01      	subs	r3, #1
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	b219      	sxth	r1, r3
 8007f16:	197b      	adds	r3, r7, r5
 8007f18:	881c      	ldrh	r4, [r3, #0]
 8007f1a:	1cbb      	adds	r3, r7, #2
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	5e9a      	ldrsh	r2, [r3, r2]
 8007f20:	1dbb      	adds	r3, r7, #6
 8007f22:	2000      	movs	r0, #0
 8007f24:	5e18      	ldrsh	r0, [r3, r0]
 8007f26:	0023      	movs	r3, r4
 8007f28:	f000 f876 	bl	8008018 <ST7735_DrawFastHLine>
  ST7735_DrawFastVLine(x, y, h, color);
 8007f2c:	197b      	adds	r3, r7, r5
 8007f2e:	881c      	ldrh	r4, [r3, #0]
 8007f30:	003b      	movs	r3, r7
 8007f32:	2200      	movs	r2, #0
 8007f34:	5e9a      	ldrsh	r2, [r3, r2]
 8007f36:	1d3b      	adds	r3, r7, #4
 8007f38:	2100      	movs	r1, #0
 8007f3a:	5e59      	ldrsh	r1, [r3, r1]
 8007f3c:	1dbb      	adds	r3, r7, #6
 8007f3e:	2000      	movs	r0, #0
 8007f40:	5e18      	ldrsh	r0, [r3, r0]
 8007f42:	0023      	movs	r3, r4
 8007f44:	f000 f818 	bl	8007f78 <ST7735_DrawFastVLine>
  ST7735_DrawFastVLine(x + w - 1, y, h, color);
 8007f48:	1dbb      	adds	r3, r7, #6
 8007f4a:	881a      	ldrh	r2, [r3, #0]
 8007f4c:	1cbb      	adds	r3, r7, #2
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	18d3      	adds	r3, r2, r3
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	3b01      	subs	r3, #1
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	b218      	sxth	r0, r3
 8007f5a:	197b      	adds	r3, r7, r5
 8007f5c:	881c      	ldrh	r4, [r3, #0]
 8007f5e:	003b      	movs	r3, r7
 8007f60:	2200      	movs	r2, #0
 8007f62:	5e9a      	ldrsh	r2, [r3, r2]
 8007f64:	1d3b      	adds	r3, r7, #4
 8007f66:	2100      	movs	r1, #0
 8007f68:	5e59      	ldrsh	r1, [r3, r1]
 8007f6a:	0023      	movs	r3, r4
 8007f6c:	f000 f804 	bl	8007f78 <ST7735_DrawFastVLine>
}
 8007f70:	46c0      	nop			@ (mov r8, r8)
 8007f72:	46bd      	mov	sp, r7
 8007f74:	b002      	add	sp, #8
 8007f76:	bdb0      	pop	{r4, r5, r7, pc}

08007f78 <ST7735_DrawFastVLine>:
/***************************************************************************************
** Function name:           drawFastVLine
** Description:             draw a vertical line
***************************************************************************************/
void ST7735_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8007f78:	b5b0      	push	{r4, r5, r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	0005      	movs	r5, r0
 8007f80:	000c      	movs	r4, r1
 8007f82:	0010      	movs	r0, r2
 8007f84:	0019      	movs	r1, r3
 8007f86:	1dbb      	adds	r3, r7, #6
 8007f88:	1c2a      	adds	r2, r5, #0
 8007f8a:	801a      	strh	r2, [r3, #0]
 8007f8c:	1d3b      	adds	r3, r7, #4
 8007f8e:	1c22      	adds	r2, r4, #0
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	1cbb      	adds	r3, r7, #2
 8007f94:	1c02      	adds	r2, r0, #0
 8007f96:	801a      	strh	r2, [r3, #0]
 8007f98:	003b      	movs	r3, r7
 8007f9a:	1c0a      	adds	r2, r1, #0
 8007f9c:	801a      	strh	r2, [r3, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 8007f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8008010 <ST7735_DrawFastVLine+0x98>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	5e9b      	ldrsh	r3, [r3, r2]
 8007fa4:	1dba      	adds	r2, r7, #6
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	5e52      	ldrsh	r2, [r2, r1]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	da2b      	bge.n	8008006 <ST7735_DrawFastVLine+0x8e>
 8007fae:	4b19      	ldr	r3, [pc, #100]	@ (8008014 <ST7735_DrawFastVLine+0x9c>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	5e9b      	ldrsh	r3, [r3, r2]
 8007fb4:	1d3a      	adds	r2, r7, #4
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	5e52      	ldrsh	r2, [r2, r1]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	da23      	bge.n	8008006 <ST7735_DrawFastVLine+0x8e>
  if ((y + h - 1) >= _height) h = _height - y;
 8007fbe:	1d3b      	adds	r3, r7, #4
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	5e9a      	ldrsh	r2, [r3, r2]
 8007fc4:	1cbb      	adds	r3, r7, #2
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	5e5b      	ldrsh	r3, [r3, r1]
 8007fca:	18d3      	adds	r3, r2, r3
 8007fcc:	4a11      	ldr	r2, [pc, #68]	@ (8008014 <ST7735_DrawFastVLine+0x9c>)
 8007fce:	2100      	movs	r1, #0
 8007fd0:	5e52      	ldrsh	r2, [r2, r1]
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	dd09      	ble.n	8007fea <ST7735_DrawFastVLine+0x72>
 8007fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8008014 <ST7735_DrawFastVLine+0x9c>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	5e9b      	ldrsh	r3, [r3, r2]
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	1d3b      	adds	r3, r7, #4
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	1cbb      	adds	r3, r7, #2
 8007fe8:	801a      	strh	r2, [r3, #0]

  #ifdef USE_SPI_DMA
  ST7735_FillRectangle(x, y, 1, h, color);
 8007fea:	1dbb      	adds	r3, r7, #6
 8007fec:	8818      	ldrh	r0, [r3, #0]
 8007fee:	1d3b      	adds	r3, r7, #4
 8007ff0:	8819      	ldrh	r1, [r3, #0]
 8007ff2:	1cbb      	adds	r3, r7, #2
 8007ff4:	881a      	ldrh	r2, [r3, #0]
 8007ff6:	003b      	movs	r3, r7
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	0013      	movs	r3, r2
 8007ffe:	2201      	movs	r2, #1
 8008000:	f7ff fdc0 	bl	8007b84 <ST7735_FillRectangle>
 8008004:	e000      	b.n	8008008 <ST7735_DrawFastVLine+0x90>
  if ((x >= _width) || (y >= _height)) return;
 8008006:	46c0      	nop			@ (mov r8, r8)
  #else
  ST7735_DrawLine(x, y, x, y + h - 1, color);
  #endif

}
 8008008:	46bd      	mov	sp, r7
 800800a:	b002      	add	sp, #8
 800800c:	bdb0      	pop	{r4, r5, r7, pc}
 800800e:	46c0      	nop			@ (mov r8, r8)
 8008010:	2000004e 	.word	0x2000004e
 8008014:	2000004c 	.word	0x2000004c

08008018 <ST7735_DrawFastHLine>:
/***************************************************************************************
** Function name:           drawFastHLine
** Description:             draw a horizontal line
***************************************************************************************/
void ST7735_DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8008018:	b5b0      	push	{r4, r5, r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af02      	add	r7, sp, #8
 800801e:	0005      	movs	r5, r0
 8008020:	000c      	movs	r4, r1
 8008022:	0010      	movs	r0, r2
 8008024:	0019      	movs	r1, r3
 8008026:	1dbb      	adds	r3, r7, #6
 8008028:	1c2a      	adds	r2, r5, #0
 800802a:	801a      	strh	r2, [r3, #0]
 800802c:	1d3b      	adds	r3, r7, #4
 800802e:	1c22      	adds	r2, r4, #0
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	1cbb      	adds	r3, r7, #2
 8008034:	1c02      	adds	r2, r0, #0
 8008036:	801a      	strh	r2, [r3, #0]
 8008038:	003b      	movs	r3, r7
 800803a:	1c0a      	adds	r2, r1, #0
 800803c:	801a      	strh	r2, [r3, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 800803e:	4b1b      	ldr	r3, [pc, #108]	@ (80080ac <ST7735_DrawFastHLine+0x94>)
 8008040:	2200      	movs	r2, #0
 8008042:	5e9b      	ldrsh	r3, [r3, r2]
 8008044:	1dba      	adds	r2, r7, #6
 8008046:	2100      	movs	r1, #0
 8008048:	5e52      	ldrsh	r2, [r2, r1]
 800804a:	429a      	cmp	r2, r3
 800804c:	da2a      	bge.n	80080a4 <ST7735_DrawFastHLine+0x8c>
 800804e:	4b18      	ldr	r3, [pc, #96]	@ (80080b0 <ST7735_DrawFastHLine+0x98>)
 8008050:	2200      	movs	r2, #0
 8008052:	5e9b      	ldrsh	r3, [r3, r2]
 8008054:	1d3a      	adds	r2, r7, #4
 8008056:	2100      	movs	r1, #0
 8008058:	5e52      	ldrsh	r2, [r2, r1]
 800805a:	429a      	cmp	r2, r3
 800805c:	da22      	bge.n	80080a4 <ST7735_DrawFastHLine+0x8c>
  if ((x + w - 1) >= _width)  w = _width - x;
 800805e:	1dbb      	adds	r3, r7, #6
 8008060:	2200      	movs	r2, #0
 8008062:	5e9a      	ldrsh	r2, [r3, r2]
 8008064:	1cbb      	adds	r3, r7, #2
 8008066:	2100      	movs	r1, #0
 8008068:	5e5b      	ldrsh	r3, [r3, r1]
 800806a:	18d3      	adds	r3, r2, r3
 800806c:	4a0f      	ldr	r2, [pc, #60]	@ (80080ac <ST7735_DrawFastHLine+0x94>)
 800806e:	2100      	movs	r1, #0
 8008070:	5e52      	ldrsh	r2, [r2, r1]
 8008072:	4293      	cmp	r3, r2
 8008074:	dd09      	ble.n	800808a <ST7735_DrawFastHLine+0x72>
 8008076:	4b0d      	ldr	r3, [pc, #52]	@ (80080ac <ST7735_DrawFastHLine+0x94>)
 8008078:	2200      	movs	r2, #0
 800807a:	5e9b      	ldrsh	r3, [r3, r2]
 800807c:	b29a      	uxth	r2, r3
 800807e:	1dbb      	adds	r3, r7, #6
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	b29a      	uxth	r2, r3
 8008086:	1cbb      	adds	r3, r7, #2
 8008088:	801a      	strh	r2, [r3, #0]

  #ifdef USE_SPI_DMA
  ST7735_FillRectangle(x, y, w, 1, color);
 800808a:	1dbb      	adds	r3, r7, #6
 800808c:	8818      	ldrh	r0, [r3, #0]
 800808e:	1d3b      	adds	r3, r7, #4
 8008090:	8819      	ldrh	r1, [r3, #0]
 8008092:	1cbb      	adds	r3, r7, #2
 8008094:	881a      	ldrh	r2, [r3, #0]
 8008096:	003b      	movs	r3, r7
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	2301      	movs	r3, #1
 800809e:	f7ff fd71 	bl	8007b84 <ST7735_FillRectangle>
 80080a2:	e000      	b.n	80080a6 <ST7735_DrawFastHLine+0x8e>
  if ((x >= _width) || (y >= _height)) return;
 80080a4:	46c0      	nop			@ (mov r8, r8)
  #else
  ST7735_DrawLine(x, y, x + w - 1, y, color);
  #endif
}
 80080a6:	46bd      	mov	sp, r7
 80080a8:	b002      	add	sp, #8
 80080aa:	bdb0      	pop	{r4, r5, r7, pc}
 80080ac:	2000004e 	.word	0x2000004e
 80080b0:	2000004c 	.word	0x2000004c

080080b4 <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	0002      	movs	r2, r0
 80080bc:	1dfb      	adds	r3, r7, #7
 80080be:	701a      	strb	r2, [r3, #0]
  _value_rotation = m % 4;
 80080c0:	1dfb      	adds	r3, r7, #7
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2203      	movs	r2, #3
 80080c6:	4013      	ands	r3, r2
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	4b4a      	ldr	r3, [pc, #296]	@ (80081f4 <ST7735_SetRotation+0x140>)
 80080cc:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 80080ce:	2390      	movs	r3, #144	@ 0x90
 80080d0:	05db      	lsls	r3, r3, #23
 80080d2:	2240      	movs	r2, #64	@ 0x40
 80080d4:	629a      	str	r2, [r3, #40]	@ 0x28

  ST7735_WriteCommand(ST7735_MADCTL);
 80080d6:	2036      	movs	r0, #54	@ 0x36
 80080d8:	f7ff face 	bl	8007678 <ST7735_WriteCommand>

  switch (_value_rotation)
 80080dc:	4b45      	ldr	r3, [pc, #276]	@ (80081f4 <ST7735_SetRotation+0x140>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d05f      	beq.n	80081a4 <ST7735_SetRotation+0xf0>
 80080e4:	dd00      	ble.n	80080e8 <ST7735_SetRotation+0x34>
 80080e6:	e07c      	b.n	80081e2 <ST7735_SetRotation+0x12e>
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d044      	beq.n	8008176 <ST7735_SetRotation+0xc2>
 80080ec:	dd00      	ble.n	80080f0 <ST7735_SetRotation+0x3c>
 80080ee:	e078      	b.n	80081e2 <ST7735_SetRotation+0x12e>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <ST7735_SetRotation+0x46>
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d01f      	beq.n	8008138 <ST7735_SetRotation+0x84>
 80080f8:	e073      	b.n	80081e2 <ST7735_SetRotation+0x12e>
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 80080fa:	4b3f      	ldr	r3, [pc, #252]	@ (80081f8 <ST7735_SetRotation+0x144>)
 80080fc:	781a      	ldrb	r2, [r3, #0]
 80080fe:	4b3e      	ldr	r3, [pc, #248]	@ (80081f8 <ST7735_SetRotation+0x144>)
 8008100:	785b      	ldrb	r3, [r3, #1]
 8008102:	4313      	orrs	r3, r2
 8008104:	b2da      	uxtb	r2, r3
 8008106:	4b3c      	ldr	r3, [pc, #240]	@ (80081f8 <ST7735_SetRotation+0x144>)
 8008108:	78db      	ldrb	r3, [r3, #3]
 800810a:	4313      	orrs	r3, r2
 800810c:	b2da      	uxtb	r2, r3
 800810e:	210f      	movs	r1, #15
 8008110:	187b      	adds	r3, r7, r1
 8008112:	701a      	strb	r2, [r3, #0]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8008114:	187b      	adds	r3, r7, r1
 8008116:	2101      	movs	r1, #1
 8008118:	0018      	movs	r0, r3
 800811a:	f7ff fac5 	bl	80076a8 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 800811e:	4b37      	ldr	r3, [pc, #220]	@ (80081fc <ST7735_SetRotation+0x148>)
 8008120:	2280      	movs	r2, #128	@ 0x80
 8008122:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 8008124:	4b36      	ldr	r3, [pc, #216]	@ (8008200 <ST7735_SetRotation+0x14c>)
 8008126:	22a0      	movs	r2, #160	@ 0xa0
 8008128:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 800812a:	4b36      	ldr	r3, [pc, #216]	@ (8008204 <ST7735_SetRotation+0x150>)
 800812c:	2200      	movs	r2, #0
 800812e:	701a      	strb	r2, [r3, #0]
		_ystart = ST7735_YSTART;
 8008130:	4b35      	ldr	r3, [pc, #212]	@ (8008208 <ST7735_SetRotation+0x154>)
 8008132:	2200      	movs	r2, #0
 8008134:	701a      	strb	r2, [r3, #0]
    }
     break;
 8008136:	e054      	b.n	80081e2 <ST7735_SetRotation+0x12e>
    case 1:
    {
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 8008138:	4b2f      	ldr	r3, [pc, #188]	@ (80081f8 <ST7735_SetRotation+0x144>)
 800813a:	785a      	ldrb	r2, [r3, #1]
 800813c:	4b2e      	ldr	r3, [pc, #184]	@ (80081f8 <ST7735_SetRotation+0x144>)
 800813e:	789b      	ldrb	r3, [r3, #2]
 8008140:	4313      	orrs	r3, r2
 8008142:	b2da      	uxtb	r2, r3
 8008144:	4b2c      	ldr	r3, [pc, #176]	@ (80081f8 <ST7735_SetRotation+0x144>)
 8008146:	78db      	ldrb	r3, [r3, #3]
 8008148:	4313      	orrs	r3, r2
 800814a:	b2da      	uxtb	r2, r3
 800814c:	210e      	movs	r1, #14
 800814e:	187b      	adds	r3, r7, r1
 8008150:	701a      	strb	r2, [r3, #0]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8008152:	187b      	adds	r3, r7, r1
 8008154:	2101      	movs	r1, #1
 8008156:	0018      	movs	r0, r3
 8008158:	f7ff faa6 	bl	80076a8 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 800815c:	4b27      	ldr	r3, [pc, #156]	@ (80081fc <ST7735_SetRotation+0x148>)
 800815e:	22a0      	movs	r2, #160	@ 0xa0
 8008160:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8008162:	4b27      	ldr	r3, [pc, #156]	@ (8008200 <ST7735_SetRotation+0x14c>)
 8008164:	2280      	movs	r2, #128	@ 0x80
 8008166:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8008168:	4b26      	ldr	r3, [pc, #152]	@ (8008204 <ST7735_SetRotation+0x150>)
 800816a:	2200      	movs	r2, #0
 800816c:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 800816e:	4b26      	ldr	r3, [pc, #152]	@ (8008208 <ST7735_SetRotation+0x154>)
 8008170:	2200      	movs	r2, #0
 8008172:	701a      	strb	r2, [r3, #0]
    }
      break;
 8008174:	e035      	b.n	80081e2 <ST7735_SetRotation+0x12e>
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
 8008176:	4b20      	ldr	r3, [pc, #128]	@ (80081f8 <ST7735_SetRotation+0x144>)
 8008178:	78da      	ldrb	r2, [r3, #3]
 800817a:	210d      	movs	r1, #13
 800817c:	187b      	adds	r3, r7, r1
 800817e:	701a      	strb	r2, [r3, #0]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8008180:	187b      	adds	r3, r7, r1
 8008182:	2101      	movs	r1, #1
 8008184:	0018      	movs	r0, r3
 8008186:	f7ff fa8f 	bl	80076a8 <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 800818a:	4b1c      	ldr	r3, [pc, #112]	@ (80081fc <ST7735_SetRotation+0x148>)
 800818c:	2280      	movs	r2, #128	@ 0x80
 800818e:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 8008190:	4b1b      	ldr	r3, [pc, #108]	@ (8008200 <ST7735_SetRotation+0x14c>)
 8008192:	22a0      	movs	r2, #160	@ 0xa0
 8008194:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 8008196:	4b1b      	ldr	r3, [pc, #108]	@ (8008204 <ST7735_SetRotation+0x150>)
 8008198:	2200      	movs	r2, #0
 800819a:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 800819c:	4b1a      	ldr	r3, [pc, #104]	@ (8008208 <ST7735_SetRotation+0x154>)
 800819e:	2200      	movs	r2, #0
 80081a0:	701a      	strb	r2, [r3, #0]
    }
      break;
 80081a2:	e01e      	b.n	80081e2 <ST7735_SetRotation+0x12e>
    case 3:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 80081a4:	4b14      	ldr	r3, [pc, #80]	@ (80081f8 <ST7735_SetRotation+0x144>)
 80081a6:	781a      	ldrb	r2, [r3, #0]
 80081a8:	4b13      	ldr	r3, [pc, #76]	@ (80081f8 <ST7735_SetRotation+0x144>)
 80081aa:	789b      	ldrb	r3, [r3, #2]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	4b11      	ldr	r3, [pc, #68]	@ (80081f8 <ST7735_SetRotation+0x144>)
 80081b2:	78db      	ldrb	r3, [r3, #3]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	210c      	movs	r1, #12
 80081ba:	187b      	adds	r3, r7, r1
 80081bc:	701a      	strb	r2, [r3, #0]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 80081be:	187b      	adds	r3, r7, r1
 80081c0:	2101      	movs	r1, #1
 80081c2:	0018      	movs	r0, r3
 80081c4:	f7ff fa70 	bl	80076a8 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 80081c8:	4b0c      	ldr	r3, [pc, #48]	@ (80081fc <ST7735_SetRotation+0x148>)
 80081ca:	22a0      	movs	r2, #160	@ 0xa0
 80081cc:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 80081ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008200 <ST7735_SetRotation+0x14c>)
 80081d0:	2280      	movs	r2, #128	@ 0x80
 80081d2:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 80081d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008204 <ST7735_SetRotation+0x150>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 80081da:	4b0b      	ldr	r3, [pc, #44]	@ (8008208 <ST7735_SetRotation+0x154>)
 80081dc:	2200      	movs	r2, #0
 80081de:	701a      	strb	r2, [r3, #0]
    }
      break;
 80081e0:	46c0      	nop			@ (mov r8, r8)
  }
  TFT_CS_H();
 80081e2:	2390      	movs	r3, #144	@ 0x90
 80081e4:	05db      	lsls	r3, r3, #23
 80081e6:	2240      	movs	r2, #64	@ 0x40
 80081e8:	619a      	str	r2, [r3, #24]
}
 80081ea:	46c0      	nop			@ (mov r8, r8)
 80081ec:	46bd      	mov	sp, r7
 80081ee:	b004      	add	sp, #16
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	46c0      	nop			@ (mov r8, r8)
 80081f4:	200004c4 	.word	0x200004c4
 80081f8:	20000048 	.word	0x20000048
 80081fc:	2000004e 	.word	0x2000004e
 8008200:	2000004c 	.word	0x2000004c
 8008204:	200004c5 	.word	0x200004c5
 8008208:	200004c6 	.word	0x200004c6

0800820c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008210:	4b07      	ldr	r3, [pc, #28]	@ (8008230 <HAL_Init+0x24>)
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	4b06      	ldr	r3, [pc, #24]	@ (8008230 <HAL_Init+0x24>)
 8008216:	2110      	movs	r1, #16
 8008218:	430a      	orrs	r2, r1
 800821a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800821c:	2003      	movs	r0, #3
 800821e:	f000 f809 	bl	8008234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008222:	f7fe feaf 	bl	8006f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	0018      	movs	r0, r3
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	46c0      	nop			@ (mov r8, r8)
 8008230:	40022000 	.word	0x40022000

08008234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008234:	b590      	push	{r4, r7, lr}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800823c:	4b14      	ldr	r3, [pc, #80]	@ (8008290 <HAL_InitTick+0x5c>)
 800823e:	681c      	ldr	r4, [r3, #0]
 8008240:	4b14      	ldr	r3, [pc, #80]	@ (8008294 <HAL_InitTick+0x60>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	0019      	movs	r1, r3
 8008246:	23fa      	movs	r3, #250	@ 0xfa
 8008248:	0098      	lsls	r0, r3, #2
 800824a:	f7f7 ff5b 	bl	8000104 <__udivsi3>
 800824e:	0003      	movs	r3, r0
 8008250:	0019      	movs	r1, r3
 8008252:	0020      	movs	r0, r4
 8008254:	f7f7 ff56 	bl	8000104 <__udivsi3>
 8008258:	0003      	movs	r3, r0
 800825a:	0018      	movs	r0, r3
 800825c:	f000 fe5b 	bl	8008f16 <HAL_SYSTICK_Config>
 8008260:	1e03      	subs	r3, r0, #0
 8008262:	d001      	beq.n	8008268 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e00f      	b.n	8008288 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b03      	cmp	r3, #3
 800826c:	d80b      	bhi.n	8008286 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	2301      	movs	r3, #1
 8008272:	425b      	negs	r3, r3
 8008274:	2200      	movs	r2, #0
 8008276:	0018      	movs	r0, r3
 8008278:	f000 fe28 	bl	8008ecc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800827c:	4b06      	ldr	r3, [pc, #24]	@ (8008298 <HAL_InitTick+0x64>)
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	e000      	b.n	8008288 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
}
 8008288:	0018      	movs	r0, r3
 800828a:	46bd      	mov	sp, r7
 800828c:	b003      	add	sp, #12
 800828e:	bd90      	pop	{r4, r7, pc}
 8008290:	2000002c 	.word	0x2000002c
 8008294:	20000054 	.word	0x20000054
 8008298:	20000050 	.word	0x20000050

0800829c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80082a0:	4b05      	ldr	r3, [pc, #20]	@ (80082b8 <HAL_IncTick+0x1c>)
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	001a      	movs	r2, r3
 80082a6:	4b05      	ldr	r3, [pc, #20]	@ (80082bc <HAL_IncTick+0x20>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	18d2      	adds	r2, r2, r3
 80082ac:	4b03      	ldr	r3, [pc, #12]	@ (80082bc <HAL_IncTick+0x20>)
 80082ae:	601a      	str	r2, [r3, #0]
}
 80082b0:	46c0      	nop			@ (mov r8, r8)
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	46c0      	nop			@ (mov r8, r8)
 80082b8:	20000054 	.word	0x20000054
 80082bc:	200004c8 	.word	0x200004c8

080082c0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	af00      	add	r7, sp, #0
  return uwTick;
 80082c4:	4b02      	ldr	r3, [pc, #8]	@ (80082d0 <HAL_GetTick+0x10>)
 80082c6:	681b      	ldr	r3, [r3, #0]
}
 80082c8:	0018      	movs	r0, r3
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	46c0      	nop			@ (mov r8, r8)
 80082d0:	200004c8 	.word	0x200004c8

080082d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80082dc:	f7ff fff0 	bl	80082c0 <HAL_GetTick>
 80082e0:	0003      	movs	r3, r0
 80082e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3301      	adds	r3, #1
 80082ec:	d005      	beq.n	80082fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80082ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008318 <HAL_Delay+0x44>)
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	001a      	movs	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	189b      	adds	r3, r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80082fa:	46c0      	nop			@ (mov r8, r8)
 80082fc:	f7ff ffe0 	bl	80082c0 <HAL_GetTick>
 8008300:	0002      	movs	r2, r0
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	429a      	cmp	r2, r3
 800830a:	d8f7      	bhi.n	80082fc <HAL_Delay+0x28>
  {
  }
}
 800830c:	46c0      	nop			@ (mov r8, r8)
 800830e:	46c0      	nop			@ (mov r8, r8)
 8008310:	46bd      	mov	sp, r7
 8008312:	b004      	add	sp, #16
 8008314:	bd80      	pop	{r7, pc}
 8008316:	46c0      	nop			@ (mov r8, r8)
 8008318:	20000054 	.word	0x20000054

0800831c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008324:	230f      	movs	r3, #15
 8008326:	18fb      	adds	r3, r7, r3
 8008328:	2200      	movs	r2, #0
 800832a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e125      	b.n	8008586 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2234      	movs	r2, #52	@ 0x34
 800834c:	2100      	movs	r1, #0
 800834e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	0018      	movs	r0, r3
 8008354:	f7fe fe3a 	bl	8006fcc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800835c:	2210      	movs	r2, #16
 800835e:	4013      	ands	r3, r2
 8008360:	d000      	beq.n	8008364 <HAL_ADC_Init+0x48>
 8008362:	e103      	b.n	800856c <HAL_ADC_Init+0x250>
 8008364:	230f      	movs	r3, #15
 8008366:	18fb      	adds	r3, r7, r3
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d000      	beq.n	8008370 <HAL_ADC_Init+0x54>
 800836e:	e0fd      	b.n	800856c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	2204      	movs	r2, #4
 8008378:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800837a:	d000      	beq.n	800837e <HAL_ADC_Init+0x62>
 800837c:	e0f6      	b.n	800856c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008382:	4a83      	ldr	r2, [pc, #524]	@ (8008590 <HAL_ADC_Init+0x274>)
 8008384:	4013      	ands	r3, r2
 8008386:	2202      	movs	r2, #2
 8008388:	431a      	orrs	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2203      	movs	r2, #3
 8008396:	4013      	ands	r3, r2
 8008398:	2b01      	cmp	r3, #1
 800839a:	d112      	bne.n	80083c2 <HAL_ADC_Init+0xa6>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2201      	movs	r2, #1
 80083a4:	4013      	ands	r3, r2
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d009      	beq.n	80083be <HAL_ADC_Init+0xa2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	2380      	movs	r3, #128	@ 0x80
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	401a      	ands	r2, r3
 80083b6:	2380      	movs	r3, #128	@ 0x80
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d101      	bne.n	80083c2 <HAL_ADC_Init+0xa6>
 80083be:	2301      	movs	r3, #1
 80083c0:	e000      	b.n	80083c4 <HAL_ADC_Init+0xa8>
 80083c2:	2300      	movs	r3, #0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d116      	bne.n	80083f6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	2218      	movs	r2, #24
 80083d0:	4393      	bics	r3, r2
 80083d2:	0019      	movs	r1, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	0899      	lsrs	r1, r3, #2
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68da      	ldr	r2, [r3, #12]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4964      	ldr	r1, [pc, #400]	@ (8008594 <HAL_ADC_Init+0x278>)
 8008402:	400a      	ands	r2, r1
 8008404:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	7e1b      	ldrb	r3, [r3, #24]
 800840a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	7e5b      	ldrb	r3, [r3, #25]
 8008410:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008412:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	7e9b      	ldrb	r3, [r3, #26]
 8008418:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800841a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008420:	2b01      	cmp	r3, #1
 8008422:	d002      	beq.n	800842a <HAL_ADC_Init+0x10e>
 8008424:	2380      	movs	r3, #128	@ 0x80
 8008426:	015b      	lsls	r3, r3, #5
 8008428:	e000      	b.n	800842c <HAL_ADC_Init+0x110>
 800842a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800842c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8008432:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d101      	bne.n	8008440 <HAL_ADC_Init+0x124>
 800843c:	2304      	movs	r3, #4
 800843e:	e000      	b.n	8008442 <HAL_ADC_Init+0x126>
 8008440:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8008442:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2124      	movs	r1, #36	@ 0x24
 8008448:	5c5b      	ldrb	r3, [r3, r1]
 800844a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800844c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	4313      	orrs	r3, r2
 8008452:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7edb      	ldrb	r3, [r3, #27]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d115      	bne.n	8008488 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7e9b      	ldrb	r3, [r3, #26]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d105      	bne.n	8008470 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2280      	movs	r2, #128	@ 0x80
 8008468:	0252      	lsls	r2, r2, #9
 800846a:	4313      	orrs	r3, r2
 800846c:	60bb      	str	r3, [r7, #8]
 800846e:	e00b      	b.n	8008488 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008474:	2220      	movs	r2, #32
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008480:	2201      	movs	r2, #1
 8008482:	431a      	orrs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	69da      	ldr	r2, [r3, #28]
 800848c:	23c2      	movs	r3, #194	@ 0xc2
 800848e:	33ff      	adds	r3, #255	@ 0xff
 8008490:	429a      	cmp	r2, r3
 8008492:	d007      	beq.n	80084a4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800849c:	4313      	orrs	r3, r2
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68d9      	ldr	r1, [r3, #12]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	430a      	orrs	r2, r1
 80084b2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084b8:	2380      	movs	r3, #128	@ 0x80
 80084ba:	055b      	lsls	r3, r3, #21
 80084bc:	429a      	cmp	r2, r3
 80084be:	d01b      	beq.n	80084f8 <HAL_ADC_Init+0x1dc>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d017      	beq.n	80084f8 <HAL_ADC_Init+0x1dc>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d013      	beq.n	80084f8 <HAL_ADC_Init+0x1dc>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d00f      	beq.n	80084f8 <HAL_ADC_Init+0x1dc>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d00b      	beq.n	80084f8 <HAL_ADC_Init+0x1dc>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e4:	2b05      	cmp	r3, #5
 80084e6:	d007      	beq.n	80084f8 <HAL_ADC_Init+0x1dc>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ec:	2b06      	cmp	r3, #6
 80084ee:	d003      	beq.n	80084f8 <HAL_ADC_Init+0x1dc>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	2b07      	cmp	r3, #7
 80084f6:	d112      	bne.n	800851e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	695a      	ldr	r2, [r3, #20]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2107      	movs	r1, #7
 8008504:	438a      	bics	r2, r1
 8008506:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6959      	ldr	r1, [r3, #20]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008512:	2207      	movs	r2, #7
 8008514:	401a      	ands	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	4a1c      	ldr	r2, [pc, #112]	@ (8008598 <HAL_ADC_Init+0x27c>)
 8008526:	4013      	ands	r3, r2
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	429a      	cmp	r2, r3
 800852c:	d10b      	bne.n	8008546 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008538:	2203      	movs	r2, #3
 800853a:	4393      	bics	r3, r2
 800853c:	2201      	movs	r2, #1
 800853e:	431a      	orrs	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8008544:	e01c      	b.n	8008580 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854a:	2212      	movs	r2, #18
 800854c:	4393      	bics	r3, r2
 800854e:	2210      	movs	r2, #16
 8008550:	431a      	orrs	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800855a:	2201      	movs	r2, #1
 800855c:	431a      	orrs	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8008562:	230f      	movs	r3, #15
 8008564:	18fb      	adds	r3, r7, r3
 8008566:	2201      	movs	r2, #1
 8008568:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800856a:	e009      	b.n	8008580 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008570:	2210      	movs	r2, #16
 8008572:	431a      	orrs	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8008578:	230f      	movs	r3, #15
 800857a:	18fb      	adds	r3, r7, r3
 800857c:	2201      	movs	r2, #1
 800857e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008580:	230f      	movs	r3, #15
 8008582:	18fb      	adds	r3, r7, r3
 8008584:	781b      	ldrb	r3, [r3, #0]
}
 8008586:	0018      	movs	r0, r3
 8008588:	46bd      	mov	sp, r7
 800858a:	b004      	add	sp, #16
 800858c:	bd80      	pop	{r7, pc}
 800858e:	46c0      	nop			@ (mov r8, r8)
 8008590:	fffffefd 	.word	0xfffffefd
 8008594:	fffe0219 	.word	0xfffe0219
 8008598:	833fffe7 	.word	0x833fffe7

0800859c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800859c:	b590      	push	{r4, r7, lr}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80085a8:	2317      	movs	r3, #23
 80085aa:	18fb      	adds	r3, r7, r3
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	2204      	movs	r2, #4
 80085b8:	4013      	ands	r3, r2
 80085ba:	d15e      	bne.n	800867a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2234      	movs	r2, #52	@ 0x34
 80085c0:	5c9b      	ldrb	r3, [r3, r2]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d101      	bne.n	80085ca <HAL_ADC_Start_DMA+0x2e>
 80085c6:	2302      	movs	r3, #2
 80085c8:	e05e      	b.n	8008688 <HAL_ADC_Start_DMA+0xec>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2234      	movs	r2, #52	@ 0x34
 80085ce:	2101      	movs	r1, #1
 80085d0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	7e5b      	ldrb	r3, [r3, #25]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d007      	beq.n	80085ea <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80085da:	2317      	movs	r3, #23
 80085dc:	18fc      	adds	r4, r7, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	0018      	movs	r0, r3
 80085e2:	f000 fa17 	bl	8008a14 <ADC_Enable>
 80085e6:	0003      	movs	r3, r0
 80085e8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80085ea:	2317      	movs	r3, #23
 80085ec:	18fb      	adds	r3, r7, r3
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d146      	bne.n	8008682 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f8:	4a25      	ldr	r2, [pc, #148]	@ (8008690 <HAL_ADC_Start_DMA+0xf4>)
 80085fa:	4013      	ands	r3, r2
 80085fc:	2280      	movs	r2, #128	@ 0x80
 80085fe:	0052      	lsls	r2, r2, #1
 8008600:	431a      	orrs	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2234      	movs	r2, #52	@ 0x34
 8008610:	2100      	movs	r1, #0
 8008612:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008618:	4a1e      	ldr	r2, [pc, #120]	@ (8008694 <HAL_ADC_Start_DMA+0xf8>)
 800861a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008620:	4a1d      	ldr	r2, [pc, #116]	@ (8008698 <HAL_ADC_Start_DMA+0xfc>)
 8008622:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008628:	4a1c      	ldr	r2, [pc, #112]	@ (800869c <HAL_ADC_Start_DMA+0x100>)
 800862a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	221c      	movs	r2, #28
 8008632:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2110      	movs	r1, #16
 8008640:	430a      	orrs	r2, r1
 8008642:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2101      	movs	r1, #1
 8008650:	430a      	orrs	r2, r1
 8008652:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3340      	adds	r3, #64	@ 0x40
 800865e:	0019      	movs	r1, r3
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f000 fe0a 	bl	800927c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689a      	ldr	r2, [r3, #8]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2104      	movs	r1, #4
 8008674:	430a      	orrs	r2, r1
 8008676:	609a      	str	r2, [r3, #8]
 8008678:	e003      	b.n	8008682 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800867a:	2317      	movs	r3, #23
 800867c:	18fb      	adds	r3, r7, r3
 800867e:	2202      	movs	r2, #2
 8008680:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8008682:	2317      	movs	r3, #23
 8008684:	18fb      	adds	r3, r7, r3
 8008686:	781b      	ldrb	r3, [r3, #0]
}
 8008688:	0018      	movs	r0, r3
 800868a:	46bd      	mov	sp, r7
 800868c:	b007      	add	sp, #28
 800868e:	bd90      	pop	{r4, r7, pc}
 8008690:	fffff0fe 	.word	0xfffff0fe
 8008694:	08008b1d 	.word	0x08008b1d
 8008698:	08008bd1 	.word	0x08008bd1
 800869c:	08008bef 	.word	0x08008bef

080086a0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2204      	movs	r2, #4
 80086bc:	4013      	ands	r3, r2
 80086be:	d003      	beq.n	80086c8 <HAL_ADC_IRQHandler+0x28>
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2204      	movs	r2, #4
 80086c4:	4013      	ands	r3, r2
 80086c6:	d107      	bne.n	80086d8 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2208      	movs	r2, #8
 80086cc:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80086ce:	d049      	beq.n	8008764 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2208      	movs	r2, #8
 80086d4:	4013      	ands	r3, r2
 80086d6:	d045      	beq.n	8008764 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086dc:	2210      	movs	r2, #16
 80086de:	4013      	ands	r3, r2
 80086e0:	d106      	bne.n	80086f0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e6:	2280      	movs	r2, #128	@ 0x80
 80086e8:	0092      	lsls	r2, r2, #2
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68da      	ldr	r2, [r3, #12]
 80086f6:	23c0      	movs	r3, #192	@ 0xc0
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	4013      	ands	r3, r2
 80086fc:	d12a      	bne.n	8008754 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008702:	2b00      	cmp	r3, #0
 8008704:	d126      	bne.n	8008754 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2208      	movs	r2, #8
 800870a:	4013      	ands	r3, r2
 800870c:	d022      	beq.n	8008754 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	2204      	movs	r2, #4
 8008716:	4013      	ands	r3, r2
 8008718:	d110      	bne.n	800873c <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	210c      	movs	r1, #12
 8008726:	438a      	bics	r2, r1
 8008728:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872e:	4a2d      	ldr	r2, [pc, #180]	@ (80087e4 <HAL_ADC_IRQHandler+0x144>)
 8008730:	4013      	ands	r3, r2
 8008732:	2201      	movs	r2, #1
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	639a      	str	r2, [r3, #56]	@ 0x38
 800873a:	e00b      	b.n	8008754 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008740:	2220      	movs	r2, #32
 8008742:	431a      	orrs	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800874c:	2201      	movs	r2, #1
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	63da      	str	r2, [r3, #60]	@ 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	0018      	movs	r0, r3
 8008758:	f000 f846 	bl	80087e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	220c      	movs	r2, #12
 8008762:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2280      	movs	r2, #128	@ 0x80
 8008768:	4013      	ands	r3, r2
 800876a:	d012      	beq.n	8008792 <HAL_ADC_IRQHandler+0xf2>
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2280      	movs	r2, #128	@ 0x80
 8008770:	4013      	ands	r3, r2
 8008772:	d00e      	beq.n	8008792 <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008778:	2280      	movs	r2, #128	@ 0x80
 800877a:	0252      	lsls	r2, r2, #9
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	639a      	str	r2, [r3, #56]	@ 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	0018      	movs	r0, r3
 8008786:	f000 f83f 	bl	8008808 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2280      	movs	r2, #128	@ 0x80
 8008790:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2210      	movs	r2, #16
 8008796:	4013      	ands	r3, r2
 8008798:	d020      	beq.n	80087dc <HAL_ADC_IRQHandler+0x13c>
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2210      	movs	r2, #16
 800879e:	4013      	ands	r3, r2
 80087a0:	d01c      	beq.n	80087dc <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d006      	beq.n	80087b8 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	2201      	movs	r2, #1
 80087b2:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d10d      	bne.n	80087d4 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087bc:	2202      	movs	r2, #2
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2210      	movs	r2, #16
 80087ca:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	0018      	movs	r0, r3
 80087d0:	f000 f822 	bl	8008818 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2210      	movs	r2, #16
 80087da:	601a      	str	r2, [r3, #0]
  }

}
 80087dc:	46c0      	nop			@ (mov r8, r8)
 80087de:	46bd      	mov	sp, r7
 80087e0:	b004      	add	sp, #16
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	fffffefe 	.word	0xfffffefe

080087e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80087f0:	46c0      	nop			@ (mov r8, r8)
 80087f2:	46bd      	mov	sp, r7
 80087f4:	b002      	add	sp, #8
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008800:	46c0      	nop			@ (mov r8, r8)
 8008802:	46bd      	mov	sp, r7
 8008804:	b002      	add	sp, #8
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8008810:	46c0      	nop			@ (mov r8, r8)
 8008812:	46bd      	mov	sp, r7
 8008814:	b002      	add	sp, #8
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008820:	46c0      	nop			@ (mov r8, r8)
 8008822:	46bd      	mov	sp, r7
 8008824:	b002      	add	sp, #8
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008832:	230f      	movs	r3, #15
 8008834:	18fb      	adds	r3, r7, r3
 8008836:	2200      	movs	r2, #0
 8008838:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008842:	2380      	movs	r3, #128	@ 0x80
 8008844:	055b      	lsls	r3, r3, #21
 8008846:	429a      	cmp	r2, r3
 8008848:	d011      	beq.n	800886e <HAL_ADC_ConfigChannel+0x46>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884e:	2b01      	cmp	r3, #1
 8008850:	d00d      	beq.n	800886e <HAL_ADC_ConfigChannel+0x46>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008856:	2b02      	cmp	r3, #2
 8008858:	d009      	beq.n	800886e <HAL_ADC_ConfigChannel+0x46>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885e:	2b03      	cmp	r3, #3
 8008860:	d005      	beq.n	800886e <HAL_ADC_ConfigChannel+0x46>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008866:	2b04      	cmp	r3, #4
 8008868:	d001      	beq.n	800886e <HAL_ADC_ConfigChannel+0x46>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2234      	movs	r2, #52	@ 0x34
 8008872:	5c9b      	ldrb	r3, [r3, r2]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_ADC_ConfigChannel+0x54>
 8008878:	2302      	movs	r3, #2
 800887a:	e0bb      	b.n	80089f4 <HAL_ADC_ConfigChannel+0x1cc>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2234      	movs	r2, #52	@ 0x34
 8008880:	2101      	movs	r1, #1
 8008882:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	2204      	movs	r2, #4
 800888c:	4013      	ands	r3, r2
 800888e:	d000      	beq.n	8008892 <HAL_ADC_ConfigChannel+0x6a>
 8008890:	e09f      	b.n	80089d2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	4a59      	ldr	r2, [pc, #356]	@ (80089fc <HAL_ADC_ConfigChannel+0x1d4>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d100      	bne.n	800889e <HAL_ADC_ConfigChannel+0x76>
 800889c:	e077      	b.n	800898e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2201      	movs	r2, #1
 80088aa:	409a      	lsls	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	430a      	orrs	r2, r1
 80088b2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b8:	2380      	movs	r3, #128	@ 0x80
 80088ba:	055b      	lsls	r3, r3, #21
 80088bc:	429a      	cmp	r2, r3
 80088be:	d037      	beq.n	8008930 <HAL_ADC_ConfigChannel+0x108>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d033      	beq.n	8008930 <HAL_ADC_ConfigChannel+0x108>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d02f      	beq.n	8008930 <HAL_ADC_ConfigChannel+0x108>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d02b      	beq.n	8008930 <HAL_ADC_ConfigChannel+0x108>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088dc:	2b04      	cmp	r3, #4
 80088de:	d027      	beq.n	8008930 <HAL_ADC_ConfigChannel+0x108>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e4:	2b05      	cmp	r3, #5
 80088e6:	d023      	beq.n	8008930 <HAL_ADC_ConfigChannel+0x108>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ec:	2b06      	cmp	r3, #6
 80088ee:	d01f      	beq.n	8008930 <HAL_ADC_ConfigChannel+0x108>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f4:	2b07      	cmp	r3, #7
 80088f6:	d01b      	beq.n	8008930 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	2107      	movs	r1, #7
 8008904:	400b      	ands	r3, r1
 8008906:	429a      	cmp	r2, r3
 8008908:	d012      	beq.n	8008930 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	695a      	ldr	r2, [r3, #20]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2107      	movs	r1, #7
 8008916:	438a      	bics	r2, r1
 8008918:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6959      	ldr	r1, [r3, #20]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	2207      	movs	r2, #7
 8008926:	401a      	ands	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b10      	cmp	r3, #16
 8008936:	d003      	beq.n	8008940 <HAL_ADC_ConfigChannel+0x118>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b11      	cmp	r3, #17
 800893e:	d152      	bne.n	80089e6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8008940:	4b2f      	ldr	r3, [pc, #188]	@ (8008a00 <HAL_ADC_ConfigChannel+0x1d8>)
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b10      	cmp	r3, #16
 800894a:	d102      	bne.n	8008952 <HAL_ADC_ConfigChannel+0x12a>
 800894c:	2380      	movs	r3, #128	@ 0x80
 800894e:	041b      	lsls	r3, r3, #16
 8008950:	e001      	b.n	8008956 <HAL_ADC_ConfigChannel+0x12e>
 8008952:	2380      	movs	r3, #128	@ 0x80
 8008954:	03db      	lsls	r3, r3, #15
 8008956:	4a2a      	ldr	r2, [pc, #168]	@ (8008a00 <HAL_ADC_ConfigChannel+0x1d8>)
 8008958:	430b      	orrs	r3, r1
 800895a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b10      	cmp	r3, #16
 8008962:	d140      	bne.n	80089e6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008964:	4b27      	ldr	r3, [pc, #156]	@ (8008a04 <HAL_ADC_ConfigChannel+0x1dc>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4927      	ldr	r1, [pc, #156]	@ (8008a08 <HAL_ADC_ConfigChannel+0x1e0>)
 800896a:	0018      	movs	r0, r3
 800896c:	f7f7 fbca 	bl	8000104 <__udivsi3>
 8008970:	0003      	movs	r3, r0
 8008972:	001a      	movs	r2, r3
 8008974:	0013      	movs	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	189b      	adds	r3, r3, r2
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800897e:	e002      	b.n	8008986 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	3b01      	subs	r3, #1
 8008984:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1f9      	bne.n	8008980 <HAL_ADC_ConfigChannel+0x158>
 800898c:	e02b      	b.n	80089e6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2101      	movs	r1, #1
 800899a:	4099      	lsls	r1, r3
 800899c:	000b      	movs	r3, r1
 800899e:	43d9      	mvns	r1, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	400a      	ands	r2, r1
 80089a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b10      	cmp	r3, #16
 80089ae:	d003      	beq.n	80089b8 <HAL_ADC_ConfigChannel+0x190>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b11      	cmp	r3, #17
 80089b6:	d116      	bne.n	80089e6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80089b8:	4b11      	ldr	r3, [pc, #68]	@ (8008a00 <HAL_ADC_ConfigChannel+0x1d8>)
 80089ba:	6819      	ldr	r1, [r3, #0]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b10      	cmp	r3, #16
 80089c2:	d101      	bne.n	80089c8 <HAL_ADC_ConfigChannel+0x1a0>
 80089c4:	4a11      	ldr	r2, [pc, #68]	@ (8008a0c <HAL_ADC_ConfigChannel+0x1e4>)
 80089c6:	e000      	b.n	80089ca <HAL_ADC_ConfigChannel+0x1a2>
 80089c8:	4a11      	ldr	r2, [pc, #68]	@ (8008a10 <HAL_ADC_ConfigChannel+0x1e8>)
 80089ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008a00 <HAL_ADC_ConfigChannel+0x1d8>)
 80089cc:	400a      	ands	r2, r1
 80089ce:	601a      	str	r2, [r3, #0]
 80089d0:	e009      	b.n	80089e6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d6:	2220      	movs	r2, #32
 80089d8:	431a      	orrs	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80089de:	230f      	movs	r3, #15
 80089e0:	18fb      	adds	r3, r7, r3
 80089e2:	2201      	movs	r2, #1
 80089e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2234      	movs	r2, #52	@ 0x34
 80089ea:	2100      	movs	r1, #0
 80089ec:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80089ee:	230f      	movs	r3, #15
 80089f0:	18fb      	adds	r3, r7, r3
 80089f2:	781b      	ldrb	r3, [r3, #0]
}
 80089f4:	0018      	movs	r0, r3
 80089f6:	46bd      	mov	sp, r7
 80089f8:	b004      	add	sp, #16
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	00001001 	.word	0x00001001
 8008a00:	40012708 	.word	0x40012708
 8008a04:	2000002c 	.word	0x2000002c
 8008a08:	000f4240 	.word	0x000f4240
 8008a0c:	ff7fffff 	.word	0xff7fffff
 8008a10:	ffbfffff 	.word	0xffbfffff

08008a14 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2203      	movs	r2, #3
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d112      	bne.n	8008a58 <ADC_Enable+0x44>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d009      	beq.n	8008a54 <ADC_Enable+0x40>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68da      	ldr	r2, [r3, #12]
 8008a46:	2380      	movs	r3, #128	@ 0x80
 8008a48:	021b      	lsls	r3, r3, #8
 8008a4a:	401a      	ands	r2, r3
 8008a4c:	2380      	movs	r3, #128	@ 0x80
 8008a4e:	021b      	lsls	r3, r3, #8
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d101      	bne.n	8008a58 <ADC_Enable+0x44>
 8008a54:	2301      	movs	r3, #1
 8008a56:	e000      	b.n	8008a5a <ADC_Enable+0x46>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d152      	bne.n	8008b04 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	4a2a      	ldr	r2, [pc, #168]	@ (8008b10 <ADC_Enable+0xfc>)
 8008a66:	4013      	ands	r3, r2
 8008a68:	d00d      	beq.n	8008a86 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a6e:	2210      	movs	r2, #16
 8008a70:	431a      	orrs	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e03f      	b.n	8008b06 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2101      	movs	r1, #1
 8008a92:	430a      	orrs	r2, r1
 8008a94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008a96:	4b1f      	ldr	r3, [pc, #124]	@ (8008b14 <ADC_Enable+0x100>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	491f      	ldr	r1, [pc, #124]	@ (8008b18 <ADC_Enable+0x104>)
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7f7 fb31 	bl	8000104 <__udivsi3>
 8008aa2:	0003      	movs	r3, r0
 8008aa4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008aa6:	e002      	b.n	8008aae <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1f9      	bne.n	8008aa8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8008ab4:	f7ff fc04 	bl	80082c0 <HAL_GetTick>
 8008ab8:	0003      	movs	r3, r0
 8008aba:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008abc:	e01b      	b.n	8008af6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008abe:	f7ff fbff 	bl	80082c0 <HAL_GetTick>
 8008ac2:	0002      	movs	r2, r0
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d914      	bls.n	8008af6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d00d      	beq.n	8008af6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ade:	2210      	movs	r2, #16
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aea:	2201      	movs	r2, #1
 8008aec:	431a      	orrs	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e007      	b.n	8008b06 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2201      	movs	r2, #1
 8008afe:	4013      	ands	r3, r2
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d1dc      	bne.n	8008abe <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	0018      	movs	r0, r3
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	b004      	add	sp, #16
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	46c0      	nop			@ (mov r8, r8)
 8008b10:	80000017 	.word	0x80000017
 8008b14:	2000002c 	.word	0x2000002c
 8008b18:	000f4240 	.word	0x000f4240

08008b1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b2e:	2250      	movs	r2, #80	@ 0x50
 8008b30:	4013      	ands	r3, r2
 8008b32:	d140      	bne.n	8008bb6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b38:	2280      	movs	r2, #128	@ 0x80
 8008b3a:	0092      	lsls	r2, r2, #2
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	23c0      	movs	r3, #192	@ 0xc0
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	d12d      	bne.n	8008bac <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d129      	bne.n	8008bac <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2208      	movs	r2, #8
 8008b60:	4013      	ands	r3, r2
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	d122      	bne.n	8008bac <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	2204      	movs	r2, #4
 8008b6e:	4013      	ands	r3, r2
 8008b70:	d110      	bne.n	8008b94 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	210c      	movs	r1, #12
 8008b7e:	438a      	bics	r2, r1
 8008b80:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b86:	4a11      	ldr	r2, [pc, #68]	@ (8008bcc <ADC_DMAConvCplt+0xb0>)
 8008b88:	4013      	ands	r3, r2
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	639a      	str	r2, [r3, #56]	@ 0x38
 8008b92:	e00b      	b.n	8008bac <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b98:	2220      	movs	r2, #32
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f7ff fe1a 	bl	80087e8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8008bb4:	e005      	b.n	8008bc2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	0010      	movs	r0, r2
 8008bc0:	4798      	blx	r3
}
 8008bc2:	46c0      	nop			@ (mov r8, r8)
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	b004      	add	sp, #16
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	46c0      	nop			@ (mov r8, r8)
 8008bcc:	fffffefe 	.word	0xfffffefe

08008bd0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bdc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	0018      	movs	r0, r3
 8008be2:	f7ff fe09 	bl	80087f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008be6:	46c0      	nop			@ (mov r8, r8)
 8008be8:	46bd      	mov	sp, r7
 8008bea:	b004      	add	sp, #16
 8008bec:	bd80      	pop	{r7, pc}

08008bee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b084      	sub	sp, #16
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c00:	2240      	movs	r2, #64	@ 0x40
 8008c02:	431a      	orrs	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c0c:	2204      	movs	r2, #4
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	0018      	movs	r0, r3
 8008c18:	f7ff fdfe 	bl	8008818 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008c1c:	46c0      	nop			@ (mov r8, r8)
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	b004      	add	sp, #16
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c2c:	2317      	movs	r3, #23
 8008c2e:	18fb      	adds	r3, r7, r3
 8008c30:	2200      	movs	r2, #0
 8008c32:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8008c38:	2300      	movs	r3, #0
 8008c3a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2234      	movs	r2, #52	@ 0x34
 8008c40:	5c9b      	ldrb	r3, [r3, r2]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d101      	bne.n	8008c4a <HAL_ADCEx_Calibration_Start+0x26>
 8008c46:	2302      	movs	r3, #2
 8008c48:	e08d      	b.n	8008d66 <HAL_ADCEx_Calibration_Start+0x142>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2234      	movs	r2, #52	@ 0x34
 8008c4e:	2101      	movs	r1, #1
 8008c50:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	2203      	movs	r2, #3
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d112      	bne.n	8008c86 <HAL_ADCEx_Calibration_Start+0x62>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2201      	movs	r2, #1
 8008c68:	4013      	ands	r3, r2
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d009      	beq.n	8008c82 <HAL_ADCEx_Calibration_Start+0x5e>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68da      	ldr	r2, [r3, #12]
 8008c74:	2380      	movs	r3, #128	@ 0x80
 8008c76:	021b      	lsls	r3, r3, #8
 8008c78:	401a      	ands	r2, r3
 8008c7a:	2380      	movs	r3, #128	@ 0x80
 8008c7c:	021b      	lsls	r3, r3, #8
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d101      	bne.n	8008c86 <HAL_ADCEx_Calibration_Start+0x62>
 8008c82:	2301      	movs	r3, #1
 8008c84:	e000      	b.n	8008c88 <HAL_ADCEx_Calibration_Start+0x64>
 8008c86:	2300      	movs	r3, #0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d15b      	bne.n	8008d44 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c90:	4a37      	ldr	r2, [pc, #220]	@ (8008d70 <HAL_ADCEx_Calibration_Start+0x14c>)
 8008c92:	4013      	ands	r3, r2
 8008c94:	2202      	movs	r2, #2
 8008c96:	431a      	orrs	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	2203      	movs	r2, #3
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68da      	ldr	r2, [r3, #12]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2103      	movs	r1, #3
 8008cb4:	438a      	bics	r2, r1
 8008cb6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689a      	ldr	r2, [r3, #8]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2180      	movs	r1, #128	@ 0x80
 8008cc4:	0609      	lsls	r1, r1, #24
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8008cca:	f7ff faf9 	bl	80082c0 <HAL_GetTick>
 8008cce:	0003      	movs	r3, r0
 8008cd0:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8008cd2:	e01d      	b.n	8008d10 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8008cd4:	f7ff faf4 	bl	80082c0 <HAL_GetTick>
 8008cd8:	0002      	movs	r2, r0
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d916      	bls.n	8008d10 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	0fdb      	lsrs	r3, r3, #31
 8008cea:	07da      	lsls	r2, r3, #31
 8008cec:	2380      	movs	r3, #128	@ 0x80
 8008cee:	061b      	lsls	r3, r3, #24
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d10d      	bne.n	8008d10 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf8:	2212      	movs	r2, #18
 8008cfa:	4393      	bics	r3, r2
 8008cfc:	2210      	movs	r2, #16
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2234      	movs	r2, #52	@ 0x34
 8008d08:	2100      	movs	r1, #0
 8008d0a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e02a      	b.n	8008d66 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	0fdb      	lsrs	r3, r3, #31
 8008d18:	07da      	lsls	r2, r3, #31
 8008d1a:	2380      	movs	r3, #128	@ 0x80
 8008d1c:	061b      	lsls	r3, r3, #24
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d0d8      	beq.n	8008cd4 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68d9      	ldr	r1, [r3, #12]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d36:	2203      	movs	r2, #3
 8008d38:	4393      	bics	r3, r2
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d42:	e009      	b.n	8008d58 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d48:	2220      	movs	r2, #32
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8008d50:	2317      	movs	r3, #23
 8008d52:	18fb      	adds	r3, r7, r3
 8008d54:	2201      	movs	r2, #1
 8008d56:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2234      	movs	r2, #52	@ 0x34
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8008d60:	2317      	movs	r3, #23
 8008d62:	18fb      	adds	r3, r7, r3
 8008d64:	781b      	ldrb	r3, [r3, #0]
}
 8008d66:	0018      	movs	r0, r3
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	b006      	add	sp, #24
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	46c0      	nop			@ (mov r8, r8)
 8008d70:	fffffefd 	.word	0xfffffefd

08008d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	0002      	movs	r2, r0
 8008d7c:	1dfb      	adds	r3, r7, #7
 8008d7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008d80:	1dfb      	adds	r3, r7, #7
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b7f      	cmp	r3, #127	@ 0x7f
 8008d86:	d809      	bhi.n	8008d9c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d88:	1dfb      	adds	r3, r7, #7
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	001a      	movs	r2, r3
 8008d8e:	231f      	movs	r3, #31
 8008d90:	401a      	ands	r2, r3
 8008d92:	4b04      	ldr	r3, [pc, #16]	@ (8008da4 <__NVIC_EnableIRQ+0x30>)
 8008d94:	2101      	movs	r1, #1
 8008d96:	4091      	lsls	r1, r2
 8008d98:	000a      	movs	r2, r1
 8008d9a:	601a      	str	r2, [r3, #0]
  }
}
 8008d9c:	46c0      	nop			@ (mov r8, r8)
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	b002      	add	sp, #8
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	e000e100 	.word	0xe000e100

08008da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008da8:	b590      	push	{r4, r7, lr}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	0002      	movs	r2, r0
 8008db0:	6039      	str	r1, [r7, #0]
 8008db2:	1dfb      	adds	r3, r7, #7
 8008db4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008db6:	1dfb      	adds	r3, r7, #7
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b7f      	cmp	r3, #127	@ 0x7f
 8008dbc:	d828      	bhi.n	8008e10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8008e7c <__NVIC_SetPriority+0xd4>)
 8008dc0:	1dfb      	adds	r3, r7, #7
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	b25b      	sxtb	r3, r3
 8008dc6:	089b      	lsrs	r3, r3, #2
 8008dc8:	33c0      	adds	r3, #192	@ 0xc0
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	589b      	ldr	r3, [r3, r2]
 8008dce:	1dfa      	adds	r2, r7, #7
 8008dd0:	7812      	ldrb	r2, [r2, #0]
 8008dd2:	0011      	movs	r1, r2
 8008dd4:	2203      	movs	r2, #3
 8008dd6:	400a      	ands	r2, r1
 8008dd8:	00d2      	lsls	r2, r2, #3
 8008dda:	21ff      	movs	r1, #255	@ 0xff
 8008ddc:	4091      	lsls	r1, r2
 8008dde:	000a      	movs	r2, r1
 8008de0:	43d2      	mvns	r2, r2
 8008de2:	401a      	ands	r2, r3
 8008de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	019b      	lsls	r3, r3, #6
 8008dea:	22ff      	movs	r2, #255	@ 0xff
 8008dec:	401a      	ands	r2, r3
 8008dee:	1dfb      	adds	r3, r7, #7
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	0018      	movs	r0, r3
 8008df4:	2303      	movs	r3, #3
 8008df6:	4003      	ands	r3, r0
 8008df8:	00db      	lsls	r3, r3, #3
 8008dfa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008dfc:	481f      	ldr	r0, [pc, #124]	@ (8008e7c <__NVIC_SetPriority+0xd4>)
 8008dfe:	1dfb      	adds	r3, r7, #7
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	b25b      	sxtb	r3, r3
 8008e04:	089b      	lsrs	r3, r3, #2
 8008e06:	430a      	orrs	r2, r1
 8008e08:	33c0      	adds	r3, #192	@ 0xc0
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8008e0e:	e031      	b.n	8008e74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008e10:	4a1b      	ldr	r2, [pc, #108]	@ (8008e80 <__NVIC_SetPriority+0xd8>)
 8008e12:	1dfb      	adds	r3, r7, #7
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	0019      	movs	r1, r3
 8008e18:	230f      	movs	r3, #15
 8008e1a:	400b      	ands	r3, r1
 8008e1c:	3b08      	subs	r3, #8
 8008e1e:	089b      	lsrs	r3, r3, #2
 8008e20:	3306      	adds	r3, #6
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	18d3      	adds	r3, r2, r3
 8008e26:	3304      	adds	r3, #4
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	1dfa      	adds	r2, r7, #7
 8008e2c:	7812      	ldrb	r2, [r2, #0]
 8008e2e:	0011      	movs	r1, r2
 8008e30:	2203      	movs	r2, #3
 8008e32:	400a      	ands	r2, r1
 8008e34:	00d2      	lsls	r2, r2, #3
 8008e36:	21ff      	movs	r1, #255	@ 0xff
 8008e38:	4091      	lsls	r1, r2
 8008e3a:	000a      	movs	r2, r1
 8008e3c:	43d2      	mvns	r2, r2
 8008e3e:	401a      	ands	r2, r3
 8008e40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	019b      	lsls	r3, r3, #6
 8008e46:	22ff      	movs	r2, #255	@ 0xff
 8008e48:	401a      	ands	r2, r3
 8008e4a:	1dfb      	adds	r3, r7, #7
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	0018      	movs	r0, r3
 8008e50:	2303      	movs	r3, #3
 8008e52:	4003      	ands	r3, r0
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008e58:	4809      	ldr	r0, [pc, #36]	@ (8008e80 <__NVIC_SetPriority+0xd8>)
 8008e5a:	1dfb      	adds	r3, r7, #7
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	001c      	movs	r4, r3
 8008e60:	230f      	movs	r3, #15
 8008e62:	4023      	ands	r3, r4
 8008e64:	3b08      	subs	r3, #8
 8008e66:	089b      	lsrs	r3, r3, #2
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	3306      	adds	r3, #6
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	18c3      	adds	r3, r0, r3
 8008e70:	3304      	adds	r3, #4
 8008e72:	601a      	str	r2, [r3, #0]
}
 8008e74:	46c0      	nop			@ (mov r8, r8)
 8008e76:	46bd      	mov	sp, r7
 8008e78:	b003      	add	sp, #12
 8008e7a:	bd90      	pop	{r4, r7, pc}
 8008e7c:	e000e100 	.word	0xe000e100
 8008e80:	e000ed00 	.word	0xe000ed00

08008e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	1e5a      	subs	r2, r3, #1
 8008e90:	2380      	movs	r3, #128	@ 0x80
 8008e92:	045b      	lsls	r3, r3, #17
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d301      	bcc.n	8008e9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e010      	b.n	8008ebe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec8 <SysTick_Config+0x44>)
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	3a01      	subs	r2, #1
 8008ea2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	425b      	negs	r3, r3
 8008ea8:	2103      	movs	r1, #3
 8008eaa:	0018      	movs	r0, r3
 8008eac:	f7ff ff7c 	bl	8008da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008eb0:	4b05      	ldr	r3, [pc, #20]	@ (8008ec8 <SysTick_Config+0x44>)
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008eb6:	4b04      	ldr	r3, [pc, #16]	@ (8008ec8 <SysTick_Config+0x44>)
 8008eb8:	2207      	movs	r2, #7
 8008eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	b002      	add	sp, #8
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	46c0      	nop			@ (mov r8, r8)
 8008ec8:	e000e010 	.word	0xe000e010

08008ecc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
 8008ed6:	210f      	movs	r1, #15
 8008ed8:	187b      	adds	r3, r7, r1
 8008eda:	1c02      	adds	r2, r0, #0
 8008edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	187b      	adds	r3, r7, r1
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	b25b      	sxtb	r3, r3
 8008ee6:	0011      	movs	r1, r2
 8008ee8:	0018      	movs	r0, r3
 8008eea:	f7ff ff5d 	bl	8008da8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8008eee:	46c0      	nop			@ (mov r8, r8)
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	b004      	add	sp, #16
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	0002      	movs	r2, r0
 8008efe:	1dfb      	adds	r3, r7, #7
 8008f00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008f02:	1dfb      	adds	r3, r7, #7
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	b25b      	sxtb	r3, r3
 8008f08:	0018      	movs	r0, r3
 8008f0a:	f7ff ff33 	bl	8008d74 <__NVIC_EnableIRQ>
}
 8008f0e:	46c0      	nop			@ (mov r8, r8)
 8008f10:	46bd      	mov	sp, r7
 8008f12:	b002      	add	sp, #8
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b082      	sub	sp, #8
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	0018      	movs	r0, r3
 8008f22:	f7ff ffaf 	bl	8008e84 <SysTick_Config>
 8008f26:	0003      	movs	r3, r0
}
 8008f28:	0018      	movs	r0, r3
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	b002      	add	sp, #8
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e039      	b.n	8008fb6 <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	7d5b      	ldrb	r3, [r3, #21]
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d106      	bne.n	8008f5a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	0018      	movs	r0, r3
 8008f56:	f7fe f8c5 	bl	80070e4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	791b      	ldrb	r3, [r3, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d105      	bne.n	8008f74 <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	4252      	negs	r2, r2
 8008f70:	611a      	str	r2, [r3, #16]
 8008f72:	e004      	b.n	8008f7e <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	6892      	ldr	r2, [r2, #8]
 8008f7c:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	2260      	movs	r2, #96	@ 0x60
 8008f86:	4393      	bics	r3, r2
 8008f88:	0019      	movs	r1, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	2280      	movs	r2, #128	@ 0x80
 8008f9e:	4393      	bics	r3, r2
 8008fa0:	0019      	movs	r1, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691a      	ldr	r2, [r3, #16]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	430a      	orrs	r2, r1
 8008fac:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	0018      	movs	r0, r3
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	b002      	add	sp, #8
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b086      	sub	sp, #24
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8008fca:	2300      	movs	r3, #0
 8008fcc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	755a      	strb	r2, [r3, #21]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689a      	ldr	r2, [r3, #8]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2101      	movs	r1, #1
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d005      	beq.n	8008ff8 <HAL_CRC_Calculate+0x3a>
 8008fec:	d82d      	bhi.n	800904a <HAL_CRC_Calculate+0x8c>
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d019      	beq.n	8009026 <HAL_CRC_Calculate+0x68>
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d020      	beq.n	8009038 <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8008ff6:	e028      	b.n	800904a <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	e00a      	b.n	8009014 <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	18d2      	adds	r2, r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6812      	ldr	r2, [r2, #0]
 800900c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	3301      	adds	r3, #1
 8009012:	617b      	str	r3, [r7, #20]
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	d3f0      	bcc.n	8008ffe <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	613b      	str	r3, [r7, #16]
      break;
 8009024:	e012      	b.n	800904c <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	68b9      	ldr	r1, [r7, #8]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	0018      	movs	r0, r3
 800902e:	f000 f815 	bl	800905c <CRC_Handle_8>
 8009032:	0003      	movs	r3, r0
 8009034:	613b      	str	r3, [r7, #16]
      break;
 8009036:	e009      	b.n	800904c <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	68b9      	ldr	r1, [r7, #8]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	0018      	movs	r0, r3
 8009040:	f000 f89d 	bl	800917e <CRC_Handle_16>
 8009044:	0003      	movs	r3, r0
 8009046:	613b      	str	r3, [r7, #16]
      break;
 8009048:	e000      	b.n	800904c <HAL_CRC_Calculate+0x8e>
      break;
 800904a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2201      	movs	r2, #1
 8009050:	755a      	strb	r2, [r3, #21]

  /* Return the CRC computed value */
  return temp;
 8009052:	693b      	ldr	r3, [r7, #16]
}
 8009054:	0018      	movs	r0, r3
 8009056:	46bd      	mov	sp, r7
 8009058:	b006      	add	sp, #24
 800905a:	bd80      	pop	{r7, pc}

0800905c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b088      	sub	sp, #32
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009068:	2300      	movs	r3, #0
 800906a:	61fb      	str	r3, [r7, #28]
 800906c:	e023      	b.n	80090b6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	18d3      	adds	r3, r2, r3
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	3301      	adds	r3, #1
 8009080:	68b9      	ldr	r1, [r7, #8]
 8009082:	18cb      	adds	r3, r1, r3
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009088:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	3302      	adds	r3, #2
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	18cb      	adds	r3, r1, r3
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009098:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	3303      	adds	r3, #3
 80090a0:	68b9      	ldr	r1, [r7, #8]
 80090a2:	18cb      	adds	r3, r1, r3
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80090ac:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80090ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	3301      	adds	r3, #1
 80090b4:	61fb      	str	r3, [r7, #28]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	089b      	lsrs	r3, r3, #2
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d3d6      	bcc.n	800906e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2203      	movs	r2, #3
 80090c4:	4013      	ands	r3, r2
 80090c6:	d053      	beq.n	8009170 <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2203      	movs	r2, #3
 80090cc:	4013      	ands	r3, r2
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d107      	bne.n	80090e2 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	18d2      	adds	r2, r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	7812      	ldrb	r2, [r2, #0]
 80090e0:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2203      	movs	r2, #3
 80090e6:	4013      	ands	r3, r2
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d119      	bne.n	8009120 <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	18d3      	adds	r3, r2, r3
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	021b      	lsls	r3, r3, #8
 80090f8:	b21a      	sxth	r2, r3
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	3301      	adds	r3, #1
 8009100:	68b9      	ldr	r1, [r7, #8]
 8009102:	18cb      	adds	r3, r1, r3
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	b21b      	sxth	r3, r3
 8009108:	4313      	orrs	r3, r2
 800910a:	b21a      	sxth	r2, r3
 800910c:	211a      	movs	r1, #26
 800910e:	187b      	adds	r3, r7, r1
 8009110:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	187a      	adds	r2, r7, r1
 800911c:	8812      	ldrh	r2, [r2, #0]
 800911e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2203      	movs	r2, #3
 8009124:	4013      	ands	r3, r2
 8009126:	2b03      	cmp	r3, #3
 8009128:	d122      	bne.n	8009170 <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	18d3      	adds	r3, r2, r3
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	021b      	lsls	r3, r3, #8
 8009136:	b21a      	sxth	r2, r3
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	3301      	adds	r3, #1
 800913e:	68b9      	ldr	r1, [r7, #8]
 8009140:	18cb      	adds	r3, r1, r3
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	b21b      	sxth	r3, r3
 8009146:	4313      	orrs	r3, r2
 8009148:	b21a      	sxth	r2, r3
 800914a:	211a      	movs	r1, #26
 800914c:	187b      	adds	r3, r7, r1
 800914e:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	187a      	adds	r2, r7, r1
 800915a:	8812      	ldrh	r2, [r2, #0]
 800915c:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	3302      	adds	r3, #2
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	18d2      	adds	r2, r2, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	7812      	ldrb	r2, [r2, #0]
 800916e:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
}
 8009176:	0018      	movs	r0, r3
 8009178:	46bd      	mov	sp, r7
 800917a:	b008      	add	sp, #32
 800917c:	bd80      	pop	{r7, pc}

0800917e <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b086      	sub	sp, #24
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800918a:	2300      	movs	r3, #0
 800918c:	617b      	str	r3, [r7, #20]
 800918e:	e013      	b.n	80091b8 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	18d3      	adds	r3, r2, r3
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	041a      	lsls	r2, r3, #16
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	3302      	adds	r3, #2
 80091a2:	68b9      	ldr	r1, [r7, #8]
 80091a4:	18cb      	adds	r3, r1, r3
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	0019      	movs	r1, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	3301      	adds	r3, #1
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	085b      	lsrs	r3, r3, #1
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d3e6      	bcc.n	8009190 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	4013      	ands	r3, r2
 80091c8:	d009      	beq.n	80091de <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	18d3      	adds	r3, r2, r3
 80091d8:	881a      	ldrh	r2, [r3, #0]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
}
 80091e4:	0018      	movs	r0, r3
 80091e6:	46bd      	mov	sp, r7
 80091e8:	b006      	add	sp, #24
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e036      	b.n	8009270 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2221      	movs	r2, #33	@ 0x21
 8009206:	2102      	movs	r1, #2
 8009208:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	4a18      	ldr	r2, [pc, #96]	@ (8009278 <HAL_DMA_Init+0x8c>)
 8009216:	4013      	ands	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8009222:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800922e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800923a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	4313      	orrs	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	0018      	movs	r0, r3
 8009254:	f000 f998 	bl	8009588 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2221      	movs	r2, #33	@ 0x21
 8009262:	2101      	movs	r1, #1
 8009264:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2220      	movs	r2, #32
 800926a:	2100      	movs	r1, #0
 800926c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	0018      	movs	r0, r3
 8009272:	46bd      	mov	sp, r7
 8009274:	b004      	add	sp, #16
 8009276:	bd80      	pop	{r7, pc}
 8009278:	ffffc00f 	.word	0xffffc00f

0800927c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800928a:	2317      	movs	r3, #23
 800928c:	18fb      	adds	r3, r7, r3
 800928e:	2200      	movs	r2, #0
 8009290:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2220      	movs	r2, #32
 8009296:	5c9b      	ldrb	r3, [r3, r2]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d101      	bne.n	80092a0 <HAL_DMA_Start_IT+0x24>
 800929c:	2302      	movs	r3, #2
 800929e:	e04f      	b.n	8009340 <HAL_DMA_Start_IT+0xc4>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2220      	movs	r2, #32
 80092a4:	2101      	movs	r1, #1
 80092a6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2221      	movs	r2, #33	@ 0x21
 80092ac:	5c9b      	ldrb	r3, [r3, r2]
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d13a      	bne.n	800932a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2221      	movs	r2, #33	@ 0x21
 80092b8:	2102      	movs	r1, #2
 80092ba:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2101      	movs	r1, #1
 80092ce:	438a      	bics	r2, r1
 80092d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	68b9      	ldr	r1, [r7, #8]
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 f928 	bl	800952e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d008      	beq.n	80092f8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	210e      	movs	r1, #14
 80092f2:	430a      	orrs	r2, r1
 80092f4:	601a      	str	r2, [r3, #0]
 80092f6:	e00f      	b.n	8009318 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	210a      	movs	r1, #10
 8009304:	430a      	orrs	r2, r1
 8009306:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2104      	movs	r1, #4
 8009314:	438a      	bics	r2, r1
 8009316:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2101      	movs	r1, #1
 8009324:	430a      	orrs	r2, r1
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	e007      	b.n	800933a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2220      	movs	r2, #32
 800932e:	2100      	movs	r1, #0
 8009330:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009332:	2317      	movs	r3, #23
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	2202      	movs	r2, #2
 8009338:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800933a:	2317      	movs	r3, #23
 800933c:	18fb      	adds	r3, r7, r3
 800933e:	781b      	ldrb	r3, [r3, #0]
}
 8009340:	0018      	movs	r0, r3
 8009342:	46bd      	mov	sp, r7
 8009344:	b006      	add	sp, #24
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009350:	210f      	movs	r1, #15
 8009352:	187b      	adds	r3, r7, r1
 8009354:	2200      	movs	r2, #0
 8009356:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2221      	movs	r2, #33	@ 0x21
 800935c:	5c9b      	ldrb	r3, [r3, r2]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b02      	cmp	r3, #2
 8009362:	d006      	beq.n	8009372 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2204      	movs	r2, #4
 8009368:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800936a:	187b      	adds	r3, r7, r1
 800936c:	2201      	movs	r2, #1
 800936e:	701a      	strb	r2, [r3, #0]
 8009370:	e028      	b.n	80093c4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	210e      	movs	r1, #14
 800937e:	438a      	bics	r2, r1
 8009380:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2101      	movs	r1, #1
 800938e:	438a      	bics	r2, r1
 8009390:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800939a:	2101      	movs	r1, #1
 800939c:	4091      	lsls	r1, r2
 800939e:	000a      	movs	r2, r1
 80093a0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2221      	movs	r2, #33	@ 0x21
 80093a6:	2101      	movs	r1, #1
 80093a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2220      	movs	r2, #32
 80093ae:	2100      	movs	r1, #0
 80093b0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d004      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	0010      	movs	r0, r2
 80093c2:	4798      	blx	r3
    }
  }
  return status;
 80093c4:	230f      	movs	r3, #15
 80093c6:	18fb      	adds	r3, r7, r3
 80093c8:	781b      	ldrb	r3, [r3, #0]
}
 80093ca:	0018      	movs	r0, r3
 80093cc:	46bd      	mov	sp, r7
 80093ce:	b004      	add	sp, #16
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ee:	2204      	movs	r2, #4
 80093f0:	409a      	lsls	r2, r3
 80093f2:	0013      	movs	r3, r2
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	4013      	ands	r3, r2
 80093f8:	d024      	beq.n	8009444 <HAL_DMA_IRQHandler+0x72>
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	2204      	movs	r2, #4
 80093fe:	4013      	ands	r3, r2
 8009400:	d020      	beq.n	8009444 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2220      	movs	r2, #32
 800940a:	4013      	ands	r3, r2
 800940c:	d107      	bne.n	800941e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2104      	movs	r1, #4
 800941a:	438a      	bics	r2, r1
 800941c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009426:	2104      	movs	r1, #4
 8009428:	4091      	lsls	r1, r2
 800942a:	000a      	movs	r2, r1
 800942c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009432:	2b00      	cmp	r3, #0
 8009434:	d100      	bne.n	8009438 <HAL_DMA_IRQHandler+0x66>
 8009436:	e06a      	b.n	800950e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	0010      	movs	r0, r2
 8009440:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009442:	e064      	b.n	800950e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009448:	2202      	movs	r2, #2
 800944a:	409a      	lsls	r2, r3
 800944c:	0013      	movs	r3, r2
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4013      	ands	r3, r2
 8009452:	d02b      	beq.n	80094ac <HAL_DMA_IRQHandler+0xda>
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	2202      	movs	r2, #2
 8009458:	4013      	ands	r3, r2
 800945a:	d027      	beq.n	80094ac <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2220      	movs	r2, #32
 8009464:	4013      	ands	r3, r2
 8009466:	d10b      	bne.n	8009480 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	210a      	movs	r1, #10
 8009474:	438a      	bics	r2, r1
 8009476:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2221      	movs	r2, #33	@ 0x21
 800947c:	2101      	movs	r1, #1
 800947e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009488:	2102      	movs	r1, #2
 800948a:	4091      	lsls	r1, r2
 800948c:	000a      	movs	r2, r1
 800948e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2220      	movs	r2, #32
 8009494:	2100      	movs	r1, #0
 8009496:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800949c:	2b00      	cmp	r3, #0
 800949e:	d036      	beq.n	800950e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	0010      	movs	r0, r2
 80094a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80094aa:	e030      	b.n	800950e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b0:	2208      	movs	r2, #8
 80094b2:	409a      	lsls	r2, r3
 80094b4:	0013      	movs	r3, r2
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4013      	ands	r3, r2
 80094ba:	d028      	beq.n	800950e <HAL_DMA_IRQHandler+0x13c>
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2208      	movs	r2, #8
 80094c0:	4013      	ands	r3, r2
 80094c2:	d024      	beq.n	800950e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	210e      	movs	r1, #14
 80094d0:	438a      	bics	r2, r1
 80094d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094dc:	2101      	movs	r1, #1
 80094de:	4091      	lsls	r1, r2
 80094e0:	000a      	movs	r2, r1
 80094e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2221      	movs	r2, #33	@ 0x21
 80094ee:	2101      	movs	r1, #1
 80094f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2220      	movs	r2, #32
 80094f6:	2100      	movs	r1, #0
 80094f8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	0010      	movs	r0, r2
 800950a:	4798      	blx	r3
    }
  }
}
 800950c:	e7ff      	b.n	800950e <HAL_DMA_IRQHandler+0x13c>
 800950e:	46c0      	nop			@ (mov r8, r8)
 8009510:	46bd      	mov	sp, r7
 8009512:	b004      	add	sp, #16
 8009514:	bd80      	pop	{r7, pc}

08009516 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2221      	movs	r2, #33	@ 0x21
 8009522:	5c9b      	ldrb	r3, [r3, r2]
 8009524:	b2db      	uxtb	r3, r3
}
 8009526:	0018      	movs	r0, r3
 8009528:	46bd      	mov	sp, r7
 800952a:	b002      	add	sp, #8
 800952c:	bd80      	pop	{r7, pc}

0800952e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	60b9      	str	r1, [r7, #8]
 8009538:	607a      	str	r2, [r7, #4]
 800953a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009544:	2101      	movs	r1, #1
 8009546:	4091      	lsls	r1, r2
 8009548:	000a      	movs	r2, r1
 800954a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	2b10      	cmp	r3, #16
 800955a:	d108      	bne.n	800956e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800956c:	e007      	b.n	800957e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	60da      	str	r2, [r3, #12]
}
 800957e:	46c0      	nop			@ (mov r8, r8)
 8009580:	46bd      	mov	sp, r7
 8009582:	b004      	add	sp, #16
 8009584:	bd80      	pop	{r7, pc}
	...

08009588 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a08      	ldr	r2, [pc, #32]	@ (80095b8 <DMA_CalcBaseAndBitshift+0x30>)
 8009596:	4694      	mov	ip, r2
 8009598:	4463      	add	r3, ip
 800959a:	2114      	movs	r1, #20
 800959c:	0018      	movs	r0, r3
 800959e:	f7f6 fdb1 	bl	8000104 <__udivsi3>
 80095a2:	0003      	movs	r3, r0
 80095a4:	009a      	lsls	r2, r3, #2
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a03      	ldr	r2, [pc, #12]	@ (80095bc <DMA_CalcBaseAndBitshift+0x34>)
 80095ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80095b0:	46c0      	nop			@ (mov r8, r8)
 80095b2:	46bd      	mov	sp, r7
 80095b4:	b002      	add	sp, #8
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	bffdfff8 	.word	0xbffdfff8
 80095bc:	40020000 	.word	0x40020000

080095c0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80095c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	603a      	str	r2, [r7, #0]
 80095cc:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80095ce:	2317      	movs	r3, #23
 80095d0:	18fb      	adds	r3, r7, r3
 80095d2:	2201      	movs	r2, #1
 80095d4:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 80095d6:	2316      	movs	r3, #22
 80095d8:	18fb      	adds	r3, r7, r3
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 80095de:	2315      	movs	r3, #21
 80095e0:	18fb      	adds	r3, r7, r3
 80095e2:	2200      	movs	r2, #0
 80095e4:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80095e6:	4b3e      	ldr	r3, [pc, #248]	@ (80096e0 <HAL_FLASH_Program+0x120>)
 80095e8:	7e1b      	ldrb	r3, [r3, #24]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d101      	bne.n	80095f2 <HAL_FLASH_Program+0x32>
 80095ee:	2302      	movs	r3, #2
 80095f0:	e072      	b.n	80096d8 <HAL_FLASH_Program+0x118>
 80095f2:	4b3b      	ldr	r3, [pc, #236]	@ (80096e0 <HAL_FLASH_Program+0x120>)
 80095f4:	2201      	movs	r2, #1
 80095f6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80095f8:	2317      	movs	r3, #23
 80095fa:	18fe      	adds	r6, r7, r3
 80095fc:	4b39      	ldr	r3, [pc, #228]	@ (80096e4 <HAL_FLASH_Program+0x124>)
 80095fe:	0018      	movs	r0, r3
 8009600:	f000 f8c4 	bl	800978c <FLASH_WaitForLastOperation>
 8009604:	0003      	movs	r3, r0
 8009606:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8009608:	2317      	movs	r3, #23
 800960a:	18fb      	adds	r3, r7, r3
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d15c      	bne.n	80096cc <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d104      	bne.n	8009622 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8009618:	2315      	movs	r3, #21
 800961a:	18fb      	adds	r3, r7, r3
 800961c:	2201      	movs	r2, #1
 800961e:	701a      	strb	r2, [r3, #0]
 8009620:	e00b      	b.n	800963a <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d104      	bne.n	8009632 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8009628:	2315      	movs	r3, #21
 800962a:	18fb      	adds	r3, r7, r3
 800962c:	2202      	movs	r2, #2
 800962e:	701a      	strb	r2, [r3, #0]
 8009630:	e003      	b.n	800963a <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8009632:	2315      	movs	r3, #21
 8009634:	18fb      	adds	r3, r7, r3
 8009636:	2204      	movs	r2, #4
 8009638:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 800963a:	2316      	movs	r3, #22
 800963c:	18fb      	adds	r3, r7, r3
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
 8009642:	e039      	b.n	80096b8 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8009644:	2116      	movs	r1, #22
 8009646:	187b      	adds	r3, r7, r1
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	005a      	lsls	r2, r3, #1
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	18d0      	adds	r0, r2, r3
 8009650:	187b      	adds	r3, r7, r1
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	011b      	lsls	r3, r3, #4
 8009656:	001a      	movs	r2, r3
 8009658:	3a20      	subs	r2, #32
 800965a:	2a00      	cmp	r2, #0
 800965c:	db03      	blt.n	8009666 <HAL_FLASH_Program+0xa6>
 800965e:	6879      	ldr	r1, [r7, #4]
 8009660:	40d1      	lsrs	r1, r2
 8009662:	000c      	movs	r4, r1
 8009664:	e008      	b.n	8009678 <HAL_FLASH_Program+0xb8>
 8009666:	2220      	movs	r2, #32
 8009668:	1ad2      	subs	r2, r2, r3
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	4091      	lsls	r1, r2
 800966e:	000a      	movs	r2, r1
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	40d9      	lsrs	r1, r3
 8009674:	000c      	movs	r4, r1
 8009676:	4314      	orrs	r4, r2
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	40da      	lsrs	r2, r3
 800967c:	0015      	movs	r5, r2
 800967e:	b2a3      	uxth	r3, r4
 8009680:	0019      	movs	r1, r3
 8009682:	f000 f867 	bl	8009754 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009686:	2317      	movs	r3, #23
 8009688:	18fe      	adds	r6, r7, r3
 800968a:	4b16      	ldr	r3, [pc, #88]	@ (80096e4 <HAL_FLASH_Program+0x124>)
 800968c:	0018      	movs	r0, r3
 800968e:	f000 f87d 	bl	800978c <FLASH_WaitForLastOperation>
 8009692:	0003      	movs	r3, r0
 8009694:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009696:	4b14      	ldr	r3, [pc, #80]	@ (80096e8 <HAL_FLASH_Program+0x128>)
 8009698:	691a      	ldr	r2, [r3, #16]
 800969a:	4b13      	ldr	r3, [pc, #76]	@ (80096e8 <HAL_FLASH_Program+0x128>)
 800969c:	2101      	movs	r1, #1
 800969e:	438a      	bics	r2, r1
 80096a0:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80096a2:	2317      	movs	r3, #23
 80096a4:	18fb      	adds	r3, r7, r3
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10e      	bne.n	80096ca <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 80096ac:	2116      	movs	r1, #22
 80096ae:	187b      	adds	r3, r7, r1
 80096b0:	781a      	ldrb	r2, [r3, #0]
 80096b2:	187b      	adds	r3, r7, r1
 80096b4:	3201      	adds	r2, #1
 80096b6:	701a      	strb	r2, [r3, #0]
 80096b8:	2316      	movs	r3, #22
 80096ba:	18fa      	adds	r2, r7, r3
 80096bc:	2315      	movs	r3, #21
 80096be:	18fb      	adds	r3, r7, r3
 80096c0:	7812      	ldrb	r2, [r2, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d3bd      	bcc.n	8009644 <HAL_FLASH_Program+0x84>
 80096c8:	e000      	b.n	80096cc <HAL_FLASH_Program+0x10c>
      {
        break;
 80096ca:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80096cc:	4b04      	ldr	r3, [pc, #16]	@ (80096e0 <HAL_FLASH_Program+0x120>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	761a      	strb	r2, [r3, #24]

  return status;
 80096d2:	2317      	movs	r3, #23
 80096d4:	18fb      	adds	r3, r7, r3
 80096d6:	781b      	ldrb	r3, [r3, #0]
}
 80096d8:	0018      	movs	r0, r3
 80096da:	46bd      	mov	sp, r7
 80096dc:	b007      	add	sp, #28
 80096de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e0:	200004d0 	.word	0x200004d0
 80096e4:	0000c350 	.word	0x0000c350
 80096e8:	40022000 	.word	0x40022000

080096ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80096f2:	1dfb      	adds	r3, r7, #7
 80096f4:	2200      	movs	r2, #0
 80096f6:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80096f8:	4b0c      	ldr	r3, [pc, #48]	@ (800972c <HAL_FLASH_Unlock+0x40>)
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	2280      	movs	r2, #128	@ 0x80
 80096fe:	4013      	ands	r3, r2
 8009700:	d00d      	beq.n	800971e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009702:	4b0a      	ldr	r3, [pc, #40]	@ (800972c <HAL_FLASH_Unlock+0x40>)
 8009704:	4a0a      	ldr	r2, [pc, #40]	@ (8009730 <HAL_FLASH_Unlock+0x44>)
 8009706:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009708:	4b08      	ldr	r3, [pc, #32]	@ (800972c <HAL_FLASH_Unlock+0x40>)
 800970a:	4a0a      	ldr	r2, [pc, #40]	@ (8009734 <HAL_FLASH_Unlock+0x48>)
 800970c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800970e:	4b07      	ldr	r3, [pc, #28]	@ (800972c <HAL_FLASH_Unlock+0x40>)
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2280      	movs	r2, #128	@ 0x80
 8009714:	4013      	ands	r3, r2
 8009716:	d002      	beq.n	800971e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8009718:	1dfb      	adds	r3, r7, #7
 800971a:	2201      	movs	r2, #1
 800971c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800971e:	1dfb      	adds	r3, r7, #7
 8009720:	781b      	ldrb	r3, [r3, #0]
}
 8009722:	0018      	movs	r0, r3
 8009724:	46bd      	mov	sp, r7
 8009726:	b002      	add	sp, #8
 8009728:	bd80      	pop	{r7, pc}
 800972a:	46c0      	nop			@ (mov r8, r8)
 800972c:	40022000 	.word	0x40022000
 8009730:	45670123 	.word	0x45670123
 8009734:	cdef89ab 	.word	0xcdef89ab

08009738 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800973c:	4b04      	ldr	r3, [pc, #16]	@ (8009750 <HAL_FLASH_Lock+0x18>)
 800973e:	691a      	ldr	r2, [r3, #16]
 8009740:	4b03      	ldr	r3, [pc, #12]	@ (8009750 <HAL_FLASH_Lock+0x18>)
 8009742:	2180      	movs	r1, #128	@ 0x80
 8009744:	430a      	orrs	r2, r1
 8009746:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8009748:	2300      	movs	r3, #0
}
 800974a:	0018      	movs	r0, r3
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	40022000 	.word	0x40022000

08009754 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	000a      	movs	r2, r1
 800975e:	1cbb      	adds	r3, r7, #2
 8009760:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009762:	4b08      	ldr	r3, [pc, #32]	@ (8009784 <FLASH_Program_HalfWord+0x30>)
 8009764:	2200      	movs	r2, #0
 8009766:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009768:	4b07      	ldr	r3, [pc, #28]	@ (8009788 <FLASH_Program_HalfWord+0x34>)
 800976a:	691a      	ldr	r2, [r3, #16]
 800976c:	4b06      	ldr	r3, [pc, #24]	@ (8009788 <FLASH_Program_HalfWord+0x34>)
 800976e:	2101      	movs	r1, #1
 8009770:	430a      	orrs	r2, r1
 8009772:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	1cba      	adds	r2, r7, #2
 8009778:	8812      	ldrh	r2, [r2, #0]
 800977a:	801a      	strh	r2, [r3, #0]
}
 800977c:	46c0      	nop			@ (mov r8, r8)
 800977e:	46bd      	mov	sp, r7
 8009780:	b002      	add	sp, #8
 8009782:	bd80      	pop	{r7, pc}
 8009784:	200004d0 	.word	0x200004d0
 8009788:	40022000 	.word	0x40022000

0800978c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8009794:	f7fe fd94 	bl	80082c0 <HAL_GetTick>
 8009798:	0003      	movs	r3, r0
 800979a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800979c:	e00f      	b.n	80097be <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	3301      	adds	r3, #1
 80097a2:	d00c      	beq.n	80097be <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d007      	beq.n	80097ba <FLASH_WaitForLastOperation+0x2e>
 80097aa:	f7fe fd89 	bl	80082c0 <HAL_GetTick>
 80097ae:	0002      	movs	r2, r0
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d201      	bcs.n	80097be <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e01f      	b.n	80097fe <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80097be:	4b12      	ldr	r3, [pc, #72]	@ (8009808 <FLASH_WaitForLastOperation+0x7c>)
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	2201      	movs	r2, #1
 80097c4:	4013      	ands	r3, r2
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d0e9      	beq.n	800979e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80097ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009808 <FLASH_WaitForLastOperation+0x7c>)
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	2220      	movs	r2, #32
 80097d0:	4013      	ands	r3, r2
 80097d2:	2b20      	cmp	r3, #32
 80097d4:	d102      	bne.n	80097dc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80097d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009808 <FLASH_WaitForLastOperation+0x7c>)
 80097d8:	2220      	movs	r2, #32
 80097da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80097dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009808 <FLASH_WaitForLastOperation+0x7c>)
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	2210      	movs	r2, #16
 80097e2:	4013      	ands	r3, r2
 80097e4:	2b10      	cmp	r3, #16
 80097e6:	d005      	beq.n	80097f4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80097e8:	4b07      	ldr	r3, [pc, #28]	@ (8009808 <FLASH_WaitForLastOperation+0x7c>)
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	2204      	movs	r2, #4
 80097ee:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80097f0:	2b04      	cmp	r3, #4
 80097f2:	d103      	bne.n	80097fc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80097f4:	f000 f80a 	bl	800980c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e000      	b.n	80097fe <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	0018      	movs	r0, r3
 8009800:	46bd      	mov	sp, r7
 8009802:	b004      	add	sp, #16
 8009804:	bd80      	pop	{r7, pc}
 8009806:	46c0      	nop			@ (mov r8, r8)
 8009808:	40022000 	.word	0x40022000

0800980c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8009816:	4b13      	ldr	r3, [pc, #76]	@ (8009864 <FLASH_SetErrorCode+0x58>)
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	2210      	movs	r2, #16
 800981c:	4013      	ands	r3, r2
 800981e:	2b10      	cmp	r3, #16
 8009820:	d109      	bne.n	8009836 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009822:	4b11      	ldr	r3, [pc, #68]	@ (8009868 <FLASH_SetErrorCode+0x5c>)
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	2202      	movs	r2, #2
 8009828:	431a      	orrs	r2, r3
 800982a:	4b0f      	ldr	r3, [pc, #60]	@ (8009868 <FLASH_SetErrorCode+0x5c>)
 800982c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2210      	movs	r2, #16
 8009832:	4313      	orrs	r3, r2
 8009834:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8009836:	4b0b      	ldr	r3, [pc, #44]	@ (8009864 <FLASH_SetErrorCode+0x58>)
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	2204      	movs	r2, #4
 800983c:	4013      	ands	r3, r2
 800983e:	2b04      	cmp	r3, #4
 8009840:	d109      	bne.n	8009856 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8009842:	4b09      	ldr	r3, [pc, #36]	@ (8009868 <FLASH_SetErrorCode+0x5c>)
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	2201      	movs	r2, #1
 8009848:	431a      	orrs	r2, r3
 800984a:	4b07      	ldr	r3, [pc, #28]	@ (8009868 <FLASH_SetErrorCode+0x5c>)
 800984c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2204      	movs	r2, #4
 8009852:	4313      	orrs	r3, r2
 8009854:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8009856:	4b03      	ldr	r3, [pc, #12]	@ (8009864 <FLASH_SetErrorCode+0x58>)
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	60da      	str	r2, [r3, #12]
}  
 800985c:	46c0      	nop			@ (mov r8, r8)
 800985e:	46bd      	mov	sp, r7
 8009860:	b002      	add	sp, #8
 8009862:	bd80      	pop	{r7, pc}
 8009864:	40022000 	.word	0x40022000
 8009868:	200004d0 	.word	0x200004d0

0800986c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800986c:	b5b0      	push	{r4, r5, r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009876:	230f      	movs	r3, #15
 8009878:	18fb      	adds	r3, r7, r3
 800987a:	2201      	movs	r2, #1
 800987c:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800987e:	2300      	movs	r3, #0
 8009880:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009882:	4b32      	ldr	r3, [pc, #200]	@ (800994c <HAL_FLASHEx_Erase+0xe0>)
 8009884:	7e1b      	ldrb	r3, [r3, #24]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d101      	bne.n	800988e <HAL_FLASHEx_Erase+0x22>
 800988a:	2302      	movs	r3, #2
 800988c:	e05a      	b.n	8009944 <HAL_FLASHEx_Erase+0xd8>
 800988e:	4b2f      	ldr	r3, [pc, #188]	@ (800994c <HAL_FLASHEx_Erase+0xe0>)
 8009890:	2201      	movs	r2, #1
 8009892:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d116      	bne.n	80098ca <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800989c:	4b2c      	ldr	r3, [pc, #176]	@ (8009950 <HAL_FLASHEx_Erase+0xe4>)
 800989e:	0018      	movs	r0, r3
 80098a0:	f7ff ff74 	bl	800978c <FLASH_WaitForLastOperation>
 80098a4:	1e03      	subs	r3, r0, #0
 80098a6:	d147      	bne.n	8009938 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80098a8:	f000 f856 	bl	8009958 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80098ac:	230f      	movs	r3, #15
 80098ae:	18fc      	adds	r4, r7, r3
 80098b0:	4b27      	ldr	r3, [pc, #156]	@ (8009950 <HAL_FLASHEx_Erase+0xe4>)
 80098b2:	0018      	movs	r0, r3
 80098b4:	f7ff ff6a 	bl	800978c <FLASH_WaitForLastOperation>
 80098b8:	0003      	movs	r3, r0
 80098ba:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80098bc:	4b25      	ldr	r3, [pc, #148]	@ (8009954 <HAL_FLASHEx_Erase+0xe8>)
 80098be:	691a      	ldr	r2, [r3, #16]
 80098c0:	4b24      	ldr	r3, [pc, #144]	@ (8009954 <HAL_FLASHEx_Erase+0xe8>)
 80098c2:	2104      	movs	r1, #4
 80098c4:	438a      	bics	r2, r1
 80098c6:	611a      	str	r2, [r3, #16]
 80098c8:	e036      	b.n	8009938 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80098ca:	4b21      	ldr	r3, [pc, #132]	@ (8009950 <HAL_FLASHEx_Erase+0xe4>)
 80098cc:	0018      	movs	r0, r3
 80098ce:	f7ff ff5d 	bl	800978c <FLASH_WaitForLastOperation>
 80098d2:	1e03      	subs	r3, r0, #0
 80098d4:	d130      	bne.n	8009938 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2201      	movs	r2, #1
 80098da:	4252      	negs	r2, r2
 80098dc:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	60bb      	str	r3, [r7, #8]
 80098e4:	e01f      	b.n	8009926 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	0018      	movs	r0, r3
 80098ea:	f000 f84d 	bl	8009988 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80098ee:	250f      	movs	r5, #15
 80098f0:	197c      	adds	r4, r7, r5
 80098f2:	4b17      	ldr	r3, [pc, #92]	@ (8009950 <HAL_FLASHEx_Erase+0xe4>)
 80098f4:	0018      	movs	r0, r3
 80098f6:	f7ff ff49 	bl	800978c <FLASH_WaitForLastOperation>
 80098fa:	0003      	movs	r3, r0
 80098fc:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80098fe:	4b15      	ldr	r3, [pc, #84]	@ (8009954 <HAL_FLASHEx_Erase+0xe8>)
 8009900:	691a      	ldr	r2, [r3, #16]
 8009902:	4b14      	ldr	r3, [pc, #80]	@ (8009954 <HAL_FLASHEx_Erase+0xe8>)
 8009904:	2102      	movs	r1, #2
 8009906:	438a      	bics	r2, r1
 8009908:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 800990a:	197b      	adds	r3, r7, r5
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	601a      	str	r2, [r3, #0]
            break;
 8009918:	e00e      	b.n	8009938 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2280      	movs	r2, #128	@ 0x80
 800991e:	0112      	lsls	r2, r2, #4
 8009920:	4694      	mov	ip, r2
 8009922:	4463      	add	r3, ip
 8009924:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	02da      	lsls	r2, r3, #11
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	18d3      	adds	r3, r2, r3
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	429a      	cmp	r2, r3
 8009936:	d3d6      	bcc.n	80098e6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009938:	4b04      	ldr	r3, [pc, #16]	@ (800994c <HAL_FLASHEx_Erase+0xe0>)
 800993a:	2200      	movs	r2, #0
 800993c:	761a      	strb	r2, [r3, #24]

  return status;
 800993e:	230f      	movs	r3, #15
 8009940:	18fb      	adds	r3, r7, r3
 8009942:	781b      	ldrb	r3, [r3, #0]
}
 8009944:	0018      	movs	r0, r3
 8009946:	46bd      	mov	sp, r7
 8009948:	b004      	add	sp, #16
 800994a:	bdb0      	pop	{r4, r5, r7, pc}
 800994c:	200004d0 	.word	0x200004d0
 8009950:	0000c350 	.word	0x0000c350
 8009954:	40022000 	.word	0x40022000

08009958 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800995c:	4b08      	ldr	r3, [pc, #32]	@ (8009980 <FLASH_MassErase+0x28>)
 800995e:	2200      	movs	r2, #0
 8009960:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8009962:	4b08      	ldr	r3, [pc, #32]	@ (8009984 <FLASH_MassErase+0x2c>)
 8009964:	691a      	ldr	r2, [r3, #16]
 8009966:	4b07      	ldr	r3, [pc, #28]	@ (8009984 <FLASH_MassErase+0x2c>)
 8009968:	2104      	movs	r1, #4
 800996a:	430a      	orrs	r2, r1
 800996c:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800996e:	4b05      	ldr	r3, [pc, #20]	@ (8009984 <FLASH_MassErase+0x2c>)
 8009970:	691a      	ldr	r2, [r3, #16]
 8009972:	4b04      	ldr	r3, [pc, #16]	@ (8009984 <FLASH_MassErase+0x2c>)
 8009974:	2140      	movs	r1, #64	@ 0x40
 8009976:	430a      	orrs	r2, r1
 8009978:	611a      	str	r2, [r3, #16]
}
 800997a:	46c0      	nop			@ (mov r8, r8)
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	200004d0 	.word	0x200004d0
 8009984:	40022000 	.word	0x40022000

08009988 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009990:	4b0a      	ldr	r3, [pc, #40]	@ (80099bc <FLASH_PageErase+0x34>)
 8009992:	2200      	movs	r2, #0
 8009994:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009996:	4b0a      	ldr	r3, [pc, #40]	@ (80099c0 <FLASH_PageErase+0x38>)
 8009998:	691a      	ldr	r2, [r3, #16]
 800999a:	4b09      	ldr	r3, [pc, #36]	@ (80099c0 <FLASH_PageErase+0x38>)
 800999c:	2102      	movs	r1, #2
 800999e:	430a      	orrs	r2, r1
 80099a0:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80099a2:	4b07      	ldr	r3, [pc, #28]	@ (80099c0 <FLASH_PageErase+0x38>)
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80099a8:	4b05      	ldr	r3, [pc, #20]	@ (80099c0 <FLASH_PageErase+0x38>)
 80099aa:	691a      	ldr	r2, [r3, #16]
 80099ac:	4b04      	ldr	r3, [pc, #16]	@ (80099c0 <FLASH_PageErase+0x38>)
 80099ae:	2140      	movs	r1, #64	@ 0x40
 80099b0:	430a      	orrs	r2, r1
 80099b2:	611a      	str	r2, [r3, #16]
}
 80099b4:	46c0      	nop			@ (mov r8, r8)
 80099b6:	46bd      	mov	sp, r7
 80099b8:	b002      	add	sp, #8
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	200004d0 	.word	0x200004d0
 80099c0:	40022000 	.word	0x40022000

080099c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80099ce:	2300      	movs	r3, #0
 80099d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80099d2:	e14f      	b.n	8009c74 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2101      	movs	r1, #1
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	4091      	lsls	r1, r2
 80099de:	000a      	movs	r2, r1
 80099e0:	4013      	ands	r3, r2
 80099e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d100      	bne.n	80099ec <HAL_GPIO_Init+0x28>
 80099ea:	e140      	b.n	8009c6e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	2203      	movs	r2, #3
 80099f2:	4013      	ands	r3, r2
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d005      	beq.n	8009a04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	2203      	movs	r2, #3
 80099fe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d130      	bne.n	8009a66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	2203      	movs	r2, #3
 8009a10:	409a      	lsls	r2, r3
 8009a12:	0013      	movs	r3, r2
 8009a14:	43da      	mvns	r2, r3
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	409a      	lsls	r2, r3
 8009a26:	0013      	movs	r3, r2
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	409a      	lsls	r2, r3
 8009a40:	0013      	movs	r3, r2
 8009a42:	43da      	mvns	r2, r3
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	4013      	ands	r3, r2
 8009a48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	091b      	lsrs	r3, r3, #4
 8009a50:	2201      	movs	r2, #1
 8009a52:	401a      	ands	r2, r3
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	409a      	lsls	r2, r3
 8009a58:	0013      	movs	r3, r2
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	2203      	movs	r2, #3
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d017      	beq.n	8009aa2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	2203      	movs	r2, #3
 8009a7e:	409a      	lsls	r2, r3
 8009a80:	0013      	movs	r3, r2
 8009a82:	43da      	mvns	r2, r3
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	4013      	ands	r3, r2
 8009a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	689a      	ldr	r2, [r3, #8]
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	005b      	lsls	r3, r3, #1
 8009a92:	409a      	lsls	r2, r3
 8009a94:	0013      	movs	r3, r2
 8009a96:	693a      	ldr	r2, [r7, #16]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	2203      	movs	r2, #3
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d123      	bne.n	8009af6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	08da      	lsrs	r2, r3, #3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	3208      	adds	r2, #8
 8009ab6:	0092      	lsls	r2, r2, #2
 8009ab8:	58d3      	ldr	r3, [r2, r3]
 8009aba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	2207      	movs	r2, #7
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	220f      	movs	r2, #15
 8009ac6:	409a      	lsls	r2, r3
 8009ac8:	0013      	movs	r3, r2
 8009aca:	43da      	mvns	r2, r3
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	4013      	ands	r3, r2
 8009ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	691a      	ldr	r2, [r3, #16]
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2107      	movs	r1, #7
 8009ada:	400b      	ands	r3, r1
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	409a      	lsls	r2, r3
 8009ae0:	0013      	movs	r3, r2
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	08da      	lsrs	r2, r3, #3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3208      	adds	r2, #8
 8009af0:	0092      	lsls	r2, r2, #2
 8009af2:	6939      	ldr	r1, [r7, #16]
 8009af4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	005b      	lsls	r3, r3, #1
 8009b00:	2203      	movs	r2, #3
 8009b02:	409a      	lsls	r2, r3
 8009b04:	0013      	movs	r3, r2
 8009b06:	43da      	mvns	r2, r3
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	2203      	movs	r2, #3
 8009b14:	401a      	ands	r2, r3
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	409a      	lsls	r2, r3
 8009b1c:	0013      	movs	r3, r2
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	23c0      	movs	r3, #192	@ 0xc0
 8009b30:	029b      	lsls	r3, r3, #10
 8009b32:	4013      	ands	r3, r2
 8009b34:	d100      	bne.n	8009b38 <HAL_GPIO_Init+0x174>
 8009b36:	e09a      	b.n	8009c6e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b38:	4b54      	ldr	r3, [pc, #336]	@ (8009c8c <HAL_GPIO_Init+0x2c8>)
 8009b3a:	699a      	ldr	r2, [r3, #24]
 8009b3c:	4b53      	ldr	r3, [pc, #332]	@ (8009c8c <HAL_GPIO_Init+0x2c8>)
 8009b3e:	2101      	movs	r1, #1
 8009b40:	430a      	orrs	r2, r1
 8009b42:	619a      	str	r2, [r3, #24]
 8009b44:	4b51      	ldr	r3, [pc, #324]	@ (8009c8c <HAL_GPIO_Init+0x2c8>)
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	60bb      	str	r3, [r7, #8]
 8009b4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009b50:	4a4f      	ldr	r2, [pc, #316]	@ (8009c90 <HAL_GPIO_Init+0x2cc>)
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	089b      	lsrs	r3, r3, #2
 8009b56:	3302      	adds	r3, #2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	589b      	ldr	r3, [r3, r2]
 8009b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2203      	movs	r2, #3
 8009b62:	4013      	ands	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	220f      	movs	r2, #15
 8009b68:	409a      	lsls	r2, r3
 8009b6a:	0013      	movs	r3, r2
 8009b6c:	43da      	mvns	r2, r3
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	4013      	ands	r3, r2
 8009b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	2390      	movs	r3, #144	@ 0x90
 8009b78:	05db      	lsls	r3, r3, #23
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d013      	beq.n	8009ba6 <HAL_GPIO_Init+0x1e2>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a44      	ldr	r2, [pc, #272]	@ (8009c94 <HAL_GPIO_Init+0x2d0>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d00d      	beq.n	8009ba2 <HAL_GPIO_Init+0x1de>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a43      	ldr	r2, [pc, #268]	@ (8009c98 <HAL_GPIO_Init+0x2d4>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d007      	beq.n	8009b9e <HAL_GPIO_Init+0x1da>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a42      	ldr	r2, [pc, #264]	@ (8009c9c <HAL_GPIO_Init+0x2d8>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d101      	bne.n	8009b9a <HAL_GPIO_Init+0x1d6>
 8009b96:	2303      	movs	r3, #3
 8009b98:	e006      	b.n	8009ba8 <HAL_GPIO_Init+0x1e4>
 8009b9a:	2305      	movs	r3, #5
 8009b9c:	e004      	b.n	8009ba8 <HAL_GPIO_Init+0x1e4>
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	e002      	b.n	8009ba8 <HAL_GPIO_Init+0x1e4>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e000      	b.n	8009ba8 <HAL_GPIO_Init+0x1e4>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	697a      	ldr	r2, [r7, #20]
 8009baa:	2103      	movs	r1, #3
 8009bac:	400a      	ands	r2, r1
 8009bae:	0092      	lsls	r2, r2, #2
 8009bb0:	4093      	lsls	r3, r2
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009bb8:	4935      	ldr	r1, [pc, #212]	@ (8009c90 <HAL_GPIO_Init+0x2cc>)
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	089b      	lsrs	r3, r3, #2
 8009bbe:	3302      	adds	r3, #2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009bc6:	4b36      	ldr	r3, [pc, #216]	@ (8009ca0 <HAL_GPIO_Init+0x2dc>)
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	43da      	mvns	r2, r3
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	685a      	ldr	r2, [r3, #4]
 8009bda:	2380      	movs	r3, #128	@ 0x80
 8009bdc:	035b      	lsls	r3, r3, #13
 8009bde:	4013      	ands	r3, r2
 8009be0:	d003      	beq.n	8009bea <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8009bea:	4b2d      	ldr	r3, [pc, #180]	@ (8009ca0 <HAL_GPIO_Init+0x2dc>)
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8009bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8009ca0 <HAL_GPIO_Init+0x2dc>)
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	43da      	mvns	r2, r3
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	2380      	movs	r3, #128	@ 0x80
 8009c06:	039b      	lsls	r3, r3, #14
 8009c08:	4013      	ands	r3, r2
 8009c0a:	d003      	beq.n	8009c14 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8009c14:	4b22      	ldr	r3, [pc, #136]	@ (8009ca0 <HAL_GPIO_Init+0x2dc>)
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8009c1a:	4b21      	ldr	r3, [pc, #132]	@ (8009ca0 <HAL_GPIO_Init+0x2dc>)
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	43da      	mvns	r2, r3
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	4013      	ands	r3, r2
 8009c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	2380      	movs	r3, #128	@ 0x80
 8009c30:	029b      	lsls	r3, r3, #10
 8009c32:	4013      	ands	r3, r2
 8009c34:	d003      	beq.n	8009c3e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009c3e:	4b18      	ldr	r3, [pc, #96]	@ (8009ca0 <HAL_GPIO_Init+0x2dc>)
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8009c44:	4b16      	ldr	r3, [pc, #88]	@ (8009ca0 <HAL_GPIO_Init+0x2dc>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	43da      	mvns	r2, r3
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	4013      	ands	r3, r2
 8009c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	2380      	movs	r3, #128	@ 0x80
 8009c5a:	025b      	lsls	r3, r3, #9
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	d003      	beq.n	8009c68 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8009c68:	4b0d      	ldr	r3, [pc, #52]	@ (8009ca0 <HAL_GPIO_Init+0x2dc>)
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	3301      	adds	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	40da      	lsrs	r2, r3
 8009c7c:	1e13      	subs	r3, r2, #0
 8009c7e:	d000      	beq.n	8009c82 <HAL_GPIO_Init+0x2be>
 8009c80:	e6a8      	b.n	80099d4 <HAL_GPIO_Init+0x10>
  } 
}
 8009c82:	46c0      	nop			@ (mov r8, r8)
 8009c84:	46c0      	nop			@ (mov r8, r8)
 8009c86:	46bd      	mov	sp, r7
 8009c88:	b006      	add	sp, #24
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	40021000 	.word	0x40021000
 8009c90:	40010000 	.word	0x40010000
 8009c94:	48000400 	.word	0x48000400
 8009c98:	48000800 	.word	0x48000800
 8009c9c:	48000c00 	.word	0x48000c00
 8009ca0:	40010400 	.word	0x40010400

08009ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	000a      	movs	r2, r1
 8009cae:	1cbb      	adds	r3, r7, #2
 8009cb0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	1cba      	adds	r2, r7, #2
 8009cb8:	8812      	ldrh	r2, [r2, #0]
 8009cba:	4013      	ands	r3, r2
 8009cbc:	d004      	beq.n	8009cc8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8009cbe:	230f      	movs	r3, #15
 8009cc0:	18fb      	adds	r3, r7, r3
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	701a      	strb	r2, [r3, #0]
 8009cc6:	e003      	b.n	8009cd0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009cc8:	230f      	movs	r3, #15
 8009cca:	18fb      	adds	r3, r7, r3
 8009ccc:	2200      	movs	r2, #0
 8009cce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8009cd0:	230f      	movs	r3, #15
 8009cd2:	18fb      	adds	r3, r7, r3
 8009cd4:	781b      	ldrb	r3, [r3, #0]
  }
 8009cd6:	0018      	movs	r0, r3
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	b004      	add	sp, #16
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	0008      	movs	r0, r1
 8009ce8:	0011      	movs	r1, r2
 8009cea:	1cbb      	adds	r3, r7, #2
 8009cec:	1c02      	adds	r2, r0, #0
 8009cee:	801a      	strh	r2, [r3, #0]
 8009cf0:	1c7b      	adds	r3, r7, #1
 8009cf2:	1c0a      	adds	r2, r1, #0
 8009cf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009cf6:	1c7b      	adds	r3, r7, #1
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d004      	beq.n	8009d08 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009cfe:	1cbb      	adds	r3, r7, #2
 8009d00:	881a      	ldrh	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009d06:	e003      	b.n	8009d10 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009d08:	1cbb      	adds	r3, r7, #2
 8009d0a:	881a      	ldrh	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009d10:	46c0      	nop			@ (mov r8, r8)
 8009d12:	46bd      	mov	sp, r7
 8009d14:	b002      	add	sp, #8
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d101      	bne.n	8009d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e08f      	b.n	8009e4a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2241      	movs	r2, #65	@ 0x41
 8009d2e:	5c9b      	ldrb	r3, [r3, r2]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d107      	bne.n	8009d46 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2240      	movs	r2, #64	@ 0x40
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	0018      	movs	r0, r3
 8009d42:	f7fd f9ed 	bl	8007120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2241      	movs	r2, #65	@ 0x41
 8009d4a:	2124      	movs	r1, #36	@ 0x24
 8009d4c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2101      	movs	r1, #1
 8009d5a:	438a      	bics	r2, r1
 8009d5c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685a      	ldr	r2, [r3, #4]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	493b      	ldr	r1, [pc, #236]	@ (8009e54 <HAL_I2C_Init+0x13c>)
 8009d68:	400a      	ands	r2, r1
 8009d6a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4938      	ldr	r1, [pc, #224]	@ (8009e58 <HAL_I2C_Init+0x140>)
 8009d78:	400a      	ands	r2, r1
 8009d7a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d108      	bne.n	8009d96 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	689a      	ldr	r2, [r3, #8]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2180      	movs	r1, #128	@ 0x80
 8009d8e:	0209      	lsls	r1, r1, #8
 8009d90:	430a      	orrs	r2, r1
 8009d92:	609a      	str	r2, [r3, #8]
 8009d94:	e007      	b.n	8009da6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	689a      	ldr	r2, [r3, #8]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2184      	movs	r1, #132	@ 0x84
 8009da0:	0209      	lsls	r1, r1, #8
 8009da2:	430a      	orrs	r2, r1
 8009da4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d109      	bne.n	8009dc2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	685a      	ldr	r2, [r3, #4]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2180      	movs	r1, #128	@ 0x80
 8009dba:	0109      	lsls	r1, r1, #4
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	605a      	str	r2, [r3, #4]
 8009dc0:	e007      	b.n	8009dd2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4923      	ldr	r1, [pc, #140]	@ (8009e5c <HAL_I2C_Init+0x144>)
 8009dce:	400a      	ands	r2, r1
 8009dd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4920      	ldr	r1, [pc, #128]	@ (8009e60 <HAL_I2C_Init+0x148>)
 8009dde:	430a      	orrs	r2, r1
 8009de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68da      	ldr	r2, [r3, #12]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	491a      	ldr	r1, [pc, #104]	@ (8009e58 <HAL_I2C_Init+0x140>)
 8009dee:	400a      	ands	r2, r1
 8009df0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	691a      	ldr	r2, [r3, #16]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	430a      	orrs	r2, r1
 8009e0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	69d9      	ldr	r1, [r3, #28]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a1a      	ldr	r2, [r3, #32]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2101      	movs	r1, #1
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2241      	movs	r2, #65	@ 0x41
 8009e36:	2120      	movs	r1, #32
 8009e38:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2242      	movs	r2, #66	@ 0x42
 8009e44:	2100      	movs	r1, #0
 8009e46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	b002      	add	sp, #8
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	46c0      	nop			@ (mov r8, r8)
 8009e54:	f0ffffff 	.word	0xf0ffffff
 8009e58:	ffff7fff 	.word	0xffff7fff
 8009e5c:	fffff7ff 	.word	0xfffff7ff
 8009e60:	02008000 	.word	0x02008000

08009e64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009e64:	b590      	push	{r4, r7, lr}
 8009e66:	b089      	sub	sp, #36	@ 0x24
 8009e68:	af02      	add	r7, sp, #8
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	0008      	movs	r0, r1
 8009e6e:	607a      	str	r2, [r7, #4]
 8009e70:	0019      	movs	r1, r3
 8009e72:	230a      	movs	r3, #10
 8009e74:	18fb      	adds	r3, r7, r3
 8009e76:	1c02      	adds	r2, r0, #0
 8009e78:	801a      	strh	r2, [r3, #0]
 8009e7a:	2308      	movs	r3, #8
 8009e7c:	18fb      	adds	r3, r7, r3
 8009e7e:	1c0a      	adds	r2, r1, #0
 8009e80:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2241      	movs	r2, #65	@ 0x41
 8009e86:	5c9b      	ldrb	r3, [r3, r2]
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	d000      	beq.n	8009e90 <HAL_I2C_Master_Transmit+0x2c>
 8009e8e:	e10a      	b.n	800a0a6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2240      	movs	r2, #64	@ 0x40
 8009e94:	5c9b      	ldrb	r3, [r3, r2]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d101      	bne.n	8009e9e <HAL_I2C_Master_Transmit+0x3a>
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	e104      	b.n	800a0a8 <HAL_I2C_Master_Transmit+0x244>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2240      	movs	r2, #64	@ 0x40
 8009ea2:	2101      	movs	r1, #1
 8009ea4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009ea6:	f7fe fa0b 	bl	80082c0 <HAL_GetTick>
 8009eaa:	0003      	movs	r3, r0
 8009eac:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009eae:	2380      	movs	r3, #128	@ 0x80
 8009eb0:	0219      	lsls	r1, r3, #8
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	2319      	movs	r3, #25
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f001 fd32 	bl	800b924 <I2C_WaitOnFlagUntilTimeout>
 8009ec0:	1e03      	subs	r3, r0, #0
 8009ec2:	d001      	beq.n	8009ec8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e0ef      	b.n	800a0a8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2241      	movs	r2, #65	@ 0x41
 8009ecc:	2121      	movs	r1, #33	@ 0x21
 8009ece:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2242      	movs	r2, #66	@ 0x42
 8009ed4:	2110      	movs	r1, #16
 8009ed6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2208      	movs	r2, #8
 8009ee8:	18ba      	adds	r2, r7, r2
 8009eea:	8812      	ldrh	r2, [r2, #0]
 8009eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	2bff      	cmp	r3, #255	@ 0xff
 8009efc:	d906      	bls.n	8009f0c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	22ff      	movs	r2, #255	@ 0xff
 8009f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009f04:	2380      	movs	r3, #128	@ 0x80
 8009f06:	045b      	lsls	r3, r3, #17
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	e007      	b.n	8009f1c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009f16:	2380      	movs	r3, #128	@ 0x80
 8009f18:	049b      	lsls	r3, r3, #18
 8009f1a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d027      	beq.n	8009f74 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f28:	781a      	ldrb	r2, [r3, #0]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f34:	1c5a      	adds	r2, r3, #1
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	3b01      	subs	r3, #1
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	697c      	ldr	r4, [r7, #20]
 8009f60:	230a      	movs	r3, #10
 8009f62:	18fb      	adds	r3, r7, r3
 8009f64:	8819      	ldrh	r1, [r3, #0]
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	4b51      	ldr	r3, [pc, #324]	@ (800a0b0 <HAL_I2C_Master_Transmit+0x24c>)
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	0023      	movs	r3, r4
 8009f6e:	f001 ff51 	bl	800be14 <I2C_TransferConfig>
 8009f72:	e06f      	b.n	800a054 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	697c      	ldr	r4, [r7, #20]
 8009f7c:	230a      	movs	r3, #10
 8009f7e:	18fb      	adds	r3, r7, r3
 8009f80:	8819      	ldrh	r1, [r3, #0]
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	4b4a      	ldr	r3, [pc, #296]	@ (800a0b0 <HAL_I2C_Master_Transmit+0x24c>)
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	0023      	movs	r3, r4
 8009f8a:	f001 ff43 	bl	800be14 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009f8e:	e061      	b.n	800a054 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	0018      	movs	r0, r3
 8009f98:	f001 fd1c 	bl	800b9d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009f9c:	1e03      	subs	r3, r0, #0
 8009f9e:	d001      	beq.n	8009fa4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e081      	b.n	800a0a8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa8:	781a      	ldrb	r2, [r3, #0]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb4:	1c5a      	adds	r2, r3, #1
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d03a      	beq.n	800a054 <HAL_I2C_Master_Transmit+0x1f0>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d136      	bne.n	800a054 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009fe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	0013      	movs	r3, r2
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	2180      	movs	r1, #128	@ 0x80
 8009ff4:	f001 fc96 	bl	800b924 <I2C_WaitOnFlagUntilTimeout>
 8009ff8:	1e03      	subs	r3, r0, #0
 8009ffa:	d001      	beq.n	800a000 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e053      	b.n	800a0a8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a004:	b29b      	uxth	r3, r3
 800a006:	2bff      	cmp	r3, #255	@ 0xff
 800a008:	d911      	bls.n	800a02e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	22ff      	movs	r2, #255	@ 0xff
 800a00e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a014:	b2da      	uxtb	r2, r3
 800a016:	2380      	movs	r3, #128	@ 0x80
 800a018:	045c      	lsls	r4, r3, #17
 800a01a:	230a      	movs	r3, #10
 800a01c:	18fb      	adds	r3, r7, r3
 800a01e:	8819      	ldrh	r1, [r3, #0]
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	2300      	movs	r3, #0
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	0023      	movs	r3, r4
 800a028:	f001 fef4 	bl	800be14 <I2C_TransferConfig>
 800a02c:	e012      	b.n	800a054 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a032:	b29a      	uxth	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	2380      	movs	r3, #128	@ 0x80
 800a040:	049c      	lsls	r4, r3, #18
 800a042:	230a      	movs	r3, #10
 800a044:	18fb      	adds	r3, r7, r3
 800a046:	8819      	ldrh	r1, [r3, #0]
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	2300      	movs	r3, #0
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	0023      	movs	r3, r4
 800a050:	f001 fee0 	bl	800be14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a058:	b29b      	uxth	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d198      	bne.n	8009f90 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	0018      	movs	r0, r3
 800a066:	f001 fcfb 	bl	800ba60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a06a:	1e03      	subs	r3, r0, #0
 800a06c:	d001      	beq.n	800a072 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e01a      	b.n	800a0a8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2220      	movs	r2, #32
 800a078:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	490b      	ldr	r1, [pc, #44]	@ (800a0b4 <HAL_I2C_Master_Transmit+0x250>)
 800a086:	400a      	ands	r2, r1
 800a088:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2241      	movs	r2, #65	@ 0x41
 800a08e:	2120      	movs	r1, #32
 800a090:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2242      	movs	r2, #66	@ 0x42
 800a096:	2100      	movs	r1, #0
 800a098:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2240      	movs	r2, #64	@ 0x40
 800a09e:	2100      	movs	r1, #0
 800a0a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	e000      	b.n	800a0a8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800a0a6:	2302      	movs	r3, #2
  }
}
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	b007      	add	sp, #28
 800a0ae:	bd90      	pop	{r4, r7, pc}
 800a0b0:	80002000 	.word	0x80002000
 800a0b4:	fe00e800 	.word	0xfe00e800

0800a0b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a0b8:	b590      	push	{r4, r7, lr}
 800a0ba:	b089      	sub	sp, #36	@ 0x24
 800a0bc:	af02      	add	r7, sp, #8
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	0008      	movs	r0, r1
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	0019      	movs	r1, r3
 800a0c6:	230a      	movs	r3, #10
 800a0c8:	18fb      	adds	r3, r7, r3
 800a0ca:	1c02      	adds	r2, r0, #0
 800a0cc:	801a      	strh	r2, [r3, #0]
 800a0ce:	2308      	movs	r3, #8
 800a0d0:	18fb      	adds	r3, r7, r3
 800a0d2:	1c0a      	adds	r2, r1, #0
 800a0d4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2241      	movs	r2, #65	@ 0x41
 800a0da:	5c9b      	ldrb	r3, [r3, r2]
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b20      	cmp	r3, #32
 800a0e0:	d000      	beq.n	800a0e4 <HAL_I2C_Master_Receive+0x2c>
 800a0e2:	e0e8      	b.n	800a2b6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2240      	movs	r2, #64	@ 0x40
 800a0e8:	5c9b      	ldrb	r3, [r3, r2]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d101      	bne.n	800a0f2 <HAL_I2C_Master_Receive+0x3a>
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e0e2      	b.n	800a2b8 <HAL_I2C_Master_Receive+0x200>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2240      	movs	r2, #64	@ 0x40
 800a0f6:	2101      	movs	r1, #1
 800a0f8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a0fa:	f7fe f8e1 	bl	80082c0 <HAL_GetTick>
 800a0fe:	0003      	movs	r3, r0
 800a100:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a102:	2380      	movs	r3, #128	@ 0x80
 800a104:	0219      	lsls	r1, r3, #8
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	2319      	movs	r3, #25
 800a10e:	2201      	movs	r2, #1
 800a110:	f001 fc08 	bl	800b924 <I2C_WaitOnFlagUntilTimeout>
 800a114:	1e03      	subs	r3, r0, #0
 800a116:	d001      	beq.n	800a11c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e0cd      	b.n	800a2b8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2241      	movs	r2, #65	@ 0x41
 800a120:	2122      	movs	r1, #34	@ 0x22
 800a122:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2242      	movs	r2, #66	@ 0x42
 800a128:	2110      	movs	r1, #16
 800a12a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2208      	movs	r2, #8
 800a13c:	18ba      	adds	r2, r7, r2
 800a13e:	8812      	ldrh	r2, [r2, #0]
 800a140:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	2bff      	cmp	r3, #255	@ 0xff
 800a150:	d911      	bls.n	800a176 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2201      	movs	r2, #1
 800a156:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a15c:	b2da      	uxtb	r2, r3
 800a15e:	2380      	movs	r3, #128	@ 0x80
 800a160:	045c      	lsls	r4, r3, #17
 800a162:	230a      	movs	r3, #10
 800a164:	18fb      	adds	r3, r7, r3
 800a166:	8819      	ldrh	r1, [r3, #0]
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	4b55      	ldr	r3, [pc, #340]	@ (800a2c0 <HAL_I2C_Master_Receive+0x208>)
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	0023      	movs	r3, r4
 800a170:	f001 fe50 	bl	800be14 <I2C_TransferConfig>
 800a174:	e076      	b.n	800a264 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a184:	b2da      	uxtb	r2, r3
 800a186:	2380      	movs	r3, #128	@ 0x80
 800a188:	049c      	lsls	r4, r3, #18
 800a18a:	230a      	movs	r3, #10
 800a18c:	18fb      	adds	r3, r7, r3
 800a18e:	8819      	ldrh	r1, [r3, #0]
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	4b4b      	ldr	r3, [pc, #300]	@ (800a2c0 <HAL_I2C_Master_Receive+0x208>)
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	0023      	movs	r3, r4
 800a198:	f001 fe3c 	bl	800be14 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a19c:	e062      	b.n	800a264 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	f001 fc9f 	bl	800bae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a1aa:	1e03      	subs	r3, r0, #0
 800a1ac:	d001      	beq.n	800a1b2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e082      	b.n	800a2b8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1bc:	b2d2      	uxtb	r2, r2
 800a1be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d03a      	beq.n	800a264 <HAL_I2C_Master_Receive+0x1ac>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d136      	bne.n	800a264 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a1f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	0013      	movs	r3, r2
 800a200:	2200      	movs	r2, #0
 800a202:	2180      	movs	r1, #128	@ 0x80
 800a204:	f001 fb8e 	bl	800b924 <I2C_WaitOnFlagUntilTimeout>
 800a208:	1e03      	subs	r3, r0, #0
 800a20a:	d001      	beq.n	800a210 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e053      	b.n	800a2b8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a214:	b29b      	uxth	r3, r3
 800a216:	2bff      	cmp	r3, #255	@ 0xff
 800a218:	d911      	bls.n	800a23e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	22ff      	movs	r2, #255	@ 0xff
 800a21e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a224:	b2da      	uxtb	r2, r3
 800a226:	2380      	movs	r3, #128	@ 0x80
 800a228:	045c      	lsls	r4, r3, #17
 800a22a:	230a      	movs	r3, #10
 800a22c:	18fb      	adds	r3, r7, r3
 800a22e:	8819      	ldrh	r1, [r3, #0]
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	2300      	movs	r3, #0
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	0023      	movs	r3, r4
 800a238:	f001 fdec 	bl	800be14 <I2C_TransferConfig>
 800a23c:	e012      	b.n	800a264 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a242:	b29a      	uxth	r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	2380      	movs	r3, #128	@ 0x80
 800a250:	049c      	lsls	r4, r3, #18
 800a252:	230a      	movs	r3, #10
 800a254:	18fb      	adds	r3, r7, r3
 800a256:	8819      	ldrh	r1, [r3, #0]
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	2300      	movs	r3, #0
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	0023      	movs	r3, r4
 800a260:	f001 fdd8 	bl	800be14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a268:	b29b      	uxth	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d197      	bne.n	800a19e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	0018      	movs	r0, r3
 800a276:	f001 fbf3 	bl	800ba60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a27a:	1e03      	subs	r3, r0, #0
 800a27c:	d001      	beq.n	800a282 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e01a      	b.n	800a2b8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2220      	movs	r2, #32
 800a288:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	490b      	ldr	r1, [pc, #44]	@ (800a2c4 <HAL_I2C_Master_Receive+0x20c>)
 800a296:	400a      	ands	r2, r1
 800a298:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2241      	movs	r2, #65	@ 0x41
 800a29e:	2120      	movs	r1, #32
 800a2a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2242      	movs	r2, #66	@ 0x42
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2240      	movs	r2, #64	@ 0x40
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	e000      	b.n	800a2b8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800a2b6:	2302      	movs	r3, #2
  }
}
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	b007      	add	sp, #28
 800a2be:	bd90      	pop	{r4, r7, pc}
 800a2c0:	80002400 	.word	0x80002400
 800a2c4:	fe00e800 	.word	0xfe00e800

0800a2c8 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	1dbb      	adds	r3, r7, #6
 800a2d4:	801a      	strh	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2241      	movs	r2, #65	@ 0x41
 800a2da:	5c9b      	ldrb	r3, [r3, r2]
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b20      	cmp	r3, #32
 800a2e0:	d159      	bne.n	800a396 <HAL_I2C_Slave_Transmit_IT+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2240      	movs	r2, #64	@ 0x40
 800a2e6:	5c9b      	ldrb	r3, [r3, r2]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d101      	bne.n	800a2f0 <HAL_I2C_Slave_Transmit_IT+0x28>
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	e053      	b.n	800a398 <HAL_I2C_Slave_Transmit_IT+0xd0>
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2240      	movs	r2, #64	@ 0x40
 800a2f4:	2101      	movs	r1, #1
 800a2f6:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2241      	movs	r2, #65	@ 0x41
 800a2fc:	2121      	movs	r1, #33	@ 0x21
 800a2fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2242      	movs	r2, #66	@ 0x42
 800a304:	2120      	movs	r1, #32
 800a306:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4921      	ldr	r1, [pc, #132]	@ (800a3a0 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 800a31a:	400a      	ands	r2, r1
 800a31c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	1dba      	adds	r2, r7, #6
 800a328:	8812      	ldrh	r2, [r2, #0]
 800a32a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a330:	b29a      	uxth	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	4a1a      	ldr	r2, [pc, #104]	@ (800a3a4 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800a33a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4a1a      	ldr	r2, [pc, #104]	@ (800a3a8 <HAL_I2C_Slave_Transmit_IT+0xe0>)
 800a340:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6a1a      	ldr	r2, [r3, #32]
 800a346:	2380      	movs	r3, #128	@ 0x80
 800a348:	029b      	lsls	r3, r3, #10
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d117      	bne.n	800a37e <HAL_I2C_Slave_Transmit_IT+0xb6>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a352:	781a      	ldrb	r2, [r3, #0]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35e:	1c5a      	adds	r2, r3, #1
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a368:	b29b      	uxth	r3, r3
 800a36a:	3b01      	subs	r3, #1
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a376:	3b01      	subs	r3, #1
 800a378:	b29a      	uxth	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2240      	movs	r2, #64	@ 0x40
 800a382:	2100      	movs	r1, #0
 800a384:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800a386:	4a09      	ldr	r2, [pc, #36]	@ (800a3ac <HAL_I2C_Slave_Transmit_IT+0xe4>)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	0011      	movs	r1, r2
 800a38c:	0018      	movs	r0, r3
 800a38e:	f001 fd7b 	bl	800be88 <I2C_Enable_IRQ>

    return HAL_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	e000      	b.n	800a398 <HAL_I2C_Slave_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800a396:	2302      	movs	r3, #2
  }
}
 800a398:	0018      	movs	r0, r3
 800a39a:	46bd      	mov	sp, r7
 800a39c:	b004      	add	sp, #16
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	ffff7fff 	.word	0xffff7fff
 800a3a4:	ffff0000 	.word	0xffff0000
 800a3a8:	0800a5e5 	.word	0x0800a5e5
 800a3ac:	00008001 	.word	0x00008001

0800a3b0 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	1dbb      	adds	r3, r7, #6
 800a3bc:	801a      	strh	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2241      	movs	r2, #65	@ 0x41
 800a3c2:	5c9b      	ldrb	r3, [r3, r2]
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2b20      	cmp	r3, #32
 800a3c8:	d13b      	bne.n	800a442 <HAL_I2C_Slave_Receive_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2240      	movs	r2, #64	@ 0x40
 800a3ce:	5c9b      	ldrb	r3, [r3, r2]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d101      	bne.n	800a3d8 <HAL_I2C_Slave_Receive_IT+0x28>
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	e035      	b.n	800a444 <HAL_I2C_Slave_Receive_IT+0x94>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2240      	movs	r2, #64	@ 0x40
 800a3dc:	2101      	movs	r1, #1
 800a3de:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2241      	movs	r2, #65	@ 0x41
 800a3e4:	2122      	movs	r1, #34	@ 0x22
 800a3e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2242      	movs	r2, #66	@ 0x42
 800a3ec:	2120      	movs	r1, #32
 800a3ee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4912      	ldr	r1, [pc, #72]	@ (800a44c <HAL_I2C_Slave_Receive_IT+0x9c>)
 800a402:	400a      	ands	r2, r1
 800a404:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	1dba      	adds	r2, r7, #6
 800a410:	8812      	ldrh	r2, [r2, #0]
 800a412:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a418:	b29a      	uxth	r2, r3
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	4a0b      	ldr	r2, [pc, #44]	@ (800a450 <HAL_I2C_Slave_Receive_IT+0xa0>)
 800a422:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	4a0b      	ldr	r2, [pc, #44]	@ (800a454 <HAL_I2C_Slave_Receive_IT+0xa4>)
 800a428:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2240      	movs	r2, #64	@ 0x40
 800a42e:	2100      	movs	r1, #0
 800a430:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800a432:	4a09      	ldr	r2, [pc, #36]	@ (800a458 <HAL_I2C_Slave_Receive_IT+0xa8>)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	0011      	movs	r1, r2
 800a438:	0018      	movs	r0, r3
 800a43a:	f001 fd25 	bl	800be88 <I2C_Enable_IRQ>

    return HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	e000      	b.n	800a444 <HAL_I2C_Slave_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a442:	2302      	movs	r3, #2
  }
}
 800a444:	0018      	movs	r0, r3
 800a446:	46bd      	mov	sp, r7
 800a448:	b004      	add	sp, #16
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	ffff7fff 	.word	0xffff7fff
 800a450:	ffff0000 	.word	0xffff0000
 800a454:	0800a5e5 	.word	0x0800a5e5
 800a458:	00008002 	.word	0x00008002

0800a45c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	699b      	ldr	r3, [r3, #24]
 800a46a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	68f9      	ldr	r1, [r7, #12]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	4798      	blx	r3
  }
}
 800a488:	46c0      	nop			@ (mov r8, r8)
 800a48a:	46bd      	mov	sp, r7
 800a48c:	b004      	add	sp, #16
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	2380      	movs	r3, #128	@ 0x80
 800a4ac:	005b      	lsls	r3, r3, #1
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	d00e      	beq.n	800a4d0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	2280      	movs	r2, #128	@ 0x80
 800a4b6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a4b8:	d00a      	beq.n	800a4d0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4be:	2201      	movs	r2, #1
 800a4c0:	431a      	orrs	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2280      	movs	r2, #128	@ 0x80
 800a4cc:	0052      	lsls	r2, r2, #1
 800a4ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a4d0:	697a      	ldr	r2, [r7, #20]
 800a4d2:	2380      	movs	r3, #128	@ 0x80
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	d00e      	beq.n	800a4f8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	2280      	movs	r2, #128	@ 0x80
 800a4de:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a4e0:	d00a      	beq.n	800a4f8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4e6:	2208      	movs	r2, #8
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2280      	movs	r2, #128	@ 0x80
 800a4f4:	00d2      	lsls	r2, r2, #3
 800a4f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	2380      	movs	r3, #128	@ 0x80
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4013      	ands	r3, r2
 800a500:	d00e      	beq.n	800a520 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2280      	movs	r2, #128	@ 0x80
 800a506:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a508:	d00a      	beq.n	800a520 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a50e:	2202      	movs	r2, #2
 800a510:	431a      	orrs	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2280      	movs	r2, #128	@ 0x80
 800a51c:	0092      	lsls	r2, r2, #2
 800a51e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a524:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	220b      	movs	r2, #11
 800a52a:	4013      	ands	r3, r2
 800a52c:	d005      	beq.n	800a53a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	0011      	movs	r1, r2
 800a534:	0018      	movs	r0, r3
 800a536:	f001 f889 	bl	800b64c <I2C_ITError>
  }
}
 800a53a:	46c0      	nop			@ (mov r8, r8)
 800a53c:	46bd      	mov	sp, r7
 800a53e:	b006      	add	sp, #24
 800a540:	bd80      	pop	{r7, pc}

0800a542 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b082      	sub	sp, #8
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a54a:	46c0      	nop			@ (mov r8, r8)
 800a54c:	46bd      	mov	sp, r7
 800a54e:	b002      	add	sp, #8
 800a550:	bd80      	pop	{r7, pc}

0800a552 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a55a:	46c0      	nop			@ (mov r8, r8)
 800a55c:	46bd      	mov	sp, r7
 800a55e:	b002      	add	sp, #8
 800a560:	bd80      	pop	{r7, pc}

0800a562 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a56a:	46c0      	nop			@ (mov r8, r8)
 800a56c:	46bd      	mov	sp, r7
 800a56e:	b002      	add	sp, #8
 800a570:	bd80      	pop	{r7, pc}

0800a572 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	0008      	movs	r0, r1
 800a57c:	0011      	movs	r1, r2
 800a57e:	1cfb      	adds	r3, r7, #3
 800a580:	1c02      	adds	r2, r0, #0
 800a582:	701a      	strb	r2, [r3, #0]
 800a584:	003b      	movs	r3, r7
 800a586:	1c0a      	adds	r2, r1, #0
 800a588:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a58a:	46c0      	nop			@ (mov r8, r8)
 800a58c:	46bd      	mov	sp, r7
 800a58e:	b002      	add	sp, #8
 800a590:	bd80      	pop	{r7, pc}

0800a592 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b082      	sub	sp, #8
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a59a:	46c0      	nop			@ (mov r8, r8)
 800a59c:	46bd      	mov	sp, r7
 800a59e:	b002      	add	sp, #8
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a5aa:	46c0      	nop			@ (mov r8, r8)
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	b002      	add	sp, #8
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a5ba:	46c0      	nop			@ (mov r8, r8)
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	b002      	add	sp, #8
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a5ca:	46c0      	nop			@ (mov r8, r8)
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	b002      	add	sp, #8
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b082      	sub	sp, #8
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a5da:	46c0      	nop			@ (mov r8, r8)
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	b002      	add	sp, #8
 800a5e0:	bd80      	pop	{r7, pc}
	...

0800a5e4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2240      	movs	r2, #64	@ 0x40
 800a5fe:	5c9b      	ldrb	r3, [r3, r2]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d101      	bne.n	800a608 <I2C_Slave_ISR_IT+0x24>
 800a604:	2302      	movs	r3, #2
 800a606:	e0e7      	b.n	800a7d8 <I2C_Slave_ISR_IT+0x1f4>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2240      	movs	r2, #64	@ 0x40
 800a60c:	2101      	movs	r1, #1
 800a60e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	2220      	movs	r2, #32
 800a614:	4013      	ands	r3, r2
 800a616:	d00a      	beq.n	800a62e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2220      	movs	r2, #32
 800a61c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a61e:	d006      	beq.n	800a62e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	0011      	movs	r1, r2
 800a626:	0018      	movs	r0, r3
 800a628:	f000 fe30 	bl	800b28c <I2C_ITSlaveCplt>
 800a62c:	e0cf      	b.n	800a7ce <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	2210      	movs	r2, #16
 800a632:	4013      	ands	r3, r2
 800a634:	d052      	beq.n	800a6dc <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2210      	movs	r2, #16
 800a63a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a63c:	d04e      	beq.n	800a6dc <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a642:	b29b      	uxth	r3, r3
 800a644:	2b00      	cmp	r3, #0
 800a646:	d12d      	bne.n	800a6a4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2241      	movs	r2, #65	@ 0x41
 800a64c:	5c9b      	ldrb	r3, [r3, r2]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b28      	cmp	r3, #40	@ 0x28
 800a652:	d10b      	bne.n	800a66c <I2C_Slave_ISR_IT+0x88>
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	2380      	movs	r3, #128	@ 0x80
 800a658:	049b      	lsls	r3, r3, #18
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d106      	bne.n	800a66c <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	0011      	movs	r1, r2
 800a664:	0018      	movs	r0, r3
 800a666:	f000 ff99 	bl	800b59c <I2C_ITListenCplt>
 800a66a:	e036      	b.n	800a6da <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2241      	movs	r2, #65	@ 0x41
 800a670:	5c9b      	ldrb	r3, [r3, r2]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b29      	cmp	r3, #41	@ 0x29
 800a676:	d110      	bne.n	800a69a <I2C_Slave_ISR_IT+0xb6>
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	4a59      	ldr	r2, [pc, #356]	@ (800a7e0 <I2C_Slave_ISR_IT+0x1fc>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d00c      	beq.n	800a69a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2210      	movs	r2, #16
 800a686:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	0018      	movs	r0, r3
 800a68c:	f001 f909 	bl	800b8a2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	0018      	movs	r0, r3
 800a694:	f000 fcc8 	bl	800b028 <I2C_ITSlaveSeqCplt>
 800a698:	e01f      	b.n	800a6da <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2210      	movs	r2, #16
 800a6a0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a6a2:	e091      	b.n	800a7c8 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2210      	movs	r2, #16
 800a6aa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6b0:	2204      	movs	r2, #4
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d005      	beq.n	800a6ca <I2C_Slave_ISR_IT+0xe6>
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	2380      	movs	r3, #128	@ 0x80
 800a6c2:	045b      	lsls	r3, r3, #17
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d000      	beq.n	800a6ca <I2C_Slave_ISR_IT+0xe6>
 800a6c8:	e07e      	b.n	800a7c8 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	0011      	movs	r1, r2
 800a6d2:	0018      	movs	r0, r3
 800a6d4:	f000 ffba 	bl	800b64c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a6d8:	e076      	b.n	800a7c8 <I2C_Slave_ISR_IT+0x1e4>
 800a6da:	e075      	b.n	800a7c8 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	2204      	movs	r2, #4
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	d02f      	beq.n	800a744 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2204      	movs	r2, #4
 800a6e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a6ea:	d02b      	beq.n	800a744 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d018      	beq.n	800a728 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a700:	b2d2      	uxtb	r2, r2
 800a702:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a712:	3b01      	subs	r3, #1
 800a714:	b29a      	uxth	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a71e:	b29b      	uxth	r3, r3
 800a720:	3b01      	subs	r3, #1
 800a722:	b29a      	uxth	r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d14c      	bne.n	800a7cc <I2C_Slave_ISR_IT+0x1e8>
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	4a2a      	ldr	r2, [pc, #168]	@ (800a7e0 <I2C_Slave_ISR_IT+0x1fc>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d048      	beq.n	800a7cc <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	0018      	movs	r0, r3
 800a73e:	f000 fc73 	bl	800b028 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a742:	e043      	b.n	800a7cc <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	2208      	movs	r2, #8
 800a748:	4013      	ands	r3, r2
 800a74a:	d00a      	beq.n	800a762 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2208      	movs	r2, #8
 800a750:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a752:	d006      	beq.n	800a762 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	0011      	movs	r1, r2
 800a75a:	0018      	movs	r0, r3
 800a75c:	f000 fb7e 	bl	800ae5c <I2C_ITAddrCplt>
 800a760:	e035      	b.n	800a7ce <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	2202      	movs	r2, #2
 800a766:	4013      	ands	r3, r2
 800a768:	d031      	beq.n	800a7ce <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2202      	movs	r2, #2
 800a76e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a770:	d02d      	beq.n	800a7ce <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a776:	b29b      	uxth	r3, r3
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d018      	beq.n	800a7ae <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a780:	781a      	ldrb	r2, [r3, #0]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78c:	1c5a      	adds	r2, r3, #1
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a796:	b29b      	uxth	r3, r3
 800a798:	3b01      	subs	r3, #1
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a7ac:	e00f      	b.n	800a7ce <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	2380      	movs	r3, #128	@ 0x80
 800a7b2:	045b      	lsls	r3, r3, #17
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d002      	beq.n	800a7be <I2C_Slave_ISR_IT+0x1da>
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d107      	bne.n	800a7ce <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	0018      	movs	r0, r3
 800a7c2:	f000 fc31 	bl	800b028 <I2C_ITSlaveSeqCplt>
 800a7c6:	e002      	b.n	800a7ce <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 800a7c8:	46c0      	nop			@ (mov r8, r8)
 800a7ca:	e000      	b.n	800a7ce <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 800a7cc:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2240      	movs	r2, #64	@ 0x40
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	0018      	movs	r0, r3
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	b006      	add	sp, #24
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	ffff0000 	.word	0xffff0000

0800a7e4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800a7e4:	b590      	push	{r4, r7, lr}
 800a7e6:	b089      	sub	sp, #36	@ 0x24
 800a7e8:	af02      	add	r7, sp, #8
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2240      	movs	r2, #64	@ 0x40
 800a7f4:	5c9b      	ldrb	r3, [r3, r2]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d101      	bne.n	800a7fe <I2C_Master_ISR_DMA+0x1a>
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	e0f5      	b.n	800a9ea <I2C_Master_ISR_DMA+0x206>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2240      	movs	r2, #64	@ 0x40
 800a802:	2101      	movs	r1, #1
 800a804:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	2210      	movs	r2, #16
 800a80a:	4013      	ands	r3, r2
 800a80c:	d017      	beq.n	800a83e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2210      	movs	r2, #16
 800a812:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a814:	d013      	beq.n	800a83e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2210      	movs	r2, #16
 800a81c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a822:	2204      	movs	r2, #4
 800a824:	431a      	orrs	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2120      	movs	r1, #32
 800a82e:	0018      	movs	r0, r3
 800a830:	f001 fb2a 	bl	800be88 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	0018      	movs	r0, r3
 800a838:	f001 f833 	bl	800b8a2 <I2C_Flush_TXDR>
 800a83c:	e0d0      	b.n	800a9e0 <I2C_Master_ISR_DMA+0x1fc>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2280      	movs	r2, #128	@ 0x80
 800a842:	4013      	ands	r3, r2
 800a844:	d100      	bne.n	800a848 <I2C_Master_ISR_DMA+0x64>
 800a846:	e08a      	b.n	800a95e <I2C_Master_ISR_DMA+0x17a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2240      	movs	r2, #64	@ 0x40
 800a84c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a84e:	d100      	bne.n	800a852 <I2C_Master_ISR_DMA+0x6e>
 800a850:	e085      	b.n	800a95e <I2C_Master_ISR_DMA+0x17a>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2140      	movs	r1, #64	@ 0x40
 800a85e:	438a      	bics	r2, r1
 800a860:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a866:	b29b      	uxth	r3, r3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d063      	beq.n	800a934 <I2C_Master_ISR_DMA+0x150>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	b29a      	uxth	r2, r3
 800a874:	2312      	movs	r3, #18
 800a876:	18fb      	adds	r3, r7, r3
 800a878:	0592      	lsls	r2, r2, #22
 800a87a:	0d92      	lsrs	r2, r2, #22
 800a87c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a882:	b29b      	uxth	r3, r3
 800a884:	2bff      	cmp	r3, #255	@ 0xff
 800a886:	d914      	bls.n	800a8b2 <I2C_Master_ISR_DMA+0xce>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	0c1b      	lsrs	r3, r3, #16
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2201      	movs	r2, #1
 800a894:	4013      	ands	r3, r2
 800a896:	b2db      	uxtb	r3, r3
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d103      	bne.n	800a8a4 <I2C_Master_ISR_DMA+0xc0>
        {
          hi2c->XferSize = 1U;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a8a2:	e002      	b.n	800a8aa <I2C_Master_ISR_DMA+0xc6>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	22ff      	movs	r2, #255	@ 0xff
 800a8a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800a8aa:	2380      	movs	r3, #128	@ 0x80
 800a8ac:	045b      	lsls	r3, r3, #17
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	e010      	b.n	800a8d4 <I2C_Master_ISR_DMA+0xf0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c0:	4a4c      	ldr	r2, [pc, #304]	@ (800a9f4 <I2C_Master_ISR_DMA+0x210>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d003      	beq.n	800a8ce <I2C_Master_ISR_DMA+0xea>
        {
          xfermode = hi2c->XferOptions;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ca:	617b      	str	r3, [r7, #20]
 800a8cc:	e002      	b.n	800a8d4 <I2C_Master_ISR_DMA+0xf0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800a8ce:	2380      	movs	r3, #128	@ 0x80
 800a8d0:	049b      	lsls	r3, r3, #18
 800a8d2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	697c      	ldr	r4, [r7, #20]
 800a8dc:	2312      	movs	r3, #18
 800a8de:	18fb      	adds	r3, r7, r3
 800a8e0:	8819      	ldrh	r1, [r3, #0]
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	0023      	movs	r3, r4
 800a8ea:	f001 fa93 	bl	800be14 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2241      	movs	r2, #65	@ 0x41
 800a904:	5c9b      	ldrb	r3, [r3, r2]
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b22      	cmp	r3, #34	@ 0x22
 800a90a:	d109      	bne.n	800a920 <I2C_Master_ISR_DMA+0x13c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2180      	movs	r1, #128	@ 0x80
 800a918:	0209      	lsls	r1, r1, #8
 800a91a:	430a      	orrs	r2, r1
 800a91c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a91e:	e05f      	b.n	800a9e0 <I2C_Master_ISR_DMA+0x1fc>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2180      	movs	r1, #128	@ 0x80
 800a92c:	01c9      	lsls	r1, r1, #7
 800a92e:	430a      	orrs	r2, r1
 800a930:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a932:	e055      	b.n	800a9e0 <I2C_Master_ISR_DMA+0x1fc>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685a      	ldr	r2, [r3, #4]
 800a93a:	2380      	movs	r3, #128	@ 0x80
 800a93c:	049b      	lsls	r3, r3, #18
 800a93e:	401a      	ands	r2, r3
 800a940:	2380      	movs	r3, #128	@ 0x80
 800a942:	049b      	lsls	r3, r3, #18
 800a944:	429a      	cmp	r2, r3
 800a946:	d004      	beq.n	800a952 <I2C_Master_ISR_DMA+0x16e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	0018      	movs	r0, r3
 800a94c:	f000 fb2a 	bl	800afa4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800a950:	e046      	b.n	800a9e0 <I2C_Master_ISR_DMA+0x1fc>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2140      	movs	r1, #64	@ 0x40
 800a956:	0018      	movs	r0, r3
 800a958:	f000 fe78 	bl	800b64c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a95c:	e040      	b.n	800a9e0 <I2C_Master_ISR_DMA+0x1fc>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	2240      	movs	r2, #64	@ 0x40
 800a962:	4013      	ands	r3, r2
 800a964:	d02c      	beq.n	800a9c0 <I2C_Master_ISR_DMA+0x1dc>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2240      	movs	r2, #64	@ 0x40
 800a96a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a96c:	d028      	beq.n	800a9c0 <I2C_Master_ISR_DMA+0x1dc>
  {
    if (hi2c->XferCount == 0U)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a972:	b29b      	uxth	r3, r3
 800a974:	2b00      	cmp	r3, #0
 800a976:	d11d      	bne.n	800a9b4 <I2C_Master_ISR_DMA+0x1d0>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	685a      	ldr	r2, [r3, #4]
 800a97e:	2380      	movs	r3, #128	@ 0x80
 800a980:	049b      	lsls	r3, r3, #18
 800a982:	401a      	ands	r2, r3
 800a984:	2380      	movs	r3, #128	@ 0x80
 800a986:	049b      	lsls	r3, r3, #18
 800a988:	429a      	cmp	r2, r3
 800a98a:	d028      	beq.n	800a9de <I2C_Master_ISR_DMA+0x1fa>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a990:	4a18      	ldr	r2, [pc, #96]	@ (800a9f4 <I2C_Master_ISR_DMA+0x210>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d109      	bne.n	800a9aa <I2C_Master_ISR_DMA+0x1c6>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2180      	movs	r1, #128	@ 0x80
 800a9a2:	01c9      	lsls	r1, r1, #7
 800a9a4:	430a      	orrs	r2, r1
 800a9a6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800a9a8:	e019      	b.n	800a9de <I2C_Master_ISR_DMA+0x1fa>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	f000 faf9 	bl	800afa4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800a9b2:	e014      	b.n	800a9de <I2C_Master_ISR_DMA+0x1fa>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2140      	movs	r1, #64	@ 0x40
 800a9b8:	0018      	movs	r0, r3
 800a9ba:	f000 fe47 	bl	800b64c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a9be:	e00e      	b.n	800a9de <I2C_Master_ISR_DMA+0x1fa>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	d00b      	beq.n	800a9e0 <I2C_Master_ISR_DMA+0x1fc>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2220      	movs	r2, #32
 800a9cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a9ce:	d007      	beq.n	800a9e0 <I2C_Master_ISR_DMA+0x1fc>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	0011      	movs	r1, r2
 800a9d6:	0018      	movs	r0, r3
 800a9d8:	f000 fb8a 	bl	800b0f0 <I2C_ITMasterCplt>
 800a9dc:	e000      	b.n	800a9e0 <I2C_Master_ISR_DMA+0x1fc>
    if (hi2c->XferCount == 0U)
 800a9de:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2240      	movs	r2, #64	@ 0x40
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	b007      	add	sp, #28
 800a9f0:	bd90      	pop	{r4, r7, pc}
 800a9f2:	46c0      	nop			@ (mov r8, r8)
 800a9f4:	ffff0000 	.word	0xffff0000

0800a9f8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800a9f8:	b590      	push	{r4, r7, lr}
 800a9fa:	b089      	sub	sp, #36	@ 0x24
 800a9fc:	af02      	add	r7, sp, #8
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800aa04:	4b9f      	ldr	r3, [pc, #636]	@ (800ac84 <I2C_Mem_ISR_DMA+0x28c>)
 800aa06:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2240      	movs	r2, #64	@ 0x40
 800aa0c:	5c9b      	ldrb	r3, [r3, r2]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d101      	bne.n	800aa16 <I2C_Mem_ISR_DMA+0x1e>
 800aa12:	2302      	movs	r3, #2
 800aa14:	e132      	b.n	800ac7c <I2C_Mem_ISR_DMA+0x284>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2240      	movs	r2, #64	@ 0x40
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2210      	movs	r2, #16
 800aa22:	4013      	ands	r3, r2
 800aa24:	d017      	beq.n	800aa56 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2210      	movs	r2, #16
 800aa2a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800aa2c:	d013      	beq.n	800aa56 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2210      	movs	r2, #16
 800aa34:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa3a:	2204      	movs	r2, #4
 800aa3c:	431a      	orrs	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2120      	movs	r1, #32
 800aa46:	0018      	movs	r0, r3
 800aa48:	f001 fa1e 	bl	800be88 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	0018      	movs	r0, r3
 800aa50:	f000 ff27 	bl	800b8a2 <I2C_Flush_TXDR>
 800aa54:	e10d      	b.n	800ac72 <I2C_Mem_ISR_DMA+0x27a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	2202      	movs	r2, #2
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	d00d      	beq.n	800aa7a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2202      	movs	r2, #2
 800aa62:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800aa64:	d009      	beq.n	800aa7a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800aa6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2201      	movs	r2, #1
 800aa74:	4252      	negs	r2, r2
 800aa76:	651a      	str	r2, [r3, #80]	@ 0x50
 800aa78:	e0fb      	b.n	800ac72 <I2C_Mem_ISR_DMA+0x27a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2280      	movs	r2, #128	@ 0x80
 800aa7e:	4013      	ands	r3, r2
 800aa80:	d100      	bne.n	800aa84 <I2C_Mem_ISR_DMA+0x8c>
 800aa82:	e072      	b.n	800ab6a <I2C_Mem_ISR_DMA+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2240      	movs	r2, #64	@ 0x40
 800aa88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800aa8a:	d100      	bne.n	800aa8e <I2C_Mem_ISR_DMA+0x96>
 800aa8c:	e06d      	b.n	800ab6a <I2C_Mem_ISR_DMA+0x172>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2101      	movs	r1, #1
 800aa92:	0018      	movs	r0, r3
 800aa94:	f001 fa82 	bl	800bf9c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2110      	movs	r1, #16
 800aa9c:	0018      	movs	r0, r3
 800aa9e:	f001 f9f3 	bl	800be88 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d058      	beq.n	800ab5e <I2C_Mem_ISR_DMA+0x166>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	2bff      	cmp	r3, #255	@ 0xff
 800aab4:	d91e      	bls.n	800aaf4 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	0c1b      	lsrs	r3, r3, #16
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2201      	movs	r2, #1
 800aac2:	4013      	ands	r3, r2
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d103      	bne.n	800aad2 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2201      	movs	r2, #1
 800aace:	851a      	strh	r2, [r3, #40]	@ 0x28
 800aad0:	e002      	b.n	800aad8 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	22ff      	movs	r2, #255	@ 0xff
 800aad6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aadc:	b299      	uxth	r1, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	2380      	movs	r3, #128	@ 0x80
 800aae6:	045b      	lsls	r3, r3, #17
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	2400      	movs	r4, #0
 800aaec:	9400      	str	r4, [sp, #0]
 800aaee:	f001 f991 	bl	800be14 <I2C_TransferConfig>
 800aaf2:	e011      	b.n	800ab18 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab02:	b299      	uxth	r1, r3
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	2380      	movs	r3, #128	@ 0x80
 800ab0c:	049b      	lsls	r3, r3, #18
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	2400      	movs	r4, #0
 800ab12:	9400      	str	r4, [sp, #0]
 800ab14:	f001 f97e 	bl	800be14 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2241      	movs	r2, #65	@ 0x41
 800ab2e:	5c9b      	ldrb	r3, [r3, r2]
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b22      	cmp	r3, #34	@ 0x22
 800ab34:	d109      	bne.n	800ab4a <I2C_Mem_ISR_DMA+0x152>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2180      	movs	r1, #128	@ 0x80
 800ab42:	0209      	lsls	r1, r1, #8
 800ab44:	430a      	orrs	r2, r1
 800ab46:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ab48:	e093      	b.n	800ac72 <I2C_Mem_ISR_DMA+0x27a>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2180      	movs	r1, #128	@ 0x80
 800ab56:	01c9      	lsls	r1, r1, #7
 800ab58:	430a      	orrs	r2, r1
 800ab5a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ab5c:	e089      	b.n	800ac72 <I2C_Mem_ISR_DMA+0x27a>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2140      	movs	r1, #64	@ 0x40
 800ab62:	0018      	movs	r0, r3
 800ab64:	f000 fd72 	bl	800b64c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800ab68:	e083      	b.n	800ac72 <I2C_Mem_ISR_DMA+0x27a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2240      	movs	r2, #64	@ 0x40
 800ab6e:	4013      	ands	r3, r2
 800ab70:	d100      	bne.n	800ab74 <I2C_Mem_ISR_DMA+0x17c>
 800ab72:	e070      	b.n	800ac56 <I2C_Mem_ISR_DMA+0x25e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2240      	movs	r2, #64	@ 0x40
 800ab78:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800ab7a:	d06c      	beq.n	800ac56 <I2C_Mem_ISR_DMA+0x25e>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2101      	movs	r1, #1
 800ab80:	0018      	movs	r0, r3
 800ab82:	f001 fa0b 	bl	800bf9c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2110      	movs	r1, #16
 800ab8a:	0018      	movs	r0, r3
 800ab8c:	f001 f97c 	bl	800be88 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2241      	movs	r2, #65	@ 0x41
 800ab94:	5c9b      	ldrb	r3, [r3, r2]
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b22      	cmp	r3, #34	@ 0x22
 800ab9a:	d101      	bne.n	800aba0 <I2C_Mem_ISR_DMA+0x1a8>
    {
      direction = I2C_GENERATE_START_READ;
 800ab9c:	4b3a      	ldr	r3, [pc, #232]	@ (800ac88 <I2C_Mem_ISR_DMA+0x290>)
 800ab9e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	2bff      	cmp	r3, #255	@ 0xff
 800aba8:	d91f      	bls.n	800abea <I2C_Mem_ISR_DMA+0x1f2>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	0c1b      	lsrs	r3, r3, #16
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	2201      	movs	r2, #1
 800abb6:	4013      	ands	r3, r2
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d103      	bne.n	800abc6 <I2C_Mem_ISR_DMA+0x1ce>
      {
        hi2c->XferSize = 1U;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2201      	movs	r2, #1
 800abc2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800abc4:	e002      	b.n	800abcc <I2C_Mem_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	22ff      	movs	r2, #255	@ 0xff
 800abca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abd0:	b299      	uxth	r1, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	2380      	movs	r3, #128	@ 0x80
 800abda:	045c      	lsls	r4, r3, #17
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	0023      	movs	r3, r4
 800abe4:	f001 f916 	bl	800be14 <I2C_TransferConfig>
 800abe8:	e012      	b.n	800ac10 <I2C_Mem_ISR_DMA+0x218>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abee:	b29a      	uxth	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abf8:	b299      	uxth	r1, r3
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abfe:	b2da      	uxtb	r2, r3
 800ac00:	2380      	movs	r3, #128	@ 0x80
 800ac02:	049c      	lsls	r4, r3, #18
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	0023      	movs	r3, r4
 800ac0c:	f001 f902 	bl	800be14 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2241      	movs	r2, #65	@ 0x41
 800ac26:	5c9b      	ldrb	r3, [r3, r2]
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2b22      	cmp	r3, #34	@ 0x22
 800ac2c:	d109      	bne.n	800ac42 <I2C_Mem_ISR_DMA+0x24a>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2180      	movs	r1, #128	@ 0x80
 800ac3a:	0209      	lsls	r1, r1, #8
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ac40:	e017      	b.n	800ac72 <I2C_Mem_ISR_DMA+0x27a>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2180      	movs	r1, #128	@ 0x80
 800ac4e:	01c9      	lsls	r1, r1, #7
 800ac50:	430a      	orrs	r2, r1
 800ac52:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ac54:	e00d      	b.n	800ac72 <I2C_Mem_ISR_DMA+0x27a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2220      	movs	r2, #32
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	d009      	beq.n	800ac72 <I2C_Mem_ISR_DMA+0x27a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2220      	movs	r2, #32
 800ac62:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ac64:	d005      	beq.n	800ac72 <I2C_Mem_ISR_DMA+0x27a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	0011      	movs	r1, r2
 800ac6c:	0018      	movs	r0, r3
 800ac6e:	f000 fa3f 	bl	800b0f0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2240      	movs	r2, #64	@ 0x40
 800ac76:	2100      	movs	r1, #0
 800ac78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	0018      	movs	r0, r3
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	b007      	add	sp, #28
 800ac82:	bd90      	pop	{r4, r7, pc}
 800ac84:	80002000 	.word	0x80002000
 800ac88:	80002400 	.word	0x80002400

0800ac8c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b088      	sub	sp, #32
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac9c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2240      	movs	r2, #64	@ 0x40
 800aca6:	5c9b      	ldrb	r3, [r3, r2]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d101      	bne.n	800acb0 <I2C_Slave_ISR_DMA+0x24>
 800acac:	2302      	movs	r3, #2
 800acae:	e0ce      	b.n	800ae4e <I2C_Slave_ISR_DMA+0x1c2>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2240      	movs	r2, #64	@ 0x40
 800acb4:	2101      	movs	r1, #1
 800acb6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	2220      	movs	r2, #32
 800acbc:	4013      	ands	r3, r2
 800acbe:	d00a      	beq.n	800acd6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2220      	movs	r2, #32
 800acc4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800acc6:	d006      	beq.n	800acd6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	0011      	movs	r1, r2
 800acce:	0018      	movs	r0, r3
 800acd0:	f000 fadc 	bl	800b28c <I2C_ITSlaveCplt>
 800acd4:	e0b6      	b.n	800ae44 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2210      	movs	r2, #16
 800acda:	4013      	ands	r3, r2
 800acdc:	d100      	bne.n	800ace0 <I2C_Slave_ISR_DMA+0x54>
 800acde:	e0a3      	b.n	800ae28 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2210      	movs	r2, #16
 800ace4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ace6:	d100      	bne.n	800acea <I2C_Slave_ISR_DMA+0x5e>
 800ace8:	e09e      	b.n	800ae28 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	2380      	movs	r3, #128	@ 0x80
 800acee:	01db      	lsls	r3, r3, #7
 800acf0:	4013      	ands	r3, r2
 800acf2:	d105      	bne.n	800ad00 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	2380      	movs	r3, #128	@ 0x80
 800acf8:	021b      	lsls	r3, r3, #8
 800acfa:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800acfc:	d100      	bne.n	800ad00 <I2C_Slave_ISR_DMA+0x74>
 800acfe:	e08c      	b.n	800ae1a <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00c      	beq.n	800ad22 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	2380      	movs	r3, #128	@ 0x80
 800ad0c:	021b      	lsls	r3, r3, #8
 800ad0e:	4013      	ands	r3, r2
 800ad10:	d007      	beq.n	800ad22 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00c      	beq.n	800ad44 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	2380      	movs	r3, #128	@ 0x80
 800ad2e:	01db      	lsls	r3, r3, #7
 800ad30:	4013      	ands	r3, r2
 800ad32:	d007      	beq.n	800ad44 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 800ad40:	2301      	movs	r3, #1
 800ad42:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d12d      	bne.n	800ada6 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2241      	movs	r2, #65	@ 0x41
 800ad4e:	5c9b      	ldrb	r3, [r3, r2]
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b28      	cmp	r3, #40	@ 0x28
 800ad54:	d10b      	bne.n	800ad6e <I2C_Slave_ISR_DMA+0xe2>
 800ad56:	69ba      	ldr	r2, [r7, #24]
 800ad58:	2380      	movs	r3, #128	@ 0x80
 800ad5a:	049b      	lsls	r3, r3, #18
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d106      	bne.n	800ad6e <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	0011      	movs	r1, r2
 800ad66:	0018      	movs	r0, r3
 800ad68:	f000 fc18 	bl	800b59c <I2C_ITListenCplt>
 800ad6c:	e054      	b.n	800ae18 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2241      	movs	r2, #65	@ 0x41
 800ad72:	5c9b      	ldrb	r3, [r3, r2]
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b29      	cmp	r3, #41	@ 0x29
 800ad78:	d110      	bne.n	800ad9c <I2C_Slave_ISR_DMA+0x110>
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	4a36      	ldr	r2, [pc, #216]	@ (800ae58 <I2C_Slave_ISR_DMA+0x1cc>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d00c      	beq.n	800ad9c <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2210      	movs	r2, #16
 800ad88:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	f000 fd88 	bl	800b8a2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	0018      	movs	r0, r3
 800ad96:	f000 f947 	bl	800b028 <I2C_ITSlaveSeqCplt>
 800ad9a:	e03d      	b.n	800ae18 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2210      	movs	r2, #16
 800ada2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ada4:	e03e      	b.n	800ae24 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2210      	movs	r2, #16
 800adac:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb2:	2204      	movs	r2, #4
 800adb4:	431a      	orrs	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800adba:	2317      	movs	r3, #23
 800adbc:	18fb      	adds	r3, r7, r3
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	2141      	movs	r1, #65	@ 0x41
 800adc2:	5c52      	ldrb	r2, [r2, r1]
 800adc4:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d004      	beq.n	800add6 <I2C_Slave_ISR_DMA+0x14a>
 800adcc:	69ba      	ldr	r2, [r7, #24]
 800adce:	2380      	movs	r3, #128	@ 0x80
 800add0:	045b      	lsls	r3, r3, #17
 800add2:	429a      	cmp	r2, r3
 800add4:	d126      	bne.n	800ae24 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800add6:	2217      	movs	r2, #23
 800add8:	18bb      	adds	r3, r7, r2
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	2b21      	cmp	r3, #33	@ 0x21
 800adde:	d003      	beq.n	800ade8 <I2C_Slave_ISR_DMA+0x15c>
 800ade0:	18bb      	adds	r3, r7, r2
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	2b29      	cmp	r3, #41	@ 0x29
 800ade6:	d103      	bne.n	800adf0 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2221      	movs	r2, #33	@ 0x21
 800adec:	631a      	str	r2, [r3, #48]	@ 0x30
 800adee:	e00b      	b.n	800ae08 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800adf0:	2217      	movs	r2, #23
 800adf2:	18bb      	adds	r3, r7, r2
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	2b22      	cmp	r3, #34	@ 0x22
 800adf8:	d003      	beq.n	800ae02 <I2C_Slave_ISR_DMA+0x176>
 800adfa:	18bb      	adds	r3, r7, r2
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae00:	d102      	bne.n	800ae08 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2222      	movs	r2, #34	@ 0x22
 800ae06:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	0011      	movs	r1, r2
 800ae10:	0018      	movs	r0, r3
 800ae12:	f000 fc1b 	bl	800b64c <I2C_ITError>
      if (treatdmanack == 1U)
 800ae16:	e005      	b.n	800ae24 <I2C_Slave_ISR_DMA+0x198>
 800ae18:	e004      	b.n	800ae24 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2210      	movs	r2, #16
 800ae20:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ae22:	e00f      	b.n	800ae44 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 800ae24:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ae26:	e00d      	b.n	800ae44 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2208      	movs	r2, #8
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	d009      	beq.n	800ae44 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2208      	movs	r2, #8
 800ae34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ae36:	d005      	beq.n	800ae44 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	0011      	movs	r1, r2
 800ae3e:	0018      	movs	r0, r3
 800ae40:	f000 f80c 	bl	800ae5c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2240      	movs	r2, #64	@ 0x40
 800ae48:	2100      	movs	r1, #0
 800ae4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	0018      	movs	r0, r3
 800ae50:	46bd      	mov	sp, r7
 800ae52:	b008      	add	sp, #32
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	46c0      	nop			@ (mov r8, r8)
 800ae58:	ffff0000 	.word	0xffff0000

0800ae5c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ae5c:	b5b0      	push	{r4, r5, r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2241      	movs	r2, #65	@ 0x41
 800ae6a:	5c9b      	ldrb	r3, [r3, r2]
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	001a      	movs	r2, r3
 800ae70:	2328      	movs	r3, #40	@ 0x28
 800ae72:	4013      	ands	r3, r2
 800ae74:	2b28      	cmp	r3, #40	@ 0x28
 800ae76:	d000      	beq.n	800ae7a <I2C_ITAddrCplt+0x1e>
 800ae78:	e088      	b.n	800af8c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	0c1b      	lsrs	r3, r3, #16
 800ae82:	b2da      	uxtb	r2, r3
 800ae84:	250f      	movs	r5, #15
 800ae86:	197b      	adds	r3, r7, r5
 800ae88:	2101      	movs	r1, #1
 800ae8a:	400a      	ands	r2, r1
 800ae8c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	0c1b      	lsrs	r3, r3, #16
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	200c      	movs	r0, #12
 800ae9a:	183b      	adds	r3, r7, r0
 800ae9c:	21fe      	movs	r1, #254	@ 0xfe
 800ae9e:	400a      	ands	r2, r1
 800aea0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	240a      	movs	r4, #10
 800aeac:	193b      	adds	r3, r7, r4
 800aeae:	0592      	lsls	r2, r2, #22
 800aeb0:	0d92      	lsrs	r2, r2, #22
 800aeb2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	b29a      	uxth	r2, r3
 800aebc:	2308      	movs	r3, #8
 800aebe:	18fb      	adds	r3, r7, r3
 800aec0:	21fe      	movs	r1, #254	@ 0xfe
 800aec2:	400a      	ands	r2, r1
 800aec4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d148      	bne.n	800af60 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800aece:	0021      	movs	r1, r4
 800aed0:	187b      	adds	r3, r7, r1
 800aed2:	881b      	ldrh	r3, [r3, #0]
 800aed4:	09db      	lsrs	r3, r3, #7
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	183b      	adds	r3, r7, r0
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	4053      	eors	r3, r2
 800aede:	b29b      	uxth	r3, r3
 800aee0:	001a      	movs	r2, r3
 800aee2:	2306      	movs	r3, #6
 800aee4:	4013      	ands	r3, r2
 800aee6:	d120      	bne.n	800af2a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800aee8:	183b      	adds	r3, r7, r0
 800aeea:	187a      	adds	r2, r7, r1
 800aeec:	8812      	ldrh	r2, [r2, #0]
 800aeee:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aef4:	1c5a      	adds	r2, r3, #1
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d14c      	bne.n	800af9c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2208      	movs	r2, #8
 800af0e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2240      	movs	r2, #64	@ 0x40
 800af14:	2100      	movs	r1, #0
 800af16:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800af18:	183b      	adds	r3, r7, r0
 800af1a:	881a      	ldrh	r2, [r3, #0]
 800af1c:	197b      	adds	r3, r7, r5
 800af1e:	7819      	ldrb	r1, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	0018      	movs	r0, r3
 800af24:	f7ff fb25 	bl	800a572 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800af28:	e038      	b.n	800af9c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800af2a:	240c      	movs	r4, #12
 800af2c:	193b      	adds	r3, r7, r4
 800af2e:	2208      	movs	r2, #8
 800af30:	18ba      	adds	r2, r7, r2
 800af32:	8812      	ldrh	r2, [r2, #0]
 800af34:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800af36:	2380      	movs	r3, #128	@ 0x80
 800af38:	021a      	lsls	r2, r3, #8
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	0011      	movs	r1, r2
 800af3e:	0018      	movs	r0, r3
 800af40:	f001 f82c 	bl	800bf9c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2240      	movs	r2, #64	@ 0x40
 800af48:	2100      	movs	r1, #0
 800af4a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800af4c:	193b      	adds	r3, r7, r4
 800af4e:	881a      	ldrh	r2, [r3, #0]
 800af50:	230f      	movs	r3, #15
 800af52:	18fb      	adds	r3, r7, r3
 800af54:	7819      	ldrb	r1, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	0018      	movs	r0, r3
 800af5a:	f7ff fb0a 	bl	800a572 <HAL_I2C_AddrCallback>
}
 800af5e:	e01d      	b.n	800af9c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800af60:	2380      	movs	r3, #128	@ 0x80
 800af62:	021a      	lsls	r2, r3, #8
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	0011      	movs	r1, r2
 800af68:	0018      	movs	r0, r3
 800af6a:	f001 f817 	bl	800bf9c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2240      	movs	r2, #64	@ 0x40
 800af72:	2100      	movs	r1, #0
 800af74:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800af76:	230c      	movs	r3, #12
 800af78:	18fb      	adds	r3, r7, r3
 800af7a:	881a      	ldrh	r2, [r3, #0]
 800af7c:	230f      	movs	r3, #15
 800af7e:	18fb      	adds	r3, r7, r3
 800af80:	7819      	ldrb	r1, [r3, #0]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	0018      	movs	r0, r3
 800af86:	f7ff faf4 	bl	800a572 <HAL_I2C_AddrCallback>
}
 800af8a:	e007      	b.n	800af9c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2208      	movs	r2, #8
 800af92:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2240      	movs	r2, #64	@ 0x40
 800af98:	2100      	movs	r1, #0
 800af9a:	5499      	strb	r1, [r3, r2]
}
 800af9c:	46c0      	nop			@ (mov r8, r8)
 800af9e:	46bd      	mov	sp, r7
 800afa0:	b004      	add	sp, #16
 800afa2:	bdb0      	pop	{r4, r5, r7, pc}

0800afa4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2242      	movs	r2, #66	@ 0x42
 800afb0:	2100      	movs	r1, #0
 800afb2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2241      	movs	r2, #65	@ 0x41
 800afb8:	5c9b      	ldrb	r3, [r3, r2]
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b21      	cmp	r3, #33	@ 0x21
 800afbe:	d117      	bne.n	800aff0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2241      	movs	r2, #65	@ 0x41
 800afc4:	2120      	movs	r1, #32
 800afc6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2211      	movs	r2, #17
 800afcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2101      	movs	r1, #1
 800afd8:	0018      	movs	r0, r3
 800afda:	f000 ffdf 	bl	800bf9c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2240      	movs	r2, #64	@ 0x40
 800afe2:	2100      	movs	r1, #0
 800afe4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	0018      	movs	r0, r3
 800afea:	f7ff faaa 	bl	800a542 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800afee:	e016      	b.n	800b01e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2241      	movs	r2, #65	@ 0x41
 800aff4:	2120      	movs	r1, #32
 800aff6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2212      	movs	r2, #18
 800affc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2102      	movs	r1, #2
 800b008:	0018      	movs	r0, r3
 800b00a:	f000 ffc7 	bl	800bf9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2240      	movs	r2, #64	@ 0x40
 800b012:	2100      	movs	r1, #0
 800b014:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	0018      	movs	r0, r3
 800b01a:	f7ff fa9a 	bl	800a552 <HAL_I2C_MasterRxCpltCallback>
}
 800b01e:	46c0      	nop			@ (mov r8, r8)
 800b020:	46bd      	mov	sp, r7
 800b022:	b002      	add	sp, #8
 800b024:	bd80      	pop	{r7, pc}
	...

0800b028 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2242      	movs	r2, #66	@ 0x42
 800b03c:	2100      	movs	r1, #0
 800b03e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	2380      	movs	r3, #128	@ 0x80
 800b044:	01db      	lsls	r3, r3, #7
 800b046:	4013      	ands	r3, r2
 800b048:	d008      	beq.n	800b05c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4924      	ldr	r1, [pc, #144]	@ (800b0e8 <I2C_ITSlaveSeqCplt+0xc0>)
 800b056:	400a      	ands	r2, r1
 800b058:	601a      	str	r2, [r3, #0]
 800b05a:	e00c      	b.n	800b076 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	2380      	movs	r3, #128	@ 0x80
 800b060:	021b      	lsls	r3, r3, #8
 800b062:	4013      	ands	r3, r2
 800b064:	d007      	beq.n	800b076 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	491e      	ldr	r1, [pc, #120]	@ (800b0ec <I2C_ITSlaveSeqCplt+0xc4>)
 800b072:	400a      	ands	r2, r1
 800b074:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2241      	movs	r2, #65	@ 0x41
 800b07a:	5c9b      	ldrb	r3, [r3, r2]
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b29      	cmp	r3, #41	@ 0x29
 800b080:	d114      	bne.n	800b0ac <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2241      	movs	r2, #65	@ 0x41
 800b086:	2128      	movs	r1, #40	@ 0x28
 800b088:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2221      	movs	r2, #33	@ 0x21
 800b08e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2101      	movs	r1, #1
 800b094:	0018      	movs	r0, r3
 800b096:	f000 ff81 	bl	800bf9c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2240      	movs	r2, #64	@ 0x40
 800b09e:	2100      	movs	r1, #0
 800b0a0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	f7ff fa5c 	bl	800a562 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b0aa:	e019      	b.n	800b0e0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2241      	movs	r2, #65	@ 0x41
 800b0b0:	5c9b      	ldrb	r3, [r3, r2]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0b6:	d113      	bne.n	800b0e0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2241      	movs	r2, #65	@ 0x41
 800b0bc:	2128      	movs	r1, #40	@ 0x28
 800b0be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2222      	movs	r2, #34	@ 0x22
 800b0c4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2102      	movs	r1, #2
 800b0ca:	0018      	movs	r0, r3
 800b0cc:	f000 ff66 	bl	800bf9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2240      	movs	r2, #64	@ 0x40
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	0018      	movs	r0, r3
 800b0dc:	f7fa fb78 	bl	80057d0 <HAL_I2C_SlaveRxCpltCallback>
}
 800b0e0:	46c0      	nop			@ (mov r8, r8)
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	b004      	add	sp, #16
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	ffffbfff 	.word	0xffffbfff
 800b0ec:	ffff7fff 	.word	0xffff7fff

0800b0f0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2220      	movs	r2, #32
 800b104:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2241      	movs	r2, #65	@ 0x41
 800b10a:	5c9b      	ldrb	r3, [r3, r2]
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b21      	cmp	r3, #33	@ 0x21
 800b110:	d108      	bne.n	800b124 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2101      	movs	r1, #1
 800b116:	0018      	movs	r0, r3
 800b118:	f000 ff40 	bl	800bf9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2211      	movs	r2, #17
 800b120:	631a      	str	r2, [r3, #48]	@ 0x30
 800b122:	e00d      	b.n	800b140 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2241      	movs	r2, #65	@ 0x41
 800b128:	5c9b      	ldrb	r3, [r3, r2]
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	2b22      	cmp	r3, #34	@ 0x22
 800b12e:	d107      	bne.n	800b140 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2102      	movs	r1, #2
 800b134:	0018      	movs	r0, r3
 800b136:	f000 ff31 	bl	800bf9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2212      	movs	r2, #18
 800b13e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	685a      	ldr	r2, [r3, #4]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	494e      	ldr	r1, [pc, #312]	@ (800b284 <I2C_ITMasterCplt+0x194>)
 800b14c:	400a      	ands	r2, r1
 800b14e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a4b      	ldr	r2, [pc, #300]	@ (800b288 <I2C_ITMasterCplt+0x198>)
 800b15a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	2210      	movs	r2, #16
 800b160:	4013      	ands	r3, r2
 800b162:	d009      	beq.n	800b178 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2210      	movs	r2, #16
 800b16a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b170:	2204      	movs	r2, #4
 800b172:	431a      	orrs	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2241      	movs	r2, #65	@ 0x41
 800b17c:	5c9b      	ldrb	r3, [r3, r2]
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b60      	cmp	r3, #96	@ 0x60
 800b182:	d109      	bne.n	800b198 <I2C_ITMasterCplt+0xa8>
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	2204      	movs	r2, #4
 800b188:	4013      	ands	r3, r2
 800b18a:	d005      	beq.n	800b198 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b192:	b2db      	uxtb	r3, r3
 800b194:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800b196:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	0018      	movs	r0, r3
 800b19c:	f000 fb81 	bl	800b8a2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1a4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2241      	movs	r2, #65	@ 0x41
 800b1aa:	5c9b      	ldrb	r3, [r3, r2]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b60      	cmp	r3, #96	@ 0x60
 800b1b0:	d002      	beq.n	800b1b8 <I2C_ITMasterCplt+0xc8>
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d007      	beq.n	800b1c8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	0011      	movs	r1, r2
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	f000 fa43 	bl	800b64c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b1c6:	e058      	b.n	800b27a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2241      	movs	r2, #65	@ 0x41
 800b1cc:	5c9b      	ldrb	r3, [r3, r2]
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	2b21      	cmp	r3, #33	@ 0x21
 800b1d2:	d126      	bne.n	800b222 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2241      	movs	r2, #65	@ 0x41
 800b1d8:	2120      	movs	r1, #32
 800b1da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2242      	movs	r2, #66	@ 0x42
 800b1e6:	5c9b      	ldrb	r3, [r3, r2]
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b40      	cmp	r3, #64	@ 0x40
 800b1ec:	d10c      	bne.n	800b208 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2242      	movs	r2, #66	@ 0x42
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2240      	movs	r2, #64	@ 0x40
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	0018      	movs	r0, r3
 800b202:	f7ff f9ce 	bl	800a5a2 <HAL_I2C_MemTxCpltCallback>
}
 800b206:	e038      	b.n	800b27a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2242      	movs	r2, #66	@ 0x42
 800b20c:	2100      	movs	r1, #0
 800b20e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2240      	movs	r2, #64	@ 0x40
 800b214:	2100      	movs	r1, #0
 800b216:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	0018      	movs	r0, r3
 800b21c:	f7ff f991 	bl	800a542 <HAL_I2C_MasterTxCpltCallback>
}
 800b220:	e02b      	b.n	800b27a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2241      	movs	r2, #65	@ 0x41
 800b226:	5c9b      	ldrb	r3, [r3, r2]
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b22      	cmp	r3, #34	@ 0x22
 800b22c:	d125      	bne.n	800b27a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2241      	movs	r2, #65	@ 0x41
 800b232:	2120      	movs	r1, #32
 800b234:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2242      	movs	r2, #66	@ 0x42
 800b240:	5c9b      	ldrb	r3, [r3, r2]
 800b242:	b2db      	uxtb	r3, r3
 800b244:	2b40      	cmp	r3, #64	@ 0x40
 800b246:	d10c      	bne.n	800b262 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2242      	movs	r2, #66	@ 0x42
 800b24c:	2100      	movs	r1, #0
 800b24e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2240      	movs	r2, #64	@ 0x40
 800b254:	2100      	movs	r1, #0
 800b256:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	0018      	movs	r0, r3
 800b25c:	f7ff f9a9 	bl	800a5b2 <HAL_I2C_MemRxCpltCallback>
}
 800b260:	e00b      	b.n	800b27a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2242      	movs	r2, #66	@ 0x42
 800b266:	2100      	movs	r1, #0
 800b268:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2240      	movs	r2, #64	@ 0x40
 800b26e:	2100      	movs	r1, #0
 800b270:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	0018      	movs	r0, r3
 800b276:	f7ff f96c 	bl	800a552 <HAL_I2C_MasterRxCpltCallback>
}
 800b27a:	46c0      	nop			@ (mov r8, r8)
 800b27c:	46bd      	mov	sp, r7
 800b27e:	b006      	add	sp, #24
 800b280:	bd80      	pop	{r7, pc}
 800b282:	46c0      	nop			@ (mov r8, r8)
 800b284:	fe00e800 	.word	0xfe00e800
 800b288:	ffff0000 	.word	0xffff0000

0800b28c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b2a8:	200b      	movs	r0, #11
 800b2aa:	183b      	adds	r3, r7, r0
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	2141      	movs	r1, #65	@ 0x41
 800b2b0:	5c52      	ldrb	r2, [r2, r1]
 800b2b2:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b2bc:	183b      	adds	r3, r7, r0
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	2b21      	cmp	r3, #33	@ 0x21
 800b2c2:	d003      	beq.n	800b2cc <I2C_ITSlaveCplt+0x40>
 800b2c4:	183b      	adds	r3, r7, r0
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	2b29      	cmp	r3, #41	@ 0x29
 800b2ca:	d109      	bne.n	800b2e0 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b2cc:	4aac      	ldr	r2, [pc, #688]	@ (800b580 <I2C_ITSlaveCplt+0x2f4>)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	0011      	movs	r1, r2
 800b2d2:	0018      	movs	r0, r3
 800b2d4:	f000 fe62 	bl	800bf9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2221      	movs	r2, #33	@ 0x21
 800b2dc:	631a      	str	r2, [r3, #48]	@ 0x30
 800b2de:	e020      	b.n	800b322 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b2e0:	220b      	movs	r2, #11
 800b2e2:	18bb      	adds	r3, r7, r2
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	2b22      	cmp	r3, #34	@ 0x22
 800b2e8:	d003      	beq.n	800b2f2 <I2C_ITSlaveCplt+0x66>
 800b2ea:	18bb      	adds	r3, r7, r2
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2f0:	d109      	bne.n	800b306 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b2f2:	4aa4      	ldr	r2, [pc, #656]	@ (800b584 <I2C_ITSlaveCplt+0x2f8>)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	0011      	movs	r1, r2
 800b2f8:	0018      	movs	r0, r3
 800b2fa:	f000 fe4f 	bl	800bf9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2222      	movs	r2, #34	@ 0x22
 800b302:	631a      	str	r2, [r3, #48]	@ 0x30
 800b304:	e00d      	b.n	800b322 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800b306:	230b      	movs	r3, #11
 800b308:	18fb      	adds	r3, r7, r3
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	2b28      	cmp	r3, #40	@ 0x28
 800b30e:	d108      	bne.n	800b322 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b310:	4a9d      	ldr	r2, [pc, #628]	@ (800b588 <I2C_ITSlaveCplt+0x2fc>)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	0011      	movs	r1, r2
 800b316:	0018      	movs	r0, r3
 800b318:	f000 fe40 	bl	800bf9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	685a      	ldr	r2, [r3, #4]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2180      	movs	r1, #128	@ 0x80
 800b32e:	0209      	lsls	r1, r1, #8
 800b330:	430a      	orrs	r2, r1
 800b332:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	685a      	ldr	r2, [r3, #4]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4993      	ldr	r1, [pc, #588]	@ (800b58c <I2C_ITSlaveCplt+0x300>)
 800b340:	400a      	ands	r2, r1
 800b342:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	0018      	movs	r0, r3
 800b348:	f000 faab 	bl	800b8a2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	2380      	movs	r3, #128	@ 0x80
 800b350:	01db      	lsls	r3, r3, #7
 800b352:	4013      	ands	r3, r2
 800b354:	d013      	beq.n	800b37e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	498b      	ldr	r1, [pc, #556]	@ (800b590 <I2C_ITSlaveCplt+0x304>)
 800b362:	400a      	ands	r2, r1
 800b364:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d01f      	beq.n	800b3ae <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	b29a      	uxth	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b37c:	e017      	b.n	800b3ae <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	2380      	movs	r3, #128	@ 0x80
 800b382:	021b      	lsls	r3, r3, #8
 800b384:	4013      	ands	r3, r2
 800b386:	d012      	beq.n	800b3ae <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4980      	ldr	r1, [pc, #512]	@ (800b594 <I2C_ITSlaveCplt+0x308>)
 800b394:	400a      	ands	r2, r1
 800b396:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d006      	beq.n	800b3ae <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	2204      	movs	r2, #4
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	d020      	beq.n	800b3f8 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2204      	movs	r2, #4
 800b3ba:	4393      	bics	r3, r2
 800b3bc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3c8:	b2d2      	uxtb	r2, r2
 800b3ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d0:	1c5a      	adds	r2, r3, #1
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00c      	beq.n	800b3f8 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d005      	beq.n	800b40e <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b406:	2204      	movs	r2, #4
 800b408:	431a      	orrs	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2210      	movs	r2, #16
 800b412:	4013      	ands	r3, r2
 800b414:	d04f      	beq.n	800b4b6 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	2210      	movs	r2, #16
 800b41a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b41c:	d04b      	beq.n	800b4b6 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b422:	b29b      	uxth	r3, r3
 800b424:	2b00      	cmp	r3, #0
 800b426:	d12d      	bne.n	800b484 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2241      	movs	r2, #65	@ 0x41
 800b42c:	5c9b      	ldrb	r3, [r3, r2]
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b28      	cmp	r3, #40	@ 0x28
 800b432:	d10b      	bne.n	800b44c <I2C_ITSlaveCplt+0x1c0>
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	2380      	movs	r3, #128	@ 0x80
 800b438:	049b      	lsls	r3, r3, #18
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d106      	bne.n	800b44c <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b43e:	697a      	ldr	r2, [r7, #20]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	0011      	movs	r1, r2
 800b444:	0018      	movs	r0, r3
 800b446:	f000 f8a9 	bl	800b59c <I2C_ITListenCplt>
 800b44a:	e034      	b.n	800b4b6 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2241      	movs	r2, #65	@ 0x41
 800b450:	5c9b      	ldrb	r3, [r3, r2]
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b29      	cmp	r3, #41	@ 0x29
 800b456:	d110      	bne.n	800b47a <I2C_ITSlaveCplt+0x1ee>
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	4a4f      	ldr	r2, [pc, #316]	@ (800b598 <I2C_ITSlaveCplt+0x30c>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d00c      	beq.n	800b47a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2210      	movs	r2, #16
 800b466:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	0018      	movs	r0, r3
 800b46c:	f000 fa19 	bl	800b8a2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	0018      	movs	r0, r3
 800b474:	f7ff fdd8 	bl	800b028 <I2C_ITSlaveSeqCplt>
 800b478:	e01d      	b.n	800b4b6 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2210      	movs	r2, #16
 800b480:	61da      	str	r2, [r3, #28]
 800b482:	e018      	b.n	800b4b6 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2210      	movs	r2, #16
 800b48a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b490:	2204      	movs	r2, #4
 800b492:	431a      	orrs	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d004      	beq.n	800b4a8 <I2C_ITSlaveCplt+0x21c>
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	2380      	movs	r3, #128	@ 0x80
 800b4a2:	045b      	lsls	r3, r3, #17
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d106      	bne.n	800b4b6 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	0011      	movs	r1, r2
 800b4b0:	0018      	movs	r0, r3
 800b4b2:	f000 f8cb 	bl	800b64c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2242      	movs	r2, #66	@ 0x42
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d013      	beq.n	800b4f4 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	0011      	movs	r1, r2
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f000 f8b9 	bl	800b64c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2241      	movs	r2, #65	@ 0x41
 800b4de:	5c9b      	ldrb	r3, [r3, r2]
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b28      	cmp	r3, #40	@ 0x28
 800b4e4:	d147      	bne.n	800b576 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	0011      	movs	r1, r2
 800b4ec:	0018      	movs	r0, r3
 800b4ee:	f000 f855 	bl	800b59c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b4f2:	e040      	b.n	800b576 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f8:	4a27      	ldr	r2, [pc, #156]	@ (800b598 <I2C_ITSlaveCplt+0x30c>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d016      	beq.n	800b52c <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	0018      	movs	r0, r3
 800b502:	f7ff fd91 	bl	800b028 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a23      	ldr	r2, [pc, #140]	@ (800b598 <I2C_ITSlaveCplt+0x30c>)
 800b50a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2241      	movs	r2, #65	@ 0x41
 800b510:	2120      	movs	r1, #32
 800b512:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2240      	movs	r2, #64	@ 0x40
 800b51e:	2100      	movs	r1, #0
 800b520:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	0018      	movs	r0, r3
 800b526:	f7ff f834 	bl	800a592 <HAL_I2C_ListenCpltCallback>
}
 800b52a:	e024      	b.n	800b576 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2241      	movs	r2, #65	@ 0x41
 800b530:	5c9b      	ldrb	r3, [r3, r2]
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b22      	cmp	r3, #34	@ 0x22
 800b536:	d10f      	bne.n	800b558 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2241      	movs	r2, #65	@ 0x41
 800b53c:	2120      	movs	r1, #32
 800b53e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2240      	movs	r2, #64	@ 0x40
 800b54a:	2100      	movs	r1, #0
 800b54c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	0018      	movs	r0, r3
 800b552:	f7fa f93d 	bl	80057d0 <HAL_I2C_SlaveRxCpltCallback>
}
 800b556:	e00e      	b.n	800b576 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2241      	movs	r2, #65	@ 0x41
 800b55c:	2120      	movs	r1, #32
 800b55e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2240      	movs	r2, #64	@ 0x40
 800b56a:	2100      	movs	r1, #0
 800b56c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	0018      	movs	r0, r3
 800b572:	f7fe fff6 	bl	800a562 <HAL_I2C_SlaveTxCpltCallback>
}
 800b576:	46c0      	nop			@ (mov r8, r8)
 800b578:	46bd      	mov	sp, r7
 800b57a:	b006      	add	sp, #24
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	46c0      	nop			@ (mov r8, r8)
 800b580:	00008001 	.word	0x00008001
 800b584:	00008002 	.word	0x00008002
 800b588:	00008003 	.word	0x00008003
 800b58c:	fe00e800 	.word	0xfe00e800
 800b590:	ffffbfff 	.word	0xffffbfff
 800b594:	ffff7fff 	.word	0xffff7fff
 800b598:	ffff0000 	.word	0xffff0000

0800b59c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a26      	ldr	r2, [pc, #152]	@ (800b644 <I2C_ITListenCplt+0xa8>)
 800b5aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2241      	movs	r2, #65	@ 0x41
 800b5b6:	2120      	movs	r1, #32
 800b5b8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2242      	movs	r2, #66	@ 0x42
 800b5be:	2100      	movs	r1, #0
 800b5c0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	2204      	movs	r2, #4
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	d022      	beq.n	800b616 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5da:	b2d2      	uxtb	r2, r2
 800b5dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d012      	beq.n	800b616 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b600:	b29b      	uxth	r3, r3
 800b602:	3b01      	subs	r3, #1
 800b604:	b29a      	uxth	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b60e:	2204      	movs	r2, #4
 800b610:	431a      	orrs	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b616:	4a0c      	ldr	r2, [pc, #48]	@ (800b648 <I2C_ITListenCplt+0xac>)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	0011      	movs	r1, r2
 800b61c:	0018      	movs	r0, r3
 800b61e:	f000 fcbd 	bl	800bf9c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2210      	movs	r2, #16
 800b628:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2240      	movs	r2, #64	@ 0x40
 800b62e:	2100      	movs	r1, #0
 800b630:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	0018      	movs	r0, r3
 800b636:	f7fe ffac 	bl	800a592 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b63a:	46c0      	nop			@ (mov r8, r8)
 800b63c:	46bd      	mov	sp, r7
 800b63e:	b002      	add	sp, #8
 800b640:	bd80      	pop	{r7, pc}
 800b642:	46c0      	nop			@ (mov r8, r8)
 800b644:	ffff0000 	.word	0xffff0000
 800b648:	00008003 	.word	0x00008003

0800b64c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b656:	200f      	movs	r0, #15
 800b658:	183b      	adds	r3, r7, r0
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	2141      	movs	r1, #65	@ 0x41
 800b65e:	5c52      	ldrb	r2, [r2, r1]
 800b660:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2242      	movs	r2, #66	@ 0x42
 800b666:	2100      	movs	r1, #0
 800b668:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a72      	ldr	r2, [pc, #456]	@ (800b838 <I2C_ITError+0x1ec>)
 800b66e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	431a      	orrs	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b682:	183b      	adds	r3, r7, r0
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	2b28      	cmp	r3, #40	@ 0x28
 800b688:	d007      	beq.n	800b69a <I2C_ITError+0x4e>
 800b68a:	183b      	adds	r3, r7, r0
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	2b29      	cmp	r3, #41	@ 0x29
 800b690:	d003      	beq.n	800b69a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b692:	183b      	adds	r3, r7, r0
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	2b2a      	cmp	r3, #42	@ 0x2a
 800b698:	d10c      	bne.n	800b6b4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2103      	movs	r1, #3
 800b69e:	0018      	movs	r0, r3
 800b6a0:	f000 fc7c 	bl	800bf9c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2241      	movs	r2, #65	@ 0x41
 800b6a8:	2128      	movs	r1, #40	@ 0x28
 800b6aa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a63      	ldr	r2, [pc, #396]	@ (800b83c <I2C_ITError+0x1f0>)
 800b6b0:	635a      	str	r2, [r3, #52]	@ 0x34
 800b6b2:	e032      	b.n	800b71a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b6b4:	4a62      	ldr	r2, [pc, #392]	@ (800b840 <I2C_ITError+0x1f4>)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	0011      	movs	r1, r2
 800b6ba:	0018      	movs	r0, r3
 800b6bc:	f000 fc6e 	bl	800bf9c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	0018      	movs	r0, r3
 800b6c4:	f000 f8ed 	bl	800b8a2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2241      	movs	r2, #65	@ 0x41
 800b6cc:	5c9b      	ldrb	r3, [r3, r2]
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	2b60      	cmp	r3, #96	@ 0x60
 800b6d2:	d01f      	beq.n	800b714 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2241      	movs	r2, #65	@ 0x41
 800b6d8:	2120      	movs	r1, #32
 800b6da:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	699b      	ldr	r3, [r3, #24]
 800b6e2:	2220      	movs	r2, #32
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	d114      	bne.n	800b714 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	2210      	movs	r2, #16
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	2b10      	cmp	r3, #16
 800b6f6:	d109      	bne.n	800b70c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2210      	movs	r2, #16
 800b6fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b704:	2204      	movs	r2, #4
 800b706:	431a      	orrs	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2220      	movs	r2, #32
 800b712:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b71e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b724:	2b00      	cmp	r3, #0
 800b726:	d03b      	beq.n	800b7a0 <I2C_ITError+0x154>
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	2b11      	cmp	r3, #17
 800b72c:	d002      	beq.n	800b734 <I2C_ITError+0xe8>
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	2b21      	cmp	r3, #33	@ 0x21
 800b732:	d135      	bne.n	800b7a0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	2380      	movs	r3, #128	@ 0x80
 800b73c:	01db      	lsls	r3, r3, #7
 800b73e:	401a      	ands	r2, r3
 800b740:	2380      	movs	r3, #128	@ 0x80
 800b742:	01db      	lsls	r3, r3, #7
 800b744:	429a      	cmp	r2, r3
 800b746:	d107      	bne.n	800b758 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	493c      	ldr	r1, [pc, #240]	@ (800b844 <I2C_ITError+0x1f8>)
 800b754:	400a      	ands	r2, r1
 800b756:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b75c:	0018      	movs	r0, r3
 800b75e:	f7fd feda 	bl	8009516 <HAL_DMA_GetState>
 800b762:	0003      	movs	r3, r0
 800b764:	2b01      	cmp	r3, #1
 800b766:	d016      	beq.n	800b796 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b76c:	4a36      	ldr	r2, [pc, #216]	@ (800b848 <I2C_ITError+0x1fc>)
 800b76e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2240      	movs	r2, #64	@ 0x40
 800b774:	2100      	movs	r1, #0
 800b776:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b77c:	0018      	movs	r0, r3
 800b77e:	f7fd fde3 	bl	8009348 <HAL_DMA_Abort_IT>
 800b782:	1e03      	subs	r3, r0, #0
 800b784:	d051      	beq.n	800b82a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b78a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b790:	0018      	movs	r0, r3
 800b792:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b794:	e049      	b.n	800b82a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	0018      	movs	r0, r3
 800b79a:	f000 f859 	bl	800b850 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b79e:	e044      	b.n	800b82a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d03b      	beq.n	800b820 <I2C_ITError+0x1d4>
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	2b12      	cmp	r3, #18
 800b7ac:	d002      	beq.n	800b7b4 <I2C_ITError+0x168>
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2b22      	cmp	r3, #34	@ 0x22
 800b7b2:	d135      	bne.n	800b820 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	2380      	movs	r3, #128	@ 0x80
 800b7bc:	021b      	lsls	r3, r3, #8
 800b7be:	401a      	ands	r2, r3
 800b7c0:	2380      	movs	r3, #128	@ 0x80
 800b7c2:	021b      	lsls	r3, r3, #8
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d107      	bne.n	800b7d8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	491e      	ldr	r1, [pc, #120]	@ (800b84c <I2C_ITError+0x200>)
 800b7d4:	400a      	ands	r2, r1
 800b7d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7dc:	0018      	movs	r0, r3
 800b7de:	f7fd fe9a 	bl	8009516 <HAL_DMA_GetState>
 800b7e2:	0003      	movs	r3, r0
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d016      	beq.n	800b816 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7ec:	4a16      	ldr	r2, [pc, #88]	@ (800b848 <I2C_ITError+0x1fc>)
 800b7ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2240      	movs	r2, #64	@ 0x40
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7fc:	0018      	movs	r0, r3
 800b7fe:	f7fd fda3 	bl	8009348 <HAL_DMA_Abort_IT>
 800b802:	1e03      	subs	r3, r0, #0
 800b804:	d013      	beq.n	800b82e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b80a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b810:	0018      	movs	r0, r3
 800b812:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b814:	e00b      	b.n	800b82e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	0018      	movs	r0, r3
 800b81a:	f000 f819 	bl	800b850 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b81e:	e006      	b.n	800b82e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	0018      	movs	r0, r3
 800b824:	f000 f814 	bl	800b850 <I2C_TreatErrorCallback>
  }
}
 800b828:	e002      	b.n	800b830 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b82a:	46c0      	nop			@ (mov r8, r8)
 800b82c:	e000      	b.n	800b830 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b82e:	46c0      	nop			@ (mov r8, r8)
}
 800b830:	46c0      	nop			@ (mov r8, r8)
 800b832:	46bd      	mov	sp, r7
 800b834:	b004      	add	sp, #16
 800b836:	bd80      	pop	{r7, pc}
 800b838:	ffff0000 	.word	0xffff0000
 800b83c:	0800a5e5 	.word	0x0800a5e5
 800b840:	00008003 	.word	0x00008003
 800b844:	ffffbfff 	.word	0xffffbfff
 800b848:	0800b8e7 	.word	0x0800b8e7
 800b84c:	ffff7fff 	.word	0xffff7fff

0800b850 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2241      	movs	r2, #65	@ 0x41
 800b85c:	5c9b      	ldrb	r3, [r3, r2]
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	2b60      	cmp	r3, #96	@ 0x60
 800b862:	d10f      	bne.n	800b884 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2241      	movs	r2, #65	@ 0x41
 800b868:	2120      	movs	r1, #32
 800b86a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2240      	movs	r2, #64	@ 0x40
 800b876:	2100      	movs	r1, #0
 800b878:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	0018      	movs	r0, r3
 800b87e:	f7fe fea8 	bl	800a5d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b882:	e00a      	b.n	800b89a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2240      	movs	r2, #64	@ 0x40
 800b88e:	2100      	movs	r1, #0
 800b890:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	0018      	movs	r0, r3
 800b896:	f7fe fe94 	bl	800a5c2 <HAL_I2C_ErrorCallback>
}
 800b89a:	46c0      	nop			@ (mov r8, r8)
 800b89c:	46bd      	mov	sp, r7
 800b89e:	b002      	add	sp, #8
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b082      	sub	sp, #8
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	2202      	movs	r2, #2
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d103      	bne.n	800b8c0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d007      	beq.n	800b8de <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	699a      	ldr	r2, [r3, #24]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2101      	movs	r1, #1
 800b8da:	430a      	orrs	r2, r1
 800b8dc:	619a      	str	r2, [r3, #24]
  }
}
 800b8de:	46c0      	nop			@ (mov r8, r8)
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	b002      	add	sp, #8
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b084      	sub	sp, #16
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8f2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b900:	2200      	movs	r2, #0
 800b902:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d003      	beq.n	800b914 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b910:	2200      	movs	r2, #0
 800b912:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	0018      	movs	r0, r3
 800b918:	f7ff ff9a 	bl	800b850 <I2C_TreatErrorCallback>
}
 800b91c:	46c0      	nop			@ (mov r8, r8)
 800b91e:	46bd      	mov	sp, r7
 800b920:	b004      	add	sp, #16
 800b922:	bd80      	pop	{r7, pc}

0800b924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	603b      	str	r3, [r7, #0]
 800b930:	1dfb      	adds	r3, r7, #7
 800b932:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b934:	e03a      	b.n	800b9ac <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b936:	69ba      	ldr	r2, [r7, #24]
 800b938:	6839      	ldr	r1, [r7, #0]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	0018      	movs	r0, r3
 800b93e:	f000 f971 	bl	800bc24 <I2C_IsErrorOccurred>
 800b942:	1e03      	subs	r3, r0, #0
 800b944:	d001      	beq.n	800b94a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e040      	b.n	800b9cc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	3301      	adds	r3, #1
 800b94e:	d02d      	beq.n	800b9ac <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b950:	f7fc fcb6 	bl	80082c0 <HAL_GetTick>
 800b954:	0002      	movs	r2, r0
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d302      	bcc.n	800b966 <I2C_WaitOnFlagUntilTimeout+0x42>
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d122      	bne.n	800b9ac <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	4013      	ands	r3, r2
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	425a      	negs	r2, r3
 800b976:	4153      	adcs	r3, r2
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	001a      	movs	r2, r3
 800b97c:	1dfb      	adds	r3, r7, #7
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	429a      	cmp	r2, r3
 800b982:	d113      	bne.n	800b9ac <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b988:	2220      	movs	r2, #32
 800b98a:	431a      	orrs	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2241      	movs	r2, #65	@ 0x41
 800b994:	2120      	movs	r1, #32
 800b996:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2242      	movs	r2, #66	@ 0x42
 800b99c:	2100      	movs	r1, #0
 800b99e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2240      	movs	r2, #64	@ 0x40
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e00f      	b.n	800b9cc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	699b      	ldr	r3, [r3, #24]
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	1ad3      	subs	r3, r2, r3
 800b9ba:	425a      	negs	r2, r3
 800b9bc:	4153      	adcs	r3, r2
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	001a      	movs	r2, r3
 800b9c2:	1dfb      	adds	r3, r7, #7
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d0b5      	beq.n	800b936 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	0018      	movs	r0, r3
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	b004      	add	sp, #16
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b9e0:	e032      	b.n	800ba48 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	68b9      	ldr	r1, [r7, #8]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	0018      	movs	r0, r3
 800b9ea:	f000 f91b 	bl	800bc24 <I2C_IsErrorOccurred>
 800b9ee:	1e03      	subs	r3, r0, #0
 800b9f0:	d001      	beq.n	800b9f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e030      	b.n	800ba58 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	d025      	beq.n	800ba48 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9fc:	f7fc fc60 	bl	80082c0 <HAL_GetTick>
 800ba00:	0002      	movs	r2, r0
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d302      	bcc.n	800ba12 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d11a      	bne.n	800ba48 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	2202      	movs	r2, #2
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d013      	beq.n	800ba48 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba24:	2220      	movs	r2, #32
 800ba26:	431a      	orrs	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2241      	movs	r2, #65	@ 0x41
 800ba30:	2120      	movs	r1, #32
 800ba32:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2242      	movs	r2, #66	@ 0x42
 800ba38:	2100      	movs	r1, #0
 800ba3a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2240      	movs	r2, #64	@ 0x40
 800ba40:	2100      	movs	r1, #0
 800ba42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	e007      	b.n	800ba58 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	699b      	ldr	r3, [r3, #24]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	4013      	ands	r3, r2
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d1c5      	bne.n	800b9e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	0018      	movs	r0, r3
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	b004      	add	sp, #16
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba6c:	e02f      	b.n	800bace <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	68b9      	ldr	r1, [r7, #8]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	0018      	movs	r0, r3
 800ba76:	f000 f8d5 	bl	800bc24 <I2C_IsErrorOccurred>
 800ba7a:	1e03      	subs	r3, r0, #0
 800ba7c:	d001      	beq.n	800ba82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e02d      	b.n	800bade <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba82:	f7fc fc1d 	bl	80082c0 <HAL_GetTick>
 800ba86:	0002      	movs	r2, r0
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d302      	bcc.n	800ba98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d11a      	bne.n	800bace <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	699b      	ldr	r3, [r3, #24]
 800ba9e:	2220      	movs	r2, #32
 800baa0:	4013      	ands	r3, r2
 800baa2:	2b20      	cmp	r3, #32
 800baa4:	d013      	beq.n	800bace <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baaa:	2220      	movs	r2, #32
 800baac:	431a      	orrs	r2, r3
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2241      	movs	r2, #65	@ 0x41
 800bab6:	2120      	movs	r1, #32
 800bab8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2242      	movs	r2, #66	@ 0x42
 800babe:	2100      	movs	r1, #0
 800bac0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2240      	movs	r2, #64	@ 0x40
 800bac6:	2100      	movs	r1, #0
 800bac8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	e007      	b.n	800bade <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	699b      	ldr	r3, [r3, #24]
 800bad4:	2220      	movs	r2, #32
 800bad6:	4013      	ands	r3, r2
 800bad8:	2b20      	cmp	r3, #32
 800bada:	d1c8      	bne.n	800ba6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	0018      	movs	r0, r3
 800bae0:	46bd      	mov	sp, r7
 800bae2:	b004      	add	sp, #16
 800bae4:	bd80      	pop	{r7, pc}
	...

0800bae8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800baf4:	2317      	movs	r3, #23
 800baf6:	18fb      	adds	r3, r7, r3
 800baf8:	2200      	movs	r2, #0
 800bafa:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800bafc:	e07b      	b.n	800bbf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	68b9      	ldr	r1, [r7, #8]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	0018      	movs	r0, r3
 800bb06:	f000 f88d 	bl	800bc24 <I2C_IsErrorOccurred>
 800bb0a:	1e03      	subs	r3, r0, #0
 800bb0c:	d003      	beq.n	800bb16 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800bb0e:	2317      	movs	r3, #23
 800bb10:	18fb      	adds	r3, r7, r3
 800bb12:	2201      	movs	r2, #1
 800bb14:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	699b      	ldr	r3, [r3, #24]
 800bb1c:	2220      	movs	r2, #32
 800bb1e:	4013      	ands	r3, r2
 800bb20:	2b20      	cmp	r3, #32
 800bb22:	d140      	bne.n	800bba6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800bb24:	2117      	movs	r1, #23
 800bb26:	187b      	adds	r3, r7, r1
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d13b      	bne.n	800bba6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	2204      	movs	r2, #4
 800bb36:	4013      	ands	r3, r2
 800bb38:	2b04      	cmp	r3, #4
 800bb3a:	d106      	bne.n	800bb4a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800bb44:	187b      	adds	r3, r7, r1
 800bb46:	2200      	movs	r2, #0
 800bb48:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	2210      	movs	r2, #16
 800bb52:	4013      	ands	r3, r2
 800bb54:	2b10      	cmp	r3, #16
 800bb56:	d123      	bne.n	800bba0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2210      	movs	r2, #16
 800bb5e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2204      	movs	r2, #4
 800bb64:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	685a      	ldr	r2, [r3, #4]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4929      	ldr	r1, [pc, #164]	@ (800bc20 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800bb7a:	400a      	ands	r2, r1
 800bb7c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2241      	movs	r2, #65	@ 0x41
 800bb82:	2120      	movs	r1, #32
 800bb84:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2242      	movs	r2, #66	@ 0x42
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2240      	movs	r2, #64	@ 0x40
 800bb92:	2100      	movs	r1, #0
 800bb94:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800bb96:	2317      	movs	r3, #23
 800bb98:	18fb      	adds	r3, r7, r3
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	701a      	strb	r2, [r3, #0]
 800bb9e:	e002      	b.n	800bba6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800bba6:	f7fc fb8b 	bl	80082c0 <HAL_GetTick>
 800bbaa:	0002      	movs	r2, r0
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d302      	bcc.n	800bbbc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d11c      	bne.n	800bbf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800bbbc:	2017      	movs	r0, #23
 800bbbe:	183b      	adds	r3, r7, r0
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d117      	bne.n	800bbf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	699b      	ldr	r3, [r3, #24]
 800bbcc:	2204      	movs	r2, #4
 800bbce:	4013      	ands	r3, r2
 800bbd0:	2b04      	cmp	r3, #4
 800bbd2:	d010      	beq.n	800bbf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbd8:	2220      	movs	r2, #32
 800bbda:	431a      	orrs	r2, r3
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2241      	movs	r2, #65	@ 0x41
 800bbe4:	2120      	movs	r1, #32
 800bbe6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2240      	movs	r2, #64	@ 0x40
 800bbec:	2100      	movs	r1, #0
 800bbee:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800bbf0:	183b      	adds	r3, r7, r0
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	699b      	ldr	r3, [r3, #24]
 800bbfc:	2204      	movs	r2, #4
 800bbfe:	4013      	ands	r3, r2
 800bc00:	2b04      	cmp	r3, #4
 800bc02:	d005      	beq.n	800bc10 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800bc04:	2317      	movs	r3, #23
 800bc06:	18fb      	adds	r3, r7, r3
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d100      	bne.n	800bc10 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800bc0e:	e776      	b.n	800bafe <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800bc10:	2317      	movs	r3, #23
 800bc12:	18fb      	adds	r3, r7, r3
 800bc14:	781b      	ldrb	r3, [r3, #0]
}
 800bc16:	0018      	movs	r0, r3
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	b006      	add	sp, #24
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	46c0      	nop			@ (mov r8, r8)
 800bc20:	fe00e800 	.word	0xfe00e800

0800bc24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08a      	sub	sp, #40	@ 0x28
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc30:	2327      	movs	r3, #39	@ 0x27
 800bc32:	18fb      	adds	r3, r7, r3
 800bc34:	2200      	movs	r2, #0
 800bc36:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	699b      	ldr	r3, [r3, #24]
 800bc3e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	2210      	movs	r2, #16
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	d100      	bne.n	800bc52 <I2C_IsErrorOccurred+0x2e>
 800bc50:	e079      	b.n	800bd46 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2210      	movs	r2, #16
 800bc58:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bc5a:	e057      	b.n	800bd0c <I2C_IsErrorOccurred+0xe8>
 800bc5c:	2227      	movs	r2, #39	@ 0x27
 800bc5e:	18bb      	adds	r3, r7, r2
 800bc60:	18ba      	adds	r2, r7, r2
 800bc62:	7812      	ldrb	r2, [r2, #0]
 800bc64:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	d04f      	beq.n	800bd0c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bc6c:	f7fc fb28 	bl	80082c0 <HAL_GetTick>
 800bc70:	0002      	movs	r2, r0
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d302      	bcc.n	800bc82 <I2C_IsErrorOccurred+0x5e>
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d144      	bne.n	800bd0c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	685a      	ldr	r2, [r3, #4]
 800bc88:	2380      	movs	r3, #128	@ 0x80
 800bc8a:	01db      	lsls	r3, r3, #7
 800bc8c:	4013      	ands	r3, r2
 800bc8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bc90:	2013      	movs	r0, #19
 800bc92:	183b      	adds	r3, r7, r0
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	2142      	movs	r1, #66	@ 0x42
 800bc98:	5c52      	ldrb	r2, [r2, r1]
 800bc9a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	699a      	ldr	r2, [r3, #24]
 800bca2:	2380      	movs	r3, #128	@ 0x80
 800bca4:	021b      	lsls	r3, r3, #8
 800bca6:	401a      	ands	r2, r3
 800bca8:	2380      	movs	r3, #128	@ 0x80
 800bcaa:	021b      	lsls	r3, r3, #8
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d126      	bne.n	800bcfe <I2C_IsErrorOccurred+0xda>
 800bcb0:	697a      	ldr	r2, [r7, #20]
 800bcb2:	2380      	movs	r3, #128	@ 0x80
 800bcb4:	01db      	lsls	r3, r3, #7
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d021      	beq.n	800bcfe <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800bcba:	183b      	adds	r3, r7, r0
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	2b20      	cmp	r3, #32
 800bcc0:	d01d      	beq.n	800bcfe <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	685a      	ldr	r2, [r3, #4]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2180      	movs	r1, #128	@ 0x80
 800bcce:	01c9      	lsls	r1, r1, #7
 800bcd0:	430a      	orrs	r2, r1
 800bcd2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bcd4:	f7fc faf4 	bl	80082c0 <HAL_GetTick>
 800bcd8:	0003      	movs	r3, r0
 800bcda:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bcdc:	e00f      	b.n	800bcfe <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bcde:	f7fc faef 	bl	80082c0 <HAL_GetTick>
 800bce2:	0002      	movs	r2, r0
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	2b19      	cmp	r3, #25
 800bcea:	d908      	bls.n	800bcfe <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	2220      	movs	r2, #32
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bcf4:	2327      	movs	r3, #39	@ 0x27
 800bcf6:	18fb      	adds	r3, r7, r3
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	701a      	strb	r2, [r3, #0]

              break;
 800bcfc:	e006      	b.n	800bd0c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	2220      	movs	r2, #32
 800bd06:	4013      	ands	r3, r2
 800bd08:	2b20      	cmp	r3, #32
 800bd0a:	d1e8      	bne.n	800bcde <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	2220      	movs	r2, #32
 800bd14:	4013      	ands	r3, r2
 800bd16:	2b20      	cmp	r3, #32
 800bd18:	d004      	beq.n	800bd24 <I2C_IsErrorOccurred+0x100>
 800bd1a:	2327      	movs	r3, #39	@ 0x27
 800bd1c:	18fb      	adds	r3, r7, r3
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d09b      	beq.n	800bc5c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bd24:	2327      	movs	r3, #39	@ 0x27
 800bd26:	18fb      	adds	r3, r7, r3
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d103      	bne.n	800bd36 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2220      	movs	r2, #32
 800bd34:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bd36:	6a3b      	ldr	r3, [r7, #32]
 800bd38:	2204      	movs	r2, #4
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bd3e:	2327      	movs	r3, #39	@ 0x27
 800bd40:	18fb      	adds	r3, r7, r3
 800bd42:	2201      	movs	r2, #1
 800bd44:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bd4e:	69ba      	ldr	r2, [r7, #24]
 800bd50:	2380      	movs	r3, #128	@ 0x80
 800bd52:	005b      	lsls	r3, r3, #1
 800bd54:	4013      	ands	r3, r2
 800bd56:	d00c      	beq.n	800bd72 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2280      	movs	r2, #128	@ 0x80
 800bd66:	0052      	lsls	r2, r2, #1
 800bd68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bd6a:	2327      	movs	r3, #39	@ 0x27
 800bd6c:	18fb      	adds	r3, r7, r3
 800bd6e:	2201      	movs	r2, #1
 800bd70:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bd72:	69ba      	ldr	r2, [r7, #24]
 800bd74:	2380      	movs	r3, #128	@ 0x80
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	4013      	ands	r3, r2
 800bd7a:	d00c      	beq.n	800bd96 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	2208      	movs	r2, #8
 800bd80:	4313      	orrs	r3, r2
 800bd82:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2280      	movs	r2, #128	@ 0x80
 800bd8a:	00d2      	lsls	r2, r2, #3
 800bd8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bd8e:	2327      	movs	r3, #39	@ 0x27
 800bd90:	18fb      	adds	r3, r7, r3
 800bd92:	2201      	movs	r2, #1
 800bd94:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bd96:	69ba      	ldr	r2, [r7, #24]
 800bd98:	2380      	movs	r3, #128	@ 0x80
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	d00c      	beq.n	800bdba <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800bda0:	6a3b      	ldr	r3, [r7, #32]
 800bda2:	2202      	movs	r2, #2
 800bda4:	4313      	orrs	r3, r2
 800bda6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2280      	movs	r2, #128	@ 0x80
 800bdae:	0092      	lsls	r2, r2, #2
 800bdb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bdb2:	2327      	movs	r3, #39	@ 0x27
 800bdb4:	18fb      	adds	r3, r7, r3
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800bdba:	2327      	movs	r3, #39	@ 0x27
 800bdbc:	18fb      	adds	r3, r7, r3
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d01d      	beq.n	800be00 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	0018      	movs	r0, r3
 800bdc8:	f7ff fd6b 	bl	800b8a2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	685a      	ldr	r2, [r3, #4]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	490e      	ldr	r1, [pc, #56]	@ (800be10 <I2C_IsErrorOccurred+0x1ec>)
 800bdd8:	400a      	ands	r2, r1
 800bdda:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bde0:	6a3b      	ldr	r3, [r7, #32]
 800bde2:	431a      	orrs	r2, r3
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2241      	movs	r2, #65	@ 0x41
 800bdec:	2120      	movs	r1, #32
 800bdee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2242      	movs	r2, #66	@ 0x42
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2240      	movs	r2, #64	@ 0x40
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800be00:	2327      	movs	r3, #39	@ 0x27
 800be02:	18fb      	adds	r3, r7, r3
 800be04:	781b      	ldrb	r3, [r3, #0]
}
 800be06:	0018      	movs	r0, r3
 800be08:	46bd      	mov	sp, r7
 800be0a:	b00a      	add	sp, #40	@ 0x28
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	46c0      	nop			@ (mov r8, r8)
 800be10:	fe00e800 	.word	0xfe00e800

0800be14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800be14:	b590      	push	{r4, r7, lr}
 800be16:	b087      	sub	sp, #28
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	0008      	movs	r0, r1
 800be1e:	0011      	movs	r1, r2
 800be20:	607b      	str	r3, [r7, #4]
 800be22:	240a      	movs	r4, #10
 800be24:	193b      	adds	r3, r7, r4
 800be26:	1c02      	adds	r2, r0, #0
 800be28:	801a      	strh	r2, [r3, #0]
 800be2a:	2009      	movs	r0, #9
 800be2c:	183b      	adds	r3, r7, r0
 800be2e:	1c0a      	adds	r2, r1, #0
 800be30:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800be32:	193b      	adds	r3, r7, r4
 800be34:	881b      	ldrh	r3, [r3, #0]
 800be36:	059b      	lsls	r3, r3, #22
 800be38:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800be3a:	183b      	adds	r3, r7, r0
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	0419      	lsls	r1, r3, #16
 800be40:	23ff      	movs	r3, #255	@ 0xff
 800be42:	041b      	lsls	r3, r3, #16
 800be44:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800be46:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800be4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4e:	4313      	orrs	r3, r2
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	085b      	lsrs	r3, r3, #1
 800be54:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be5e:	0d51      	lsrs	r1, r2, #21
 800be60:	2280      	movs	r2, #128	@ 0x80
 800be62:	00d2      	lsls	r2, r2, #3
 800be64:	400a      	ands	r2, r1
 800be66:	4907      	ldr	r1, [pc, #28]	@ (800be84 <I2C_TransferConfig+0x70>)
 800be68:	430a      	orrs	r2, r1
 800be6a:	43d2      	mvns	r2, r2
 800be6c:	401a      	ands	r2, r3
 800be6e:	0011      	movs	r1, r2
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	430a      	orrs	r2, r1
 800be78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800be7a:	46c0      	nop			@ (mov r8, r8)
 800be7c:	46bd      	mov	sp, r7
 800be7e:	b007      	add	sp, #28
 800be80:	bd90      	pop	{r4, r7, pc}
 800be82:	46c0      	nop			@ (mov r8, r8)
 800be84:	03ff63ff 	.word	0x03ff63ff

0800be88 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	000a      	movs	r2, r1
 800be92:	1cbb      	adds	r3, r7, #2
 800be94:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800be96:	2300      	movs	r3, #0
 800be98:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be9e:	4b3c      	ldr	r3, [pc, #240]	@ (800bf90 <I2C_Enable_IRQ+0x108>)
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d035      	beq.n	800bf10 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800bea8:	4b3a      	ldr	r3, [pc, #232]	@ (800bf94 <I2C_Enable_IRQ+0x10c>)
 800beaa:	429a      	cmp	r2, r3
 800beac:	d030      	beq.n	800bf10 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800beb2:	4b39      	ldr	r3, [pc, #228]	@ (800bf98 <I2C_Enable_IRQ+0x110>)
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d02b      	beq.n	800bf10 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800beb8:	1cbb      	adds	r3, r7, #2
 800beba:	2200      	movs	r2, #0
 800bebc:	5e9b      	ldrsh	r3, [r3, r2]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	da03      	bge.n	800beca <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	22b8      	movs	r2, #184	@ 0xb8
 800bec6:	4313      	orrs	r3, r2
 800bec8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800beca:	1cbb      	adds	r3, r7, #2
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	2201      	movs	r2, #1
 800bed0:	4013      	ands	r3, r2
 800bed2:	d003      	beq.n	800bedc <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	22f2      	movs	r2, #242	@ 0xf2
 800bed8:	4313      	orrs	r3, r2
 800beda:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bedc:	1cbb      	adds	r3, r7, #2
 800bede:	881b      	ldrh	r3, [r3, #0]
 800bee0:	2202      	movs	r2, #2
 800bee2:	4013      	ands	r3, r2
 800bee4:	d003      	beq.n	800beee <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	22f4      	movs	r2, #244	@ 0xf4
 800beea:	4313      	orrs	r3, r2
 800beec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800beee:	1cbb      	adds	r3, r7, #2
 800bef0:	881b      	ldrh	r3, [r3, #0]
 800bef2:	2b10      	cmp	r3, #16
 800bef4:	d103      	bne.n	800befe <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2290      	movs	r2, #144	@ 0x90
 800befa:	4313      	orrs	r3, r2
 800befc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800befe:	1cbb      	adds	r3, r7, #2
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	2b20      	cmp	r3, #32
 800bf04:	d137      	bne.n	800bf76 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2220      	movs	r2, #32
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bf0e:	e032      	b.n	800bf76 <I2C_Enable_IRQ+0xee>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bf10:	1cbb      	adds	r3, r7, #2
 800bf12:	2200      	movs	r2, #0
 800bf14:	5e9b      	ldrsh	r3, [r3, r2]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	da03      	bge.n	800bf22 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	22b8      	movs	r2, #184	@ 0xb8
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bf22:	1cbb      	adds	r3, r7, #2
 800bf24:	881b      	ldrh	r3, [r3, #0]
 800bf26:	2201      	movs	r2, #1
 800bf28:	4013      	ands	r3, r2
 800bf2a:	d003      	beq.n	800bf34 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	22f2      	movs	r2, #242	@ 0xf2
 800bf30:	4313      	orrs	r3, r2
 800bf32:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bf34:	1cbb      	adds	r3, r7, #2
 800bf36:	881b      	ldrh	r3, [r3, #0]
 800bf38:	2202      	movs	r2, #2
 800bf3a:	4013      	ands	r3, r2
 800bf3c:	d003      	beq.n	800bf46 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	22f4      	movs	r2, #244	@ 0xf4
 800bf42:	4313      	orrs	r3, r2
 800bf44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bf46:	1cbb      	adds	r3, r7, #2
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	2b10      	cmp	r3, #16
 800bf4c:	d103      	bne.n	800bf56 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2290      	movs	r2, #144	@ 0x90
 800bf52:	4313      	orrs	r3, r2
 800bf54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bf56:	1cbb      	adds	r3, r7, #2
 800bf58:	881b      	ldrh	r3, [r3, #0]
 800bf5a:	2b20      	cmp	r3, #32
 800bf5c:	d103      	bne.n	800bf66 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2260      	movs	r2, #96	@ 0x60
 800bf62:	4313      	orrs	r3, r2
 800bf64:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bf66:	1cbb      	adds	r3, r7, #2
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	2b40      	cmp	r3, #64	@ 0x40
 800bf6c:	d103      	bne.n	800bf76 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2240      	movs	r2, #64	@ 0x40
 800bf72:	4313      	orrs	r3, r2
 800bf74:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	6819      	ldr	r1, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	430a      	orrs	r2, r1
 800bf84:	601a      	str	r2, [r3, #0]
}
 800bf86:	46c0      	nop			@ (mov r8, r8)
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	b004      	add	sp, #16
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	46c0      	nop			@ (mov r8, r8)
 800bf90:	0800a7e5 	.word	0x0800a7e5
 800bf94:	0800ac8d 	.word	0x0800ac8d
 800bf98:	0800a9f9 	.word	0x0800a9f9

0800bf9c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	000a      	movs	r2, r1
 800bfa6:	1cbb      	adds	r3, r7, #2
 800bfa8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bfae:	1cbb      	adds	r3, r7, #2
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	d010      	beq.n	800bfda <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2242      	movs	r2, #66	@ 0x42
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2241      	movs	r2, #65	@ 0x41
 800bfc4:	5c9b      	ldrb	r3, [r3, r2]
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	001a      	movs	r2, r3
 800bfca:	2328      	movs	r3, #40	@ 0x28
 800bfcc:	4013      	ands	r3, r2
 800bfce:	2b28      	cmp	r3, #40	@ 0x28
 800bfd0:	d003      	beq.n	800bfda <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	22b0      	movs	r2, #176	@ 0xb0
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bfda:	1cbb      	adds	r3, r7, #2
 800bfdc:	881b      	ldrh	r3, [r3, #0]
 800bfde:	2202      	movs	r2, #2
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	d010      	beq.n	800c006 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2244      	movs	r2, #68	@ 0x44
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2241      	movs	r2, #65	@ 0x41
 800bff0:	5c9b      	ldrb	r3, [r3, r2]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	001a      	movs	r2, r3
 800bff6:	2328      	movs	r3, #40	@ 0x28
 800bff8:	4013      	ands	r3, r2
 800bffa:	2b28      	cmp	r3, #40	@ 0x28
 800bffc:	d003      	beq.n	800c006 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	22b0      	movs	r2, #176	@ 0xb0
 800c002:	4313      	orrs	r3, r2
 800c004:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c006:	1cbb      	adds	r3, r7, #2
 800c008:	2200      	movs	r2, #0
 800c00a:	5e9b      	ldrsh	r3, [r3, r2]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	da03      	bge.n	800c018 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	22b8      	movs	r2, #184	@ 0xb8
 800c014:	4313      	orrs	r3, r2
 800c016:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c018:	1cbb      	adds	r3, r7, #2
 800c01a:	881b      	ldrh	r3, [r3, #0]
 800c01c:	2b10      	cmp	r3, #16
 800c01e:	d103      	bne.n	800c028 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2290      	movs	r2, #144	@ 0x90
 800c024:	4313      	orrs	r3, r2
 800c026:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c028:	1cbb      	adds	r3, r7, #2
 800c02a:	881b      	ldrh	r3, [r3, #0]
 800c02c:	2b20      	cmp	r3, #32
 800c02e:	d103      	bne.n	800c038 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2220      	movs	r2, #32
 800c034:	4313      	orrs	r3, r2
 800c036:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c038:	1cbb      	adds	r3, r7, #2
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	2b40      	cmp	r3, #64	@ 0x40
 800c03e:	d103      	bne.n	800c048 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2240      	movs	r2, #64	@ 0x40
 800c044:	4313      	orrs	r3, r2
 800c046:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	43d9      	mvns	r1, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	400a      	ands	r2, r1
 800c058:	601a      	str	r2, [r3, #0]
}
 800c05a:	46c0      	nop			@ (mov r8, r8)
 800c05c:	46bd      	mov	sp, r7
 800c05e:	b004      	add	sp, #16
 800c060:	bd80      	pop	{r7, pc}
	...

0800c064 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2241      	movs	r2, #65	@ 0x41
 800c072:	5c9b      	ldrb	r3, [r3, r2]
 800c074:	b2db      	uxtb	r3, r3
 800c076:	2b20      	cmp	r3, #32
 800c078:	d138      	bne.n	800c0ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2240      	movs	r2, #64	@ 0x40
 800c07e:	5c9b      	ldrb	r3, [r3, r2]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d101      	bne.n	800c088 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c084:	2302      	movs	r3, #2
 800c086:	e032      	b.n	800c0ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2240      	movs	r2, #64	@ 0x40
 800c08c:	2101      	movs	r1, #1
 800c08e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2241      	movs	r2, #65	@ 0x41
 800c094:	2124      	movs	r1, #36	@ 0x24
 800c096:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	438a      	bics	r2, r1
 800c0a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4911      	ldr	r1, [pc, #68]	@ (800c0f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800c0b4:	400a      	ands	r2, r1
 800c0b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	6819      	ldr	r1, [r3, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	430a      	orrs	r2, r1
 800c0c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2101      	movs	r1, #1
 800c0d4:	430a      	orrs	r2, r1
 800c0d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2241      	movs	r2, #65	@ 0x41
 800c0dc:	2120      	movs	r1, #32
 800c0de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2240      	movs	r2, #64	@ 0x40
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	e000      	b.n	800c0ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c0ec:	2302      	movs	r3, #2
  }
}
 800c0ee:	0018      	movs	r0, r3
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	b002      	add	sp, #8
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	46c0      	nop			@ (mov r8, r8)
 800c0f8:	ffffefff 	.word	0xffffefff

0800c0fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2241      	movs	r2, #65	@ 0x41
 800c10a:	5c9b      	ldrb	r3, [r3, r2]
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	2b20      	cmp	r3, #32
 800c110:	d139      	bne.n	800c186 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2240      	movs	r2, #64	@ 0x40
 800c116:	5c9b      	ldrb	r3, [r3, r2]
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d101      	bne.n	800c120 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c11c:	2302      	movs	r3, #2
 800c11e:	e033      	b.n	800c188 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2240      	movs	r2, #64	@ 0x40
 800c124:	2101      	movs	r1, #1
 800c126:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2241      	movs	r2, #65	@ 0x41
 800c12c:	2124      	movs	r1, #36	@ 0x24
 800c12e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2101      	movs	r1, #1
 800c13c:	438a      	bics	r2, r1
 800c13e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	4a11      	ldr	r2, [pc, #68]	@ (800c190 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c14c:	4013      	ands	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	021b      	lsls	r3, r3, #8
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	4313      	orrs	r3, r2
 800c158:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2101      	movs	r1, #1
 800c16e:	430a      	orrs	r2, r1
 800c170:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2241      	movs	r2, #65	@ 0x41
 800c176:	2120      	movs	r1, #32
 800c178:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2240      	movs	r2, #64	@ 0x40
 800c17e:	2100      	movs	r1, #0
 800c180:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	e000      	b.n	800c188 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c186:	2302      	movs	r3, #2
  }
}
 800c188:	0018      	movs	r0, r3
 800c18a:	46bd      	mov	sp, r7
 800c18c:	b004      	add	sp, #16
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	fffff0ff 	.word	0xfffff0ff

0800c194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d101      	bne.n	800c1a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e305      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	d100      	bne.n	800c1b2 <HAL_RCC_OscConfig+0x1e>
 800c1b0:	e08d      	b.n	800c2ce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800c1b2:	4bc5      	ldr	r3, [pc, #788]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	220c      	movs	r2, #12
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	2b04      	cmp	r3, #4
 800c1bc:	d00e      	beq.n	800c1dc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c1be:	4bc2      	ldr	r3, [pc, #776]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	220c      	movs	r2, #12
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	2b08      	cmp	r3, #8
 800c1c8:	d116      	bne.n	800c1f8 <HAL_RCC_OscConfig+0x64>
 800c1ca:	4bbf      	ldr	r3, [pc, #764]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c1cc:	685a      	ldr	r2, [r3, #4]
 800c1ce:	23c0      	movs	r3, #192	@ 0xc0
 800c1d0:	025b      	lsls	r3, r3, #9
 800c1d2:	401a      	ands	r2, r3
 800c1d4:	2380      	movs	r3, #128	@ 0x80
 800c1d6:	025b      	lsls	r3, r3, #9
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d10d      	bne.n	800c1f8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1dc:	4bba      	ldr	r3, [pc, #744]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	2380      	movs	r3, #128	@ 0x80
 800c1e2:	029b      	lsls	r3, r3, #10
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	d100      	bne.n	800c1ea <HAL_RCC_OscConfig+0x56>
 800c1e8:	e070      	b.n	800c2cc <HAL_RCC_OscConfig+0x138>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d000      	beq.n	800c1f4 <HAL_RCC_OscConfig+0x60>
 800c1f2:	e06b      	b.n	800c2cc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e2dc      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d107      	bne.n	800c210 <HAL_RCC_OscConfig+0x7c>
 800c200:	4bb1      	ldr	r3, [pc, #708]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	4bb0      	ldr	r3, [pc, #704]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c206:	2180      	movs	r1, #128	@ 0x80
 800c208:	0249      	lsls	r1, r1, #9
 800c20a:	430a      	orrs	r2, r1
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	e02f      	b.n	800c270 <HAL_RCC_OscConfig+0xdc>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10c      	bne.n	800c232 <HAL_RCC_OscConfig+0x9e>
 800c218:	4bab      	ldr	r3, [pc, #684]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	4baa      	ldr	r3, [pc, #680]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c21e:	49ab      	ldr	r1, [pc, #684]	@ (800c4cc <HAL_RCC_OscConfig+0x338>)
 800c220:	400a      	ands	r2, r1
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	4ba8      	ldr	r3, [pc, #672]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	4ba7      	ldr	r3, [pc, #668]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c22a:	49a9      	ldr	r1, [pc, #676]	@ (800c4d0 <HAL_RCC_OscConfig+0x33c>)
 800c22c:	400a      	ands	r2, r1
 800c22e:	601a      	str	r2, [r3, #0]
 800c230:	e01e      	b.n	800c270 <HAL_RCC_OscConfig+0xdc>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	2b05      	cmp	r3, #5
 800c238:	d10e      	bne.n	800c258 <HAL_RCC_OscConfig+0xc4>
 800c23a:	4ba3      	ldr	r3, [pc, #652]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	4ba2      	ldr	r3, [pc, #648]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c240:	2180      	movs	r1, #128	@ 0x80
 800c242:	02c9      	lsls	r1, r1, #11
 800c244:	430a      	orrs	r2, r1
 800c246:	601a      	str	r2, [r3, #0]
 800c248:	4b9f      	ldr	r3, [pc, #636]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	4b9e      	ldr	r3, [pc, #632]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c24e:	2180      	movs	r1, #128	@ 0x80
 800c250:	0249      	lsls	r1, r1, #9
 800c252:	430a      	orrs	r2, r1
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	e00b      	b.n	800c270 <HAL_RCC_OscConfig+0xdc>
 800c258:	4b9b      	ldr	r3, [pc, #620]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	4b9a      	ldr	r3, [pc, #616]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c25e:	499b      	ldr	r1, [pc, #620]	@ (800c4cc <HAL_RCC_OscConfig+0x338>)
 800c260:	400a      	ands	r2, r1
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	4b98      	ldr	r3, [pc, #608]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	4b97      	ldr	r3, [pc, #604]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c26a:	4999      	ldr	r1, [pc, #612]	@ (800c4d0 <HAL_RCC_OscConfig+0x33c>)
 800c26c:	400a      	ands	r2, r1
 800c26e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d014      	beq.n	800c2a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c278:	f7fc f822 	bl	80082c0 <HAL_GetTick>
 800c27c:	0003      	movs	r3, r0
 800c27e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c280:	e008      	b.n	800c294 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c282:	f7fc f81d 	bl	80082c0 <HAL_GetTick>
 800c286:	0002      	movs	r2, r0
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	2b64      	cmp	r3, #100	@ 0x64
 800c28e:	d901      	bls.n	800c294 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800c290:	2303      	movs	r3, #3
 800c292:	e28e      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c294:	4b8c      	ldr	r3, [pc, #560]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	2380      	movs	r3, #128	@ 0x80
 800c29a:	029b      	lsls	r3, r3, #10
 800c29c:	4013      	ands	r3, r2
 800c29e:	d0f0      	beq.n	800c282 <HAL_RCC_OscConfig+0xee>
 800c2a0:	e015      	b.n	800c2ce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2a2:	f7fc f80d 	bl	80082c0 <HAL_GetTick>
 800c2a6:	0003      	movs	r3, r0
 800c2a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c2aa:	e008      	b.n	800c2be <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c2ac:	f7fc f808 	bl	80082c0 <HAL_GetTick>
 800c2b0:	0002      	movs	r2, r0
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	1ad3      	subs	r3, r2, r3
 800c2b6:	2b64      	cmp	r3, #100	@ 0x64
 800c2b8:	d901      	bls.n	800c2be <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	e279      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c2be:	4b82      	ldr	r3, [pc, #520]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	2380      	movs	r3, #128	@ 0x80
 800c2c4:	029b      	lsls	r3, r3, #10
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	d1f0      	bne.n	800c2ac <HAL_RCC_OscConfig+0x118>
 800c2ca:	e000      	b.n	800c2ce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2cc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	d100      	bne.n	800c2da <HAL_RCC_OscConfig+0x146>
 800c2d8:	e06c      	b.n	800c3b4 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800c2da:	4b7b      	ldr	r3, [pc, #492]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	220c      	movs	r2, #12
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	d00e      	beq.n	800c302 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800c2e4:	4b78      	ldr	r3, [pc, #480]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	220c      	movs	r2, #12
 800c2ea:	4013      	ands	r3, r2
 800c2ec:	2b08      	cmp	r3, #8
 800c2ee:	d11f      	bne.n	800c330 <HAL_RCC_OscConfig+0x19c>
 800c2f0:	4b75      	ldr	r3, [pc, #468]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c2f2:	685a      	ldr	r2, [r3, #4]
 800c2f4:	23c0      	movs	r3, #192	@ 0xc0
 800c2f6:	025b      	lsls	r3, r3, #9
 800c2f8:	401a      	ands	r2, r3
 800c2fa:	2380      	movs	r3, #128	@ 0x80
 800c2fc:	021b      	lsls	r3, r3, #8
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d116      	bne.n	800c330 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c302:	4b71      	ldr	r3, [pc, #452]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2202      	movs	r2, #2
 800c308:	4013      	ands	r3, r2
 800c30a:	d005      	beq.n	800c318 <HAL_RCC_OscConfig+0x184>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d001      	beq.n	800c318 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	e24c      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c318:	4b6b      	ldr	r3, [pc, #428]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	22f8      	movs	r2, #248	@ 0xf8
 800c31e:	4393      	bics	r3, r2
 800c320:	0019      	movs	r1, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	00da      	lsls	r2, r3, #3
 800c328:	4b67      	ldr	r3, [pc, #412]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c32a:	430a      	orrs	r2, r1
 800c32c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c32e:	e041      	b.n	800c3b4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d024      	beq.n	800c382 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c338:	4b63      	ldr	r3, [pc, #396]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	4b62      	ldr	r3, [pc, #392]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c33e:	2101      	movs	r1, #1
 800c340:	430a      	orrs	r2, r1
 800c342:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c344:	f7fb ffbc 	bl	80082c0 <HAL_GetTick>
 800c348:	0003      	movs	r3, r0
 800c34a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c34c:	e008      	b.n	800c360 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c34e:	f7fb ffb7 	bl	80082c0 <HAL_GetTick>
 800c352:	0002      	movs	r2, r0
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d901      	bls.n	800c360 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c35c:	2303      	movs	r3, #3
 800c35e:	e228      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c360:	4b59      	ldr	r3, [pc, #356]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2202      	movs	r2, #2
 800c366:	4013      	ands	r3, r2
 800c368:	d0f1      	beq.n	800c34e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c36a:	4b57      	ldr	r3, [pc, #348]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	22f8      	movs	r2, #248	@ 0xf8
 800c370:	4393      	bics	r3, r2
 800c372:	0019      	movs	r1, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	00da      	lsls	r2, r3, #3
 800c37a:	4b53      	ldr	r3, [pc, #332]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c37c:	430a      	orrs	r2, r1
 800c37e:	601a      	str	r2, [r3, #0]
 800c380:	e018      	b.n	800c3b4 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c382:	4b51      	ldr	r3, [pc, #324]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	4b50      	ldr	r3, [pc, #320]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c388:	2101      	movs	r1, #1
 800c38a:	438a      	bics	r2, r1
 800c38c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c38e:	f7fb ff97 	bl	80082c0 <HAL_GetTick>
 800c392:	0003      	movs	r3, r0
 800c394:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c396:	e008      	b.n	800c3aa <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c398:	f7fb ff92 	bl	80082c0 <HAL_GetTick>
 800c39c:	0002      	movs	r2, r0
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d901      	bls.n	800c3aa <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	e203      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c3aa:	4b47      	ldr	r3, [pc, #284]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	d1f1      	bne.n	800c398 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2208      	movs	r2, #8
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	d036      	beq.n	800c42c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	69db      	ldr	r3, [r3, #28]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d019      	beq.n	800c3fa <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c3c6:	4b40      	ldr	r3, [pc, #256]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c3c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3ca:	4b3f      	ldr	r3, [pc, #252]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c3cc:	2101      	movs	r1, #1
 800c3ce:	430a      	orrs	r2, r1
 800c3d0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c3d2:	f7fb ff75 	bl	80082c0 <HAL_GetTick>
 800c3d6:	0003      	movs	r3, r0
 800c3d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3da:	e008      	b.n	800c3ee <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c3dc:	f7fb ff70 	bl	80082c0 <HAL_GetTick>
 800c3e0:	0002      	movs	r2, r0
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	1ad3      	subs	r3, r2, r3
 800c3e6:	2b02      	cmp	r3, #2
 800c3e8:	d901      	bls.n	800c3ee <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	e1e1      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3ee:	4b36      	ldr	r3, [pc, #216]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	d0f1      	beq.n	800c3dc <HAL_RCC_OscConfig+0x248>
 800c3f8:	e018      	b.n	800c42c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c3fa:	4b33      	ldr	r3, [pc, #204]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c3fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3fe:	4b32      	ldr	r3, [pc, #200]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c400:	2101      	movs	r1, #1
 800c402:	438a      	bics	r2, r1
 800c404:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c406:	f7fb ff5b 	bl	80082c0 <HAL_GetTick>
 800c40a:	0003      	movs	r3, r0
 800c40c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c40e:	e008      	b.n	800c422 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c410:	f7fb ff56 	bl	80082c0 <HAL_GetTick>
 800c414:	0002      	movs	r2, r0
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d901      	bls.n	800c422 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800c41e:	2303      	movs	r3, #3
 800c420:	e1c7      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c422:	4b29      	ldr	r3, [pc, #164]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c426:	2202      	movs	r2, #2
 800c428:	4013      	ands	r3, r2
 800c42a:	d1f1      	bne.n	800c410 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2204      	movs	r2, #4
 800c432:	4013      	ands	r3, r2
 800c434:	d100      	bne.n	800c438 <HAL_RCC_OscConfig+0x2a4>
 800c436:	e0b5      	b.n	800c5a4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c438:	201f      	movs	r0, #31
 800c43a:	183b      	adds	r3, r7, r0
 800c43c:	2200      	movs	r2, #0
 800c43e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c440:	4b21      	ldr	r3, [pc, #132]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c442:	69da      	ldr	r2, [r3, #28]
 800c444:	2380      	movs	r3, #128	@ 0x80
 800c446:	055b      	lsls	r3, r3, #21
 800c448:	4013      	ands	r3, r2
 800c44a:	d110      	bne.n	800c46e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c44c:	4b1e      	ldr	r3, [pc, #120]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c44e:	69da      	ldr	r2, [r3, #28]
 800c450:	4b1d      	ldr	r3, [pc, #116]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c452:	2180      	movs	r1, #128	@ 0x80
 800c454:	0549      	lsls	r1, r1, #21
 800c456:	430a      	orrs	r2, r1
 800c458:	61da      	str	r2, [r3, #28]
 800c45a:	4b1b      	ldr	r3, [pc, #108]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c45c:	69da      	ldr	r2, [r3, #28]
 800c45e:	2380      	movs	r3, #128	@ 0x80
 800c460:	055b      	lsls	r3, r3, #21
 800c462:	4013      	ands	r3, r2
 800c464:	60fb      	str	r3, [r7, #12]
 800c466:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c468:	183b      	adds	r3, r7, r0
 800c46a:	2201      	movs	r2, #1
 800c46c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c46e:	4b19      	ldr	r3, [pc, #100]	@ (800c4d4 <HAL_RCC_OscConfig+0x340>)
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	2380      	movs	r3, #128	@ 0x80
 800c474:	005b      	lsls	r3, r3, #1
 800c476:	4013      	ands	r3, r2
 800c478:	d11a      	bne.n	800c4b0 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c47a:	4b16      	ldr	r3, [pc, #88]	@ (800c4d4 <HAL_RCC_OscConfig+0x340>)
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	4b15      	ldr	r3, [pc, #84]	@ (800c4d4 <HAL_RCC_OscConfig+0x340>)
 800c480:	2180      	movs	r1, #128	@ 0x80
 800c482:	0049      	lsls	r1, r1, #1
 800c484:	430a      	orrs	r2, r1
 800c486:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c488:	f7fb ff1a 	bl	80082c0 <HAL_GetTick>
 800c48c:	0003      	movs	r3, r0
 800c48e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c490:	e008      	b.n	800c4a4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c492:	f7fb ff15 	bl	80082c0 <HAL_GetTick>
 800c496:	0002      	movs	r2, r0
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	2b64      	cmp	r3, #100	@ 0x64
 800c49e:	d901      	bls.n	800c4a4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e186      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4a4:	4b0b      	ldr	r3, [pc, #44]	@ (800c4d4 <HAL_RCC_OscConfig+0x340>)
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	2380      	movs	r3, #128	@ 0x80
 800c4aa:	005b      	lsls	r3, r3, #1
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	d0f0      	beq.n	800c492 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d10f      	bne.n	800c4d8 <HAL_RCC_OscConfig+0x344>
 800c4b8:	4b03      	ldr	r3, [pc, #12]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c4ba:	6a1a      	ldr	r2, [r3, #32]
 800c4bc:	4b02      	ldr	r3, [pc, #8]	@ (800c4c8 <HAL_RCC_OscConfig+0x334>)
 800c4be:	2101      	movs	r1, #1
 800c4c0:	430a      	orrs	r2, r1
 800c4c2:	621a      	str	r2, [r3, #32]
 800c4c4:	e036      	b.n	800c534 <HAL_RCC_OscConfig+0x3a0>
 800c4c6:	46c0      	nop			@ (mov r8, r8)
 800c4c8:	40021000 	.word	0x40021000
 800c4cc:	fffeffff 	.word	0xfffeffff
 800c4d0:	fffbffff 	.word	0xfffbffff
 800c4d4:	40007000 	.word	0x40007000
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10c      	bne.n	800c4fa <HAL_RCC_OscConfig+0x366>
 800c4e0:	4bb6      	ldr	r3, [pc, #728]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c4e2:	6a1a      	ldr	r2, [r3, #32]
 800c4e4:	4bb5      	ldr	r3, [pc, #724]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c4e6:	2101      	movs	r1, #1
 800c4e8:	438a      	bics	r2, r1
 800c4ea:	621a      	str	r2, [r3, #32]
 800c4ec:	4bb3      	ldr	r3, [pc, #716]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c4ee:	6a1a      	ldr	r2, [r3, #32]
 800c4f0:	4bb2      	ldr	r3, [pc, #712]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c4f2:	2104      	movs	r1, #4
 800c4f4:	438a      	bics	r2, r1
 800c4f6:	621a      	str	r2, [r3, #32]
 800c4f8:	e01c      	b.n	800c534 <HAL_RCC_OscConfig+0x3a0>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	2b05      	cmp	r3, #5
 800c500:	d10c      	bne.n	800c51c <HAL_RCC_OscConfig+0x388>
 800c502:	4bae      	ldr	r3, [pc, #696]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c504:	6a1a      	ldr	r2, [r3, #32]
 800c506:	4bad      	ldr	r3, [pc, #692]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c508:	2104      	movs	r1, #4
 800c50a:	430a      	orrs	r2, r1
 800c50c:	621a      	str	r2, [r3, #32]
 800c50e:	4bab      	ldr	r3, [pc, #684]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c510:	6a1a      	ldr	r2, [r3, #32]
 800c512:	4baa      	ldr	r3, [pc, #680]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c514:	2101      	movs	r1, #1
 800c516:	430a      	orrs	r2, r1
 800c518:	621a      	str	r2, [r3, #32]
 800c51a:	e00b      	b.n	800c534 <HAL_RCC_OscConfig+0x3a0>
 800c51c:	4ba7      	ldr	r3, [pc, #668]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c51e:	6a1a      	ldr	r2, [r3, #32]
 800c520:	4ba6      	ldr	r3, [pc, #664]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c522:	2101      	movs	r1, #1
 800c524:	438a      	bics	r2, r1
 800c526:	621a      	str	r2, [r3, #32]
 800c528:	4ba4      	ldr	r3, [pc, #656]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c52a:	6a1a      	ldr	r2, [r3, #32]
 800c52c:	4ba3      	ldr	r3, [pc, #652]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c52e:	2104      	movs	r1, #4
 800c530:	438a      	bics	r2, r1
 800c532:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d014      	beq.n	800c566 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c53c:	f7fb fec0 	bl	80082c0 <HAL_GetTick>
 800c540:	0003      	movs	r3, r0
 800c542:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c544:	e009      	b.n	800c55a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c546:	f7fb febb 	bl	80082c0 <HAL_GetTick>
 800c54a:	0002      	movs	r2, r0
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	4a9b      	ldr	r2, [pc, #620]	@ (800c7c0 <HAL_RCC_OscConfig+0x62c>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d901      	bls.n	800c55a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800c556:	2303      	movs	r3, #3
 800c558:	e12b      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c55a:	4b98      	ldr	r3, [pc, #608]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c55c:	6a1b      	ldr	r3, [r3, #32]
 800c55e:	2202      	movs	r2, #2
 800c560:	4013      	ands	r3, r2
 800c562:	d0f0      	beq.n	800c546 <HAL_RCC_OscConfig+0x3b2>
 800c564:	e013      	b.n	800c58e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c566:	f7fb feab 	bl	80082c0 <HAL_GetTick>
 800c56a:	0003      	movs	r3, r0
 800c56c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c56e:	e009      	b.n	800c584 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c570:	f7fb fea6 	bl	80082c0 <HAL_GetTick>
 800c574:	0002      	movs	r2, r0
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	4a91      	ldr	r2, [pc, #580]	@ (800c7c0 <HAL_RCC_OscConfig+0x62c>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d901      	bls.n	800c584 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800c580:	2303      	movs	r3, #3
 800c582:	e116      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c584:	4b8d      	ldr	r3, [pc, #564]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c586:	6a1b      	ldr	r3, [r3, #32]
 800c588:	2202      	movs	r2, #2
 800c58a:	4013      	ands	r3, r2
 800c58c:	d1f0      	bne.n	800c570 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800c58e:	231f      	movs	r3, #31
 800c590:	18fb      	adds	r3, r7, r3
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2b01      	cmp	r3, #1
 800c596:	d105      	bne.n	800c5a4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c598:	4b88      	ldr	r3, [pc, #544]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c59a:	69da      	ldr	r2, [r3, #28]
 800c59c:	4b87      	ldr	r3, [pc, #540]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c59e:	4989      	ldr	r1, [pc, #548]	@ (800c7c4 <HAL_RCC_OscConfig+0x630>)
 800c5a0:	400a      	ands	r2, r1
 800c5a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2210      	movs	r2, #16
 800c5aa:	4013      	ands	r3, r2
 800c5ac:	d063      	beq.n	800c676 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	695b      	ldr	r3, [r3, #20]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d12a      	bne.n	800c60c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800c5b6:	4b81      	ldr	r3, [pc, #516]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c5b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5ba:	4b80      	ldr	r3, [pc, #512]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c5bc:	2104      	movs	r1, #4
 800c5be:	430a      	orrs	r2, r1
 800c5c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800c5c2:	4b7e      	ldr	r3, [pc, #504]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c5c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5c6:	4b7d      	ldr	r3, [pc, #500]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c5c8:	2101      	movs	r1, #1
 800c5ca:	430a      	orrs	r2, r1
 800c5cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c5ce:	f7fb fe77 	bl	80082c0 <HAL_GetTick>
 800c5d2:	0003      	movs	r3, r0
 800c5d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800c5d6:	e008      	b.n	800c5ea <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800c5d8:	f7fb fe72 	bl	80082c0 <HAL_GetTick>
 800c5dc:	0002      	movs	r2, r0
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d901      	bls.n	800c5ea <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	e0e3      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800c5ea:	4b74      	ldr	r3, [pc, #464]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c5ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5ee:	2202      	movs	r2, #2
 800c5f0:	4013      	ands	r3, r2
 800c5f2:	d0f1      	beq.n	800c5d8 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800c5f4:	4b71      	ldr	r3, [pc, #452]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c5f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5f8:	22f8      	movs	r2, #248	@ 0xf8
 800c5fa:	4393      	bics	r3, r2
 800c5fc:	0019      	movs	r1, r3
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	699b      	ldr	r3, [r3, #24]
 800c602:	00da      	lsls	r2, r3, #3
 800c604:	4b6d      	ldr	r3, [pc, #436]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c606:	430a      	orrs	r2, r1
 800c608:	635a      	str	r2, [r3, #52]	@ 0x34
 800c60a:	e034      	b.n	800c676 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	695b      	ldr	r3, [r3, #20]
 800c610:	3305      	adds	r3, #5
 800c612:	d111      	bne.n	800c638 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800c614:	4b69      	ldr	r3, [pc, #420]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c618:	4b68      	ldr	r3, [pc, #416]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c61a:	2104      	movs	r1, #4
 800c61c:	438a      	bics	r2, r1
 800c61e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800c620:	4b66      	ldr	r3, [pc, #408]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c624:	22f8      	movs	r2, #248	@ 0xf8
 800c626:	4393      	bics	r3, r2
 800c628:	0019      	movs	r1, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	699b      	ldr	r3, [r3, #24]
 800c62e:	00da      	lsls	r2, r3, #3
 800c630:	4b62      	ldr	r3, [pc, #392]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c632:	430a      	orrs	r2, r1
 800c634:	635a      	str	r2, [r3, #52]	@ 0x34
 800c636:	e01e      	b.n	800c676 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800c638:	4b60      	ldr	r3, [pc, #384]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c63a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c63c:	4b5f      	ldr	r3, [pc, #380]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c63e:	2104      	movs	r1, #4
 800c640:	430a      	orrs	r2, r1
 800c642:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800c644:	4b5d      	ldr	r3, [pc, #372]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c648:	4b5c      	ldr	r3, [pc, #368]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c64a:	2101      	movs	r1, #1
 800c64c:	438a      	bics	r2, r1
 800c64e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c650:	f7fb fe36 	bl	80082c0 <HAL_GetTick>
 800c654:	0003      	movs	r3, r0
 800c656:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800c658:	e008      	b.n	800c66c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800c65a:	f7fb fe31 	bl	80082c0 <HAL_GetTick>
 800c65e:	0002      	movs	r2, r0
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	2b02      	cmp	r3, #2
 800c666:	d901      	bls.n	800c66c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800c668:	2303      	movs	r3, #3
 800c66a:	e0a2      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800c66c:	4b53      	ldr	r3, [pc, #332]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c66e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c670:	2202      	movs	r2, #2
 800c672:	4013      	ands	r3, r2
 800c674:	d1f1      	bne.n	800c65a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6a1b      	ldr	r3, [r3, #32]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d100      	bne.n	800c680 <HAL_RCC_OscConfig+0x4ec>
 800c67e:	e097      	b.n	800c7b0 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c680:	4b4e      	ldr	r3, [pc, #312]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	220c      	movs	r2, #12
 800c686:	4013      	ands	r3, r2
 800c688:	2b08      	cmp	r3, #8
 800c68a:	d100      	bne.n	800c68e <HAL_RCC_OscConfig+0x4fa>
 800c68c:	e06b      	b.n	800c766 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a1b      	ldr	r3, [r3, #32]
 800c692:	2b02      	cmp	r3, #2
 800c694:	d14c      	bne.n	800c730 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c696:	4b49      	ldr	r3, [pc, #292]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	4b48      	ldr	r3, [pc, #288]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c69c:	494a      	ldr	r1, [pc, #296]	@ (800c7c8 <HAL_RCC_OscConfig+0x634>)
 800c69e:	400a      	ands	r2, r1
 800c6a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6a2:	f7fb fe0d 	bl	80082c0 <HAL_GetTick>
 800c6a6:	0003      	movs	r3, r0
 800c6a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c6aa:	e008      	b.n	800c6be <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c6ac:	f7fb fe08 	bl	80082c0 <HAL_GetTick>
 800c6b0:	0002      	movs	r2, r0
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	1ad3      	subs	r3, r2, r3
 800c6b6:	2b02      	cmp	r3, #2
 800c6b8:	d901      	bls.n	800c6be <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800c6ba:	2303      	movs	r3, #3
 800c6bc:	e079      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c6be:	4b3f      	ldr	r3, [pc, #252]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	2380      	movs	r3, #128	@ 0x80
 800c6c4:	049b      	lsls	r3, r3, #18
 800c6c6:	4013      	ands	r3, r2
 800c6c8:	d1f0      	bne.n	800c6ac <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c6ca:	4b3c      	ldr	r3, [pc, #240]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ce:	220f      	movs	r2, #15
 800c6d0:	4393      	bics	r3, r2
 800c6d2:	0019      	movs	r1, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6d8:	4b38      	ldr	r3, [pc, #224]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c6da:	430a      	orrs	r2, r1
 800c6dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c6de:	4b37      	ldr	r3, [pc, #220]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	4a3a      	ldr	r2, [pc, #232]	@ (800c7cc <HAL_RCC_OscConfig+0x638>)
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	0019      	movs	r1, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6f0:	431a      	orrs	r2, r3
 800c6f2:	4b32      	ldr	r3, [pc, #200]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c6f4:	430a      	orrs	r2, r1
 800c6f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c6f8:	4b30      	ldr	r3, [pc, #192]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	4b2f      	ldr	r3, [pc, #188]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c6fe:	2180      	movs	r1, #128	@ 0x80
 800c700:	0449      	lsls	r1, r1, #17
 800c702:	430a      	orrs	r2, r1
 800c704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c706:	f7fb fddb 	bl	80082c0 <HAL_GetTick>
 800c70a:	0003      	movs	r3, r0
 800c70c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c70e:	e008      	b.n	800c722 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c710:	f7fb fdd6 	bl	80082c0 <HAL_GetTick>
 800c714:	0002      	movs	r2, r0
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d901      	bls.n	800c722 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800c71e:	2303      	movs	r3, #3
 800c720:	e047      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c722:	4b26      	ldr	r3, [pc, #152]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	2380      	movs	r3, #128	@ 0x80
 800c728:	049b      	lsls	r3, r3, #18
 800c72a:	4013      	ands	r3, r2
 800c72c:	d0f0      	beq.n	800c710 <HAL_RCC_OscConfig+0x57c>
 800c72e:	e03f      	b.n	800c7b0 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c730:	4b22      	ldr	r3, [pc, #136]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	4b21      	ldr	r3, [pc, #132]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c736:	4924      	ldr	r1, [pc, #144]	@ (800c7c8 <HAL_RCC_OscConfig+0x634>)
 800c738:	400a      	ands	r2, r1
 800c73a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c73c:	f7fb fdc0 	bl	80082c0 <HAL_GetTick>
 800c740:	0003      	movs	r3, r0
 800c742:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c744:	e008      	b.n	800c758 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c746:	f7fb fdbb 	bl	80082c0 <HAL_GetTick>
 800c74a:	0002      	movs	r2, r0
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	1ad3      	subs	r3, r2, r3
 800c750:	2b02      	cmp	r3, #2
 800c752:	d901      	bls.n	800c758 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800c754:	2303      	movs	r3, #3
 800c756:	e02c      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c758:	4b18      	ldr	r3, [pc, #96]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	2380      	movs	r3, #128	@ 0x80
 800c75e:	049b      	lsls	r3, r3, #18
 800c760:	4013      	ands	r3, r2
 800c762:	d1f0      	bne.n	800c746 <HAL_RCC_OscConfig+0x5b2>
 800c764:	e024      	b.n	800c7b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a1b      	ldr	r3, [r3, #32]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d101      	bne.n	800c772 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800c76e:	2301      	movs	r3, #1
 800c770:	e01f      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800c772:	4b12      	ldr	r3, [pc, #72]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800c778:	4b10      	ldr	r3, [pc, #64]	@ (800c7bc <HAL_RCC_OscConfig+0x628>)
 800c77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c77c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	23c0      	movs	r3, #192	@ 0xc0
 800c782:	025b      	lsls	r3, r3, #9
 800c784:	401a      	ands	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d10e      	bne.n	800c7ac <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	220f      	movs	r2, #15
 800c792:	401a      	ands	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c798:	429a      	cmp	r2, r3
 800c79a:	d107      	bne.n	800c7ac <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	23f0      	movs	r3, #240	@ 0xf0
 800c7a0:	039b      	lsls	r3, r3, #14
 800c7a2:	401a      	ands	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d001      	beq.n	800c7b0 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e000      	b.n	800c7b2 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	0018      	movs	r0, r3
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	b008      	add	sp, #32
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	46c0      	nop			@ (mov r8, r8)
 800c7bc:	40021000 	.word	0x40021000
 800c7c0:	00001388 	.word	0x00001388
 800c7c4:	efffffff 	.word	0xefffffff
 800c7c8:	feffffff 	.word	0xfeffffff
 800c7cc:	ffc27fff 	.word	0xffc27fff

0800c7d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d101      	bne.n	800c7e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e0b3      	b.n	800c94c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c7e4:	4b5b      	ldr	r3, [pc, #364]	@ (800c954 <HAL_RCC_ClockConfig+0x184>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d911      	bls.n	800c816 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7f2:	4b58      	ldr	r3, [pc, #352]	@ (800c954 <HAL_RCC_ClockConfig+0x184>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	4393      	bics	r3, r2
 800c7fa:	0019      	movs	r1, r3
 800c7fc:	4b55      	ldr	r3, [pc, #340]	@ (800c954 <HAL_RCC_ClockConfig+0x184>)
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	430a      	orrs	r2, r1
 800c802:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c804:	4b53      	ldr	r3, [pc, #332]	@ (800c954 <HAL_RCC_ClockConfig+0x184>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2201      	movs	r2, #1
 800c80a:	4013      	ands	r3, r2
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d001      	beq.n	800c816 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	e09a      	b.n	800c94c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2202      	movs	r2, #2
 800c81c:	4013      	ands	r3, r2
 800c81e:	d015      	beq.n	800c84c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2204      	movs	r2, #4
 800c826:	4013      	ands	r3, r2
 800c828:	d006      	beq.n	800c838 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800c82a:	4b4b      	ldr	r3, [pc, #300]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	4b4a      	ldr	r3, [pc, #296]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c830:	21e0      	movs	r1, #224	@ 0xe0
 800c832:	00c9      	lsls	r1, r1, #3
 800c834:	430a      	orrs	r2, r1
 800c836:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c838:	4b47      	ldr	r3, [pc, #284]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	22f0      	movs	r2, #240	@ 0xf0
 800c83e:	4393      	bics	r3, r2
 800c840:	0019      	movs	r1, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	689a      	ldr	r2, [r3, #8]
 800c846:	4b44      	ldr	r3, [pc, #272]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c848:	430a      	orrs	r2, r1
 800c84a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2201      	movs	r2, #1
 800c852:	4013      	ands	r3, r2
 800c854:	d040      	beq.n	800c8d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d107      	bne.n	800c86e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c85e:	4b3e      	ldr	r3, [pc, #248]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	2380      	movs	r3, #128	@ 0x80
 800c864:	029b      	lsls	r3, r3, #10
 800c866:	4013      	ands	r3, r2
 800c868:	d114      	bne.n	800c894 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	e06e      	b.n	800c94c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	2b02      	cmp	r3, #2
 800c874:	d107      	bne.n	800c886 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c876:	4b38      	ldr	r3, [pc, #224]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	2380      	movs	r3, #128	@ 0x80
 800c87c:	049b      	lsls	r3, r3, #18
 800c87e:	4013      	ands	r3, r2
 800c880:	d108      	bne.n	800c894 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	e062      	b.n	800c94c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c886:	4b34      	ldr	r3, [pc, #208]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2202      	movs	r2, #2
 800c88c:	4013      	ands	r3, r2
 800c88e:	d101      	bne.n	800c894 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800c890:	2301      	movs	r3, #1
 800c892:	e05b      	b.n	800c94c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c894:	4b30      	ldr	r3, [pc, #192]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	2203      	movs	r2, #3
 800c89a:	4393      	bics	r3, r2
 800c89c:	0019      	movs	r1, r3
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	685a      	ldr	r2, [r3, #4]
 800c8a2:	4b2d      	ldr	r3, [pc, #180]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c8a4:	430a      	orrs	r2, r1
 800c8a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c8a8:	f7fb fd0a 	bl	80082c0 <HAL_GetTick>
 800c8ac:	0003      	movs	r3, r0
 800c8ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8b0:	e009      	b.n	800c8c6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c8b2:	f7fb fd05 	bl	80082c0 <HAL_GetTick>
 800c8b6:	0002      	movs	r2, r0
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	1ad3      	subs	r3, r2, r3
 800c8bc:	4a27      	ldr	r2, [pc, #156]	@ (800c95c <HAL_RCC_ClockConfig+0x18c>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d901      	bls.n	800c8c6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	e042      	b.n	800c94c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c8c6:	4b24      	ldr	r3, [pc, #144]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	220c      	movs	r2, #12
 800c8cc:	401a      	ands	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d1ec      	bne.n	800c8b2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c8d8:	4b1e      	ldr	r3, [pc, #120]	@ (800c954 <HAL_RCC_ClockConfig+0x184>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	4013      	ands	r3, r2
 800c8e0:	683a      	ldr	r2, [r7, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d211      	bcs.n	800c90a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8e6:	4b1b      	ldr	r3, [pc, #108]	@ (800c954 <HAL_RCC_ClockConfig+0x184>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	4393      	bics	r3, r2
 800c8ee:	0019      	movs	r1, r3
 800c8f0:	4b18      	ldr	r3, [pc, #96]	@ (800c954 <HAL_RCC_ClockConfig+0x184>)
 800c8f2:	683a      	ldr	r2, [r7, #0]
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8f8:	4b16      	ldr	r3, [pc, #88]	@ (800c954 <HAL_RCC_ClockConfig+0x184>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	4013      	ands	r3, r2
 800c900:	683a      	ldr	r2, [r7, #0]
 800c902:	429a      	cmp	r2, r3
 800c904:	d001      	beq.n	800c90a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	e020      	b.n	800c94c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2204      	movs	r2, #4
 800c910:	4013      	ands	r3, r2
 800c912:	d009      	beq.n	800c928 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800c914:	4b10      	ldr	r3, [pc, #64]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	4a11      	ldr	r2, [pc, #68]	@ (800c960 <HAL_RCC_ClockConfig+0x190>)
 800c91a:	4013      	ands	r3, r2
 800c91c:	0019      	movs	r1, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	68da      	ldr	r2, [r3, #12]
 800c922:	4b0d      	ldr	r3, [pc, #52]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c924:	430a      	orrs	r2, r1
 800c926:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800c928:	f000 f820 	bl	800c96c <HAL_RCC_GetSysClockFreq>
 800c92c:	0001      	movs	r1, r0
 800c92e:	4b0a      	ldr	r3, [pc, #40]	@ (800c958 <HAL_RCC_ClockConfig+0x188>)
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	091b      	lsrs	r3, r3, #4
 800c934:	220f      	movs	r2, #15
 800c936:	4013      	ands	r3, r2
 800c938:	4a0a      	ldr	r2, [pc, #40]	@ (800c964 <HAL_RCC_ClockConfig+0x194>)
 800c93a:	5cd3      	ldrb	r3, [r2, r3]
 800c93c:	000a      	movs	r2, r1
 800c93e:	40da      	lsrs	r2, r3
 800c940:	4b09      	ldr	r3, [pc, #36]	@ (800c968 <HAL_RCC_ClockConfig+0x198>)
 800c942:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800c944:	2003      	movs	r0, #3
 800c946:	f7fb fc75 	bl	8008234 <HAL_InitTick>
  
  return HAL_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	0018      	movs	r0, r3
 800c94e:	46bd      	mov	sp, r7
 800c950:	b004      	add	sp, #16
 800c952:	bd80      	pop	{r7, pc}
 800c954:	40022000 	.word	0x40022000
 800c958:	40021000 	.word	0x40021000
 800c95c:	00001388 	.word	0x00001388
 800c960:	fffff8ff 	.word	0xfffff8ff
 800c964:	08018ed8 	.word	0x08018ed8
 800c968:	2000002c 	.word	0x2000002c

0800c96c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c972:	2300      	movs	r3, #0
 800c974:	60fb      	str	r3, [r7, #12]
 800c976:	2300      	movs	r3, #0
 800c978:	60bb      	str	r3, [r7, #8]
 800c97a:	2300      	movs	r3, #0
 800c97c:	617b      	str	r3, [r7, #20]
 800c97e:	2300      	movs	r3, #0
 800c980:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c982:	2300      	movs	r3, #0
 800c984:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800c986:	4b21      	ldr	r3, [pc, #132]	@ (800ca0c <HAL_RCC_GetSysClockFreq+0xa0>)
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	220c      	movs	r2, #12
 800c990:	4013      	ands	r3, r2
 800c992:	2b04      	cmp	r3, #4
 800c994:	d002      	beq.n	800c99c <HAL_RCC_GetSysClockFreq+0x30>
 800c996:	2b08      	cmp	r3, #8
 800c998:	d003      	beq.n	800c9a2 <HAL_RCC_GetSysClockFreq+0x36>
 800c99a:	e02e      	b.n	800c9fa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c99c:	4b1c      	ldr	r3, [pc, #112]	@ (800ca10 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c99e:	613b      	str	r3, [r7, #16]
      break;
 800c9a0:	e02e      	b.n	800ca00 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	0c9b      	lsrs	r3, r3, #18
 800c9a6:	220f      	movs	r2, #15
 800c9a8:	4013      	ands	r3, r2
 800c9aa:	4a1a      	ldr	r2, [pc, #104]	@ (800ca14 <HAL_RCC_GetSysClockFreq+0xa8>)
 800c9ac:	5cd3      	ldrb	r3, [r2, r3]
 800c9ae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800c9b0:	4b16      	ldr	r3, [pc, #88]	@ (800ca0c <HAL_RCC_GetSysClockFreq+0xa0>)
 800c9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9b4:	220f      	movs	r2, #15
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	4a17      	ldr	r2, [pc, #92]	@ (800ca18 <HAL_RCC_GetSysClockFreq+0xac>)
 800c9ba:	5cd3      	ldrb	r3, [r2, r3]
 800c9bc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	23c0      	movs	r3, #192	@ 0xc0
 800c9c2:	025b      	lsls	r3, r3, #9
 800c9c4:	401a      	ands	r2, r3
 800c9c6:	2380      	movs	r3, #128	@ 0x80
 800c9c8:	025b      	lsls	r3, r3, #9
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d109      	bne.n	800c9e2 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800c9ce:	68b9      	ldr	r1, [r7, #8]
 800c9d0:	480f      	ldr	r0, [pc, #60]	@ (800ca10 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c9d2:	f7f3 fb97 	bl	8000104 <__udivsi3>
 800c9d6:	0003      	movs	r3, r0
 800c9d8:	001a      	movs	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4353      	muls	r3, r2
 800c9de:	617b      	str	r3, [r7, #20]
 800c9e0:	e008      	b.n	800c9f4 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800c9e2:	68b9      	ldr	r1, [r7, #8]
 800c9e4:	480a      	ldr	r0, [pc, #40]	@ (800ca10 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c9e6:	f7f3 fb8d 	bl	8000104 <__udivsi3>
 800c9ea:	0003      	movs	r3, r0
 800c9ec:	001a      	movs	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4353      	muls	r3, r2
 800c9f2:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	613b      	str	r3, [r7, #16]
      break;
 800c9f8:	e002      	b.n	800ca00 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c9fa:	4b05      	ldr	r3, [pc, #20]	@ (800ca10 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c9fc:	613b      	str	r3, [r7, #16]
      break;
 800c9fe:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800ca00:	693b      	ldr	r3, [r7, #16]
}
 800ca02:	0018      	movs	r0, r3
 800ca04:	46bd      	mov	sp, r7
 800ca06:	b006      	add	sp, #24
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	46c0      	nop			@ (mov r8, r8)
 800ca0c:	40021000 	.word	0x40021000
 800ca10:	007a1200 	.word	0x007a1200
 800ca14:	0801b774 	.word	0x0801b774
 800ca18:	0801b784 	.word	0x0801b784

0800ca1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b086      	sub	sp, #24
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ca24:	2300      	movs	r3, #0
 800ca26:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	2380      	movs	r3, #128	@ 0x80
 800ca32:	025b      	lsls	r3, r3, #9
 800ca34:	4013      	ands	r3, r2
 800ca36:	d100      	bne.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800ca38:	e08e      	b.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800ca3a:	2017      	movs	r0, #23
 800ca3c:	183b      	adds	r3, r7, r0
 800ca3e:	2200      	movs	r2, #0
 800ca40:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ca42:	4b57      	ldr	r3, [pc, #348]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800ca44:	69da      	ldr	r2, [r3, #28]
 800ca46:	2380      	movs	r3, #128	@ 0x80
 800ca48:	055b      	lsls	r3, r3, #21
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	d110      	bne.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ca4e:	4b54      	ldr	r3, [pc, #336]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800ca50:	69da      	ldr	r2, [r3, #28]
 800ca52:	4b53      	ldr	r3, [pc, #332]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800ca54:	2180      	movs	r1, #128	@ 0x80
 800ca56:	0549      	lsls	r1, r1, #21
 800ca58:	430a      	orrs	r2, r1
 800ca5a:	61da      	str	r2, [r3, #28]
 800ca5c:	4b50      	ldr	r3, [pc, #320]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800ca5e:	69da      	ldr	r2, [r3, #28]
 800ca60:	2380      	movs	r3, #128	@ 0x80
 800ca62:	055b      	lsls	r3, r3, #21
 800ca64:	4013      	ands	r3, r2
 800ca66:	60bb      	str	r3, [r7, #8]
 800ca68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ca6a:	183b      	adds	r3, r7, r0
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca70:	4b4c      	ldr	r3, [pc, #304]	@ (800cba4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	2380      	movs	r3, #128	@ 0x80
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	4013      	ands	r3, r2
 800ca7a:	d11a      	bne.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ca7c:	4b49      	ldr	r3, [pc, #292]	@ (800cba4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	4b48      	ldr	r3, [pc, #288]	@ (800cba4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800ca82:	2180      	movs	r1, #128	@ 0x80
 800ca84:	0049      	lsls	r1, r1, #1
 800ca86:	430a      	orrs	r2, r1
 800ca88:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca8a:	f7fb fc19 	bl	80082c0 <HAL_GetTick>
 800ca8e:	0003      	movs	r3, r0
 800ca90:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca92:	e008      	b.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca94:	f7fb fc14 	bl	80082c0 <HAL_GetTick>
 800ca98:	0002      	movs	r2, r0
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	1ad3      	subs	r3, r2, r3
 800ca9e:	2b64      	cmp	r3, #100	@ 0x64
 800caa0:	d901      	bls.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e077      	b.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800caa6:	4b3f      	ldr	r3, [pc, #252]	@ (800cba4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	2380      	movs	r3, #128	@ 0x80
 800caac:	005b      	lsls	r3, r3, #1
 800caae:	4013      	ands	r3, r2
 800cab0:	d0f0      	beq.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cab2:	4b3b      	ldr	r3, [pc, #236]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cab4:	6a1a      	ldr	r2, [r3, #32]
 800cab6:	23c0      	movs	r3, #192	@ 0xc0
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4013      	ands	r3, r2
 800cabc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d034      	beq.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x112>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	23c0      	movs	r3, #192	@ 0xc0
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4013      	ands	r3, r2
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d02c      	beq.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cad4:	4b32      	ldr	r3, [pc, #200]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cad6:	6a1b      	ldr	r3, [r3, #32]
 800cad8:	4a33      	ldr	r2, [pc, #204]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800cada:	4013      	ands	r3, r2
 800cadc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cade:	4b30      	ldr	r3, [pc, #192]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cae0:	6a1a      	ldr	r2, [r3, #32]
 800cae2:	4b2f      	ldr	r3, [pc, #188]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cae4:	2180      	movs	r1, #128	@ 0x80
 800cae6:	0249      	lsls	r1, r1, #9
 800cae8:	430a      	orrs	r2, r1
 800caea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800caec:	4b2c      	ldr	r3, [pc, #176]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800caee:	6a1a      	ldr	r2, [r3, #32]
 800caf0:	4b2b      	ldr	r3, [pc, #172]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800caf2:	492e      	ldr	r1, [pc, #184]	@ (800cbac <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800caf4:	400a      	ands	r2, r1
 800caf6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800caf8:	4b29      	ldr	r3, [pc, #164]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2201      	movs	r2, #1
 800cb02:	4013      	ands	r3, r2
 800cb04:	d013      	beq.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb06:	f7fb fbdb 	bl	80082c0 <HAL_GetTick>
 800cb0a:	0003      	movs	r3, r0
 800cb0c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb0e:	e009      	b.n	800cb24 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb10:	f7fb fbd6 	bl	80082c0 <HAL_GetTick>
 800cb14:	0002      	movs	r2, r0
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	1ad3      	subs	r3, r2, r3
 800cb1a:	4a25      	ldr	r2, [pc, #148]	@ (800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d901      	bls.n	800cb24 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800cb20:	2303      	movs	r3, #3
 800cb22:	e038      	b.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb24:	4b1e      	ldr	r3, [pc, #120]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cb26:	6a1b      	ldr	r3, [r3, #32]
 800cb28:	2202      	movs	r2, #2
 800cb2a:	4013      	ands	r3, r2
 800cb2c:	d0f0      	beq.n	800cb10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cb2e:	4b1c      	ldr	r3, [pc, #112]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	4a1d      	ldr	r2, [pc, #116]	@ (800cba8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800cb34:	4013      	ands	r3, r2
 800cb36:	0019      	movs	r1, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	4b18      	ldr	r3, [pc, #96]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800cb42:	2317      	movs	r3, #23
 800cb44:	18fb      	adds	r3, r7, r3
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d105      	bne.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb4c:	4b14      	ldr	r3, [pc, #80]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cb4e:	69da      	ldr	r2, [r3, #28]
 800cb50:	4b13      	ldr	r3, [pc, #76]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cb52:	4918      	ldr	r1, [pc, #96]	@ (800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800cb54:	400a      	ands	r2, r1
 800cb56:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	4013      	ands	r3, r2
 800cb60:	d009      	beq.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cb62:	4b0f      	ldr	r3, [pc, #60]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cb64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb66:	2203      	movs	r2, #3
 800cb68:	4393      	bics	r3, r2
 800cb6a:	0019      	movs	r1, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	689a      	ldr	r2, [r3, #8]
 800cb70:	4b0b      	ldr	r3, [pc, #44]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cb72:	430a      	orrs	r2, r1
 800cb74:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2220      	movs	r2, #32
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	d009      	beq.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cb80:	4b07      	ldr	r3, [pc, #28]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cb82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb84:	2210      	movs	r2, #16
 800cb86:	4393      	bics	r3, r2
 800cb88:	0019      	movs	r1, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	68da      	ldr	r2, [r3, #12]
 800cb8e:	4b04      	ldr	r3, [pc, #16]	@ (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800cb90:	430a      	orrs	r2, r1
 800cb92:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	0018      	movs	r0, r3
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	b006      	add	sp, #24
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	46c0      	nop			@ (mov r8, r8)
 800cba0:	40021000 	.word	0x40021000
 800cba4:	40007000 	.word	0x40007000
 800cba8:	fffffcff 	.word	0xfffffcff
 800cbac:	fffeffff 	.word	0xfffeffff
 800cbb0:	00001388 	.word	0x00001388
 800cbb4:	efffffff 	.word	0xefffffff

0800cbb8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cbb8:	b5b0      	push	{r4, r5, r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cbc0:	230f      	movs	r3, #15
 800cbc2:	18fb      	adds	r3, r7, r3
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d101      	bne.n	800cbd2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e081      	b.n	800ccd6 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	7f5b      	ldrb	r3, [r3, #29]
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d106      	bne.n	800cbea <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	0018      	movs	r0, r3
 800cbe6:	f7fa fb2b 	bl	8007240 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2202      	movs	r2, #2
 800cbee:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	2210      	movs	r2, #16
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	2b10      	cmp	r3, #16
 800cbfc:	d05c      	beq.n	800ccb8 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	22ca      	movs	r2, #202	@ 0xca
 800cc04:	625a      	str	r2, [r3, #36]	@ 0x24
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2253      	movs	r2, #83	@ 0x53
 800cc0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cc0e:	250f      	movs	r5, #15
 800cc10:	197c      	adds	r4, r7, r5
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	0018      	movs	r0, r3
 800cc16:	f000 f9e3 	bl	800cfe0 <RTC_EnterInitMode>
 800cc1a:	0003      	movs	r3, r0
 800cc1c:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800cc1e:	0028      	movs	r0, r5
 800cc20:	183b      	adds	r3, r7, r0
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d12c      	bne.n	800cc82 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	689a      	ldr	r2, [r3, #8]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	492b      	ldr	r1, [pc, #172]	@ (800cce0 <HAL_RTC_Init+0x128>)
 800cc34:	400a      	ands	r2, r1
 800cc36:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	6899      	ldr	r1, [r3, #8]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	685a      	ldr	r2, [r3, #4]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	431a      	orrs	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	695b      	ldr	r3, [r3, #20]
 800cc4c:	431a      	orrs	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	430a      	orrs	r2, r1
 800cc54:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	68d2      	ldr	r2, [r2, #12]
 800cc5e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	6919      	ldr	r1, [r3, #16]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	689b      	ldr	r3, [r3, #8]
 800cc6a:	041a      	lsls	r2, r3, #16
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	430a      	orrs	r2, r1
 800cc72:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800cc74:	183c      	adds	r4, r7, r0
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	0018      	movs	r0, r3
 800cc7a:	f000 f9f4 	bl	800d066 <RTC_ExitInitMode>
 800cc7e:	0003      	movs	r3, r0
 800cc80:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800cc82:	230f      	movs	r3, #15
 800cc84:	18fb      	adds	r3, r7, r3
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d110      	bne.n	800ccae <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4913      	ldr	r1, [pc, #76]	@ (800cce4 <HAL_RTC_Init+0x12c>)
 800cc98:	400a      	ands	r2, r1
 800cc9a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	699a      	ldr	r2, [r3, #24]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	430a      	orrs	r2, r1
 800ccac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	22ff      	movs	r2, #255	@ 0xff
 800ccb4:	625a      	str	r2, [r3, #36]	@ 0x24
 800ccb6:	e003      	b.n	800ccc0 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800ccb8:	230f      	movs	r3, #15
 800ccba:	18fb      	adds	r3, r7, r3
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800ccc0:	230f      	movs	r3, #15
 800ccc2:	18fb      	adds	r3, r7, r3
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d102      	bne.n	800ccd0 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2201      	movs	r2, #1
 800ccce:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800ccd0:	230f      	movs	r3, #15
 800ccd2:	18fb      	adds	r3, r7, r3
 800ccd4:	781b      	ldrb	r3, [r3, #0]
}
 800ccd6:	0018      	movs	r0, r3
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	b004      	add	sp, #16
 800ccdc:	bdb0      	pop	{r4, r5, r7, pc}
 800ccde:	46c0      	nop			@ (mov r8, r8)
 800cce0:	ff8fffbf 	.word	0xff8fffbf
 800cce4:	fffbffff 	.word	0xfffbffff

0800cce8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cce8:	b5b0      	push	{r4, r5, r7, lr}
 800ccea:	b086      	sub	sp, #24
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	7f1b      	ldrb	r3, [r3, #28]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d101      	bne.n	800cd04 <HAL_RTC_SetTime+0x1c>
 800cd00:	2302      	movs	r3, #2
 800cd02:	e08e      	b.n	800ce22 <HAL_RTC_SetTime+0x13a>
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2201      	movs	r2, #1
 800cd08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2202      	movs	r2, #2
 800cd0e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d125      	bne.n	800cd62 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	2240      	movs	r2, #64	@ 0x40
 800cd1e:	4013      	ands	r3, r2
 800cd20:	d102      	bne.n	800cd28 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	2200      	movs	r2, #0
 800cd26:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	0018      	movs	r0, r3
 800cd2e:	f000 f9c3 	bl	800d0b8 <RTC_ByteToBcd2>
 800cd32:	0003      	movs	r3, r0
 800cd34:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	785b      	ldrb	r3, [r3, #1]
 800cd3a:	0018      	movs	r0, r3
 800cd3c:	f000 f9bc 	bl	800d0b8 <RTC_ByteToBcd2>
 800cd40:	0003      	movs	r3, r0
 800cd42:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cd44:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	789b      	ldrb	r3, [r3, #2]
 800cd4a:	0018      	movs	r0, r3
 800cd4c:	f000 f9b4 	bl	800d0b8 <RTC_ByteToBcd2>
 800cd50:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cd52:	0022      	movs	r2, r4
 800cd54:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	78db      	ldrb	r3, [r3, #3]
 800cd5a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	617b      	str	r3, [r7, #20]
 800cd60:	e017      	b.n	800cd92 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	2240      	movs	r2, #64	@ 0x40
 800cd6a:	4013      	ands	r3, r2
 800cd6c:	d102      	bne.n	800cd74 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	2200      	movs	r2, #0
 800cd72:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	785b      	ldrb	r3, [r3, #1]
 800cd7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cd80:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800cd82:	68ba      	ldr	r2, [r7, #8]
 800cd84:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800cd86:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	78db      	ldrb	r3, [r3, #3]
 800cd8c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	22ca      	movs	r2, #202	@ 0xca
 800cd98:	625a      	str	r2, [r3, #36]	@ 0x24
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2253      	movs	r2, #83	@ 0x53
 800cda0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cda2:	2513      	movs	r5, #19
 800cda4:	197c      	adds	r4, r7, r5
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	0018      	movs	r0, r3
 800cdaa:	f000 f919 	bl	800cfe0 <RTC_EnterInitMode>
 800cdae:	0003      	movs	r3, r0
 800cdb0:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800cdb2:	0028      	movs	r0, r5
 800cdb4:	183b      	adds	r3, r7, r0
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d120      	bne.n	800cdfe <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	697a      	ldr	r2, [r7, #20]
 800cdc2:	491a      	ldr	r1, [pc, #104]	@ (800ce2c <HAL_RTC_SetTime+0x144>)
 800cdc4:	400a      	ands	r2, r1
 800cdc6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	689a      	ldr	r2, [r3, #8]
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4917      	ldr	r1, [pc, #92]	@ (800ce30 <HAL_RTC_SetTime+0x148>)
 800cdd4:	400a      	ands	r2, r1
 800cdd6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6899      	ldr	r1, [r3, #8]
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	68da      	ldr	r2, [r3, #12]
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	431a      	orrs	r2, r3
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	430a      	orrs	r2, r1
 800cdee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cdf0:	183c      	adds	r4, r7, r0
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	0018      	movs	r0, r3
 800cdf6:	f000 f936 	bl	800d066 <RTC_ExitInitMode>
 800cdfa:	0003      	movs	r3, r0
 800cdfc:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800cdfe:	2313      	movs	r3, #19
 800ce00:	18fb      	adds	r3, r7, r3
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d102      	bne.n	800ce0e <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	22ff      	movs	r2, #255	@ 0xff
 800ce14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	771a      	strb	r2, [r3, #28]

  return status;
 800ce1c:	2313      	movs	r3, #19
 800ce1e:	18fb      	adds	r3, r7, r3
 800ce20:	781b      	ldrb	r3, [r3, #0]
}
 800ce22:	0018      	movs	r0, r3
 800ce24:	46bd      	mov	sp, r7
 800ce26:	b006      	add	sp, #24
 800ce28:	bdb0      	pop	{r4, r5, r7, pc}
 800ce2a:	46c0      	nop			@ (mov r8, r8)
 800ce2c:	007f7f7f 	.word	0x007f7f7f
 800ce30:	fffbffff 	.word	0xfffbffff

0800ce34 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ce40:	2300      	movs	r3, #0
 800ce42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	691b      	ldr	r3, [r3, #16]
 800ce54:	045b      	lsls	r3, r3, #17
 800ce56:	0c5a      	lsrs	r2, r3, #17
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a22      	ldr	r2, [pc, #136]	@ (800ceec <HAL_RTC_GetTime+0xb8>)
 800ce64:	4013      	ands	r3, r2
 800ce66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	0c1b      	lsrs	r3, r3, #16
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	223f      	movs	r2, #63	@ 0x3f
 800ce70:	4013      	ands	r3, r2
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	0a1b      	lsrs	r3, r3, #8
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	227f      	movs	r2, #127	@ 0x7f
 800ce80:	4013      	ands	r3, r2
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	227f      	movs	r2, #127	@ 0x7f
 800ce8e:	4013      	ands	r3, r2
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	0d9b      	lsrs	r3, r3, #22
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	4013      	ands	r3, r2
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d11a      	bne.n	800cee2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	f000 f922 	bl	800d0fa <RTC_Bcd2ToByte>
 800ceb6:	0003      	movs	r3, r0
 800ceb8:	001a      	movs	r2, r3
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	785b      	ldrb	r3, [r3, #1]
 800cec2:	0018      	movs	r0, r3
 800cec4:	f000 f919 	bl	800d0fa <RTC_Bcd2ToByte>
 800cec8:	0003      	movs	r3, r0
 800ceca:	001a      	movs	r2, r3
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	789b      	ldrb	r3, [r3, #2]
 800ced4:	0018      	movs	r0, r3
 800ced6:	f000 f910 	bl	800d0fa <RTC_Bcd2ToByte>
 800ceda:	0003      	movs	r3, r0
 800cedc:	001a      	movs	r2, r3
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	0018      	movs	r0, r3
 800cee6:	46bd      	mov	sp, r7
 800cee8:	b006      	add	sp, #24
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	007f7f7f 	.word	0x007f7f7f

0800cef0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b086      	sub	sp, #24
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cefc:	2300      	movs	r3, #0
 800cefe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	4a21      	ldr	r2, [pc, #132]	@ (800cf8c <HAL_RTC_GetDate+0x9c>)
 800cf08:	4013      	ands	r3, r2
 800cf0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	0c1b      	lsrs	r3, r3, #16
 800cf10:	b2da      	uxtb	r2, r3
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	0a1b      	lsrs	r3, r3, #8
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	221f      	movs	r2, #31
 800cf1e:	4013      	ands	r3, r2
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	223f      	movs	r2, #63	@ 0x3f
 800cf2c:	4013      	ands	r3, r2
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	0b5b      	lsrs	r3, r3, #13
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2207      	movs	r2, #7
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d11a      	bne.n	800cf80 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	78db      	ldrb	r3, [r3, #3]
 800cf4e:	0018      	movs	r0, r3
 800cf50:	f000 f8d3 	bl	800d0fa <RTC_Bcd2ToByte>
 800cf54:	0003      	movs	r3, r0
 800cf56:	001a      	movs	r2, r3
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	785b      	ldrb	r3, [r3, #1]
 800cf60:	0018      	movs	r0, r3
 800cf62:	f000 f8ca 	bl	800d0fa <RTC_Bcd2ToByte>
 800cf66:	0003      	movs	r3, r0
 800cf68:	001a      	movs	r2, r3
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	789b      	ldrb	r3, [r3, #2]
 800cf72:	0018      	movs	r0, r3
 800cf74:	f000 f8c1 	bl	800d0fa <RTC_Bcd2ToByte>
 800cf78:	0003      	movs	r3, r0
 800cf7a:	001a      	movs	r2, r3
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	0018      	movs	r0, r3
 800cf84:	46bd      	mov	sp, r7
 800cf86:	b006      	add	sp, #24
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	46c0      	nop			@ (mov r8, r8)
 800cf8c:	00ffff3f 	.word	0x00ffff3f

0800cf90 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a0e      	ldr	r2, [pc, #56]	@ (800cfdc <HAL_RTC_WaitForSynchro+0x4c>)
 800cfa2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cfa4:	f7fb f98c 	bl	80082c0 <HAL_GetTick>
 800cfa8:	0003      	movs	r3, r0
 800cfaa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cfac:	e00a      	b.n	800cfc4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cfae:	f7fb f987 	bl	80082c0 <HAL_GetTick>
 800cfb2:	0002      	movs	r2, r0
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	1ad2      	subs	r2, r2, r3
 800cfb8:	23fa      	movs	r3, #250	@ 0xfa
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d901      	bls.n	800cfc4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e006      	b.n	800cfd2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	2220      	movs	r2, #32
 800cfcc:	4013      	ands	r3, r2
 800cfce:	d0ee      	beq.n	800cfae <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	0018      	movs	r0, r3
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	b004      	add	sp, #16
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	46c0      	nop			@ (mov r8, r8)
 800cfdc:	00017d5d 	.word	0x00017d5d

0800cfe0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cfec:	230f      	movs	r3, #15
 800cfee:	18fb      	adds	r3, r7, r3
 800cff0:	2200      	movs	r2, #0
 800cff2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	2240      	movs	r2, #64	@ 0x40
 800cffc:	4013      	ands	r3, r2
 800cffe:	d12b      	bne.n	800d058 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	68da      	ldr	r2, [r3, #12]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2180      	movs	r1, #128	@ 0x80
 800d00c:	430a      	orrs	r2, r1
 800d00e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d010:	f7fb f956 	bl	80082c0 <HAL_GetTick>
 800d014:	0003      	movs	r3, r0
 800d016:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d018:	e013      	b.n	800d042 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d01a:	f7fb f951 	bl	80082c0 <HAL_GetTick>
 800d01e:	0002      	movs	r2, r0
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	1ad2      	subs	r2, r2, r3
 800d024:	200f      	movs	r0, #15
 800d026:	183b      	adds	r3, r7, r0
 800d028:	1839      	adds	r1, r7, r0
 800d02a:	7809      	ldrb	r1, [r1, #0]
 800d02c:	7019      	strb	r1, [r3, #0]
 800d02e:	23fa      	movs	r3, #250	@ 0xfa
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	429a      	cmp	r2, r3
 800d034:	d905      	bls.n	800d042 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2204      	movs	r2, #4
 800d03a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800d03c:	183b      	adds	r3, r7, r0
 800d03e:	2201      	movs	r2, #1
 800d040:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	2240      	movs	r2, #64	@ 0x40
 800d04a:	4013      	ands	r3, r2
 800d04c:	d104      	bne.n	800d058 <RTC_EnterInitMode+0x78>
 800d04e:	230f      	movs	r3, #15
 800d050:	18fb      	adds	r3, r7, r3
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2b01      	cmp	r3, #1
 800d056:	d1e0      	bne.n	800d01a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800d058:	230f      	movs	r3, #15
 800d05a:	18fb      	adds	r3, r7, r3
 800d05c:	781b      	ldrb	r3, [r3, #0]
}
 800d05e:	0018      	movs	r0, r3
 800d060:	46bd      	mov	sp, r7
 800d062:	b004      	add	sp, #16
 800d064:	bd80      	pop	{r7, pc}

0800d066 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d066:	b590      	push	{r4, r7, lr}
 800d068:	b085      	sub	sp, #20
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d06e:	240f      	movs	r4, #15
 800d070:	193b      	adds	r3, r7, r4
 800d072:	2200      	movs	r2, #0
 800d074:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68da      	ldr	r2, [r3, #12]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	2180      	movs	r1, #128	@ 0x80
 800d082:	438a      	bics	r2, r1
 800d084:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	2220      	movs	r2, #32
 800d08e:	4013      	ands	r3, r2
 800d090:	d10b      	bne.n	800d0aa <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	0018      	movs	r0, r3
 800d096:	f7ff ff7b 	bl	800cf90 <HAL_RTC_WaitForSynchro>
 800d09a:	1e03      	subs	r3, r0, #0
 800d09c:	d005      	beq.n	800d0aa <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2204      	movs	r2, #4
 800d0a2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800d0a4:	193b      	adds	r3, r7, r4
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800d0aa:	230f      	movs	r3, #15
 800d0ac:	18fb      	adds	r3, r7, r3
 800d0ae:	781b      	ldrb	r3, [r3, #0]
}
 800d0b0:	0018      	movs	r0, r3
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	b005      	add	sp, #20
 800d0b6:	bd90      	pop	{r4, r7, pc}

0800d0b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	0002      	movs	r2, r0
 800d0c0:	1dfb      	adds	r3, r7, #7
 800d0c2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800d0c8:	e007      	b.n	800d0da <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800d0d0:	1dfb      	adds	r3, r7, #7
 800d0d2:	1dfa      	adds	r2, r7, #7
 800d0d4:	7812      	ldrb	r2, [r2, #0]
 800d0d6:	3a0a      	subs	r2, #10
 800d0d8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 800d0da:	1dfb      	adds	r3, r7, #7
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	2b09      	cmp	r3, #9
 800d0e0:	d8f3      	bhi.n	800d0ca <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	011b      	lsls	r3, r3, #4
 800d0e8:	b2da      	uxtb	r2, r3
 800d0ea:	1dfb      	adds	r3, r7, #7
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	b2db      	uxtb	r3, r3
}
 800d0f2:	0018      	movs	r0, r3
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	b004      	add	sp, #16
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b084      	sub	sp, #16
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	0002      	movs	r2, r0
 800d102:	1dfb      	adds	r3, r7, #7
 800d104:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 800d106:	2300      	movs	r3, #0
 800d108:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800d10a:	1dfb      	adds	r3, r7, #7
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	091b      	lsrs	r3, r3, #4
 800d110:	b2db      	uxtb	r3, r3
 800d112:	001a      	movs	r2, r3
 800d114:	0013      	movs	r3, r2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	189b      	adds	r3, r3, r2
 800d11a:	005b      	lsls	r3, r3, #1
 800d11c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	b2da      	uxtb	r2, r3
 800d122:	1dfb      	adds	r3, r7, #7
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	210f      	movs	r1, #15
 800d128:	400b      	ands	r3, r1
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	18d3      	adds	r3, r2, r3
 800d12e:	b2db      	uxtb	r3, r3
}
 800d130:	0018      	movs	r0, r3
 800d132:	46bd      	mov	sp, r7
 800d134:	b004      	add	sp, #16
 800d136:	bd80      	pop	{r7, pc}

0800d138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d101      	bne.n	800d14a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d146:	2301      	movs	r3, #1
 800d148:	e0a8      	b.n	800d29c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d109      	bne.n	800d166 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	2382      	movs	r3, #130	@ 0x82
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d009      	beq.n	800d172 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	61da      	str	r2, [r3, #28]
 800d164:	e005      	b.n	800d172 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	225d      	movs	r2, #93	@ 0x5d
 800d17c:	5c9b      	ldrb	r3, [r3, r2]
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	2b00      	cmp	r3, #0
 800d182:	d107      	bne.n	800d194 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	225c      	movs	r2, #92	@ 0x5c
 800d188:	2100      	movs	r1, #0
 800d18a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	0018      	movs	r0, r3
 800d190:	f7fa f86e 	bl	8007270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	225d      	movs	r2, #93	@ 0x5d
 800d198:	2102      	movs	r1, #2
 800d19a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2140      	movs	r1, #64	@ 0x40
 800d1a8:	438a      	bics	r2, r1
 800d1aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	68da      	ldr	r2, [r3, #12]
 800d1b0:	23e0      	movs	r3, #224	@ 0xe0
 800d1b2:	00db      	lsls	r3, r3, #3
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d902      	bls.n	800d1be <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	60fb      	str	r3, [r7, #12]
 800d1bc:	e002      	b.n	800d1c4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d1be:	2380      	movs	r3, #128	@ 0x80
 800d1c0:	015b      	lsls	r3, r3, #5
 800d1c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	68da      	ldr	r2, [r3, #12]
 800d1c8:	23f0      	movs	r3, #240	@ 0xf0
 800d1ca:	011b      	lsls	r3, r3, #4
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d008      	beq.n	800d1e2 <HAL_SPI_Init+0xaa>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	68da      	ldr	r2, [r3, #12]
 800d1d4:	23e0      	movs	r3, #224	@ 0xe0
 800d1d6:	00db      	lsls	r3, r3, #3
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d002      	beq.n	800d1e2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	685a      	ldr	r2, [r3, #4]
 800d1e6:	2382      	movs	r3, #130	@ 0x82
 800d1e8:	005b      	lsls	r3, r3, #1
 800d1ea:	401a      	ands	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6899      	ldr	r1, [r3, #8]
 800d1f0:	2384      	movs	r3, #132	@ 0x84
 800d1f2:	021b      	lsls	r3, r3, #8
 800d1f4:	400b      	ands	r3, r1
 800d1f6:	431a      	orrs	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	2102      	movs	r1, #2
 800d1fe:	400b      	ands	r3, r1
 800d200:	431a      	orrs	r2, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	695b      	ldr	r3, [r3, #20]
 800d206:	2101      	movs	r1, #1
 800d208:	400b      	ands	r3, r1
 800d20a:	431a      	orrs	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6999      	ldr	r1, [r3, #24]
 800d210:	2380      	movs	r3, #128	@ 0x80
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	400b      	ands	r3, r1
 800d216:	431a      	orrs	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	69db      	ldr	r3, [r3, #28]
 800d21c:	2138      	movs	r1, #56	@ 0x38
 800d21e:	400b      	ands	r3, r1
 800d220:	431a      	orrs	r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a1b      	ldr	r3, [r3, #32]
 800d226:	2180      	movs	r1, #128	@ 0x80
 800d228:	400b      	ands	r3, r1
 800d22a:	431a      	orrs	r2, r3
 800d22c:	0011      	movs	r1, r2
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d232:	2380      	movs	r3, #128	@ 0x80
 800d234:	019b      	lsls	r3, r3, #6
 800d236:	401a      	ands	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	430a      	orrs	r2, r1
 800d23e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	699b      	ldr	r3, [r3, #24]
 800d244:	0c1b      	lsrs	r3, r3, #16
 800d246:	2204      	movs	r2, #4
 800d248:	401a      	ands	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d24e:	2110      	movs	r1, #16
 800d250:	400b      	ands	r3, r1
 800d252:	431a      	orrs	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d258:	2108      	movs	r1, #8
 800d25a:	400b      	ands	r3, r1
 800d25c:	431a      	orrs	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	68d9      	ldr	r1, [r3, #12]
 800d262:	23f0      	movs	r3, #240	@ 0xf0
 800d264:	011b      	lsls	r3, r3, #4
 800d266:	400b      	ands	r3, r1
 800d268:	431a      	orrs	r2, r3
 800d26a:	0011      	movs	r1, r2
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	2380      	movs	r3, #128	@ 0x80
 800d270:	015b      	lsls	r3, r3, #5
 800d272:	401a      	ands	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	430a      	orrs	r2, r1
 800d27a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	69da      	ldr	r2, [r3, #28]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4907      	ldr	r1, [pc, #28]	@ (800d2a4 <HAL_SPI_Init+0x16c>)
 800d288:	400a      	ands	r2, r1
 800d28a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	225d      	movs	r2, #93	@ 0x5d
 800d296:	2101      	movs	r1, #1
 800d298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	0018      	movs	r0, r3
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	b004      	add	sp, #16
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	fffff7ff 	.word	0xfffff7ff

0800d2a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b088      	sub	sp, #32
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	603b      	str	r3, [r7, #0]
 800d2b4:	1dbb      	adds	r3, r7, #6
 800d2b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d2b8:	231f      	movs	r3, #31
 800d2ba:	18fb      	adds	r3, r7, r3
 800d2bc:	2200      	movs	r2, #0
 800d2be:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	225c      	movs	r2, #92	@ 0x5c
 800d2c4:	5c9b      	ldrb	r3, [r3, r2]
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d101      	bne.n	800d2ce <HAL_SPI_Transmit+0x26>
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	e147      	b.n	800d55e <HAL_SPI_Transmit+0x2b6>
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	225c      	movs	r2, #92	@ 0x5c
 800d2d2:	2101      	movs	r1, #1
 800d2d4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d2d6:	f7fa fff3 	bl	80082c0 <HAL_GetTick>
 800d2da:	0003      	movs	r3, r0
 800d2dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d2de:	2316      	movs	r3, #22
 800d2e0:	18fb      	adds	r3, r7, r3
 800d2e2:	1dba      	adds	r2, r7, #6
 800d2e4:	8812      	ldrh	r2, [r2, #0]
 800d2e6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	225d      	movs	r2, #93	@ 0x5d
 800d2ec:	5c9b      	ldrb	r3, [r3, r2]
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d004      	beq.n	800d2fe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800d2f4:	231f      	movs	r3, #31
 800d2f6:	18fb      	adds	r3, r7, r3
 800d2f8:	2202      	movs	r2, #2
 800d2fa:	701a      	strb	r2, [r3, #0]
    goto error;
 800d2fc:	e128      	b.n	800d550 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d003      	beq.n	800d30c <HAL_SPI_Transmit+0x64>
 800d304:	1dbb      	adds	r3, r7, #6
 800d306:	881b      	ldrh	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d104      	bne.n	800d316 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800d30c:	231f      	movs	r3, #31
 800d30e:	18fb      	adds	r3, r7, r3
 800d310:	2201      	movs	r2, #1
 800d312:	701a      	strb	r2, [r3, #0]
    goto error;
 800d314:	e11c      	b.n	800d550 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	225d      	movs	r2, #93	@ 0x5d
 800d31a:	2103      	movs	r1, #3
 800d31c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	68ba      	ldr	r2, [r7, #8]
 800d328:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	1dba      	adds	r2, r7, #6
 800d32e:	8812      	ldrh	r2, [r2, #0]
 800d330:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	1dba      	adds	r2, r7, #6
 800d336:	8812      	ldrh	r2, [r2, #0]
 800d338:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2200      	movs	r2, #0
 800d33e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2244      	movs	r2, #68	@ 0x44
 800d344:	2100      	movs	r1, #0
 800d346:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2246      	movs	r2, #70	@ 0x46
 800d34c:	2100      	movs	r1, #0
 800d34e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2200      	movs	r2, #0
 800d354:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2200      	movs	r2, #0
 800d35a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	689a      	ldr	r2, [r3, #8]
 800d360:	2380      	movs	r3, #128	@ 0x80
 800d362:	021b      	lsls	r3, r3, #8
 800d364:	429a      	cmp	r2, r3
 800d366:	d110      	bne.n	800d38a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2140      	movs	r1, #64	@ 0x40
 800d374:	438a      	bics	r2, r1
 800d376:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2180      	movs	r1, #128	@ 0x80
 800d384:	01c9      	lsls	r1, r1, #7
 800d386:	430a      	orrs	r2, r1
 800d388:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2240      	movs	r2, #64	@ 0x40
 800d392:	4013      	ands	r3, r2
 800d394:	2b40      	cmp	r3, #64	@ 0x40
 800d396:	d007      	beq.n	800d3a8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2140      	movs	r1, #64	@ 0x40
 800d3a4:	430a      	orrs	r2, r1
 800d3a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	68da      	ldr	r2, [r3, #12]
 800d3ac:	23e0      	movs	r3, #224	@ 0xe0
 800d3ae:	00db      	lsls	r3, r3, #3
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d952      	bls.n	800d45a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d004      	beq.n	800d3c6 <HAL_SPI_Transmit+0x11e>
 800d3bc:	2316      	movs	r3, #22
 800d3be:	18fb      	adds	r3, r7, r3
 800d3c0:	881b      	ldrh	r3, [r3, #0]
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d143      	bne.n	800d44e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3ca:	881a      	ldrh	r2, [r3, #0]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3d6:	1c9a      	adds	r2, r3, #2
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	b29a      	uxth	r2, r3
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d3ea:	e030      	b.n	800d44e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	2202      	movs	r2, #2
 800d3f4:	4013      	ands	r3, r2
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d112      	bne.n	800d420 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3fe:	881a      	ldrh	r2, [r3, #0]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d40a:	1c9a      	adds	r2, r3, #2
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d414:	b29b      	uxth	r3, r3
 800d416:	3b01      	subs	r3, #1
 800d418:	b29a      	uxth	r2, r3
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d41e:	e016      	b.n	800d44e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d420:	f7fa ff4e 	bl	80082c0 <HAL_GetTick>
 800d424:	0002      	movs	r2, r0
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	1ad3      	subs	r3, r2, r3
 800d42a:	683a      	ldr	r2, [r7, #0]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d802      	bhi.n	800d436 <HAL_SPI_Transmit+0x18e>
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	3301      	adds	r3, #1
 800d434:	d102      	bne.n	800d43c <HAL_SPI_Transmit+0x194>
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d108      	bne.n	800d44e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800d43c:	231f      	movs	r3, #31
 800d43e:	18fb      	adds	r3, r7, r3
 800d440:	2203      	movs	r2, #3
 800d442:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	225d      	movs	r2, #93	@ 0x5d
 800d448:	2101      	movs	r1, #1
 800d44a:	5499      	strb	r1, [r3, r2]
          goto error;
 800d44c:	e080      	b.n	800d550 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d452:	b29b      	uxth	r3, r3
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1c9      	bne.n	800d3ec <HAL_SPI_Transmit+0x144>
 800d458:	e053      	b.n	800d502 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d004      	beq.n	800d46c <HAL_SPI_Transmit+0x1c4>
 800d462:	2316      	movs	r3, #22
 800d464:	18fb      	adds	r3, r7, r3
 800d466:	881b      	ldrh	r3, [r3, #0]
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d145      	bne.n	800d4f8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	330c      	adds	r3, #12
 800d476:	7812      	ldrb	r2, [r2, #0]
 800d478:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d47e:	1c5a      	adds	r2, r3, #1
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d488:	b29b      	uxth	r3, r3
 800d48a:	3b01      	subs	r3, #1
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800d492:	e031      	b.n	800d4f8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	2202      	movs	r2, #2
 800d49c:	4013      	ands	r3, r2
 800d49e:	2b02      	cmp	r3, #2
 800d4a0:	d113      	bne.n	800d4ca <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	330c      	adds	r3, #12
 800d4ac:	7812      	ldrb	r2, [r2, #0]
 800d4ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4b4:	1c5a      	adds	r2, r3, #1
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d4c8:	e016      	b.n	800d4f8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4ca:	f7fa fef9 	bl	80082c0 <HAL_GetTick>
 800d4ce:	0002      	movs	r2, r0
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	1ad3      	subs	r3, r2, r3
 800d4d4:	683a      	ldr	r2, [r7, #0]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d802      	bhi.n	800d4e0 <HAL_SPI_Transmit+0x238>
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	d102      	bne.n	800d4e6 <HAL_SPI_Transmit+0x23e>
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d108      	bne.n	800d4f8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800d4e6:	231f      	movs	r3, #31
 800d4e8:	18fb      	adds	r3, r7, r3
 800d4ea:	2203      	movs	r2, #3
 800d4ec:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	225d      	movs	r2, #93	@ 0x5d
 800d4f2:	2101      	movs	r1, #1
 800d4f4:	5499      	strb	r1, [r3, r2]
          goto error;
 800d4f6:	e02b      	b.n	800d550 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d1c8      	bne.n	800d494 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d502:	69ba      	ldr	r2, [r7, #24]
 800d504:	6839      	ldr	r1, [r7, #0]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	0018      	movs	r0, r3
 800d50a:	f000 fafd 	bl	800db08 <SPI_EndRxTxTransaction>
 800d50e:	1e03      	subs	r3, r0, #0
 800d510:	d002      	beq.n	800d518 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2220      	movs	r2, #32
 800d516:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	689b      	ldr	r3, [r3, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10a      	bne.n	800d536 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d520:	2300      	movs	r3, #0
 800d522:	613b      	str	r3, [r7, #16]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	613b      	str	r3, [r7, #16]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	613b      	str	r3, [r7, #16]
 800d534:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d004      	beq.n	800d548 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800d53e:	231f      	movs	r3, #31
 800d540:	18fb      	adds	r3, r7, r3
 800d542:	2201      	movs	r2, #1
 800d544:	701a      	strb	r2, [r3, #0]
 800d546:	e003      	b.n	800d550 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	225d      	movs	r2, #93	@ 0x5d
 800d54c:	2101      	movs	r1, #1
 800d54e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	225c      	movs	r2, #92	@ 0x5c
 800d554:	2100      	movs	r1, #0
 800d556:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800d558:	231f      	movs	r3, #31
 800d55a:	18fb      	adds	r3, r7, r3
 800d55c:	781b      	ldrb	r3, [r3, #0]
}
 800d55e:	0018      	movs	r0, r3
 800d560:	46bd      	mov	sp, r7
 800d562:	b008      	add	sp, #32
 800d564:	bd80      	pop	{r7, pc}
	...

0800d568 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b086      	sub	sp, #24
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	1dbb      	adds	r3, r7, #6
 800d574:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d576:	2317      	movs	r3, #23
 800d578:	18fb      	adds	r3, r7, r3
 800d57a:	2200      	movs	r2, #0
 800d57c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	225c      	movs	r2, #92	@ 0x5c
 800d582:	5c9b      	ldrb	r3, [r3, r2]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d101      	bne.n	800d58c <HAL_SPI_Transmit_DMA+0x24>
 800d588:	2302      	movs	r3, #2
 800d58a:	e0e3      	b.n	800d754 <HAL_SPI_Transmit_DMA+0x1ec>
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	225c      	movs	r2, #92	@ 0x5c
 800d590:	2101      	movs	r1, #1
 800d592:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	225d      	movs	r2, #93	@ 0x5d
 800d598:	5c9b      	ldrb	r3, [r3, r2]
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d004      	beq.n	800d5aa <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 800d5a0:	2317      	movs	r3, #23
 800d5a2:	18fb      	adds	r3, r7, r3
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	701a      	strb	r2, [r3, #0]
    goto error;
 800d5a8:	e0cd      	b.n	800d746 <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d003      	beq.n	800d5b8 <HAL_SPI_Transmit_DMA+0x50>
 800d5b0:	1dbb      	adds	r3, r7, #6
 800d5b2:	881b      	ldrh	r3, [r3, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d104      	bne.n	800d5c2 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 800d5b8:	2317      	movs	r3, #23
 800d5ba:	18fb      	adds	r3, r7, r3
 800d5bc:	2201      	movs	r2, #1
 800d5be:	701a      	strb	r2, [r3, #0]
    goto error;
 800d5c0:	e0c1      	b.n	800d746 <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	225d      	movs	r2, #93	@ 0x5d
 800d5c6:	2103      	movs	r1, #3
 800d5c8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	68ba      	ldr	r2, [r7, #8]
 800d5d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	1dba      	adds	r2, r7, #6
 800d5da:	8812      	ldrh	r2, [r2, #0]
 800d5dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	1dba      	adds	r2, r7, #6
 800d5e2:	8812      	ldrh	r2, [r2, #0]
 800d5e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2244      	movs	r2, #68	@ 0x44
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2246      	movs	r2, #70	@ 0x46
 800d604:	2100      	movs	r1, #0
 800d606:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	689a      	ldr	r2, [r3, #8]
 800d60c:	2380      	movs	r3, #128	@ 0x80
 800d60e:	021b      	lsls	r3, r3, #8
 800d610:	429a      	cmp	r2, r3
 800d612:	d110      	bne.n	800d636 <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2140      	movs	r1, #64	@ 0x40
 800d620:	438a      	bics	r2, r1
 800d622:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2180      	movs	r1, #128	@ 0x80
 800d630:	01c9      	lsls	r1, r1, #7
 800d632:	430a      	orrs	r2, r1
 800d634:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d63a:	4a48      	ldr	r2, [pc, #288]	@ (800d75c <HAL_SPI_Transmit_DMA+0x1f4>)
 800d63c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d642:	4a47      	ldr	r2, [pc, #284]	@ (800d760 <HAL_SPI_Transmit_DMA+0x1f8>)
 800d644:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d64a:	4a46      	ldr	r2, [pc, #280]	@ (800d764 <HAL_SPI_Transmit_DMA+0x1fc>)
 800d64c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d652:	2200      	movs	r2, #0
 800d654:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4941      	ldr	r1, [pc, #260]	@ (800d768 <HAL_SPI_Transmit_DMA+0x200>)
 800d662:	400a      	ands	r2, r1
 800d664:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	68da      	ldr	r2, [r3, #12]
 800d66a:	23e0      	movs	r3, #224	@ 0xe0
 800d66c:	00db      	lsls	r3, r3, #3
 800d66e:	429a      	cmp	r2, r3
 800d670:	d82f      	bhi.n	800d6d2 <HAL_SPI_Transmit_DMA+0x16a>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d676:	695a      	ldr	r2, [r3, #20]
 800d678:	2380      	movs	r3, #128	@ 0x80
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d128      	bne.n	800d6d2 <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d684:	b29b      	uxth	r3, r3
 800d686:	001a      	movs	r2, r3
 800d688:	2301      	movs	r3, #1
 800d68a:	4013      	ands	r3, r2
 800d68c:	d10f      	bne.n	800d6ae <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4933      	ldr	r1, [pc, #204]	@ (800d768 <HAL_SPI_Transmit_DMA+0x200>)
 800d69a:	400a      	ands	r2, r1
 800d69c:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	085b      	lsrs	r3, r3, #1
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d6ac:	e011      	b.n	800d6d2 <HAL_SPI_Transmit_DMA+0x16a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	685a      	ldr	r2, [r3, #4]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2180      	movs	r1, #128	@ 0x80
 800d6ba:	01c9      	lsls	r1, r1, #7
 800d6bc:	430a      	orrs	r2, r1
 800d6be:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	085b      	lsrs	r3, r3, #1
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6da:	0019      	movs	r1, r3
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	330c      	adds	r3, #12
 800d6e2:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d6e8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d6ea:	f7fb fdc7 	bl	800927c <HAL_DMA_Start_IT>
 800d6ee:	1e03      	subs	r3, r0, #0
 800d6f0:	d00a      	beq.n	800d708 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d6f6:	2210      	movs	r2, #16
 800d6f8:	431a      	orrs	r2, r3
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800d6fe:	2317      	movs	r3, #23
 800d700:	18fb      	adds	r3, r7, r3
 800d702:	2201      	movs	r2, #1
 800d704:	701a      	strb	r2, [r3, #0]

    goto error;
 800d706:	e01e      	b.n	800d746 <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2240      	movs	r2, #64	@ 0x40
 800d710:	4013      	ands	r3, r2
 800d712:	2b40      	cmp	r3, #64	@ 0x40
 800d714:	d007      	beq.n	800d726 <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2140      	movs	r1, #64	@ 0x40
 800d722:	430a      	orrs	r2, r1
 800d724:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	685a      	ldr	r2, [r3, #4]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2120      	movs	r1, #32
 800d732:	430a      	orrs	r2, r1
 800d734:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	685a      	ldr	r2, [r3, #4]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2102      	movs	r1, #2
 800d742:	430a      	orrs	r2, r1
 800d744:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	225c      	movs	r2, #92	@ 0x5c
 800d74a:	2100      	movs	r1, #0
 800d74c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800d74e:	2317      	movs	r3, #23
 800d750:	18fb      	adds	r3, r7, r3
 800d752:	781b      	ldrb	r3, [r3, #0]
}
 800d754:	0018      	movs	r0, r3
 800d756:	46bd      	mov	sp, r7
 800d758:	b006      	add	sp, #24
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	0800d849 	.word	0x0800d849
 800d760:	0800d79d 	.word	0x0800d79d
 800d764:	0800d867 	.word	0x0800d867
 800d768:	ffffbfff 	.word	0xffffbfff

0800d76c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d774:	46c0      	nop			@ (mov r8, r8)
 800d776:	46bd      	mov	sp, r7
 800d778:	b002      	add	sp, #8
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d784:	46c0      	nop			@ (mov r8, r8)
 800d786:	46bd      	mov	sp, r7
 800d788:	b002      	add	sp, #8
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d794:	46c0      	nop			@ (mov r8, r8)
 800d796:	46bd      	mov	sp, r7
 800d798:	b002      	add	sp, #8
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b086      	sub	sp, #24
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d7aa:	f7fa fd89 	bl	80082c0 <HAL_GetTick>
 800d7ae:	0003      	movs	r3, r0
 800d7b0:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2220      	movs	r2, #32
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	2b20      	cmp	r3, #32
 800d7be:	d03c      	beq.n	800d83a <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	685a      	ldr	r2, [r3, #4]
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	2120      	movs	r1, #32
 800d7cc:	438a      	bics	r2, r1
 800d7ce:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	685a      	ldr	r2, [r3, #4]
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2102      	movs	r1, #2
 800d7dc:	438a      	bics	r2, r1
 800d7de:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d7e0:	693a      	ldr	r2, [r7, #16]
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	2164      	movs	r1, #100	@ 0x64
 800d7e6:	0018      	movs	r0, r3
 800d7e8:	f000 f98e 	bl	800db08 <SPI_EndRxTxTransaction>
 800d7ec:	1e03      	subs	r3, r0, #0
 800d7ee:	d005      	beq.n	800d7fc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d7f4:	2220      	movs	r2, #32
 800d7f6:	431a      	orrs	r2, r3
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d10a      	bne.n	800d81a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d804:	2300      	movs	r3, #0
 800d806:	60fb      	str	r3, [r7, #12]
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	60fb      	str	r3, [r7, #12]
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	2200      	movs	r2, #0
 800d81e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	225d      	movs	r2, #93	@ 0x5d
 800d824:	2101      	movs	r1, #1
 800d826:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d004      	beq.n	800d83a <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	0018      	movs	r0, r3
 800d834:	f7ff ffaa 	bl	800d78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d838:	e003      	b.n	800d842 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	0018      	movs	r0, r3
 800d83e:	f7ff ff95 	bl	800d76c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d842:	46bd      	mov	sp, r7
 800d844:	b006      	add	sp, #24
 800d846:	bd80      	pop	{r7, pc}

0800d848 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d854:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	0018      	movs	r0, r3
 800d85a:	f7ff ff8f 	bl	800d77c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d85e:	46c0      	nop			@ (mov r8, r8)
 800d860:	46bd      	mov	sp, r7
 800d862:	b004      	add	sp, #16
 800d864:	bd80      	pop	{r7, pc}

0800d866 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b084      	sub	sp, #16
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d872:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	685a      	ldr	r2, [r3, #4]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2103      	movs	r1, #3
 800d880:	438a      	bics	r2, r1
 800d882:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d888:	2210      	movs	r2, #16
 800d88a:	431a      	orrs	r2, r3
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	225d      	movs	r2, #93	@ 0x5d
 800d894:	2101      	movs	r1, #1
 800d896:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	0018      	movs	r0, r3
 800d89c:	f7ff ff76 	bl	800d78c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d8a0:	46c0      	nop			@ (mov r8, r8)
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	b004      	add	sp, #16
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b088      	sub	sp, #32
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	603b      	str	r3, [r7, #0]
 800d8b4:	1dfb      	adds	r3, r7, #7
 800d8b6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d8b8:	f7fa fd02 	bl	80082c0 <HAL_GetTick>
 800d8bc:	0002      	movs	r2, r0
 800d8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c0:	1a9b      	subs	r3, r3, r2
 800d8c2:	683a      	ldr	r2, [r7, #0]
 800d8c4:	18d3      	adds	r3, r2, r3
 800d8c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d8c8:	f7fa fcfa 	bl	80082c0 <HAL_GetTick>
 800d8cc:	0003      	movs	r3, r0
 800d8ce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d8d0:	4b3a      	ldr	r3, [pc, #232]	@ (800d9bc <SPI_WaitFlagStateUntilTimeout+0x114>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	015b      	lsls	r3, r3, #5
 800d8d6:	0d1b      	lsrs	r3, r3, #20
 800d8d8:	69fa      	ldr	r2, [r7, #28]
 800d8da:	4353      	muls	r3, r2
 800d8dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d8de:	e058      	b.n	800d992 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	d055      	beq.n	800d992 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d8e6:	f7fa fceb 	bl	80082c0 <HAL_GetTick>
 800d8ea:	0002      	movs	r2, r0
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	69fa      	ldr	r2, [r7, #28]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d902      	bls.n	800d8fc <SPI_WaitFlagStateUntilTimeout+0x54>
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d142      	bne.n	800d982 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	685a      	ldr	r2, [r3, #4]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	21e0      	movs	r1, #224	@ 0xe0
 800d908:	438a      	bics	r2, r1
 800d90a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	685a      	ldr	r2, [r3, #4]
 800d910:	2382      	movs	r3, #130	@ 0x82
 800d912:	005b      	lsls	r3, r3, #1
 800d914:	429a      	cmp	r2, r3
 800d916:	d113      	bne.n	800d940 <SPI_WaitFlagStateUntilTimeout+0x98>
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	689a      	ldr	r2, [r3, #8]
 800d91c:	2380      	movs	r3, #128	@ 0x80
 800d91e:	021b      	lsls	r3, r3, #8
 800d920:	429a      	cmp	r2, r3
 800d922:	d005      	beq.n	800d930 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	689a      	ldr	r2, [r3, #8]
 800d928:	2380      	movs	r3, #128	@ 0x80
 800d92a:	00db      	lsls	r3, r3, #3
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d107      	bne.n	800d940 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2140      	movs	r1, #64	@ 0x40
 800d93c:	438a      	bics	r2, r1
 800d93e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d944:	2380      	movs	r3, #128	@ 0x80
 800d946:	019b      	lsls	r3, r3, #6
 800d948:	429a      	cmp	r2, r3
 800d94a:	d110      	bne.n	800d96e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	681a      	ldr	r2, [r3, #0]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	491a      	ldr	r1, [pc, #104]	@ (800d9c0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800d958:	400a      	ands	r2, r1
 800d95a:	601a      	str	r2, [r3, #0]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2180      	movs	r1, #128	@ 0x80
 800d968:	0189      	lsls	r1, r1, #6
 800d96a:	430a      	orrs	r2, r1
 800d96c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	225d      	movs	r2, #93	@ 0x5d
 800d972:	2101      	movs	r1, #1
 800d974:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	225c      	movs	r2, #92	@ 0x5c
 800d97a:	2100      	movs	r1, #0
 800d97c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d97e:	2303      	movs	r3, #3
 800d980:	e017      	b.n	800d9b2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d101      	bne.n	800d98c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800d988:	2300      	movs	r3, #0
 800d98a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	3b01      	subs	r3, #1
 800d990:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	689b      	ldr	r3, [r3, #8]
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	4013      	ands	r3, r2
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	425a      	negs	r2, r3
 800d9a2:	4153      	adcs	r3, r2
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	001a      	movs	r2, r3
 800d9a8:	1dfb      	adds	r3, r7, #7
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d197      	bne.n	800d8e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d9b0:	2300      	movs	r3, #0
}
 800d9b2:	0018      	movs	r0, r3
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	b008      	add	sp, #32
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	46c0      	nop			@ (mov r8, r8)
 800d9bc:	2000002c 	.word	0x2000002c
 800d9c0:	ffffdfff 	.word	0xffffdfff

0800d9c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08a      	sub	sp, #40	@ 0x28
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
 800d9d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d9d2:	2317      	movs	r3, #23
 800d9d4:	18fb      	adds	r3, r7, r3
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d9da:	f7fa fc71 	bl	80082c0 <HAL_GetTick>
 800d9de:	0002      	movs	r2, r0
 800d9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e2:	1a9b      	subs	r3, r3, r2
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	18d3      	adds	r3, r2, r3
 800d9e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d9ea:	f7fa fc69 	bl	80082c0 <HAL_GetTick>
 800d9ee:	0003      	movs	r3, r0
 800d9f0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	330c      	adds	r3, #12
 800d9f8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d9fa:	4b41      	ldr	r3, [pc, #260]	@ (800db00 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	0013      	movs	r3, r2
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	189b      	adds	r3, r3, r2
 800da04:	00da      	lsls	r2, r3, #3
 800da06:	1ad3      	subs	r3, r2, r3
 800da08:	0d1b      	lsrs	r3, r3, #20
 800da0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da0c:	4353      	muls	r3, r2
 800da0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800da10:	e068      	b.n	800dae4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800da12:	68ba      	ldr	r2, [r7, #8]
 800da14:	23c0      	movs	r3, #192	@ 0xc0
 800da16:	00db      	lsls	r3, r3, #3
 800da18:	429a      	cmp	r2, r3
 800da1a:	d10a      	bne.n	800da32 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d107      	bne.n	800da32 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	b2da      	uxtb	r2, r3
 800da28:	2117      	movs	r1, #23
 800da2a:	187b      	adds	r3, r7, r1
 800da2c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800da2e:	187b      	adds	r3, r7, r1
 800da30:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	3301      	adds	r3, #1
 800da36:	d055      	beq.n	800dae4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800da38:	f7fa fc42 	bl	80082c0 <HAL_GetTick>
 800da3c:	0002      	movs	r2, r0
 800da3e:	6a3b      	ldr	r3, [r7, #32]
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da44:	429a      	cmp	r2, r3
 800da46:	d902      	bls.n	800da4e <SPI_WaitFifoStateUntilTimeout+0x8a>
 800da48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d142      	bne.n	800dad4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	685a      	ldr	r2, [r3, #4]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	21e0      	movs	r1, #224	@ 0xe0
 800da5a:	438a      	bics	r2, r1
 800da5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	685a      	ldr	r2, [r3, #4]
 800da62:	2382      	movs	r3, #130	@ 0x82
 800da64:	005b      	lsls	r3, r3, #1
 800da66:	429a      	cmp	r2, r3
 800da68:	d113      	bne.n	800da92 <SPI_WaitFifoStateUntilTimeout+0xce>
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	689a      	ldr	r2, [r3, #8]
 800da6e:	2380      	movs	r3, #128	@ 0x80
 800da70:	021b      	lsls	r3, r3, #8
 800da72:	429a      	cmp	r2, r3
 800da74:	d005      	beq.n	800da82 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	689a      	ldr	r2, [r3, #8]
 800da7a:	2380      	movs	r3, #128	@ 0x80
 800da7c:	00db      	lsls	r3, r3, #3
 800da7e:	429a      	cmp	r2, r3
 800da80:	d107      	bne.n	800da92 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2140      	movs	r1, #64	@ 0x40
 800da8e:	438a      	bics	r2, r1
 800da90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800da96:	2380      	movs	r3, #128	@ 0x80
 800da98:	019b      	lsls	r3, r3, #6
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d110      	bne.n	800dac0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4916      	ldr	r1, [pc, #88]	@ (800db04 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800daaa:	400a      	ands	r2, r1
 800daac:	601a      	str	r2, [r3, #0]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2180      	movs	r1, #128	@ 0x80
 800daba:	0189      	lsls	r1, r1, #6
 800dabc:	430a      	orrs	r2, r1
 800dabe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	225d      	movs	r2, #93	@ 0x5d
 800dac4:	2101      	movs	r1, #1
 800dac6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	225c      	movs	r2, #92	@ 0x5c
 800dacc:	2100      	movs	r1, #0
 800dace:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800dad0:	2303      	movs	r3, #3
 800dad2:	e010      	b.n	800daf6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800dada:	2300      	movs	r3, #0
 800dadc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	3b01      	subs	r3, #1
 800dae2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	689b      	ldr	r3, [r3, #8]
 800daea:	68ba      	ldr	r2, [r7, #8]
 800daec:	4013      	ands	r3, r2
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d18e      	bne.n	800da12 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800daf4:	2300      	movs	r3, #0
}
 800daf6:	0018      	movs	r0, r3
 800daf8:	46bd      	mov	sp, r7
 800dafa:	b00a      	add	sp, #40	@ 0x28
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	46c0      	nop			@ (mov r8, r8)
 800db00:	2000002c 	.word	0x2000002c
 800db04:	ffffdfff 	.word	0xffffdfff

0800db08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af02      	add	r7, sp, #8
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800db14:	68ba      	ldr	r2, [r7, #8]
 800db16:	23c0      	movs	r3, #192	@ 0xc0
 800db18:	0159      	lsls	r1, r3, #5
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	0013      	movs	r3, r2
 800db22:	2200      	movs	r2, #0
 800db24:	f7ff ff4e 	bl	800d9c4 <SPI_WaitFifoStateUntilTimeout>
 800db28:	1e03      	subs	r3, r0, #0
 800db2a:	d007      	beq.n	800db3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db30:	2220      	movs	r2, #32
 800db32:	431a      	orrs	r2, r3
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800db38:	2303      	movs	r3, #3
 800db3a:	e027      	b.n	800db8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	68f8      	ldr	r0, [r7, #12]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	9300      	str	r3, [sp, #0]
 800db44:	0013      	movs	r3, r2
 800db46:	2200      	movs	r2, #0
 800db48:	2180      	movs	r1, #128	@ 0x80
 800db4a:	f7ff fead 	bl	800d8a8 <SPI_WaitFlagStateUntilTimeout>
 800db4e:	1e03      	subs	r3, r0, #0
 800db50:	d007      	beq.n	800db62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db56:	2220      	movs	r2, #32
 800db58:	431a      	orrs	r2, r3
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800db5e:	2303      	movs	r3, #3
 800db60:	e014      	b.n	800db8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800db62:	68ba      	ldr	r2, [r7, #8]
 800db64:	23c0      	movs	r3, #192	@ 0xc0
 800db66:	00d9      	lsls	r1, r3, #3
 800db68:	68f8      	ldr	r0, [r7, #12]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	9300      	str	r3, [sp, #0]
 800db6e:	0013      	movs	r3, r2
 800db70:	2200      	movs	r2, #0
 800db72:	f7ff ff27 	bl	800d9c4 <SPI_WaitFifoStateUntilTimeout>
 800db76:	1e03      	subs	r3, r0, #0
 800db78:	d007      	beq.n	800db8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db7e:	2220      	movs	r2, #32
 800db80:	431a      	orrs	r2, r3
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800db86:	2303      	movs	r3, #3
 800db88:	e000      	b.n	800db8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	0018      	movs	r0, r3
 800db8e:	46bd      	mov	sp, r7
 800db90:	b004      	add	sp, #16
 800db92:	bd80      	pop	{r7, pc}

0800db94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d101      	bne.n	800dba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dba2:	2301      	movs	r3, #1
 800dba4:	e042      	b.n	800dc2c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	223d      	movs	r2, #61	@ 0x3d
 800dbaa:	5c9b      	ldrb	r3, [r3, r2]
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d107      	bne.n	800dbc2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	223c      	movs	r2, #60	@ 0x3c
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	0018      	movs	r0, r3
 800dbbe:	f7f9 fc4f 	bl	8007460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	223d      	movs	r2, #61	@ 0x3d
 800dbc6:	2102      	movs	r1, #2
 800dbc8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	0019      	movs	r1, r3
 800dbd4:	0010      	movs	r0, r2
 800dbd6:	f000 fc9b 	bl	800e510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2246      	movs	r2, #70	@ 0x46
 800dbde:	2101      	movs	r1, #1
 800dbe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	223e      	movs	r2, #62	@ 0x3e
 800dbe6:	2101      	movs	r1, #1
 800dbe8:	5499      	strb	r1, [r3, r2]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	223f      	movs	r2, #63	@ 0x3f
 800dbee:	2101      	movs	r1, #1
 800dbf0:	5499      	strb	r1, [r3, r2]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2240      	movs	r2, #64	@ 0x40
 800dbf6:	2101      	movs	r1, #1
 800dbf8:	5499      	strb	r1, [r3, r2]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2241      	movs	r2, #65	@ 0x41
 800dbfe:	2101      	movs	r1, #1
 800dc00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2242      	movs	r2, #66	@ 0x42
 800dc06:	2101      	movs	r1, #1
 800dc08:	5499      	strb	r1, [r3, r2]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2243      	movs	r2, #67	@ 0x43
 800dc0e:	2101      	movs	r1, #1
 800dc10:	5499      	strb	r1, [r3, r2]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2244      	movs	r2, #68	@ 0x44
 800dc16:	2101      	movs	r1, #1
 800dc18:	5499      	strb	r1, [r3, r2]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2245      	movs	r2, #69	@ 0x45
 800dc1e:	2101      	movs	r1, #1
 800dc20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	223d      	movs	r2, #61	@ 0x3d
 800dc26:	2101      	movs	r1, #1
 800dc28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	0018      	movs	r0, r3
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	b002      	add	sp, #8
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	223d      	movs	r2, #61	@ 0x3d
 800dc40:	5c9b      	ldrb	r3, [r3, r2]
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d001      	beq.n	800dc4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	e035      	b.n	800dcb8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	223d      	movs	r2, #61	@ 0x3d
 800dc50:	2102      	movs	r1, #2
 800dc52:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	68da      	ldr	r2, [r3, #12]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2101      	movs	r1, #1
 800dc60:	430a      	orrs	r2, r1
 800dc62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a15      	ldr	r2, [pc, #84]	@ (800dcc0 <HAL_TIM_Base_Start_IT+0x8c>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d009      	beq.n	800dc82 <HAL_TIM_Base_Start_IT+0x4e>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4a14      	ldr	r2, [pc, #80]	@ (800dcc4 <HAL_TIM_Base_Start_IT+0x90>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d004      	beq.n	800dc82 <HAL_TIM_Base_Start_IT+0x4e>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a12      	ldr	r2, [pc, #72]	@ (800dcc8 <HAL_TIM_Base_Start_IT+0x94>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d111      	bne.n	800dca6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	2207      	movs	r2, #7
 800dc8a:	4013      	ands	r3, r2
 800dc8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2b06      	cmp	r3, #6
 800dc92:	d010      	beq.n	800dcb6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2101      	movs	r1, #1
 800dca0:	430a      	orrs	r2, r1
 800dca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dca4:	e007      	b.n	800dcb6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	430a      	orrs	r2, r1
 800dcb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dcb6:	2300      	movs	r3, #0
}
 800dcb8:	0018      	movs	r0, r3
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	b004      	add	sp, #16
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	40012c00 	.word	0x40012c00
 800dcc4:	40000400 	.word	0x40000400
 800dcc8:	40014000 	.word	0x40014000

0800dccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d101      	bne.n	800dcde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e042      	b.n	800dd64 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	223d      	movs	r2, #61	@ 0x3d
 800dce2:	5c9b      	ldrb	r3, [r3, r2]
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d107      	bne.n	800dcfa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	223c      	movs	r2, #60	@ 0x3c
 800dcee:	2100      	movs	r1, #0
 800dcf0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	0018      	movs	r0, r3
 800dcf6:	f7f9 fb47 	bl	8007388 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	223d      	movs	r2, #61	@ 0x3d
 800dcfe:	2102      	movs	r1, #2
 800dd00:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681a      	ldr	r2, [r3, #0]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	3304      	adds	r3, #4
 800dd0a:	0019      	movs	r1, r3
 800dd0c:	0010      	movs	r0, r2
 800dd0e:	f000 fbff 	bl	800e510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2246      	movs	r2, #70	@ 0x46
 800dd16:	2101      	movs	r1, #1
 800dd18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	223e      	movs	r2, #62	@ 0x3e
 800dd1e:	2101      	movs	r1, #1
 800dd20:	5499      	strb	r1, [r3, r2]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	223f      	movs	r2, #63	@ 0x3f
 800dd26:	2101      	movs	r1, #1
 800dd28:	5499      	strb	r1, [r3, r2]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2240      	movs	r2, #64	@ 0x40
 800dd2e:	2101      	movs	r1, #1
 800dd30:	5499      	strb	r1, [r3, r2]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2241      	movs	r2, #65	@ 0x41
 800dd36:	2101      	movs	r1, #1
 800dd38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2242      	movs	r2, #66	@ 0x42
 800dd3e:	2101      	movs	r1, #1
 800dd40:	5499      	strb	r1, [r3, r2]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2243      	movs	r2, #67	@ 0x43
 800dd46:	2101      	movs	r1, #1
 800dd48:	5499      	strb	r1, [r3, r2]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2244      	movs	r2, #68	@ 0x44
 800dd4e:	2101      	movs	r1, #1
 800dd50:	5499      	strb	r1, [r3, r2]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2245      	movs	r2, #69	@ 0x45
 800dd56:	2101      	movs	r1, #1
 800dd58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	223d      	movs	r2, #61	@ 0x3d
 800dd5e:	2101      	movs	r1, #1
 800dd60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dd62:	2300      	movs	r3, #0
}
 800dd64:	0018      	movs	r0, r3
 800dd66:	46bd      	mov	sp, r7
 800dd68:	b002      	add	sp, #8
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d108      	bne.n	800dd8e <HAL_TIM_PWM_Start+0x22>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	223e      	movs	r2, #62	@ 0x3e
 800dd80:	5c9b      	ldrb	r3, [r3, r2]
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	3b01      	subs	r3, #1
 800dd86:	1e5a      	subs	r2, r3, #1
 800dd88:	4193      	sbcs	r3, r2
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	e01f      	b.n	800ddce <HAL_TIM_PWM_Start+0x62>
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	2b04      	cmp	r3, #4
 800dd92:	d108      	bne.n	800dda6 <HAL_TIM_PWM_Start+0x3a>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	223f      	movs	r2, #63	@ 0x3f
 800dd98:	5c9b      	ldrb	r3, [r3, r2]
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	3b01      	subs	r3, #1
 800dd9e:	1e5a      	subs	r2, r3, #1
 800dda0:	4193      	sbcs	r3, r2
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	e013      	b.n	800ddce <HAL_TIM_PWM_Start+0x62>
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	2b08      	cmp	r3, #8
 800ddaa:	d108      	bne.n	800ddbe <HAL_TIM_PWM_Start+0x52>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2240      	movs	r2, #64	@ 0x40
 800ddb0:	5c9b      	ldrb	r3, [r3, r2]
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	1e5a      	subs	r2, r3, #1
 800ddb8:	4193      	sbcs	r3, r2
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	e007      	b.n	800ddce <HAL_TIM_PWM_Start+0x62>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2241      	movs	r2, #65	@ 0x41
 800ddc2:	5c9b      	ldrb	r3, [r3, r2]
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	3b01      	subs	r3, #1
 800ddc8:	1e5a      	subs	r2, r3, #1
 800ddca:	4193      	sbcs	r3, r2
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e06e      	b.n	800deb4 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d104      	bne.n	800dde6 <HAL_TIM_PWM_Start+0x7a>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	223e      	movs	r2, #62	@ 0x3e
 800dde0:	2102      	movs	r1, #2
 800dde2:	5499      	strb	r1, [r3, r2]
 800dde4:	e013      	b.n	800de0e <HAL_TIM_PWM_Start+0xa2>
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2b04      	cmp	r3, #4
 800ddea:	d104      	bne.n	800ddf6 <HAL_TIM_PWM_Start+0x8a>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	223f      	movs	r2, #63	@ 0x3f
 800ddf0:	2102      	movs	r1, #2
 800ddf2:	5499      	strb	r1, [r3, r2]
 800ddf4:	e00b      	b.n	800de0e <HAL_TIM_PWM_Start+0xa2>
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	2b08      	cmp	r3, #8
 800ddfa:	d104      	bne.n	800de06 <HAL_TIM_PWM_Start+0x9a>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2240      	movs	r2, #64	@ 0x40
 800de00:	2102      	movs	r1, #2
 800de02:	5499      	strb	r1, [r3, r2]
 800de04:	e003      	b.n	800de0e <HAL_TIM_PWM_Start+0xa2>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2241      	movs	r2, #65	@ 0x41
 800de0a:	2102      	movs	r1, #2
 800de0c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	6839      	ldr	r1, [r7, #0]
 800de14:	2201      	movs	r2, #1
 800de16:	0018      	movs	r0, r3
 800de18:	f000 fdfa 	bl	800ea10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a26      	ldr	r2, [pc, #152]	@ (800debc <HAL_TIM_PWM_Start+0x150>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d00e      	beq.n	800de44 <HAL_TIM_PWM_Start+0xd8>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a25      	ldr	r2, [pc, #148]	@ (800dec0 <HAL_TIM_PWM_Start+0x154>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d009      	beq.n	800de44 <HAL_TIM_PWM_Start+0xd8>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a23      	ldr	r2, [pc, #140]	@ (800dec4 <HAL_TIM_PWM_Start+0x158>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d004      	beq.n	800de44 <HAL_TIM_PWM_Start+0xd8>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a22      	ldr	r2, [pc, #136]	@ (800dec8 <HAL_TIM_PWM_Start+0x15c>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d101      	bne.n	800de48 <HAL_TIM_PWM_Start+0xdc>
 800de44:	2301      	movs	r3, #1
 800de46:	e000      	b.n	800de4a <HAL_TIM_PWM_Start+0xde>
 800de48:	2300      	movs	r3, #0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d008      	beq.n	800de60 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	2180      	movs	r1, #128	@ 0x80
 800de5a:	0209      	lsls	r1, r1, #8
 800de5c:	430a      	orrs	r2, r1
 800de5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a15      	ldr	r2, [pc, #84]	@ (800debc <HAL_TIM_PWM_Start+0x150>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d009      	beq.n	800de7e <HAL_TIM_PWM_Start+0x112>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	4a17      	ldr	r2, [pc, #92]	@ (800decc <HAL_TIM_PWM_Start+0x160>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d004      	beq.n	800de7e <HAL_TIM_PWM_Start+0x112>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a11      	ldr	r2, [pc, #68]	@ (800dec0 <HAL_TIM_PWM_Start+0x154>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d111      	bne.n	800dea2 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	2207      	movs	r2, #7
 800de86:	4013      	ands	r3, r2
 800de88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2b06      	cmp	r3, #6
 800de8e:	d010      	beq.n	800deb2 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2101      	movs	r1, #1
 800de9c:	430a      	orrs	r2, r1
 800de9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dea0:	e007      	b.n	800deb2 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	2101      	movs	r1, #1
 800deae:	430a      	orrs	r2, r1
 800deb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800deb2:	2300      	movs	r3, #0
}
 800deb4:	0018      	movs	r0, r3
 800deb6:	46bd      	mov	sp, r7
 800deb8:	b004      	add	sp, #16
 800deba:	bd80      	pop	{r7, pc}
 800debc:	40012c00 	.word	0x40012c00
 800dec0:	40014000 	.word	0x40014000
 800dec4:	40014400 	.word	0x40014400
 800dec8:	40014800 	.word	0x40014800
 800decc:	40000400 	.word	0x40000400

0800ded0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d101      	bne.n	800dee4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e090      	b.n	800e006 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	223d      	movs	r2, #61	@ 0x3d
 800dee8:	5c9b      	ldrb	r3, [r3, r2]
 800deea:	b2db      	uxtb	r3, r3
 800deec:	2b00      	cmp	r3, #0
 800deee:	d107      	bne.n	800df00 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	223c      	movs	r2, #60	@ 0x3c
 800def4:	2100      	movs	r1, #0
 800def6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	0018      	movs	r0, r3
 800defc:	f7f9 fa64 	bl	80073c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	223d      	movs	r2, #61	@ 0x3d
 800df04:	2102      	movs	r1, #2
 800df06:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	689a      	ldr	r2, [r3, #8]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	493f      	ldr	r1, [pc, #252]	@ (800e010 <HAL_TIM_Encoder_Init+0x140>)
 800df14:	400a      	ands	r2, r1
 800df16:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	3304      	adds	r3, #4
 800df20:	0019      	movs	r1, r3
 800df22:	0010      	movs	r0, r2
 800df24:	f000 faf4 	bl	800e510 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	699b      	ldr	r3, [r3, #24]
 800df36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6a1b      	ldr	r3, [r3, #32]
 800df3e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	697a      	ldr	r2, [r7, #20]
 800df46:	4313      	orrs	r3, r2
 800df48:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	4a31      	ldr	r2, [pc, #196]	@ (800e014 <HAL_TIM_Encoder_Init+0x144>)
 800df4e:	4013      	ands	r3, r2
 800df50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	689a      	ldr	r2, [r3, #8]
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	699b      	ldr	r3, [r3, #24]
 800df5a:	021b      	lsls	r3, r3, #8
 800df5c:	4313      	orrs	r3, r2
 800df5e:	693a      	ldr	r2, [r7, #16]
 800df60:	4313      	orrs	r3, r2
 800df62:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	4a2c      	ldr	r2, [pc, #176]	@ (800e018 <HAL_TIM_Encoder_Init+0x148>)
 800df68:	4013      	ands	r3, r2
 800df6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	4a2b      	ldr	r2, [pc, #172]	@ (800e01c <HAL_TIM_Encoder_Init+0x14c>)
 800df70:	4013      	ands	r3, r2
 800df72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	68da      	ldr	r2, [r3, #12]
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	69db      	ldr	r3, [r3, #28]
 800df7c:	021b      	lsls	r3, r3, #8
 800df7e:	4313      	orrs	r3, r2
 800df80:	693a      	ldr	r2, [r7, #16]
 800df82:	4313      	orrs	r3, r2
 800df84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	691b      	ldr	r3, [r3, #16]
 800df8a:	011a      	lsls	r2, r3, #4
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	6a1b      	ldr	r3, [r3, #32]
 800df90:	031b      	lsls	r3, r3, #12
 800df92:	4313      	orrs	r3, r2
 800df94:	693a      	ldr	r2, [r7, #16]
 800df96:	4313      	orrs	r3, r2
 800df98:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2222      	movs	r2, #34	@ 0x22
 800df9e:	4393      	bics	r3, r2
 800dfa0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2288      	movs	r2, #136	@ 0x88
 800dfa6:	4393      	bics	r3, r2
 800dfa8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	685a      	ldr	r2, [r3, #4]
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	695b      	ldr	r3, [r3, #20]
 800dfb2:	011b      	lsls	r3, r3, #4
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	697a      	ldr	r2, [r7, #20]
 800dfc2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	693a      	ldr	r2, [r7, #16]
 800dfca:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	68fa      	ldr	r2, [r7, #12]
 800dfd2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2246      	movs	r2, #70	@ 0x46
 800dfd8:	2101      	movs	r1, #1
 800dfda:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	223e      	movs	r2, #62	@ 0x3e
 800dfe0:	2101      	movs	r1, #1
 800dfe2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	223f      	movs	r2, #63	@ 0x3f
 800dfe8:	2101      	movs	r1, #1
 800dfea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2242      	movs	r2, #66	@ 0x42
 800dff0:	2101      	movs	r1, #1
 800dff2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2243      	movs	r2, #67	@ 0x43
 800dff8:	2101      	movs	r1, #1
 800dffa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	223d      	movs	r2, #61	@ 0x3d
 800e000:	2101      	movs	r1, #1
 800e002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e004:	2300      	movs	r3, #0
}
 800e006:	0018      	movs	r0, r3
 800e008:	46bd      	mov	sp, r7
 800e00a:	b006      	add	sp, #24
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	46c0      	nop			@ (mov r8, r8)
 800e010:	ffffbff8 	.word	0xffffbff8
 800e014:	fffffcfc 	.word	0xfffffcfc
 800e018:	fffff3f3 	.word	0xfffff3f3
 800e01c:	ffff0f0f 	.word	0xffff0f0f

0800e020 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e020:	b590      	push	{r4, r7, lr}
 800e022:	b085      	sub	sp, #20
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e02a:	200f      	movs	r0, #15
 800e02c:	183b      	adds	r3, r7, r0
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	213e      	movs	r1, #62	@ 0x3e
 800e032:	5c52      	ldrb	r2, [r2, r1]
 800e034:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e036:	230e      	movs	r3, #14
 800e038:	18fb      	adds	r3, r7, r3
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	213f      	movs	r1, #63	@ 0x3f
 800e03e:	5c52      	ldrb	r2, [r2, r1]
 800e040:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e042:	240d      	movs	r4, #13
 800e044:	193b      	adds	r3, r7, r4
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	2142      	movs	r1, #66	@ 0x42
 800e04a:	5c52      	ldrb	r2, [r2, r1]
 800e04c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e04e:	230c      	movs	r3, #12
 800e050:	18fb      	adds	r3, r7, r3
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	2143      	movs	r1, #67	@ 0x43
 800e056:	5c52      	ldrb	r2, [r2, r1]
 800e058:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d112      	bne.n	800e086 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e060:	183b      	adds	r3, r7, r0
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	2b01      	cmp	r3, #1
 800e066:	d103      	bne.n	800e070 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e068:	193b      	adds	r3, r7, r4
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d001      	beq.n	800e074 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 800e070:	2301      	movs	r3, #1
 800e072:	e075      	b.n	800e160 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	223e      	movs	r2, #62	@ 0x3e
 800e078:	2102      	movs	r1, #2
 800e07a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2242      	movs	r2, #66	@ 0x42
 800e080:	2102      	movs	r1, #2
 800e082:	5499      	strb	r1, [r3, r2]
 800e084:	e03d      	b.n	800e102 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	2b04      	cmp	r3, #4
 800e08a:	d114      	bne.n	800e0b6 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e08c:	230e      	movs	r3, #14
 800e08e:	18fb      	adds	r3, r7, r3
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d104      	bne.n	800e0a0 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e096:	230c      	movs	r3, #12
 800e098:	18fb      	adds	r3, r7, r3
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d001      	beq.n	800e0a4 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e05d      	b.n	800e160 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	223f      	movs	r2, #63	@ 0x3f
 800e0a8:	2102      	movs	r1, #2
 800e0aa:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2243      	movs	r2, #67	@ 0x43
 800e0b0:	2102      	movs	r1, #2
 800e0b2:	5499      	strb	r1, [r3, r2]
 800e0b4:	e025      	b.n	800e102 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e0b6:	230f      	movs	r3, #15
 800e0b8:	18fb      	adds	r3, r7, r3
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d10e      	bne.n	800e0de <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e0c0:	230e      	movs	r3, #14
 800e0c2:	18fb      	adds	r3, r7, r3
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d109      	bne.n	800e0de <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e0ca:	230d      	movs	r3, #13
 800e0cc:	18fb      	adds	r3, r7, r3
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	d104      	bne.n	800e0de <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e0d4:	230c      	movs	r3, #12
 800e0d6:	18fb      	adds	r3, r7, r3
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d001      	beq.n	800e0e2 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e03e      	b.n	800e160 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	223e      	movs	r2, #62	@ 0x3e
 800e0e6:	2102      	movs	r1, #2
 800e0e8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	223f      	movs	r2, #63	@ 0x3f
 800e0ee:	2102      	movs	r1, #2
 800e0f0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2242      	movs	r2, #66	@ 0x42
 800e0f6:	2102      	movs	r1, #2
 800e0f8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2243      	movs	r2, #67	@ 0x43
 800e0fe:	2102      	movs	r1, #2
 800e100:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d003      	beq.n	800e110 <HAL_TIM_Encoder_Start+0xf0>
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	2b04      	cmp	r3, #4
 800e10c:	d008      	beq.n	800e120 <HAL_TIM_Encoder_Start+0x100>
 800e10e:	e00f      	b.n	800e130 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2201      	movs	r2, #1
 800e116:	2100      	movs	r1, #0
 800e118:	0018      	movs	r0, r3
 800e11a:	f000 fc79 	bl	800ea10 <TIM_CCxChannelCmd>
      break;
 800e11e:	e016      	b.n	800e14e <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2201      	movs	r2, #1
 800e126:	2104      	movs	r1, #4
 800e128:	0018      	movs	r0, r3
 800e12a:	f000 fc71 	bl	800ea10 <TIM_CCxChannelCmd>
      break;
 800e12e:	e00e      	b.n	800e14e <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2201      	movs	r2, #1
 800e136:	2100      	movs	r1, #0
 800e138:	0018      	movs	r0, r3
 800e13a:	f000 fc69 	bl	800ea10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	2201      	movs	r2, #1
 800e144:	2104      	movs	r1, #4
 800e146:	0018      	movs	r0, r3
 800e148:	f000 fc62 	bl	800ea10 <TIM_CCxChannelCmd>
      break;
 800e14c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2101      	movs	r1, #1
 800e15a:	430a      	orrs	r2, r1
 800e15c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e15e:	2300      	movs	r3, #0
}
 800e160:	0018      	movs	r0, r3
 800e162:	46bd      	mov	sp, r7
 800e164:	b005      	add	sp, #20
 800e166:	bd90      	pop	{r4, r7, pc}

0800e168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	2202      	movs	r2, #2
 800e184:	4013      	ands	r3, r2
 800e186:	d021      	beq.n	800e1cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2202      	movs	r2, #2
 800e18c:	4013      	ands	r3, r2
 800e18e:	d01d      	beq.n	800e1cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2203      	movs	r2, #3
 800e196:	4252      	negs	r2, r2
 800e198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2201      	movs	r2, #1
 800e19e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	699b      	ldr	r3, [r3, #24]
 800e1a6:	2203      	movs	r2, #3
 800e1a8:	4013      	ands	r3, r2
 800e1aa:	d004      	beq.n	800e1b6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	0018      	movs	r0, r3
 800e1b0:	f000 f996 	bl	800e4e0 <HAL_TIM_IC_CaptureCallback>
 800e1b4:	e007      	b.n	800e1c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	0018      	movs	r0, r3
 800e1ba:	f000 f989 	bl	800e4d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	0018      	movs	r0, r3
 800e1c2:	f000 f995 	bl	800e4f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	2204      	movs	r2, #4
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	d022      	beq.n	800e21a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2204      	movs	r2, #4
 800e1d8:	4013      	ands	r3, r2
 800e1da:	d01e      	beq.n	800e21a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2205      	movs	r2, #5
 800e1e2:	4252      	negs	r2, r2
 800e1e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2202      	movs	r2, #2
 800e1ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	699a      	ldr	r2, [r3, #24]
 800e1f2:	23c0      	movs	r3, #192	@ 0xc0
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	4013      	ands	r3, r2
 800e1f8:	d004      	beq.n	800e204 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	0018      	movs	r0, r3
 800e1fe:	f000 f96f 	bl	800e4e0 <HAL_TIM_IC_CaptureCallback>
 800e202:	e007      	b.n	800e214 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	0018      	movs	r0, r3
 800e208:	f000 f962 	bl	800e4d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	0018      	movs	r0, r3
 800e210:	f000 f96e 	bl	800e4f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	2208      	movs	r2, #8
 800e21e:	4013      	ands	r3, r2
 800e220:	d021      	beq.n	800e266 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2208      	movs	r2, #8
 800e226:	4013      	ands	r3, r2
 800e228:	d01d      	beq.n	800e266 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2209      	movs	r2, #9
 800e230:	4252      	negs	r2, r2
 800e232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2204      	movs	r2, #4
 800e238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	69db      	ldr	r3, [r3, #28]
 800e240:	2203      	movs	r2, #3
 800e242:	4013      	ands	r3, r2
 800e244:	d004      	beq.n	800e250 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	0018      	movs	r0, r3
 800e24a:	f000 f949 	bl	800e4e0 <HAL_TIM_IC_CaptureCallback>
 800e24e:	e007      	b.n	800e260 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	0018      	movs	r0, r3
 800e254:	f000 f93c 	bl	800e4d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	0018      	movs	r0, r3
 800e25c:	f000 f948 	bl	800e4f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	2210      	movs	r2, #16
 800e26a:	4013      	ands	r3, r2
 800e26c:	d022      	beq.n	800e2b4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2210      	movs	r2, #16
 800e272:	4013      	ands	r3, r2
 800e274:	d01e      	beq.n	800e2b4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2211      	movs	r2, #17
 800e27c:	4252      	negs	r2, r2
 800e27e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2208      	movs	r2, #8
 800e284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	69da      	ldr	r2, [r3, #28]
 800e28c:	23c0      	movs	r3, #192	@ 0xc0
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	4013      	ands	r3, r2
 800e292:	d004      	beq.n	800e29e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	0018      	movs	r0, r3
 800e298:	f000 f922 	bl	800e4e0 <HAL_TIM_IC_CaptureCallback>
 800e29c:	e007      	b.n	800e2ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	0018      	movs	r0, r3
 800e2a2:	f000 f915 	bl	800e4d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	0018      	movs	r0, r3
 800e2aa:	f000 f921 	bl	800e4f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	4013      	ands	r3, r2
 800e2ba:	d00c      	beq.n	800e2d6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	4013      	ands	r3, r2
 800e2c2:	d008      	beq.n	800e2d6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2202      	movs	r2, #2
 800e2ca:	4252      	negs	r2, r2
 800e2cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	0018      	movs	r0, r3
 800e2d2:	f7f5 ff95 	bl	8004200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2280      	movs	r2, #128	@ 0x80
 800e2da:	4013      	ands	r3, r2
 800e2dc:	d00c      	beq.n	800e2f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2280      	movs	r2, #128	@ 0x80
 800e2e2:	4013      	ands	r3, r2
 800e2e4:	d008      	beq.n	800e2f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	2281      	movs	r2, #129	@ 0x81
 800e2ec:	4252      	negs	r2, r2
 800e2ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	0018      	movs	r0, r3
 800e2f4:	f000 fc6e 	bl	800ebd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	2240      	movs	r2, #64	@ 0x40
 800e2fc:	4013      	ands	r3, r2
 800e2fe:	d00c      	beq.n	800e31a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2240      	movs	r2, #64	@ 0x40
 800e304:	4013      	ands	r3, r2
 800e306:	d008      	beq.n	800e31a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2241      	movs	r2, #65	@ 0x41
 800e30e:	4252      	negs	r2, r2
 800e310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	0018      	movs	r0, r3
 800e316:	f000 f8f3 	bl	800e500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	2220      	movs	r2, #32
 800e31e:	4013      	ands	r3, r2
 800e320:	d00c      	beq.n	800e33c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2220      	movs	r2, #32
 800e326:	4013      	ands	r3, r2
 800e328:	d008      	beq.n	800e33c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2221      	movs	r2, #33	@ 0x21
 800e330:	4252      	negs	r2, r2
 800e332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	0018      	movs	r0, r3
 800e338:	f000 fc44 	bl	800ebc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e33c:	46c0      	nop			@ (mov r8, r8)
 800e33e:	46bd      	mov	sp, r7
 800e340:	b004      	add	sp, #16
 800e342:	bd80      	pop	{r7, pc}

0800e344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b086      	sub	sp, #24
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e350:	2317      	movs	r3, #23
 800e352:	18fb      	adds	r3, r7, r3
 800e354:	2200      	movs	r2, #0
 800e356:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	223c      	movs	r2, #60	@ 0x3c
 800e35c:	5c9b      	ldrb	r3, [r3, r2]
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d101      	bne.n	800e366 <HAL_TIM_PWM_ConfigChannel+0x22>
 800e362:	2302      	movs	r3, #2
 800e364:	e0ad      	b.n	800e4c2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	223c      	movs	r2, #60	@ 0x3c
 800e36a:	2101      	movs	r1, #1
 800e36c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2b0c      	cmp	r3, #12
 800e372:	d100      	bne.n	800e376 <HAL_TIM_PWM_ConfigChannel+0x32>
 800e374:	e076      	b.n	800e464 <HAL_TIM_PWM_ConfigChannel+0x120>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2b0c      	cmp	r3, #12
 800e37a:	d900      	bls.n	800e37e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800e37c:	e095      	b.n	800e4aa <HAL_TIM_PWM_ConfigChannel+0x166>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2b08      	cmp	r3, #8
 800e382:	d04e      	beq.n	800e422 <HAL_TIM_PWM_ConfigChannel+0xde>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2b08      	cmp	r3, #8
 800e388:	d900      	bls.n	800e38c <HAL_TIM_PWM_ConfigChannel+0x48>
 800e38a:	e08e      	b.n	800e4aa <HAL_TIM_PWM_ConfigChannel+0x166>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d003      	beq.n	800e39a <HAL_TIM_PWM_ConfigChannel+0x56>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2b04      	cmp	r3, #4
 800e396:	d021      	beq.n	800e3dc <HAL_TIM_PWM_ConfigChannel+0x98>
 800e398:	e087      	b.n	800e4aa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	68ba      	ldr	r2, [r7, #8]
 800e3a0:	0011      	movs	r1, r2
 800e3a2:	0018      	movs	r0, r3
 800e3a4:	f000 f938 	bl	800e618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	699a      	ldr	r2, [r3, #24]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2108      	movs	r1, #8
 800e3b4:	430a      	orrs	r2, r1
 800e3b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	699a      	ldr	r2, [r3, #24]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2104      	movs	r1, #4
 800e3c4:	438a      	bics	r2, r1
 800e3c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	6999      	ldr	r1, [r3, #24]
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	691a      	ldr	r2, [r3, #16]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	430a      	orrs	r2, r1
 800e3d8:	619a      	str	r2, [r3, #24]
      break;
 800e3da:	e06b      	b.n	800e4b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	0011      	movs	r1, r2
 800e3e4:	0018      	movs	r0, r3
 800e3e6:	f000 f99f 	bl	800e728 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	699a      	ldr	r2, [r3, #24]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2180      	movs	r1, #128	@ 0x80
 800e3f6:	0109      	lsls	r1, r1, #4
 800e3f8:	430a      	orrs	r2, r1
 800e3fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	699a      	ldr	r2, [r3, #24]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4931      	ldr	r1, [pc, #196]	@ (800e4cc <HAL_TIM_PWM_ConfigChannel+0x188>)
 800e408:	400a      	ands	r2, r1
 800e40a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	6999      	ldr	r1, [r3, #24]
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	021a      	lsls	r2, r3, #8
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	430a      	orrs	r2, r1
 800e41e:	619a      	str	r2, [r3, #24]
      break;
 800e420:	e048      	b.n	800e4b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	68ba      	ldr	r2, [r7, #8]
 800e428:	0011      	movs	r1, r2
 800e42a:	0018      	movs	r0, r3
 800e42c:	f000 fa00 	bl	800e830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	69da      	ldr	r2, [r3, #28]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2108      	movs	r1, #8
 800e43c:	430a      	orrs	r2, r1
 800e43e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	69da      	ldr	r2, [r3, #28]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	2104      	movs	r1, #4
 800e44c:	438a      	bics	r2, r1
 800e44e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	69d9      	ldr	r1, [r3, #28]
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	691a      	ldr	r2, [r3, #16]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	430a      	orrs	r2, r1
 800e460:	61da      	str	r2, [r3, #28]
      break;
 800e462:	e027      	b.n	800e4b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	68ba      	ldr	r2, [r7, #8]
 800e46a:	0011      	movs	r1, r2
 800e46c:	0018      	movs	r0, r3
 800e46e:	f000 fa65 	bl	800e93c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	69da      	ldr	r2, [r3, #28]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2180      	movs	r1, #128	@ 0x80
 800e47e:	0109      	lsls	r1, r1, #4
 800e480:	430a      	orrs	r2, r1
 800e482:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	69da      	ldr	r2, [r3, #28]
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	490f      	ldr	r1, [pc, #60]	@ (800e4cc <HAL_TIM_PWM_ConfigChannel+0x188>)
 800e490:	400a      	ands	r2, r1
 800e492:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	69d9      	ldr	r1, [r3, #28]
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	691b      	ldr	r3, [r3, #16]
 800e49e:	021a      	lsls	r2, r3, #8
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	430a      	orrs	r2, r1
 800e4a6:	61da      	str	r2, [r3, #28]
      break;
 800e4a8:	e004      	b.n	800e4b4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800e4aa:	2317      	movs	r3, #23
 800e4ac:	18fb      	adds	r3, r7, r3
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	701a      	strb	r2, [r3, #0]
      break;
 800e4b2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	223c      	movs	r2, #60	@ 0x3c
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	5499      	strb	r1, [r3, r2]

  return status;
 800e4bc:	2317      	movs	r3, #23
 800e4be:	18fb      	adds	r3, r7, r3
 800e4c0:	781b      	ldrb	r3, [r3, #0]
}
 800e4c2:	0018      	movs	r0, r3
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	b006      	add	sp, #24
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	46c0      	nop			@ (mov r8, r8)
 800e4cc:	fffffbff 	.word	0xfffffbff

0800e4d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e4d8:	46c0      	nop			@ (mov r8, r8)
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	b002      	add	sp, #8
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e4e8:	46c0      	nop			@ (mov r8, r8)
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	b002      	add	sp, #8
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e4f8:	46c0      	nop			@ (mov r8, r8)
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	b002      	add	sp, #8
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e508:	46c0      	nop			@ (mov r8, r8)
 800e50a:	46bd      	mov	sp, r7
 800e50c:	b002      	add	sp, #8
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	4a36      	ldr	r2, [pc, #216]	@ (800e5fc <TIM_Base_SetConfig+0xec>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d003      	beq.n	800e530 <TIM_Base_SetConfig+0x20>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	4a35      	ldr	r2, [pc, #212]	@ (800e600 <TIM_Base_SetConfig+0xf0>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d108      	bne.n	800e542 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2270      	movs	r2, #112	@ 0x70
 800e534:	4393      	bics	r3, r2
 800e536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	4313      	orrs	r3, r2
 800e540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4a2d      	ldr	r2, [pc, #180]	@ (800e5fc <TIM_Base_SetConfig+0xec>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d013      	beq.n	800e572 <TIM_Base_SetConfig+0x62>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4a2c      	ldr	r2, [pc, #176]	@ (800e600 <TIM_Base_SetConfig+0xf0>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d00f      	beq.n	800e572 <TIM_Base_SetConfig+0x62>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	4a2b      	ldr	r2, [pc, #172]	@ (800e604 <TIM_Base_SetConfig+0xf4>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d00b      	beq.n	800e572 <TIM_Base_SetConfig+0x62>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4a2a      	ldr	r2, [pc, #168]	@ (800e608 <TIM_Base_SetConfig+0xf8>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d007      	beq.n	800e572 <TIM_Base_SetConfig+0x62>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4a29      	ldr	r2, [pc, #164]	@ (800e60c <TIM_Base_SetConfig+0xfc>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d003      	beq.n	800e572 <TIM_Base_SetConfig+0x62>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4a28      	ldr	r2, [pc, #160]	@ (800e610 <TIM_Base_SetConfig+0x100>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d108      	bne.n	800e584 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	4a27      	ldr	r2, [pc, #156]	@ (800e614 <TIM_Base_SetConfig+0x104>)
 800e576:	4013      	ands	r3, r2
 800e578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	68fa      	ldr	r2, [r7, #12]
 800e580:	4313      	orrs	r3, r2
 800e582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2280      	movs	r2, #128	@ 0x80
 800e588:	4393      	bics	r3, r2
 800e58a:	001a      	movs	r2, r3
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	695b      	ldr	r3, [r3, #20]
 800e590:	4313      	orrs	r3, r2
 800e592:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	68fa      	ldr	r2, [r7, #12]
 800e598:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	689a      	ldr	r2, [r3, #8]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4a13      	ldr	r2, [pc, #76]	@ (800e5fc <TIM_Base_SetConfig+0xec>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d00b      	beq.n	800e5ca <TIM_Base_SetConfig+0xba>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	4a14      	ldr	r2, [pc, #80]	@ (800e608 <TIM_Base_SetConfig+0xf8>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d007      	beq.n	800e5ca <TIM_Base_SetConfig+0xba>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4a13      	ldr	r2, [pc, #76]	@ (800e60c <TIM_Base_SetConfig+0xfc>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d003      	beq.n	800e5ca <TIM_Base_SetConfig+0xba>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4a12      	ldr	r2, [pc, #72]	@ (800e610 <TIM_Base_SetConfig+0x100>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d103      	bne.n	800e5d2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	691a      	ldr	r2, [r3, #16]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	4013      	ands	r3, r2
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d106      	bne.n	800e5f2 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	691b      	ldr	r3, [r3, #16]
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	4393      	bics	r3, r2
 800e5ec:	001a      	movs	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	611a      	str	r2, [r3, #16]
  }
}
 800e5f2:	46c0      	nop			@ (mov r8, r8)
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	b004      	add	sp, #16
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	46c0      	nop			@ (mov r8, r8)
 800e5fc:	40012c00 	.word	0x40012c00
 800e600:	40000400 	.word	0x40000400
 800e604:	40002000 	.word	0x40002000
 800e608:	40014000 	.word	0x40014000
 800e60c:	40014400 	.word	0x40014400
 800e610:	40014800 	.word	0x40014800
 800e614:	fffffcff 	.word	0xfffffcff

0800e618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a1b      	ldr	r3, [r3, #32]
 800e626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6a1b      	ldr	r3, [r3, #32]
 800e62c:	2201      	movs	r2, #1
 800e62e:	4393      	bics	r3, r2
 800e630:	001a      	movs	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	699b      	ldr	r3, [r3, #24]
 800e640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2270      	movs	r2, #112	@ 0x70
 800e646:	4393      	bics	r3, r2
 800e648:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2203      	movs	r2, #3
 800e64e:	4393      	bics	r3, r2
 800e650:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	68fa      	ldr	r2, [r7, #12]
 800e658:	4313      	orrs	r3, r2
 800e65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	2202      	movs	r2, #2
 800e660:	4393      	bics	r3, r2
 800e662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	697a      	ldr	r2, [r7, #20]
 800e66a:	4313      	orrs	r3, r2
 800e66c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a27      	ldr	r2, [pc, #156]	@ (800e710 <TIM_OC1_SetConfig+0xf8>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d00b      	beq.n	800e68e <TIM_OC1_SetConfig+0x76>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	4a26      	ldr	r2, [pc, #152]	@ (800e714 <TIM_OC1_SetConfig+0xfc>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d007      	beq.n	800e68e <TIM_OC1_SetConfig+0x76>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4a25      	ldr	r2, [pc, #148]	@ (800e718 <TIM_OC1_SetConfig+0x100>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d003      	beq.n	800e68e <TIM_OC1_SetConfig+0x76>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a24      	ldr	r2, [pc, #144]	@ (800e71c <TIM_OC1_SetConfig+0x104>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d10c      	bne.n	800e6a8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	2208      	movs	r2, #8
 800e692:	4393      	bics	r3, r2
 800e694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	697a      	ldr	r2, [r7, #20]
 800e69c:	4313      	orrs	r3, r2
 800e69e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	2204      	movs	r2, #4
 800e6a4:	4393      	bics	r3, r2
 800e6a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4a19      	ldr	r2, [pc, #100]	@ (800e710 <TIM_OC1_SetConfig+0xf8>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d00b      	beq.n	800e6c8 <TIM_OC1_SetConfig+0xb0>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	4a18      	ldr	r2, [pc, #96]	@ (800e714 <TIM_OC1_SetConfig+0xfc>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d007      	beq.n	800e6c8 <TIM_OC1_SetConfig+0xb0>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4a17      	ldr	r2, [pc, #92]	@ (800e718 <TIM_OC1_SetConfig+0x100>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d003      	beq.n	800e6c8 <TIM_OC1_SetConfig+0xb0>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	4a16      	ldr	r2, [pc, #88]	@ (800e71c <TIM_OC1_SetConfig+0x104>)
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	d111      	bne.n	800e6ec <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	4a15      	ldr	r2, [pc, #84]	@ (800e720 <TIM_OC1_SetConfig+0x108>)
 800e6cc:	4013      	ands	r3, r2
 800e6ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	4a14      	ldr	r2, [pc, #80]	@ (800e724 <TIM_OC1_SetConfig+0x10c>)
 800e6d4:	4013      	ands	r3, r2
 800e6d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	695b      	ldr	r3, [r3, #20]
 800e6dc:	693a      	ldr	r2, [r7, #16]
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	699b      	ldr	r3, [r3, #24]
 800e6e6:	693a      	ldr	r2, [r7, #16]
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	693a      	ldr	r2, [r7, #16]
 800e6f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	68fa      	ldr	r2, [r7, #12]
 800e6f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	685a      	ldr	r2, [r3, #4]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	697a      	ldr	r2, [r7, #20]
 800e704:	621a      	str	r2, [r3, #32]
}
 800e706:	46c0      	nop			@ (mov r8, r8)
 800e708:	46bd      	mov	sp, r7
 800e70a:	b006      	add	sp, #24
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	46c0      	nop			@ (mov r8, r8)
 800e710:	40012c00 	.word	0x40012c00
 800e714:	40014000 	.word	0x40014000
 800e718:	40014400 	.word	0x40014400
 800e71c:	40014800 	.word	0x40014800
 800e720:	fffffeff 	.word	0xfffffeff
 800e724:	fffffdff 	.word	0xfffffdff

0800e728 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b086      	sub	sp, #24
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6a1b      	ldr	r3, [r3, #32]
 800e736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6a1b      	ldr	r3, [r3, #32]
 800e73c:	2210      	movs	r2, #16
 800e73e:	4393      	bics	r3, r2
 800e740:	001a      	movs	r2, r3
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	699b      	ldr	r3, [r3, #24]
 800e750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	4a2e      	ldr	r2, [pc, #184]	@ (800e810 <TIM_OC2_SetConfig+0xe8>)
 800e756:	4013      	ands	r3, r2
 800e758:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	4a2d      	ldr	r2, [pc, #180]	@ (800e814 <TIM_OC2_SetConfig+0xec>)
 800e75e:	4013      	ands	r3, r2
 800e760:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	021b      	lsls	r3, r3, #8
 800e768:	68fa      	ldr	r2, [r7, #12]
 800e76a:	4313      	orrs	r3, r2
 800e76c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	2220      	movs	r2, #32
 800e772:	4393      	bics	r3, r2
 800e774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	011b      	lsls	r3, r3, #4
 800e77c:	697a      	ldr	r2, [r7, #20]
 800e77e:	4313      	orrs	r3, r2
 800e780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	4a24      	ldr	r2, [pc, #144]	@ (800e818 <TIM_OC2_SetConfig+0xf0>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d10d      	bne.n	800e7a6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	2280      	movs	r2, #128	@ 0x80
 800e78e:	4393      	bics	r3, r2
 800e790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	011b      	lsls	r3, r3, #4
 800e798:	697a      	ldr	r2, [r7, #20]
 800e79a:	4313      	orrs	r3, r2
 800e79c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	2240      	movs	r2, #64	@ 0x40
 800e7a2:	4393      	bics	r3, r2
 800e7a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4a1b      	ldr	r2, [pc, #108]	@ (800e818 <TIM_OC2_SetConfig+0xf0>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d00b      	beq.n	800e7c6 <TIM_OC2_SetConfig+0x9e>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a1a      	ldr	r2, [pc, #104]	@ (800e81c <TIM_OC2_SetConfig+0xf4>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d007      	beq.n	800e7c6 <TIM_OC2_SetConfig+0x9e>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4a19      	ldr	r2, [pc, #100]	@ (800e820 <TIM_OC2_SetConfig+0xf8>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d003      	beq.n	800e7c6 <TIM_OC2_SetConfig+0x9e>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4a18      	ldr	r2, [pc, #96]	@ (800e824 <TIM_OC2_SetConfig+0xfc>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d113      	bne.n	800e7ee <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	4a17      	ldr	r2, [pc, #92]	@ (800e828 <TIM_OC2_SetConfig+0x100>)
 800e7ca:	4013      	ands	r3, r2
 800e7cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	4a16      	ldr	r2, [pc, #88]	@ (800e82c <TIM_OC2_SetConfig+0x104>)
 800e7d2:	4013      	ands	r3, r2
 800e7d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	695b      	ldr	r3, [r3, #20]
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	693a      	ldr	r2, [r7, #16]
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	693a      	ldr	r2, [r7, #16]
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	693a      	ldr	r2, [r7, #16]
 800e7f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	68fa      	ldr	r2, [r7, #12]
 800e7f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	685a      	ldr	r2, [r3, #4]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	697a      	ldr	r2, [r7, #20]
 800e806:	621a      	str	r2, [r3, #32]
}
 800e808:	46c0      	nop			@ (mov r8, r8)
 800e80a:	46bd      	mov	sp, r7
 800e80c:	b006      	add	sp, #24
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	ffff8fff 	.word	0xffff8fff
 800e814:	fffffcff 	.word	0xfffffcff
 800e818:	40012c00 	.word	0x40012c00
 800e81c:	40014000 	.word	0x40014000
 800e820:	40014400 	.word	0x40014400
 800e824:	40014800 	.word	0x40014800
 800e828:	fffffbff 	.word	0xfffffbff
 800e82c:	fffff7ff 	.word	0xfffff7ff

0800e830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b086      	sub	sp, #24
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6a1b      	ldr	r3, [r3, #32]
 800e83e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6a1b      	ldr	r3, [r3, #32]
 800e844:	4a33      	ldr	r2, [pc, #204]	@ (800e914 <TIM_OC3_SetConfig+0xe4>)
 800e846:	401a      	ands	r2, r3
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	69db      	ldr	r3, [r3, #28]
 800e856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2270      	movs	r2, #112	@ 0x70
 800e85c:	4393      	bics	r3, r2
 800e85e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2203      	movs	r2, #3
 800e864:	4393      	bics	r3, r2
 800e866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	4313      	orrs	r3, r2
 800e870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	4a28      	ldr	r2, [pc, #160]	@ (800e918 <TIM_OC3_SetConfig+0xe8>)
 800e876:	4013      	ands	r3, r2
 800e878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	689b      	ldr	r3, [r3, #8]
 800e87e:	021b      	lsls	r3, r3, #8
 800e880:	697a      	ldr	r2, [r7, #20]
 800e882:	4313      	orrs	r3, r2
 800e884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4a24      	ldr	r2, [pc, #144]	@ (800e91c <TIM_OC3_SetConfig+0xec>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d10d      	bne.n	800e8aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	4a23      	ldr	r2, [pc, #140]	@ (800e920 <TIM_OC3_SetConfig+0xf0>)
 800e892:	4013      	ands	r3, r2
 800e894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	021b      	lsls	r3, r3, #8
 800e89c:	697a      	ldr	r2, [r7, #20]
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	4a1f      	ldr	r2, [pc, #124]	@ (800e924 <TIM_OC3_SetConfig+0xf4>)
 800e8a6:	4013      	ands	r3, r2
 800e8a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4a1b      	ldr	r2, [pc, #108]	@ (800e91c <TIM_OC3_SetConfig+0xec>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d00b      	beq.n	800e8ca <TIM_OC3_SetConfig+0x9a>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	4a1c      	ldr	r2, [pc, #112]	@ (800e928 <TIM_OC3_SetConfig+0xf8>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d007      	beq.n	800e8ca <TIM_OC3_SetConfig+0x9a>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	4a1b      	ldr	r2, [pc, #108]	@ (800e92c <TIM_OC3_SetConfig+0xfc>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d003      	beq.n	800e8ca <TIM_OC3_SetConfig+0x9a>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	4a1a      	ldr	r2, [pc, #104]	@ (800e930 <TIM_OC3_SetConfig+0x100>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d113      	bne.n	800e8f2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	4a19      	ldr	r2, [pc, #100]	@ (800e934 <TIM_OC3_SetConfig+0x104>)
 800e8ce:	4013      	ands	r3, r2
 800e8d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	4a18      	ldr	r2, [pc, #96]	@ (800e938 <TIM_OC3_SetConfig+0x108>)
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	695b      	ldr	r3, [r3, #20]
 800e8de:	011b      	lsls	r3, r3, #4
 800e8e0:	693a      	ldr	r2, [r7, #16]
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	699b      	ldr	r3, [r3, #24]
 800e8ea:	011b      	lsls	r3, r3, #4
 800e8ec:	693a      	ldr	r2, [r7, #16]
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	693a      	ldr	r2, [r7, #16]
 800e8f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	68fa      	ldr	r2, [r7, #12]
 800e8fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	685a      	ldr	r2, [r3, #4]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	697a      	ldr	r2, [r7, #20]
 800e90a:	621a      	str	r2, [r3, #32]
}
 800e90c:	46c0      	nop			@ (mov r8, r8)
 800e90e:	46bd      	mov	sp, r7
 800e910:	b006      	add	sp, #24
 800e912:	bd80      	pop	{r7, pc}
 800e914:	fffffeff 	.word	0xfffffeff
 800e918:	fffffdff 	.word	0xfffffdff
 800e91c:	40012c00 	.word	0x40012c00
 800e920:	fffff7ff 	.word	0xfffff7ff
 800e924:	fffffbff 	.word	0xfffffbff
 800e928:	40014000 	.word	0x40014000
 800e92c:	40014400 	.word	0x40014400
 800e930:	40014800 	.word	0x40014800
 800e934:	ffffefff 	.word	0xffffefff
 800e938:	ffffdfff 	.word	0xffffdfff

0800e93c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b086      	sub	sp, #24
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6a1b      	ldr	r3, [r3, #32]
 800e94a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a1b      	ldr	r3, [r3, #32]
 800e950:	4a26      	ldr	r2, [pc, #152]	@ (800e9ec <TIM_OC4_SetConfig+0xb0>)
 800e952:	401a      	ands	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	69db      	ldr	r3, [r3, #28]
 800e962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	4a22      	ldr	r2, [pc, #136]	@ (800e9f0 <TIM_OC4_SetConfig+0xb4>)
 800e968:	4013      	ands	r3, r2
 800e96a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	4a21      	ldr	r2, [pc, #132]	@ (800e9f4 <TIM_OC4_SetConfig+0xb8>)
 800e970:	4013      	ands	r3, r2
 800e972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	021b      	lsls	r3, r3, #8
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	4a1d      	ldr	r2, [pc, #116]	@ (800e9f8 <TIM_OC4_SetConfig+0xbc>)
 800e984:	4013      	ands	r3, r2
 800e986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	031b      	lsls	r3, r3, #12
 800e98e:	693a      	ldr	r2, [r7, #16]
 800e990:	4313      	orrs	r3, r2
 800e992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	4a19      	ldr	r2, [pc, #100]	@ (800e9fc <TIM_OC4_SetConfig+0xc0>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	d00b      	beq.n	800e9b4 <TIM_OC4_SetConfig+0x78>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	4a18      	ldr	r2, [pc, #96]	@ (800ea00 <TIM_OC4_SetConfig+0xc4>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d007      	beq.n	800e9b4 <TIM_OC4_SetConfig+0x78>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	4a17      	ldr	r2, [pc, #92]	@ (800ea04 <TIM_OC4_SetConfig+0xc8>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d003      	beq.n	800e9b4 <TIM_OC4_SetConfig+0x78>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4a16      	ldr	r2, [pc, #88]	@ (800ea08 <TIM_OC4_SetConfig+0xcc>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d109      	bne.n	800e9c8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	4a15      	ldr	r2, [pc, #84]	@ (800ea0c <TIM_OC4_SetConfig+0xd0>)
 800e9b8:	4013      	ands	r3, r2
 800e9ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	695b      	ldr	r3, [r3, #20]
 800e9c0:	019b      	lsls	r3, r3, #6
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	697a      	ldr	r2, [r7, #20]
 800e9cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	685a      	ldr	r2, [r3, #4]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	693a      	ldr	r2, [r7, #16]
 800e9e0:	621a      	str	r2, [r3, #32]
}
 800e9e2:	46c0      	nop			@ (mov r8, r8)
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	b006      	add	sp, #24
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	46c0      	nop			@ (mov r8, r8)
 800e9ec:	ffffefff 	.word	0xffffefff
 800e9f0:	ffff8fff 	.word	0xffff8fff
 800e9f4:	fffffcff 	.word	0xfffffcff
 800e9f8:	ffffdfff 	.word	0xffffdfff
 800e9fc:	40012c00 	.word	0x40012c00
 800ea00:	40014000 	.word	0x40014000
 800ea04:	40014400 	.word	0x40014400
 800ea08:	40014800 	.word	0x40014800
 800ea0c:	ffffbfff 	.word	0xffffbfff

0800ea10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b086      	sub	sp, #24
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	60f8      	str	r0, [r7, #12]
 800ea18:	60b9      	str	r1, [r7, #8]
 800ea1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	221f      	movs	r2, #31
 800ea20:	4013      	ands	r3, r2
 800ea22:	2201      	movs	r2, #1
 800ea24:	409a      	lsls	r2, r3
 800ea26:	0013      	movs	r3, r2
 800ea28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6a1b      	ldr	r3, [r3, #32]
 800ea2e:	697a      	ldr	r2, [r7, #20]
 800ea30:	43d2      	mvns	r2, r2
 800ea32:	401a      	ands	r2, r3
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6a1a      	ldr	r2, [r3, #32]
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	211f      	movs	r1, #31
 800ea40:	400b      	ands	r3, r1
 800ea42:	6879      	ldr	r1, [r7, #4]
 800ea44:	4099      	lsls	r1, r3
 800ea46:	000b      	movs	r3, r1
 800ea48:	431a      	orrs	r2, r3
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	621a      	str	r2, [r3, #32]
}
 800ea4e:	46c0      	nop			@ (mov r8, r8)
 800ea50:	46bd      	mov	sp, r7
 800ea52:	b006      	add	sp, #24
 800ea54:	bd80      	pop	{r7, pc}
	...

0800ea58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	223c      	movs	r2, #60	@ 0x3c
 800ea66:	5c9b      	ldrb	r3, [r3, r2]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d101      	bne.n	800ea70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea6c:	2302      	movs	r3, #2
 800ea6e:	e041      	b.n	800eaf4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	223c      	movs	r2, #60	@ 0x3c
 800ea74:	2101      	movs	r1, #1
 800ea76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	223d      	movs	r2, #61	@ 0x3d
 800ea7c:	2102      	movs	r1, #2
 800ea7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2270      	movs	r2, #112	@ 0x70
 800ea94:	4393      	bics	r3, r2
 800ea96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	68fa      	ldr	r2, [r7, #12]
 800eaa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a13      	ldr	r2, [pc, #76]	@ (800eafc <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d009      	beq.n	800eac8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a11      	ldr	r2, [pc, #68]	@ (800eb00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d004      	beq.n	800eac8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a10      	ldr	r2, [pc, #64]	@ (800eb04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d10c      	bne.n	800eae2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	2280      	movs	r2, #128	@ 0x80
 800eacc:	4393      	bics	r3, r2
 800eace:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	68ba      	ldr	r2, [r7, #8]
 800ead6:	4313      	orrs	r3, r2
 800ead8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	223d      	movs	r2, #61	@ 0x3d
 800eae6:	2101      	movs	r1, #1
 800eae8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	223c      	movs	r2, #60	@ 0x3c
 800eaee:	2100      	movs	r1, #0
 800eaf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eaf2:	2300      	movs	r3, #0
}
 800eaf4:	0018      	movs	r0, r3
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	b004      	add	sp, #16
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	40012c00 	.word	0x40012c00
 800eb00:	40000400 	.word	0x40000400
 800eb04:	40014000 	.word	0x40014000

0800eb08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eb12:	2300      	movs	r3, #0
 800eb14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	223c      	movs	r2, #60	@ 0x3c
 800eb1a:	5c9b      	ldrb	r3, [r3, r2]
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d101      	bne.n	800eb24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eb20:	2302      	movs	r3, #2
 800eb22:	e03e      	b.n	800eba2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	223c      	movs	r2, #60	@ 0x3c
 800eb28:	2101      	movs	r1, #1
 800eb2a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	22ff      	movs	r2, #255	@ 0xff
 800eb30:	4393      	bics	r3, r2
 800eb32:	001a      	movs	r2, r3
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	4a1b      	ldr	r2, [pc, #108]	@ (800ebac <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800eb40:	401a      	ands	r2, r3
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	4313      	orrs	r3, r2
 800eb48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	4a18      	ldr	r2, [pc, #96]	@ (800ebb0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800eb4e:	401a      	ands	r2, r3
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	4313      	orrs	r3, r2
 800eb56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	4a16      	ldr	r2, [pc, #88]	@ (800ebb4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800eb5c:	401a      	ands	r2, r3
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4313      	orrs	r3, r2
 800eb64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	4a13      	ldr	r2, [pc, #76]	@ (800ebb8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800eb6a:	401a      	ands	r2, r3
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	691b      	ldr	r3, [r3, #16]
 800eb70:	4313      	orrs	r3, r2
 800eb72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	4a11      	ldr	r2, [pc, #68]	@ (800ebbc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800eb78:	401a      	ands	r2, r3
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	695b      	ldr	r3, [r3, #20]
 800eb7e:	4313      	orrs	r3, r2
 800eb80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	4a0e      	ldr	r2, [pc, #56]	@ (800ebc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800eb86:	401a      	ands	r2, r3
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	69db      	ldr	r3, [r3, #28]
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	223c      	movs	r2, #60	@ 0x3c
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	0018      	movs	r0, r3
 800eba4:	46bd      	mov	sp, r7
 800eba6:	b004      	add	sp, #16
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	46c0      	nop			@ (mov r8, r8)
 800ebac:	fffffcff 	.word	0xfffffcff
 800ebb0:	fffffbff 	.word	0xfffffbff
 800ebb4:	fffff7ff 	.word	0xfffff7ff
 800ebb8:	ffffefff 	.word	0xffffefff
 800ebbc:	ffffdfff 	.word	0xffffdfff
 800ebc0:	ffffbfff 	.word	0xffffbfff

0800ebc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ebcc:	46c0      	nop			@ (mov r8, r8)
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	b002      	add	sp, #8
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ebdc:	46c0      	nop			@ (mov r8, r8)
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	b002      	add	sp, #8
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <memset>:
 800ebe4:	0003      	movs	r3, r0
 800ebe6:	1882      	adds	r2, r0, r2
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d100      	bne.n	800ebee <memset+0xa>
 800ebec:	4770      	bx	lr
 800ebee:	7019      	strb	r1, [r3, #0]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	e7f9      	b.n	800ebe8 <memset+0x4>

0800ebf4 <__libc_init_array>:
 800ebf4:	b570      	push	{r4, r5, r6, lr}
 800ebf6:	2600      	movs	r6, #0
 800ebf8:	4c0c      	ldr	r4, [pc, #48]	@ (800ec2c <__libc_init_array+0x38>)
 800ebfa:	4d0d      	ldr	r5, [pc, #52]	@ (800ec30 <__libc_init_array+0x3c>)
 800ebfc:	1b64      	subs	r4, r4, r5
 800ebfe:	10a4      	asrs	r4, r4, #2
 800ec00:	42a6      	cmp	r6, r4
 800ec02:	d109      	bne.n	800ec18 <__libc_init_array+0x24>
 800ec04:	2600      	movs	r6, #0
 800ec06:	f000 f823 	bl	800ec50 <_init>
 800ec0a:	4c0a      	ldr	r4, [pc, #40]	@ (800ec34 <__libc_init_array+0x40>)
 800ec0c:	4d0a      	ldr	r5, [pc, #40]	@ (800ec38 <__libc_init_array+0x44>)
 800ec0e:	1b64      	subs	r4, r4, r5
 800ec10:	10a4      	asrs	r4, r4, #2
 800ec12:	42a6      	cmp	r6, r4
 800ec14:	d105      	bne.n	800ec22 <__libc_init_array+0x2e>
 800ec16:	bd70      	pop	{r4, r5, r6, pc}
 800ec18:	00b3      	lsls	r3, r6, #2
 800ec1a:	58eb      	ldr	r3, [r5, r3]
 800ec1c:	4798      	blx	r3
 800ec1e:	3601      	adds	r6, #1
 800ec20:	e7ee      	b.n	800ec00 <__libc_init_array+0xc>
 800ec22:	00b3      	lsls	r3, r6, #2
 800ec24:	58eb      	ldr	r3, [r5, r3]
 800ec26:	4798      	blx	r3
 800ec28:	3601      	adds	r6, #1
 800ec2a:	e7f2      	b.n	800ec12 <__libc_init_array+0x1e>
 800ec2c:	0801b794 	.word	0x0801b794
 800ec30:	0801b794 	.word	0x0801b794
 800ec34:	0801b798 	.word	0x0801b798
 800ec38:	0801b794 	.word	0x0801b794

0800ec3c <memcpy>:
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	b510      	push	{r4, lr}
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d100      	bne.n	800ec46 <memcpy+0xa>
 800ec44:	bd10      	pop	{r4, pc}
 800ec46:	5ccc      	ldrb	r4, [r1, r3]
 800ec48:	54c4      	strb	r4, [r0, r3]
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	e7f8      	b.n	800ec40 <memcpy+0x4>
	...

0800ec50 <_init>:
 800ec50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec52:	46c0      	nop			@ (mov r8, r8)
 800ec54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec56:	bc08      	pop	{r3}
 800ec58:	469e      	mov	lr, r3
 800ec5a:	4770      	bx	lr

0800ec5c <_fini>:
 800ec5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec5e:	46c0      	nop			@ (mov r8, r8)
 800ec60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec62:	bc08      	pop	{r3}
 800ec64:	469e      	mov	lr, r3
 800ec66:	4770      	bx	lr
